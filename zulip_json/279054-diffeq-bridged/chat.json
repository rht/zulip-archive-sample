[
    {
        "content": "<p>[slack] &lt;oxinabox&gt; test</p>",
        "id": 227907524,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614334754
    },
    {
        "content": "<p>test</p>",
        "id": 227907534,
        "sender_full_name": "Frames White",
        "timestamp": 1614334762
    },
    {
        "content": "<p>Bridges is back and now is also connected to <a href=\"#narrow/stream/279054-diffeq-bridged\">https://julialang.zulipchat.com/#narrow/stream/279054-diffeq-bridged</a><br>\nin the chat topic.</p>",
        "id": 227907610,
        "sender_full_name": "Frames White",
        "timestamp": 1614334804
    },
    {
        "content": "<p>[slack] &lt;oxinabox&gt; Anyway, #diffeq-bridged is done</p>",
        "id": 227907670,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614334822
    },
    {
        "content": "<p>amazing thanks!</p>",
        "id": 227907918,
        "sender_full_name": "Christopher Rackauckas",
        "timestamp": 1614334984
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; @torkel.loman @chrisrackauckas this looks like a cool Catalyst application: <a href=\"https://github.com/augustinas1/MomentClosure.jl\">https://github.com/augustinas1/MomentClosure.jl</a></p>",
        "id": 227927670,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614346376
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; I just reached out to see if he has anything that would be helpful to have in Catalyst. For example, I see he's started on a new system type that represents reaction networks as a stoichiometry matrix and vector of rate functions. I've had adding conversion to such a representation on my TODO list for a little while, since I think it can be more useful for certain kinds of analysis (like network properties). It's probably something we should add to Catalyst/MT anyways.</p>",
        "id": 227927873,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614346457
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @isaacsas that is really freaking cool</p>",
        "id": 227945177,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614354052
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that's exactly the kind of stuff that I was hoping would be built when making it all a single principled symbolic ecosystem!</p>",
        "id": 227945219,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614354069
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Do you know if he'd be interested in upstreaming it? I would really like to see it more standard in Catalyst/MTK, but I understand if he wants to keep it separate (for a publication)</p>",
        "id": 227945373,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614354127
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I'd want to make sure this is maintained though because it's definitely super cool.</p>",
        "id": 227945410,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614354142
    },
    {
        "content": "<p>[slack] &lt;mason.protter&gt; @chrisrackauckas you mentioned bridging SciML as well, are we allowed to do that if it doesn't have <code>brideged</code> in the name?</p>",
        "id": 227947305,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614354963
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> I want it.</p>",
        "id": 227947374,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614354978
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I actually don't like the bridged in the naming but...</p>",
        "id": 227947392,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614354989
    },
    {
        "content": "<p>[slack] &lt;mason.protter&gt; Okay cool. @oxinabox could you bridge #sciml to <a href=\"#narrow/stream/279055-sciml-bridged\">https://julialang.zulipchat.com/#narrow/stream/279055-sciml-bridged</a> ?</p>",
        "id": 227947543,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614355067
    },
    {
        "content": "<p>[slack] &lt;oxinabox&gt; People will growl at me if I bridge something without the word <code>-bridged</code> in the name.<br>\nGo argue in #community and come back to me then with a thing where people have said it is ok</p>",
        "id": 227948667,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614355492
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; I emailed about if there is anything we could do in Catalyst to help out, for example he adds an (incomplete) AbstractSystem that is based on storing a vector of rate law expressions and a stoichiometry matrix. Having such representations in Catalyst is something that has been on my radar, since they are the starting point I think for many graph-based analysis of system properties.</p>\n<p>Merging into Catalyst though would be great. I'll see what he says in response.</p>",
        "id": 227949959,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614356018
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; @isaacsas @chrisrackauckas Is there anything particular in the methods behind MomentClosure that is tying it to Catalyst? Do they apply to general systems?</p>",
        "id": 227957642,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614358991
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; There is a way to exploit the variance structure for some of the closure methods</p>",
        "id": 227957999,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614359122
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but not all of them</p>",
        "id": 227958002,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614359124
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; some of them could be adapted to apply to SDESystems</p>",
        "id": 227958015,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614359132
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and I just asked about that.</p>",
        "id": 227958027,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614359137
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; Nice</p>",
        "id": 227959767,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614359872
    },
    {
        "content": "<p>[slack] &lt;adammaclean&gt; ahh what replaced <code>@reaction_func</code> in up-to-date Catalyst?! The docs are not clear to me with only a michaelis menton example</p>",
        "id": 228008016,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614379655
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @adammaclean it should just not be necessary anymore</p>",
        "id": 228009365,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614380301
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; if you just stick your function in there it should just work</p>",
        "id": 228009381,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614380310
    },
    {
        "content": "<p>[slack] &lt;adammaclean&gt; aha got it</p>",
        "id": 228010978,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614381226
    },
    {
        "content": "<p>[slack] &lt;adammaclean&gt; makes the model defs by reaction simpler, nice!</p>",
        "id": 228011493,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614381506
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes</p>",
        "id": 228011724,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614381637
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/paulflang/SbmlInterface.jl\">https://github.com/paulflang/SbmlInterface.jl</a></p>",
        "id": 228014584,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614383437
    },
    {
        "content": "<p>[gitter] &lt;kamesh-krishnamurthy&gt; Hi, what's the correct way to integrate an ODEproblem for a time  interval [t1, t2], then use the same ODEproblem with all the internal states intact and integrate it the interval [t2,t3]?</p>",
        "id": 228098766,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614479285
    },
    {
        "content": "<p>[gitter] &lt;kamesh-krishnamurthy&gt; there are no discontinuities introduces, and for a callback doesn't seem to be what I want</p>",
        "id": 228098797,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614479324
    },
    {
        "content": "<p>[gitter] &lt;kamesh-krishnamurthy&gt; An example case:</p>",
        "id": 228098892,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614479420
    },
    {
        "content": "<p>[gitter] &lt;kamesh-krishnamurthy&gt; I integrate the ODE from t1 to t2, and at t=t2, I change a parameter p_old to p_new, and integrate from t2 to t2+delta, then change the parameter back to p_old and integrate from t2+delta till t3</p>",
        "id": 228098934,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614479506
    },
    {
        "content": "<p>[gitter] &lt;kamesh-krishnamurthy&gt; the value p_new depends on the system state u at t2, and I need to store both p_new and u(t2) for later use</p>",
        "id": 228098999,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614479546
    },
    {
        "content": "<p>[gitter] &lt;kamesh-krishnamurthy&gt; and I need to repeat such a procedure a few times. In the subsequent interval the value of p_new may depend on the previous p_new and u(t2)</p>",
        "id": 228099215,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614479790
    },
    {
        "content": "<p>[gitter] &lt;kamesh-krishnamurthy&gt; I'm not sure how to use callbacks for something like this, but it should be straightforward if I can just integrate the ODE problem in blocks which making the changes in between</p>",
        "id": 228099267,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614479881
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @kamesh-kirshnamurthy just use the integrator interface and set tstops and such</p>",
        "id": 228101046,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614482310
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://diffeq.sciml.ai/stable/basics/integrator/\">https://diffeq.sciml.ai/stable/basics/integrator/</a></p>",
        "id": 228101047,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614482317
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Check out the new acausal modeling tutorial in <a href=\"https://github.com/search?q=ModelingToolkit.jl&amp;type=Repositories\">ModelingToolkit.jl</a> <a href=\"https://mtk.sciml.ai/dev/tutorials/acausal_components/\">https://mtk.sciml.ai/dev/tutorials/acausal_components/</a></p>",
        "id": 228127468,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614515029
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @airpmb</p>",
        "id": 228127514,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614515048
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Looks great!</p>",
        "id": 228130751,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614518911
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; So my plan for JumpSystem and ReactionSystem is to allow equality constraints and observable equations in the <code>eqs</code>, and then have <code>structural_simplify</code> remove the extra variables and observable equations. Then you'd get back to having a system of only jumps/reactions which can be simulated. If you can't, it throws an error. That would give you acausal discrete stochastic models (talked about this with @yingbo_ma last night)</p>",
        "id": 228130836,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614519019
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Cool, I was just thinking a bit about this too. For ReactionSystems might we want to allow constraints that give DAEs too? So errors would only be thrown if trying to transform to a JumpSystem?</p>",
        "id": 228134646,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614523559
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; So ReactionSystem stays flexible but conversion to a new system makes sure one can actually convert?</p>",
        "id": 228134786,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614523692
    },
    {
        "content": "<p>[gitter] &lt;kamesh-krishnamurthy&gt; @ChrisRackauckas  when using the Integrator interface to integrate over different intervals, I also want to save the u and t values (at a dt spacing) during the integration in the Integrator.sol field</p>",
        "id": 228134796,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614523704
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that makes sense</p>",
        "id": 228134798,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614523710
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Then use <code>savevalues!</code></p>",
        "id": 228134805,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614523725
    },
    {
        "content": "<p>[gitter] &lt;kamesh-krishnamurthy&gt; Is push!(Integrator.sol.u, u_new) safe?</p>",
        "id": 228134809,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614523736
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; no</p>",
        "id": 228134834,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614523766
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; just use <code>savevalues!</code></p>",
        "id": 228134837,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614523776
    },
    {
        "content": "<p>[gitter] &lt;kamesh-krishnamurthy&gt; ok, thanks!</p>",
        "id": 228134840,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614523784
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; So ReactionSystems would allow for non <code>Reaction</code> equations now?</p>",
        "id": 228134850,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614523800
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes, <code>Reaction</code> and <code>Equation</code></p>",
        "id": 228134914,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614523848
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; BTW, would it make sense on Friday to try to have a group SciML meeting after our session to catch up with everyone and chat about projects a bit? Nothing too long or serious, but it might be good for everyone to hear about what is going on recently and stimulate some discussion of where to go on some of the projects?</p>",
        "id": 228137172,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614526230
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Also just a chance to meet everyone from the session at least virtually.</p>",
        "id": 228137181,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614526253
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah that would be good</p>",
        "id": 228137536,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614526638
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Alright, cool. I'll plan to send an email to everyone in the session tomorrow with reminders about the session and a link to the Zoom meet up for afterwards.</p>",
        "id": 228137688,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614526813
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Hey folks, I was trying to use <code>Parameters.jl</code>  to define a struct with default values for my model. But I am hitting that <code>recursive_unitless_eltype</code> error on the struct. Is this where I should be using <code>ComponentArrays</code> instead of a struct? Can I define initial values with ComponentArrays or is there a recommended way to define a struct with initial values--as opposed to having some long constructor?</p>",
        "id": 228142779,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614532181
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; are you using the struct for <code>p</code> ?</p>",
        "id": 228146190,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614535409
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; @Brian Groenke yep using a struct for <code>p.</code> I was hoping to find a way to define some initial parameters in the struct and pass the struct to the <code>OdeProblem</code>.</p>",
        "id": 228147141,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614536461
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that error has nothing to do with parameters. Look t your states.</p>",
        "id": 228148987,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614538440
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; That should in general work as long as you're not trying to compute sensitivities. So yeah I agree it's something else.</p>",
        "id": 228149054,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614538458
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; @Brian Groenke @chrisrackauckas Okay, I will give that a shot. I am just trying a very simple demo to see if I encounter that same problem. If I still hit that problem, I will post the code. Thanks again.</p>",
        "id": 228149297,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614538714
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Hey @chrisrackauckas @Brian Groenke So I tried this out, and am actually able to recreate the issue. Let me know if I should post an issue to github or not. Seems like the <code>DiscreteProblem</code> is having an issue with this <code>recursive_unitless_eltype</code>. Here is some janky minimal code running on julia 1.5.3. Note that this works fine on the <code>ODEProblem</code> but just not on the <code>DiscreteProblem</code>.</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>@with_kw struct MyStruct\n           a::Float64 = 1.0\n           b::Float64 = 2.0\n       end\n\n@with_kw struct MyInitial\n           n1::Float64 = 1.0\n           n2::Float64 = 2.0\n       end\n\nfunction simple_growth!(du, u0::MyInitial, p::MyStruct, t)\n    du[1] = p.a*(u0.n1)\n    du\nend\n\nu0 = MyInitial()\nparams = MyStruct()\ntspan = (0, 20)\ndprob = DiscreteProblem(simple_growth!, u0, tspan, params)\n\nsolve(dprob)```\nAnd then the error is:\n```ERROR: StackOverflowError:\nStacktrace:\n [1] recursive_unitless_bottom_eltype(::Type{Any}) at /home/krishnab/.julia/packages/RecursiveArrayTools/69f7F/src/utils.jl:86 (repeats 79984 times)```\n</code></pre></div>",
        "id": 228160738,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614550432
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah that state vector isn't going to work</p>",
        "id": 228161589,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614551307
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; why not make it a FieldVector?</p>",
        "id": 228161595,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614551312
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Right, I didn't realize you were trying to use a struct as the state vector. I don't know about <code>FieldVector</code> , haven't tried it, but <code>CompnentArrays</code> works wonderfully for this purpose, as long as everything is the same type.</p>",
        "id": 228161749,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614551460
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah <code>ComponentArrays</code> would work too</p>",
        "id": 228161778,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614551482
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; And there's also <code>DEDataVector</code> if you have extra non-state data.</p>",
        "id": 228161784,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614551486
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; basically, you should make that some kind of AbstractArray-like thing.</p>",
        "id": 228161790,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614551495
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; @chrisrackauckas @Brian Groenke Okay, excellent. Thank you guys so much. So by state vector you mean the initial values here. I get you. Yes, I can look at both <code>FieldVectors</code> and <code>ComponentArrays</code> for this. Excellent, now I know what to do. Thanks again guys.</p>",
        "id": 228162126,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614551801
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; FieldVector is in <a href=\"https://github.com/search?q=StaticArrays.jl&amp;type=Repositories\">StaticArrays.jl</a></p>",
        "id": 228162173,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614551879
    },
    {
        "content": "<p>[slack] &lt;dawbarton&gt; I'm just playing around with MTK and trying to work out whether it's appropriate for a particular use case of mine. I want to define a hybrid dynamical system where I have an ODESystem embedded within a BVP such that the end points become variables that can be used as part of other functions (think of a simple bouncing ball problem where the velocities before/after a bounce are related). Is this sort of thing easily doable or a bigger project?</p>",
        "id": 228166510,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614556592
    },
    {
        "content": "<p>[slack] &lt;dawbarton&gt; Ultimately I want to solve problems involving arbitrary constraints on my dynamics (e.g. fix the amplitude of a limit cycle in a certain way) but the above seems like a good place to start. Thanks!</p>",
        "id": 228166522,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614556613
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; &gt; Ultimately I want to solve problems involving arbitrary constraints on my dynamics (e.g. fix the amplitude of a limit cycle in a certain way)<br>\nCan you write that as a DAE?</p>",
        "id": 228166856,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614556947
    },
    {
        "content": "<p>[slack] &lt;dawbarton&gt; Possibly, though I'd normal think along the lines of transforming the ODE to a nonlinear system (BVP for the limit cycle) and then adding further nonlinear algebraic equations.</p>",
        "id": 228167107,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614557178
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh that would be interesting to do, yes</p>",
        "id": 228167126,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614557213
    },
    {
        "content": "<p>[slack] &lt;dawbarton&gt; Is it possible to create a nonlinear system almost as a black box so that MTK doesn't try to do anything with it (not sure how the internals work yet)? Some of the discretisations would be big and already pretty optimal in form and so playing around with them algebraically wouldn't give much advantage.</p>",
        "id": 228167673,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614557810
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you can register some functions and stuff like that</p>",
        "id": 228168040,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614558244
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but if it can't simplify then it would just ignore that portion</p>",
        "id": 228168060,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614558253
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; did you already do tearing by hand or something? Pulling out the strongly connected components and solving it in blocks is still usually something someone does by hand.</p>",
        "id": 228168077,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614558287
    },
    {
        "content": "<p>[slack] &lt;Andrei Chalapco&gt; Hi. I have a question about the paper \"Bayesian Neural Ordinary Differential Equations\" (also had a Reddit post a while ago). I'm curious what compute configurations (CPU and GPU) were used in order to perform the basic experiments ( linear ode and lotka Volterra) with NUTS sampler and SGLD. Does a GPU help with this kind of small datasets and very shallow neural network architectures. I'm currently running the code from the GitHub repo provided by the paper but the compute times also for these pretty standard experiments are very long.</p>",
        "id": 228322252,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614639671
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @Raj Dandekar</p>",
        "id": 228324316,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614640788
    },
    {
        "content": "<p>[gitter] &lt;kamesh-krishnamurthy&gt; @ChrisRackauckas  I was using Tsit5() to integrate a large system of ODEs (N ~1000) as was getting great results. Here's an example plot of a solution (theory predicts we should get a fixed-point). Tsit5() gave the right answer and was really fast</p>",
        "id": 228327585,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614642299
    },
    {
        "content": "<p>[gitter] &lt;kamesh-krishnamurthy&gt; <a href=\"https://files.gitter.im/57bf79b040f3a6eec0615ecf/M7ie/Old_soln.png\">![Old_soln.png](https://files.gitter.im/57bf79b040f3a6eec0615ecf/M7ie/thumb/Old_soln.png)</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.gitter.im/57bf79b040f3a6eec0615ecf/M7ie/Old_soln.png\" title=\"![Old_soln.png](https://files.gitter.im/57bf79b040f3a6eec0615ecf/M7ie/thumb/Old_soln.png)\"><img src=\"https://files.gitter.im/57bf79b040f3a6eec0615ecf/M7ie/Old_soln.png\"></a></div>",
        "id": 228327594,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614642303
    },
    {
        "content": "<p>[gitter] &lt;kamesh-krishnamurthy&gt; I updated <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a> today, and when I run the same code I get something weird ...it's basically very similar but with small fluctuations</p>",
        "id": 228327680,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614642350
    },
    {
        "content": "<p>[gitter] &lt;kamesh-krishnamurthy&gt; <a href=\"https://files.gitter.im/57bf79b040f3a6eec0615ecf/IVKV/New_soln.png\">![New_soln.png](https://files.gitter.im/57bf79b040f3a6eec0615ecf/IVKV/thumb/New_soln.png)</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.gitter.im/57bf79b040f3a6eec0615ecf/IVKV/New_soln.png\" title=\"![New_soln.png](https://files.gitter.im/57bf79b040f3a6eec0615ecf/IVKV/thumb/New_soln.png)\"><img src=\"https://files.gitter.im/57bf79b040f3a6eec0615ecf/IVKV/New_soln.png\"></a></div>",
        "id": 228327688,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614642355
    },
    {
        "content": "<p>[gitter] &lt;kamesh-krishnamurthy&gt; and Tsit5() takes 5x more time</p>",
        "id": 228327761,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614642373
    },
    {
        "content": "<p>That’s a bit odd. What version did you have before?</p>",
        "id": 228327801,
        "sender_full_name": "Yingbo Ma",
        "timestamp": 1614642400
    },
    {
        "content": "<p>[gitter] &lt;kamesh-krishnamurthy&gt; like a fool I didn't note that down</p>",
        "id": 228327849,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614642427
    },
    {
        "content": "<p>[gitter] &lt;kamesh-krishnamurthy&gt; but I installed it ~5 months or so back</p>",
        "id": 228327924,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614642459
    },
    {
        "content": "<p>There's the <code>] undo</code> feature in Julia Pkg. Could you try that?</p>",
        "id": 228327955,
        "sender_full_name": "Yingbo Ma",
        "timestamp": 1614642482
    },
    {
        "content": "<p>[gitter] &lt;kamesh-krishnamurthy&gt; It says \"ERROR: undo: no more states left\"</p>",
        "id": 228328289,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614642657
    },
    {
        "content": "<p>[gitter] &lt;kamesh-krishnamurthy&gt; I did remove the package and tried to reinstall</p>",
        "id": 228328306,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614642668
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Well I can tell you the Tsit5 code hasn't changed (in a few years)</p>",
        "id": 228328488,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614642768
    },
    {
        "content": "<p>[gitter] &lt;qtoloza&gt; does ODELocalSensitivityProblem accept a tuple for parameters? I have a parameter list with varying types that I'm trying to pass. works with no problem in ODEProblem, but I get a MethodError when I change to ODELocalSensitivityProblem</p>",
        "id": 228328800,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614642953
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that needs an abstract array</p>",
        "id": 228331810,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614644413
    },
    {
        "content": "<p>[gitter] &lt;qtoloza&gt; I see. do I have any recourse if my parameters vary in type?</p>",
        "id": 228332300,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614644675
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it won't be able to solve an ODE well in them, yes.</p>",
        "id": 228332884,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614645005
    },
    {
        "content": "<p>[gitter] &lt;qtoloza&gt; do you have any advice for using a parameter set that includes arrays? I'm trying to pass something that looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">input_weights_s</span> <span class=\"o\">=</span> <span class=\"mf\">2.8</span><span class=\"o\">.*</span><span class=\"p\">(</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">number_of_cells</span><span class=\"p\">,</span> <span class=\"n\">number_of_inputs</span><span class=\"p\">))</span> <span class=\"o\">.-</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span>\n<span class=\"n\">recurrent_weights_s</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span><span class=\"o\">.*</span><span class=\"p\">(</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">number_of_cells</span><span class=\"p\">,</span> <span class=\"n\">number_of_cells</span><span class=\"p\">))</span> <span class=\"o\">.-</span> <span class=\"mf\">0.8</span><span class=\"p\">)</span>\n<span class=\"n\">tonic_inputs_s</span> <span class=\"o\">=</span> <span class=\"mf\">0.14</span><span class=\"o\">.*</span><span class=\"p\">(</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">number_of_cells</span><span class=\"p\">,</span> <span class=\"p\">))</span> <span class=\"o\">.-</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span>\n<span class=\"n\">readout_weights</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">number_of_outputs</span><span class=\"p\">,</span> <span class=\"n\">number_of_cells</span><span class=\"p\">))</span>\n\n<span class=\"n\">frequencies</span> <span class=\"o\">=</span> <span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">number_of_inputs</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n\n<span class=\"n\">network_inputs_s</span> <span class=\"o\">=</span> <span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">number_of_cells</span><span class=\"p\">)</span>\n<span class=\"n\">recurrent_inputs_s</span> <span class=\"o\">=</span> <span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"n\">number_of_cells</span><span class=\"p\">)</span>\n<span class=\"n\">output_cache</span> <span class=\"o\">=</span> <span class=\"n\">zeros</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">input_weights_s</span><span class=\"p\">,</span> <span class=\"n\">recurrent_weights_s</span><span class=\"p\">,</span> <span class=\"n\">tonic_inputs_s</span><span class=\"p\">,</span> <span class=\"n\">readout_weights</span><span class=\"p\">,</span>\n    <span class=\"n\">frequencies</span><span class=\"p\">,</span>\n    <span class=\"n\">network_inputs_s</span><span class=\"p\">,</span> <span class=\"n\">recurrent_inputs_s</span><span class=\"p\">,</span> <span class=\"n\">output_cache</span><span class=\"p\">]</span>\n</code></pre></div>",
        "id": 228341875,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614651081
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Forwarddiff?</p>",
        "id": 228346659,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614655112
    },
    {
        "content": "<p>[slack] &lt;Raj Dandekar&gt; Hey @Andrei Chalapco All the experiments for the demonstration except for the MNIST were run on a CPU. The MNIST code using SGLD was run on a GPU.</p>",
        "id": 228347658,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614655953
    },
    {
        "content": "<p>[slack] &lt;Raj Dandekar&gt; Which code did you specifically run which was taking a long time? Could you share the code snippet?</p>",
        "id": 228347667,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614655975
    },
    {
        "content": "<p>[slack] &lt;Raj Dandekar&gt; First thing you could try is directly running the code given in the following tutorial:</p>",
        "id": 228347823,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614656079
    },
    {
        "content": "<p>[slack] &lt;Raj Dandekar&gt; <a href=\"https://diffeqflux.sciml.ai/stable/examples/BayesianNODE_NUTS/\">https://diffeqflux.sciml.ai/stable/examples/BayesianNODE_NUTS/</a></p>",
        "id": 228347825,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614656083
    },
    {
        "content": "<p>[slack] &lt;dawbarton&gt; Another MTK question: is it possible to change a parameter into a variable? I'm constructing a hierarchy of models and at the bottom level are differential equations where the parameters are most naturally interpreted as (fixed) parameters, however they are embedded within a larger model where some of those parameters become variables in the larger model. (The challenge comes because the submodels make sense as independent models with parameters and I'd like to be able to use them as such.)</p>",
        "id": 228388230,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614681799
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; This is possibly a really silly question, but I'm seeing a huge difference in runtime performance between calling a solver by itself (either from REPL directly, or from command line running <code>julia --project=. test/runtests.jl</code>) and running <code>test</code> directly from the project in the REPL. If I just print out <code>@info @belapsed solve(some_problem, solver)</code> for example, I get about 5ms normally, but 40 seconds in test??? (This is the case despite the function already being compiled, e.g. I get the same behaviour when using BenchmarkTools' <code>@benchmark</code> ). What does <code>test</code> do differently that script/REPL does not? <span aria-label=\"oh no\" class=\"emoji emoji-1f615\" role=\"img\" title=\"oh no\">:oh_no:</span></p>",
        "id": 228401096,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614688203
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @Dan Padilha coverage statistics</p>",
        "id": 228401812,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614688519
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; we have coverage statistics turned off on a lot of tests for this reason</p>",
        "id": 228401882,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614688553
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; Ah!</p>",
        "id": 228401900,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614688560
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; This makes a lot of sense</p>",
        "id": 228401916,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614688563
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; I didn't think at all it would be enabled by default</p>",
        "id": 228401970,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614688572
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; Thanks a lot!</p>",
        "id": 228401976,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614688576
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Make it a state and set it's value directly, i.e. equality or derivative = 0, in a higher level component.</p>",
        "id": 228402003,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614688589
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; also inbounds is disabled</p>",
        "id": 228402037,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614688602
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; Ah hmm it seems that <code>--coverage</code> is an option, which I don't set so probably it's not that.</p>",
        "id": 228402203,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614688678
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; But you're right, inbounds seems to be disabled by default</p>",
        "id": 228402371,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614688741
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; Seems this might likely be a Pkg.test question rather than something due to DiffEq, so I'm going to move this over to #pkg-dev instead</p>",
        "id": 228407244,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614690983
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; @Dan Padilha I've been playing around with your code and I've notice weird timings even in the repl, ie subsequent calls to the same function have drastically different run-times like you state for repl vs test</p>",
        "id": 228407373,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614691060
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; Hmm I haven't seen any big differences (other than due to GC) just running things in REPL, but definitely in Test things are weirdly slow</p>",
        "id": 228407589,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614691161
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; I was testing w/ <code>expectation</code> , but even then the whole process should be deterministic from run to run. I'll be sure to let you know if I uncover anything</p>",
        "id": 228407813,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614691252
    },
    {
        "content": "<p>[slack] &lt;dawbarton&gt; Thanks, I thought I might end up using variables for everything and then adding parameters at the top level to close the system as necessary</p>",
        "id": 228407919,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614691299
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; Thanks very much! If you're testing on the EphemerisNBP solver, that makes some calls to a C library which also needs to read from some big artifacts (SPICE ephemerides) that it downloads, I don't think that should affect the timing but letting you know just in case that's a possible source. I'm not sure what else would be.</p>",
        "id": 228408072,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614691388
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; Based on the symptoms it looked like the stability of the ODE solve and possibly the event detection in <code>collision</code>was changing from run to run. What I was running was pretty much the Koopman example you have in the docs. I was comparing the MC/Koopman times</p>",
        "id": 228408246,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614691478
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; The collision checker will terminate the solve immediately, so that would affect the runtime, if that's what you were possibly seeing?</p>",
        "id": 228408544,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614691599
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; @chrisrackauckas @Adam Gerlach FYI, the performance issue above seems to be due to some depwarns (specifically, the warning for \"Use getters like get_xyz\" from ModelingToolkit's <code>AbstractSystem</code>), because I'm doing some (possibly dodgy) overloading of <code>AbstractODESystem</code>  and apparently not being careful enough with that. (Easy and probably obvious fix for me is to just overload the <code>getproperty(::MyCustomSystem, ::Symbol)</code> )</p>",
        "id": 228415182,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614694299
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 228415185,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614694299
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; make sense, but the Koopman trajectories are deterministic from run to run. The problem is most likely me lol</p>",
        "id": 228415437,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614694391
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; @chrisrackauckas I know we talked about this before... but is there a typical workaround for allowing ReverseDiff to differentiate through pre-allocated arrays? I don't care if I have to allocate a new copy as <code>TrackedArray</code> or something... I just need the differentiation to work and then also I guess update the original array on each forward pass.</p>",
        "id": 228439557,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614702517
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>identity.(x)</code></p>",
        "id": 228461363,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614709992
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; What is x here?</p>",
        "id": 228472681,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614714241
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I guess one of the things that really confuses me is that, I would think that ReverseDiff would call the function with the tracker types on the forward pass to record the operations (and allocate memory for the gradients) and then just do back prop. But if I do type asserts or print types in a step function using InterpolatingAdjoint, sometimes the type is a normal array and sometimes it's a TrackedArray. This doesn't make sense to me.</p>",
        "id": 228473316,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614714479
    },
    {
        "content": "<p>[slack] &lt;Andrei Chalapco&gt; Hi. Thank you for quick reply. I run the NUTS sampler for 10 samples warmup and 10 samples posterior...and I get 3:14 minutes. That means that for 500 and 500 samples I should train for 2.5 hours... seems a bit long :)</p>",
        "id": 228486994,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614719673
    },
    {
        "content": "<p>[slack] &lt;Raj Dandekar&gt; It may happen because the initial step size determination is taking most of the time. This is usually the rate determining step. Once this step is done, the sampling is much quicker. Thus, the runtime won’t scale as you had mentioned. You can check that by running for more samples. If you run the NUTS example in the tutorial, it has 500 warmup and 500 posterior and runs fairly quickly. I would recommend you try that first.</p>",
        "id": 228489827,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614720792
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; I need a sanity check. Is integrating backwards in time always equivalent to integrating forward with a negated EOM in theory? I.e, Does <code>xdot = -F(x)</code>  from <code>t=(0,T)</code>  always equal <code>xdot = F(x)</code>  from <code>t = (T,0)</code></p>",
        "id": 228490749,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614721144
    },
    {
        "content": "<p>[slack] &lt;Andrei Chalapco&gt; I ran the sample() method separtatly in a jupyter notebook and got those 4 minutes</p>",
        "id": 228492279,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614721760
    },
    {
        "content": "<p>[slack] &lt;Andrei Chalapco&gt; If I may ask: what kind of CPU did you used? ( something specialized or just one laptop CPU). How much time did it take to perform the 500 samples on your machine?</p>",
        "id": 228492623,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614721906
    },
    {
        "content": "<p>[slack] &lt;iv.borissov&gt; Hi, what can be a reasonable <code>dt</code>  value to <code>set_proposed_dt!(integrator,dt)</code>  after a <code>DiscreteCallback</code> ? In my problem (unfortunately, can post it right now) the discontinuous change leads to solver failure (negative values appear under <code>log</code>) . Setting dt to <code>0.01</code>  solves the problem, but it is a \"magic number\". Maybe initial <code>dt</code>  can be used here?  Is it stored somewhere ?</p>",
        "id": 228492778,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614721943
    },
    {
        "content": "<p>[slack] &lt;Raj Dandekar&gt; I used an Intel i7 16GB Ram (pretty standard nothing specialized)..For the tutorial code, if I recall correctly, it was done in 35-40 mins</p>",
        "id": 228492964,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614722037
    },
    {
        "content": "<p>[slack] &lt;Andrei Chalapco&gt; what kind of GHz? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 228493115,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614722080
    },
    {
        "content": "<p>[slack] &lt;Raj Dandekar&gt; 2.6 GHz..How much time does the tutorial code take for you to run?</p>",
        "id": 228493161,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614722098
    },
    {
        "content": "<p>[slack] &lt;briochemc&gt; I think you want to think of this in terms of Green functions and what is sometimes called reciprocity. See E.g., last sentence on page 1 of <a href=\"http://math.mit.edu/~stevenj/18.303/reciprocity.pdf\">http://math.mit.edu/~stevenj/18.303/reciprocity.pdf</a></p>",
        "id": 228493431,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614722195
    },
    {
        "content": "<p>[slack] &lt;Andrei Chalapco&gt; I'm running the code on a cluster (but each node has cores with maximum of 1.6 Ghz)...and since there's nothing to parallelize...I got I think lower speed than on your i7</p>",
        "id": 228493546,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614722240
    },
    {
        "content": "<p>[slack] &lt;Raj Dandekar&gt; Right, if you want to incorporate parallelism, I think Turing allows to sample multiple chains in parallel.</p>",
        "id": 228493692,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614722297
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you can make it trigger the initial dt algorithm again</p>",
        "id": 228493891,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614722382
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; are you setting it lower?</p>",
        "id": 228493902,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614722388
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that should be fine</p>",
        "id": 228493908,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614722391
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; if it isn't, I would suspect a model problem</p>",
        "id": 228493927,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614722401
    },
    {
        "content": "<p>[slack] &lt;Andrei Chalapco&gt; That's an interesting idea...will multiple chains be equivalent to one single chain with more samples...? I'm not sure if with multiple chains I can explore the target set better</p>",
        "id": 228494092,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614722454
    },
    {
        "content": "<p>[slack] &lt;Raj Dandekar&gt; No, it won’t be equivalent to one chain with more samples, but more a test on do all chains with different initializations converge on the same posterior</p>",
        "id": 228494387,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614722570
    },
    {
        "content": "<p>[slack] &lt;iv.borissov&gt; Yes, I am setting it lower and it solves the problem, but I think I set it too low. How can I trigger the initial dt ?</p>",
        "id": 228494391,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614722571
    },
    {
        "content": "<p>[slack] &lt;Raj Dandekar&gt; I was suggesting it since you’re already running stuff in parallel, you might want to explore different chains in parallel..However, if you want to solve the speed issue as a first priority, then switching to a non parallelized form might be better</p>",
        "id": 228494599,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614722645
    },
    {
        "content": "<p>[slack] &lt;iv.borissov&gt; Is it <code>auto_dt_reset!</code> ?</p>",
        "id": 228495032,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614722819
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; ys</p>",
        "id": 228495107,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614722855
    },
    {
        "content": "<p>[slack] &lt;Raj Dandekar&gt; Do you have any specific application you’re running Bayesian Neural ODE on? I’m always interested to know more about applications for this method!</p>",
        "id": 228495111,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614722858
    },
    {
        "content": "<p>[slack] &lt;iv.borissov&gt; cool! thanks</p>",
        "id": 228495220,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614722891
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; hmm... on first read, I'm not sure if I follow</p>",
        "id": 228495300,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614722932
    },
    {
        "content": "<p>[slack] &lt;Andrei Chalapco&gt; So I'm a bachelor student in stuttgart and I started a project with neural ode but with variational inference</p>",
        "id": 228495645,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614723058
    },
    {
        "content": "<p>[slack] &lt;Andrei Chalapco&gt; And I wanted now for my bachelor thesis  to explorer other methods like MCMC on neural odes</p>",
        "id": 228495701,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614723077
    },
    {
        "content": "<p>[slack] &lt;Andrei Chalapco&gt; So the plan is to use Bayesian Neural ODEs with dynamical systems (chemical reactions...)</p>",
        "id": 228495843,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614723131
    },
    {
        "content": "<p>[slack] &lt;Andrei Chalapco&gt; Thank you again for taking and answering my questions</p>",
        "id": 228495914,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614723161
    },
    {
        "content": "<p>[slack] &lt;Andrei Chalapco&gt; Also congrats for your paper!!! Found it very interesting. Some new approaches being presented besides the variational inference.</p>",
        "id": 228496334,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614723276
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; Essentially, I have a set of ode's dx/dt = F(x). A PDE representing the pull-back of an observable of the state is defined by du/dt = sum(Fi(x)*du/dxi) = 0. This is easy to solve with methods of characteristics, leading to [dx/dt, du/dt] = [ - F(x), 0]. I'm trying to rectify the notion of the \"pull-back\" and the negation of F(x) in the MOC solution.</p>",
        "id": 228497260,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614723626
    },
    {
        "content": "<p>[slack] &lt;briochemc&gt; The Green function <code>G(0,T)</code> for equation <code>xdot = F(x)</code> propagates <code>x</code> from initial condition at <code>t=0</code> to <code>t=T</code>. The grren function is also equal to its reciprocal (sometimes called adjoint IIRC) <code>G'(T,0)</code> where the equation is the \"adjoint\" <code>-xdot = F(x)</code></p>",
        "id": 228497315,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614723648
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; Got it! Is this a general property, or does it need to be proven for the green's function for any particular F(x)?</p>",
        "id": 228497970,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614723931
    },
    {
        "content": "<p>[slack] &lt;briochemc&gt; the <code>d/dt</code> 's adjoint is <code>-d/dt</code> so I think you're right</p>",
        "id": 228498184,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614724028
    },
    {
        "content": "<p>[slack] &lt;briochemc&gt; <code>F(x)</code> is just a function of <code>x</code> so I think it's self adjoint</p>",
        "id": 228498233,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614724055
    },
    {
        "content": "<p>[slack] &lt;briochemc&gt; if you have a PDE, I think the general rule is more complicated</p>",
        "id": 228498265,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614724076
    },
    {
        "content": "<p>[slack] &lt;briochemc&gt; But I think it's odd derivatives get a <code>-1</code>, and even ones get unchanged</p>",
        "id": 228498373,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614724105
    },
    {
        "content": "<p>[slack] &lt;briochemc&gt; This is all muddied/blurried memories, so take with large pack of salt <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 228498413,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614724124
    },
    {
        "content": "<p>[slack] &lt;iv.borissov&gt; hm, strangely <code>set_proposed_dt!(integrator,0.1)</code> solves my problem but <code>auto_dt_reset!(integrator)</code>  which sets <code>integrator.dt</code> much smaller doesn't</p>",
        "id": 228498431,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614724135
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; I have a MOC solution to a PDE which is an ODE.</p>",
        "id": 228498505,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614724171
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that's interesting</p>",
        "id": 228498537,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614724190
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; any odd discotinuity or state shinnanigans?</p>",
        "id": 228498557,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614724199
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; This is helpful and fits my intuition. Thanks alot. Yeah, I guess F(x) doesn't matter since Green's really comes from the differential operator.</p>",
        "id": 228498691,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614724241
    },
    {
        "content": "<p>[slack] &lt;briochemc&gt; Yes I think you have to be careful there because the some of the signs in the ODE you get might have to be changed according to what order of a derivative they correspond to in the PDE</p>",
        "id": 228498707,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614724248
    },
    {
        "content": "<p>[slack] &lt;briochemc&gt; so If your <code>F(x)</code> comes from the PDE, maybe it's not self adjoint</p>",
        "id": 228498807,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614724295
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; F(x) comes from some underlying dynamical system. The PDE is essentially a continuity equation that emerges from it. An example is something like the PDE that describes the conservation of probability through the dynamical system.</p>",
        "id": 228499120,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614724420
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; This particular problem is actually the adjoint of the probability conservation PDE</p>",
        "id": 228499204,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614724448
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; The infinitesimal Koopman operator</p>",
        "id": 228499256,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614724462
    },
    {
        "content": "<p>[slack] &lt;iv.borissov&gt; well, it is a dose added to state variable, nothing special. But the model is a big one, there could be smth tricky - I need to check.  I ll try to make a smaller and sharable MWE of this model  if I can</p>",
        "id": 228499542,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614724613
    },
    {
        "content": "<p>[slack] &lt;Raj Dandekar&gt; That’s a great topic! Bayesian Neural ODEs with chemical reaction system sounds like a lot of fun!</p>",
        "id": 228499575,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614724633
    },
    {
        "content": "<p>[slack] &lt;Raj Dandekar&gt; Let me know how the project is going..I’ll be happy to take a look at codes/offer suggestions etc if you need them 🙂</p>",
        "id": 228499635,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614724672
    },
    {
        "content": "<p>[slack] &lt;Raj Dandekar&gt; Thanks a lot for your comments regarding the paper..We’re working on improving several aspects of it still!</p>",
        "id": 228499862,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614724769
    },
    {
        "content": "<p>[slack] &lt;Raj Dandekar&gt; The important question to address is what the errors given by the Bayesian Neural ODE object actually represent...Chemical reaction systems you’re investigation maybe good examples to answer that question.</p>",
        "id": 228500024,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614724827
    },
    {
        "content": "<p>[slack] &lt;briochemc&gt; I'm not familiar with Koopman stuff, so maybe you might have to ask again for help from more knowledgeable peeps out here <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 228510752,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614730155
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; lol. I think you got me on the right path. Thanks</p>",
        "id": 228517106,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614733928
    },
    {
        "content": "<p>[slack] &lt;jonas.isensee&gt; Is there already a separate channel for symbolics ?</p>\n<p>I just tried the tutorial from the docs <a href=\"https://symbolics.juliasymbolics.org/stable/tutorials/auto_parallel\">https://symbolics.juliasymbolics.org/stable/tutorials/auto_parallel</a><br>\nbut got an error</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">└</span> <span class=\"err\">@</span> <span class=\"n\">Symbolics</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">Symbolics</span><span class=\"o\">/</span><span class=\"n\">iUk95</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">build_function</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">260</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">LoadError</span><span class=\"o\">:</span> <span class=\"kt\">MethodError</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">method</span> <span class=\"n\">matching</span> <span class=\"n\">_set_array</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"n\">Nothing</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"n\">Num</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Bool</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Bool</span><span class=\"p\">)</span>\n<span class=\"n\">Closest</span> <span class=\"n\">candidates</span> <span class=\"n\">are</span><span class=\"o\">:</span>\n  <span class=\"n\">_set_array</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">)</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">isensee</span><span class=\"o\">/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">Symbolics</span><span class=\"o\">/</span><span class=\"n\">iUk95</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">build_function</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">306</span>\n  <span class=\"n\">_set_array</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">AbstractArray</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">)</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">isensee</span><span class=\"o\">/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">Symbolics</span><span class=\"o\">/</span><span class=\"n\">iUk95</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">build_function</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">289</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">set_array</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"n\">SymbolicUtils</span><span class=\"o\">.</span><span class=\"n\">Code</span><span class=\"o\">.</span><span class=\"n\">LiteralExpr</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"n\">Nothing</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"n\">Num</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Bool</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Bool</span><span class=\"p\">)</span>\n   <span class=\"err\">@</span> <span class=\"n\">Symbolics</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">Symbolics</span><span class=\"o\">/</span><span class=\"n\">iUk95</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">build_function</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">261</span><span class=\"sb\">```</span>\n<span class=\"sb\">using</span>\n<span class=\"sb\">```</span><span class=\"p\">(</span><span class=\"n\">symbolics</span><span class=\"p\">)</span> <span class=\"n\">pkg</span><span class=\"o\">&gt;</span> <span class=\"n\">status</span>\n      <span class=\"n\">Status</span> <span class=\"sb\">`~/Documents/CodeTesting/symbolics/Project.toml`</span>\n  <span class=\"p\">[</span><span class=\"mf\">6e4</span><span class=\"n\">b80f9</span><span class=\"p\">]</span> <span class=\"n\">BenchmarkTools</span> <span class=\"n\">v0</span><span class=\"o\">.</span><span class=\"mf\">5.0</span>\n  <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"n\">dea7af3</span><span class=\"p\">]</span> <span class=\"n\">OrdinaryDiffEq</span> <span class=\"n\">v5</span><span class=\"o\">.</span><span class=\"mf\">51.1</span>\n  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"n\">c5d862f</span><span class=\"p\">]</span> <span class=\"n\">Symbolics</span> <span class=\"n\">v0</span><span class=\"o\">.</span><span class=\"mf\">1.2</span> <span class=\"sb\">`https://github.com/JuliaSymbolics/Symbolics.jl.git#master`</span>\n  <span class=\"p\">[</span><span class=\"mf\">2f01184</span><span class=\"nb\">e</span><span class=\"p\">]</span> <span class=\"n\">SparseArrays</span><span class=\"sb\">```</span>\n</code></pre></div>",
        "id": 228581859,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614774052
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; #symbolic-manipulation</p>",
        "id": 228582086,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614774168
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @shashi broke it and then I thought he said he fixed it?</p>",
        "id": 228582114,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614774187
    },
    {
        "content": "<p>[slack] &lt;shashi&gt; Oh no! I’ll take a look</p>",
        "id": 228590097,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614778006
    },
    {
        "content": "<p>[slack] &lt;shashi&gt; Well the tests for this do pass <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 228590354,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614778127
    },
    {
        "content": "<p>[slack] &lt;ArbitRandomUser&gt; <a href=\"https://www.youtube.com/watch?v=KCTfPyVIxpc\">https://www.youtube.com/watch?v=KCTfPyVIxpc</a>, @chrisrackauckas i didnt quite understand what you meant by setting g(x,p) = x ;<br>\nis g a scalar but x a vector ?</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"KCTfPyVIxpc\" href=\"https://www.youtube.com/watch?v=KCTfPyVIxpc\"><img src=\"https://i.ytimg.com/vi/KCTfPyVIxpc/default.jpg\"></a></div>",
        "id": 228641352,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614795812
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>g</code> is a function</p>",
        "id": 228642777,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614796304
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>x</code> is a vector</p>",
        "id": 228642784,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614796307
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; cost equals the identity</p>",
        "id": 228642794,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614796314
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; is equivalent to the <code>Array(x)</code> function</p>",
        "id": 228642800,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614796320
    },
    {
        "content": "<p>[slack] &lt;ArbitRandomUser&gt; <code>g</code> isn't necesarily a function from <code>R^n -&gt; R</code> ?</p>",
        "id": 228645662,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614797347
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it doesn't need to be. It's \"gradient\" if it has a scalar output, or you can talk about its Jacobian</p>",
        "id": 228645888,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614797431
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Is anyone aware of an existing implementation of the Newton-Cassulli-Zanolli (NCZ) method in Julia? I can't tell which algorithms NLsolvers implements.<br>\nReference: <a href=\"https://epubs.siam.org/doi/abs/10.1137/100786320\">https://epubs.siam.org/doi/abs/10.1137/100786320</a></p>",
        "id": 228680326,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614810532
    },
    {
        "content": "<p>[slack] &lt;Yushang Lai&gt; Hi! I'm trying to solve an ODE for covariance matrix. But it seems the output may not be symmetry and positive definite due to numerical errors. Is there a way to zero out the numerical errors? Could you help me with this? Thanks a lot in advance!</p>\n<div class=\"codehilite\" data-code-language=\"d_phi\"><pre><span></span><code>sol = solve(ODEProblem(d_phi,phi_0,t_per_step,p))[end]```\n: https://files.slack.com/files-pri/T68168MUP-F01PNMJ30H5/download/image.png\n</code></pre></div>",
        "id": 228691855,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614816303
    },
    {
        "content": "<p>[slack] &lt;Yushang Lai&gt; <a href=\"https://files.slack.com/files-pri/T68168MUP-F01Q3NECH2P/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F01Q3NECH2P/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F01Q3NECH2P/download/image.png\"><img src=\"https://files.slack.com/files-pri/T68168MUP-F01Q3NECH2P/download/image.png\"></a></div>",
        "id": 228693423,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614817260
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Maybe just call <code>Symmetric</code> on the result</p>",
        "id": 228695576,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614818471
    },
    {
        "content": "<p>[slack] &lt;Yushang Lai&gt; @yingbo_ma Thanks for helping, I need to rewrite the problem since I call this ODE in Turing and consequently the ODE solution is in Dual type which could not be applied to Symmetric().</p>",
        "id": 228706877,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614825792
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Cannot you call Symmetric after solving?</p>",
        "id": 228706910,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614825828
    },
    {
        "content": "<p>[gitter] &lt;peroveh&gt; Is it \"legal\" to add an exogeneous input to a state u[i] in the du() function (and setting du[i]=0.0), just to have the input added to the normal states from an ODE solver?</p>",
        "id": 228729573,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614843675
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; No</p>",
        "id": 228756002,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614857616
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; That can do weird things</p>",
        "id": 228756011,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614857623
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; What is the issue with Dual numbers and Symmetric?</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>using LinearAlgebra\nusing Distributions\nfunction test(x)\n    A = [1.0 x+eps(x);x 1.0]\n    MvNormal(A)\n    y = det(A)\nend\nx = 0.0\ntest(x)\nForwardDiff.derivative(test,x)\n\nfunction test2(x)\n    A = [1.0 x+eps(x);x 1.0]\n    A = Symmetric(A)\n    MvNormal(A)\n    y = det(A)\nend\nx = 0.0\ntest2(x)\nForwardDiff.derivative(test2,x)```\n</code></pre></div>",
        "id": 228773483,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614865355
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; Is there a way to <code>remake</code> while only partially updating parameters? i.e. if i have a model with p = [a, b, c] and I just want to remake with p = [a, b] and keep c constant</p>",
        "id": 228782133,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614868475
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; not yet</p>",
        "id": 228782904,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614868736
    },
    {
        "content": "<p>[gitter] &lt;mcircle&gt; Hey, I have a BVProblem with 7 initial values. I know already 4 of them and would like to shoot only 3.  How can I do that? The documentary  mentions that I can initialize the Problem with a function but not how.</p>",
        "id": 228792771,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614871928
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Has the  <code>build_function</code> rewrite been benchmarked yet?</p>",
        "id": 228795265,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614872720
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @shashi...</p>",
        "id": 228802046,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614874682
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; &gt; Hey, I have a BVProblem with 7 initial values. I know already 4 of them and would like to shoot only 3.  How can I do that? The documentary  mentions that I can initialize the Problem with a function but not how.<br>\nIn the boundary function, make some of the residuals use <code>sol[1]</code> and others use <code>sol[end]</code></p>",
        "id": 228802825,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614874892
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @mcircle</p>",
        "id": 228802835,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614874895
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; I’m getting a bit of a confusing error message when trying to solve a system of ODEs and I haven’t been able to find a solution on other channels. The model is:</p>\n<p><code>using DifferentialEquations, LightGraphs</code><br>\n<code>G = erdos_renyi(10, 0.8)</code><br>\n<code>L = laplacian_matrix(G)</code> </p>\n<p><code>function NetworkAtrophy(du, u, p, t)</code><br>\n<code>x, y = u</code><br>\n<code>ρ, α, β = p</code> <br>\n<code>du[1] = -ρ * L * x .+ α .* x .* (1 .- x)</code><br>\n<code>du[2] = β * x .* (1.0 .- y)</code><br>\n<code>end</code></p>\n<p><code>p = [0.1, 2.0, 0.01]</code><br>\n<code>u0 = [rand(10), zeros(10)]</code><br>\n<code>t_span = (0.0,10.0)</code><br>\n<code>prob = ODEProblem(NetworkAtrophy, u0, t_span, p)</code><br>\n<code>sol = solve(prob, Tsit5())</code></p>\n<p>I get:</p>\n<p><code>ERROR: LoadError: MethodError: no method matching zero(::Type{Array{Float64,1}})</code><br>\n<code>Closest candidates are:</code><br>\n<code>zero(::Type{Missing}) at missing.jl:103</code><br>\n<code>zero(::Type{LibGit2.GitHash}) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/oid.jl:220</code><br>\n<code>zero(::Type{Pkg.Resolve.VersionWeight}) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Pkg/src/Resolve/versionweights.jl:15</code></p>\n<p>Any idea how to fix? I guess I’m passing in the u0 incorrectly somehow?</p>",
        "id": 228805596,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614875750
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @Pavan Chaggar you made an array of arrays</p>",
        "id": 228808296,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614876655
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; did you mean a matrix or something?</p>",
        "id": 228808319,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614876662
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>u0 = [rand(10); zeros(10)]</code> and then <code>x = @view u[:,1]</code></p>",
        "id": 228808390,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614876680
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; I have two vector valued variables evolving so I thought an array of vectors would be the way to pass this into as <code>u0</code> and then unpack as <code>x, y = u</code></p>",
        "id": 228809022,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614876895
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the issue is really that Vector of Vectors doesn't satisfy some of the assumptions of the integrator (but it's really close and I think we might get it fixed \"soon)</p>",
        "id": 228809403,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614877043
    },
    {
        "content": "<p>[slack] &lt;stillyslalom&gt; <a href=\"https://github.com/SciML/MultiScaleArrays.jl\">https://github.com/SciML/MultiScaleArrays.jl</a> should work, too</p>",
        "id": 228809584,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614877106
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/search?q=ComponentArrays.jl&amp;type=Repositories\">ComponentArrays.jl</a> is a good one for this.</p>",
        "id": 228809630,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614877127
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; ok great, i’ll check these out! 🙂</p>",
        "id": 228810061,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614877252
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; If I change my function to:</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    x = u[1:10]\n    y = u[11:20]\n    ρ, α, β = p\n    du[1] = -ρ * L * x .+ α .* x .* (1 .- x)\n    du[2] = β * x .* (1.0 .- y)\nend```\nand pass in u0 = [u0 = [rand(10); zeros(10)] then I get an error:\n```ERROR: LoadError: MethodError: Cannot `convert` an object of type Array{Float64,1} to an object of type Float64```\nWhy would it be trying to convert an array to a float here? for the broadcasting?\n</code></pre></div>",
        "id": 228810700,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614877458
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>du[1] = </code></p>",
        "id": 228811272,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614877663
    },
    {
        "content": "<p>[slack] &lt;frankschae&gt; <code>du[1]</code> is just the first entry. You probably want <code>du[1:10].=</code></p>",
        "id": 228811279,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614877665
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; oh I see! Thank you both <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 228811749,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614877813
    },
    {
        "content": "<p>[slack] &lt;xtalax&gt; Hey, it's my understanding that with NeuralPDE the network is first trained using output from traditional solvers before it will generalize to solving with arbitrary initial conditions, is that correct? If so what does NeuralPDE use to train? Just curious.</p>",
        "id": 228819341,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614880475
    },
    {
        "content": "<p>[slack] &lt;xtalax&gt; Also hi long time no see <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 228819893,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614880672
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @xtalax hi, welcome back!</p>",
        "id": 228821790,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614881335
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; No, they are not trained with output from traditional solvers</p>",
        "id": 228821825,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614881342
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the approach is described in detail here:</p>",
        "id": 228821848,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614881349
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://mitmath.github.io/18337/lecture3/sciml.html\">https://mitmath.github.io/18337/lecture3/sciml.html</a></p>",
        "id": 228821998,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614881405
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://www.youtube.com/watch?v=hKHl68Fdpq\">https://www.youtube.com/watch?v=hKHl68Fdpq</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"hKHl68Fdpq\" href=\"https://www.youtube.com/watch?v=hKHl68Fdpq\"><img src=\"https://i.ytimg.com/vi/hKHl68Fdpq/default.jpg\"></a></div>",
        "id": 228822046,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614881416
    },
    {
        "content": "<p>[slack] &lt;xtalax&gt; thanks, I'll take a look!</p>",
        "id": 228823171,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614881833
    },
    {
        "content": "<p>[slack] &lt;termi-official&gt; Well, I guess the bridge to zulip just works one way, since I do not see my message posted in zulip here?  I will just copy it manually it for now and hope this is okay.</p>\n<p>Hi, I am interested in solving very large ODE problems (which result from PDE semi-discretizations and/or operator splittings). I am wondering how hard it would be to utilize the existing ecosystem, assuming that my problem is so large that I would need a distributed memory implementation (talking about the orders of 1'000'000 to 100'000'000 dimensions in the semi-discretization). Are there any examples?</p>",
        "id": 228825979,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614882809
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; &gt; Well, I guess the bridge to zulip just works one way, since I do not see my message posted in zulip here? I will just copy it manually it for now and hope this is okay.<br>\n@oxinabox</p>",
        "id": 228826414,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614882975
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Is there a way we can update that bridge? It seems to do this quite a bit these days <span aria-label=\"disappointed\" class=\"emoji emoji-1f61e\" role=\"img\" title=\"disappointed\">:disappointed:</span></p>",
        "id": 228826440,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614882985
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Is it still on like Julia v0.4 or whatever it was first written on?</p>",
        "id": 228826456,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614882995
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; &gt; Hi, I am interested in solving very large ODE problems (which result from PDE semi-discretizations and/or operator splittings). I am wondering how hard it would be to utilize the existing ecosystem, assuming that my problem is so large that I would need a distributed memory implementation (talking about the orders of 1'000'000 to 100'000'000 dimensions in the semi-discretization). Are there any examples?<br>\nDistributed memory is still a little hard, but we do have some simple examples using <a href=\"https://github.com/search?q=DistributedArrays.jl&amp;type=Repositories\">DistributedArrays.jl</a>. If you use DistributedArrays, then it will keep all of the pieces separate and only do communication in your <code>f</code>... kind of. This is because internally there's only broadcast if you use a non-stiff ODE solver, so non-stiff ODEs \"just work\". Implicit solvers, well, <a href=\"https://github.com/search?q=DistributedArrays.jl&amp;type=Repositories\">DistributedArrays.jl</a> does not support all linear algebra so sadly that will fail at LU. And then <a href=\"https://github.com/search?q=DistributedArrays.jl&amp;type=Repositories\">DistributedArrays.jl</a> may not have everything you need for writing your <code>f</code>.</p>",
        "id": 228826732,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614883122
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; So if your examples isn't too simple, it might be nice to get a hold of that example so I can present it as a challenge to some of the others in the Julia Lab. I have been wanting to really tackle this one head on for awhile.</p>",
        "id": 228826818,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614883152
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; The distributed linear algebra is really the killer though if it's a stiff ODE</p>",
        "id": 228826857,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614883171
    },
    {
        "content": "<p>[slack] &lt;oxinabox&gt; the bridge uses MatterMost Bridge which is made in Go</p>",
        "id": 228827159,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614883277
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh, I thought you had it running on the university cluster and all of tht?</p>",
        "id": 228827202,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614883298
    },
    {
        "content": "<p>[slack] &lt;oxinabox&gt; Yeah it is running on a VM that i manage</p>",
        "id": 228827257,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614883320
    },
    {
        "content": "<p>[slack] &lt;oxinabox&gt; it also hosts the julia 0.5 thing that does posting slack questions in the sidebar</p>",
        "id": 228827404,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614883372
    },
    {
        "content": "<p>[slack] &lt;oxinabox&gt; I think i should write a script that kills the bridge every 12 hours and restarts it.</p>",
        "id": 228827468,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614883395
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @isaacsas <a href=\"https://github.com/JuliaSymbolics/Symbolics.jl/pull/84\">https://github.com/JuliaSymbolics/Symbolics.jl/pull/84</a></p>",
        "id": 228827912,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614883562
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @shashi mentioned that the functions should generate in &lt;2/3 the time now too.</p>",
        "id": 228828046,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614883597
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Yeah @shashi and I were just on a call about this so I could help him get the test running quicker</p>",
        "id": 228828061,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614883604
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; great</p>",
        "id": 228828086,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614883612
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; That perfectly matches up with what I say. ODEProblem went down from 55s to 35s or so.</p>",
        "id": 228828151,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614883628
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; I saw I mean...</p>",
        "id": 228828167,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614883633
    },
    {
        "content": "<p>[slack] &lt;shashi&gt; I just told what you told me :-p</p>",
        "id": 228828193,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614883646
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 228828261,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614883675
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; He suggested that we potentially could add BCR as a CI benchmark and pointed me to the current SymbolicUtils benchmarks.</p>",
        "id": 228828372,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614883705
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I think that would be a good idea</p>",
        "id": 228828454,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614883743
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; hopefully the function generation code doesn't have to change again</p>",
        "id": 228828487,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614883753
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but...</p>",
        "id": 228828488,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614883755
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Sure, it was a change for the better in the long run. That code was not in good shape before...</p>",
        "id": 228828519,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614883772
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; definitely agree haha</p>",
        "id": 228828539,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614883781
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; This should be much more scalable, especially with adding new forms of parallelism and analyses</p>",
        "id": 228828577,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614883801
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; wtf how is CI almost done on all downstream in 6 minutes?</p>",
        "id": 228828773,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614883867
    },
    {
        "content": "<p>[slack] &lt;shashi&gt; they all fail actually</p>",
        "id": 228831424,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614884833
    },
    {
        "content": "<p>[slack] &lt;shashi&gt; they need a compat bump, but I don't know why the CI says pass</p>",
        "id": 228831501,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614884866
    },
    {
        "content": "<p>[slack] &lt;termi-official&gt; Thanks for the quick reply! Atm I do not have a distributed implementation in Julia, because I wanted to gather some information what paradigm or package would be the best to use before starting. Since the problem is technically a \"stiff DAE\" (which can be written as an ODE in mass matrix form) it will boil down to internal solves anyway. However, I would use iterative solvers instead of direct solvers, as direct solver runtimes will blow up with systems of this size.</p>",
        "id": 228834189,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614885828
    },
    {
        "content": "<p>[slack] &lt;termi-official&gt; But I guess I can assume that, assuming I have some distributed iterative solver, there would be no problems in just using the existing ecosystem?</p>",
        "id": 228834438,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614885919
    },
    {
        "content": "<p>[slack] &lt;termi-official&gt; I am currently busy with finishing one part of my research project, but I am happy to implement a prototype afterwards. However, this may take some weeks.</p>",
        "id": 228834948,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614886117
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; That should work</p>",
        "id": 228835597,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614886350
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; should in a looser sense than I usually use it, as in, this is something I haven't tested but by design it should (unless DistributedArrays is missing a function)</p>",
        "id": 228835688,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614886387
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Should I bump Catalyst to the latest MT?</p>",
        "id": 228843313,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614889235
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; probably</p>",
        "id": 228843439,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614889293
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; there was some turmoil we should forget <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 228843449,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614889300
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; hah, fair enough. It was quite a ways behind anyways. I'm doing it as a PR to see if tests actually pass on the latest version...</p>",
        "id": 228843691,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614889374
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Ahh, so I'm the source of this rumor.</p>",
        "id": 228843872,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614889423
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Once the Symbolics PR gets merged I'll re-run the BCR issue benchmark and put an updated comment there for posterity.</p>",
        "id": 228844055,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614889468
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh no, we've just had a ton of real turmoil with the move to <a href=\"https://github.com/search?q=Symbolics.jl&amp;type=Repositories\">Symbolics.jl</a>, adding <a href=\"https://github.com/search?q=SciMLBase.jl&amp;type=Repositories\">SciMLBase.jl</a>. It's been quite the month.</p>",
        "id": 228844339,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614889564
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh, two threads</p>",
        "id": 228844497,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614889620
    },
    {
        "content": "<p>[slack] &lt;Andrei Chalapco&gt; Thank you again for the offer to give me some suggestions on code, I will let you know if I have some questions.</p>",
        "id": 228851827,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614892608
    },
    {
        "content": "<p>[slack] &lt;Andrei Chalapco&gt; With the errors given by the Bayesian Neural ODE do you mean the variance of the predictions, so the uncertainty?</p>",
        "id": 228851955,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614892672
    },
    {
        "content": "<p>[slack] &lt;Raj Dandekar&gt; Yeah, the uncertainty band which we obtain through the posterior...The important question to answer is what does this uncertainty mean and what does it represent? If we can answer that, it would improve the reliability of the method</p>",
        "id": 228855422,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614894098
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Tomorrow is the two part symposium for SciML at SIAM CSE:</p>\n<p><a href=\"https://meetings.siam.org/sess/dsp_programsess.cfm?SESSIONCODE=70083\">https://meetings.siam.org/sess/dsp_programsess.cfm?SESSIONCODE=70083</a><br>\n<a href=\"https://meetings.siam.org/sess/dsp_programsess.cfm?SESSIONCODE=70084\">https://meetings.siam.org/sess/dsp_programsess.cfm?SESSIONCODE=70084</a></p>",
        "id": 228894477,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614916924
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; @chrisrackauckas Namespace changes in <a href=\"https://github.com/search?q=Symbolics.jl&amp;type=Repositories\">Symbolics.jl</a> seems to have broken part of ModelingToolkit:</p>\n<div class=\"codehilite\" data-code-language=\"error\"><pre><span></span><code>Stacktrace:\n  [1] calculate_jacobian(sys::ModelingToolkit.ODESystem; sparse::Bool, simplify::Bool)\n    @ ModelingToolkit ~\\.julia\\packages\\ModelingToolkit\\ZSXgD\\src\\systems\\diffeqs\\abstractodesystem.jl:31```\n</code></pre></div>",
        "id": 228913158,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614932512
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @Dan Padilha <a href=\"https://github.com/SciML/ModelingToolkit.jl/pull/859\">https://github.com/SciML/ModelingToolkit.jl/pull/859</a></p>",
        "id": 228943670,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614946804
    },
    {
        "content": "<p>[gitter] &lt;mcircle&gt; <a href=\"https://files.gitter.im/57bf79b040f3a6eec0615ecf/oBBz/image.png\">![image.png](https://files.gitter.im/57bf79b040f3a6eec0615ecf/oBBz/thumb/image.png)</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.gitter.im/57bf79b040f3a6eec0615ecf/oBBz/image.png\" title=\"![image.png](https://files.gitter.im/57bf79b040f3a6eec0615ecf/oBBz/thumb/image.png)\"><img src=\"https://files.gitter.im/57bf79b040f3a6eec0615ecf/oBBz/image.png\"></a></div>",
        "id": 228959332,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614953467
    },
    {
        "content": "<p>[gitter] &lt;mcircle&gt; @ChrisRackauckas I already use the solution in the boundary-condition function, like you mentioned. Sorry I had be be more specific.  Never mind I found a way to do it.</p>",
        "id": 228959428,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614953507
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; tagged</p>",
        "id": 228966055,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614956069
    },
    {
        "content": "<p>[slack] &lt;Helmut Strey&gt; We are planning on building a graphical interface for differential equations. It seems to us that Julia is the platform for differential equation solvers. The idea is to build a system of differential equations using a graph representation which then gets translated into a function that can then be evaluated. Does anyone know about any efforts in this direction? I asked in general, and it seems that what we are suggesting is to build a gui interface for <a href=\"https://github.com/search?q=ModelingToolkit.jl&amp;type=Repositories\">ModelingToolkit.jl</a>.  Any thoughts?</p>",
        "id": 228975579,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614959547
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I'm getting this error when trying to use a stiff solver (with autodiff) and <code>ForwardDiffSensitivity</code> :</p>\n<div class=\"codehilite\" data-code-language=\"cannot\"><pre><span></span><code>≺(::Type{T} where T, ::Type{T} where T) at dual.jl:49\n...```\nWhat does this mean?\n</code></pre></div>",
        "id": 228990727,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614964819
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; aha.... <a href=\"https://github.com/JuliaDiff/ForwardDiff.jl/issues/320\">https://github.com/JuliaDiff/ForwardDiff.jl/issues/320</a></p>",
        "id": 228991379,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614965071
    },
    {
        "content": "<p>[slack] &lt;adammaclean&gt; Trying to figure out the scope of <a href=\"https://github.com/search?q=ModelingToolkit.jl&amp;type=Repositories\">ModelingToolkit.jl</a> - does it do symbolic computation? As in the equivalent of SymPy.solve()?</p>",
        "id": 228992396,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614965451
    },
    {
        "content": "<p>[slack] &lt;Gabriel Baraldi&gt; Its symbolic-numerical. Julia has a new package called <a href=\"https://github.com/search?q=Symbolics.jl&amp;type=Repositories\">Symbolics.jl</a> that aims to be a high performance SymPy. However it started as part of MTK so the scopes arent very clear to me right now.</p>",
        "id": 228994041,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614966089
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; The scope of <a href=\"https://github.com/search?q=Symbolics.jl&amp;type=Repositories\">Symbolics.jl</a> is to be a CAS. If it's in SymPy (and not related to the SciML numerical problems, like ODEs), then it's in <a href=\"https://github.com/search?q=Symbolics.jl&amp;type=Repositories\">Symbolics.jl</a>.</p>",
        "id": 228994923,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614966465
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/search?q=ModelingToolkit.jl&amp;type=Repositories\">ModelingToolkit.jl</a> is symbolic-numeric transformations of these common numerical systems.</p>",
        "id": 228995006,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614966488
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Basically, things like, what if you wanted to transform a distributed delay differential equation into an ODE? Transform chemical reaction systems into their ODEs for the first 5 moments? Log-transform a variable? Replace parts of the model with an approximation (coming soon in JuliaCon cough cough <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> )?</p>",
        "id": 228995151,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614966559
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It's all of these \"make a better code than the one you'd write down yourself\"</p>",
        "id": 228995171,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614966570
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It doesn't have analytical solutions to many ODEs yet, but the plan is to add that because we can then do block transformations to replace some parts of a big system with the analytical solution and reduce the amount of computation.</p>",
        "id": 228995432,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614966667
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Make an MWE. This is generally not hard to fix, but it's hard to narrow down.</p>",
        "id": 228995504,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614966693
    },
    {
        "content": "<p>[slack] &lt;adammaclean&gt; Right. A lot of cool uses that I will explore soon. <span aria-label=\"check mark\" class=\"emoji emoji-2714\" role=\"img\" title=\"check mark\">:check_mark:</span></p>",
        "id": 229001371,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614968897
    },
    {
        "content": "<p>[slack] &lt;adammaclean&gt; but is not yet stable right?</p>",
        "id": 229001442,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614968930
    },
    {
        "content": "<p>[slack] &lt;adammaclean&gt; &gt; Replace parts of the model with an approximation<br>\nI think I see where this is going.... &lt;-&gt; NODEs?</p>",
        "id": 229001607,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614968998
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It's \"stable\". It literally split off from ModelingToolkit this week.</p>\n<p><a href=\"https://discourse.julialang.org/t/ann-symbolics-jl-a-modern-computer-algebra-system-for-a-modern-language/56251\">https://discourse.julialang.org/t/ann-symbolics-jl-a-modern-computer-algebra-system-for-a-modern-language/56251</a></p>\n<p>A lot of the code was from MTK so it all worked, but if you see how the MTK docs changed, there was a weird mixture of \"part CAS part modeling framework\" before, and now it's solely focused on the modeling framework in MTK and the CAS is its own whole world.</p>",
        "id": 229005816,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614970641
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; So it's not brand new code, but brand new organization that makes the documentation make more sense.</p>",
        "id": 229005867,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614970672
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Hopefully in a year or two it's just like, \"SymPy acts like X so I know how to use it in higher level package Y\", it should be \"<a href=\"https://github.com/search?q=Symbolics.jl&amp;type=Repositories\">Symbolics.jl</a> is a standard CAS in Julia that I know how to use, and I make use of it as part of MTK\".</p>",
        "id": 229006005,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614970710
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I have an MWE, but first just a sanity check, is it supported to use a solver with autodiff simultaneously with <code>ForwardDiffSensitivity</code> ?</p>",
        "id": 229007262,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614971181
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; and similarly, is it permissible to use a solver with autodiff (I guess it always uses ForwardDiff?) with <code>InterpolatingAdjoint</code> or <code>QuadratureAdjoint</code> ?</p>",
        "id": 229007523,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614971301
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it should, tha'ts just a tag error</p>",
        "id": 229007530,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614971307
    },
    {
        "content": "<p>[slack] &lt;adammaclean&gt; oh I was just looking in the wrong place - <a href=\"https://github.com/MasonProtter/Symbolics.jl\">https://github.com/MasonProtter/Symbolics.jl</a></p>",
        "id": 229007933,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614971490
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah Mason's library is going to the sands of time</p>",
        "id": 229009498,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614972077
    },
    {
        "content": "<p>Yeah, I should probably put up an archived notice or something</p>",
        "id": 229011596,
        "sender_full_name": "Mason Protter",
        "timestamp": 1614972864
    },
    {
        "content": "<p>and a link to the JuliaSymbolics one</p>",
        "id": 229011650,
        "sender_full_name": "Mason Protter",
        "timestamp": 1614972888
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; ```using DiffEqFlux, DiffEqSensitivity, Flux, OrdinaryDiffEq, Zygote, Test #using Plots<br>\nusing DiffEqBase: get_tmp, dualcache<br>\nusing ComponentArrays<br>\nusing Parameters<br>\nusing ForwardDiff<br>\nusing ReverseDiff</p>\n<p>p = ComponentArray(lvpara=ComponentArray(α=2.2,β=1.0,δ=2.0,γ=0.4),a=1.0,b=1.0)<br>\nu0 = ComponentArray(state=ComponentArray(x=1.0,y=1.0))<br>\nax_p = getaxes(p)<br>\nax_u = getaxes(u0)</p>\n<p>chunk_size(dual::Type{ForwardDiff.Dual{T,V,N}}) where {T,V,N} = N<br>\nselect(a::AbstractArray, u::AbstractArray) = a<br>\nselect(dc::DiffEqBase.DiffCache, u) = get_tmp(dc,u)</p>\n<p>struct LotkaVolterra{T}<br>\n  d::T<br>\nend</p>\n<p>function (lv::LotkaVolterra)(du,u_,p,t)<br>\n  #@assert chunk_size(eltype(u)) == 2 \"found chunk size of $(chunk_size(eltype(u))) for $(typeof(u))\"<br>\n  #d = get_tmp(d_cache, u)<br>\n  u = ComponentArray(u_,ax_u)<br>\n  p = ComponentArray(p,ax_p)<br>\n  @unpack x,y = u.state<br>\n  @unpack lvpara, a, b = p<br>\n  @unpack α, β, δ, γ = lvpara<br>\n  d = select(lv.d,u)<br>\n  d[1] = a^2+b^2<br>\n  d[2] = b^2-a^2<br>\n  du[1] = dx = (α - β*y)x + d[1]<br>\n  du[2] = dy = (δ*x - γ)y + d[2]<br>\nend<br>\nu0 = Array(u0)<br>\np = Array(p)<br>\nlv = LotkaVolterra(dualcache(zeros(2),Val{6}))<br>\nprob = ODEProblem(lv,u0,(0.0,1.0),p)<br>\nfunction predict_rd(p)<br>\n  Array(solve(prob,Rosenbrock23(chunk_size=6),dt=0.01,p=p,saveat=0.1,reltol=1e-4,sensealg=ForwardDiffSensitivity()))<br>\nend<br>\nloss_rd(p) = sum(abs2,x-1 for x in predict_rd(p))</p>\n<p>opt = ADAM(0.1)<br>\ncb = function (p,l,pred)<br>\n  display(loss_rd(p))<br>\n  #display(plot(solve(remake(prob,p=p),Tsit5(),saveat=0.1),ylim=(0,6)))<br>\nend</p>\n<p>@time res = DiffEqFlux.sciml_train(loss_rd, p, opt, maxiters=100)```</p>",
        "id": 229012775,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614973333
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; weirdly, with <code>ImplicitEuler</code>  it fails with a chunk size (reinterpret) error, implying that <code>ImplicitEuler</code> ignores the <code>chunk_size</code> argument.</p>",
        "id": 229012875,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614973369
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Not quite, that's part of it though <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 229017011,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614975094
    },
    {
        "content": "<p>[gitter] &lt;sibyjackgrove&gt; Is it possible to use matrix preconditioning for the Jacobian with <a href=\"https://github.com/search?q=DiffEq.jl&amp;type=Repositories\">DiffEq.jl</a>? If so could you point me to the documentation that shows how to do that.</p>",
        "id": 229021021,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614976857
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; <a href=\"https://diffeq.sciml.ai/latest/tutorials/advanced_ode_example/#Adding-a-Preconditioner\">https://diffeq.sciml.ai/latest/tutorials/advanced_ode_example/#Adding-a-Preconditioner</a></p>",
        "id": 229021208,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614976944
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Is there developer documentation on DiffEqSensitivity? I'm really struggling to understand how the CASA algorithms work w.r.t to reverse differentiation, i.e. what gets tape compiled and what doesn't, how the forward pass interpolant interacts with interpolating adjoints, etc.</p>",
        "id": 229021310,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614976990
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; there's not enough.</p>",
        "id": 229021683,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614977150
    },
    {
        "content": "<p>[gitter] &lt;sibyjackgrove&gt; &gt; [slack] &lt;Brian Groenke&gt; <a href=\"https://diffeq.sciml.ai/latest/tutorials/advanced_ode_example/#Adding-a-Preconditioner\">https://diffeq.sciml.ai/latest/tutorials/advanced_ode_example/#Adding-a-Preconditioner</a></p>\n<p>Thanks! Is it possible to use this with diffeqpy?</p>",
        "id": 229022619,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614977506
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I don't know, I just work in Julia. Have to defer to @chrisrackauckas for that question.</p>",
        "id": 229022764,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614977552
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oof that one is going to be hard.</p>",
        "id": 229022872,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614977597
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I'm going to say, probably not. Creating a callable type from Python sounds like something we can't do yet.</p>",
        "id": 229022906,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614977613
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Ok, are there examples somewhere that I've missed which handle non-integrated (and thus pre-allocated) state variables with DiffEqSensitivity? This has been a sticking point for me for weeks now... I can kind of see how to do it with <code>ForwardDiff</code> but the chunk size complicates everything (especially thanks to <a href=\"https://github.com/SciML/DiffEqSensitivity.jl/issues/390\">https://github.com/SciML/DiffEqSensitivity.jl/issues/390</a> ).</p>",
        "id": 229023254,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614977758
    },
    {
        "content": "<p>[gitter] &lt;sibyjackgrove&gt; &gt; [slack] &lt;chrisrackauckas&gt; I'm going to say, probably not. Creating a callable type from Python sounds like something we can't do yet.</p>\n<p>Ok</p>",
        "id": 229023319,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614977771
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; @chrisrackauckas I think there's a fundamental problem with making this work with reverse mode... that being that \"external\" state variables aren't saved or tracked in the forward pass so the intermediary states aren't saved anywhere. This means, I think, that the adjoint computation would be wrong.</p>\n<p>I am still trying to get forward mode to work for the time being, but I would really like to have reverse mode available too.</p>\n<p>If that means contributing some development effort to supporting non-integrated/external state variables then I am happy to do that. It's beneficial to my research.</p>",
        "id": 229026581,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1614979149
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; can you open it on the repo? This probably isn't too hard to fix, usually it's just from a tag being defined incorrectly.</p>",
        "id": 229100306,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615039354
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/JuliaDiff/SparseDiffTools.jl/pull/105\">https://github.com/JuliaDiff/SparseDiffTools.jl/pull/105</a> is how we did some fixes before.</p>",
        "id": 229100313,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615039373
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/SciML/DiffEqSensitivity.jl/blob/master/src/forward_sensitivity.jl#L112\">https://github.com/SciML/DiffEqSensitivity.jl/blob/master/src/forward_sensitivity.jl#L112</a></p>",
        "id": 229100351,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615039413
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yup, the issue is right there</p>",
        "id": 229100356,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615039417
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It should be the same <code>typeof(ForwardDiff.tag(...)</code></p>",
        "id": 229100364,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615039432
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; so if you open the issue with something I can use as a test, then it'll be much quicker to get this fixed up. I'm quite busy right now but if it's copy-paste slap test down and then churn some tag changes, I can fit that in.</p>",
        "id": 229100414,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615039468
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; <a href=\"https://github.com/SciML/DiffEqSensitivity.jl/issues/393\">https://github.com/SciML/DiffEqSensitivity.jl/issues/393</a></p>",
        "id": 229110586,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615048438
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; <code>DEDataVector</code> might also be a solution to this, but I'm not 100% sure... also there's a performance hit for using it which is kind of annoying.</p>",
        "id": 229110687,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615048486
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I'm not sure what the question is here.</p>",
        "id": 229166997,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615103662
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Well the basic problem is that in many modeling scenarios, you have state variables that are not \"prognostic\", i.e. not integrated, but still change over time. In my use case, heat capacity and thermal conductivity are both examples of this. They change as a function of liquid water content, which changes as a function of the integrated variables (phase change).</p>\n<p>It's not clear to me still how this is supposed to work in the SciML framework. You can store extra state in <code>p</code> or the <code>ODEFunction</code> , but this doesn't really work (or at least gets really complicated) when you try to use autodiff+sensitivity analysis because of the specialized types (<code>TrackedArray</code> ,<code>Dual</code> ,etc..).</p>\n<p>So I just wanted to start a discussion about this and what the right solutions are. I'm happy to put some time into contributing something if needed.</p>",
        "id": 229177737,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615114151
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; like discrete values you're updating along the integration with callbacks?</p>",
        "id": 229177815,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615114222
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Not just callbacks... they could be updated in the step function as well.</p>",
        "id": 229177936,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615114333
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Phase change is a continuous process that occurs over a time interval, though the \"start\" and \"end\" could be modeled as discrete events with a callback.</p>",
        "id": 229177953,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615114380
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Actually I guess it would be possible to put everything into callbacks, but there would have to be a discrete callback that would end up getting called at every time step because phase change is always occurring somewhere in the ground.</p>",
        "id": 229178224,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615114683
    },
    {
        "content": "<p>[slack] &lt;anastasopoulos&gt; Regarding the initiative to create a wrapper around AUTO for bifurcation analysis, are there any updates / is this still under consideration? My experience in _Python_ is almost zero in, but I have some in _Fortran,_ _Auto_ as well as _Matcont._ Thnx</p>",
        "id": 229212954,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615146555
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; I don't think there is really any such initiative at this point. Using <a href=\"https://github.com/search?q=BifurcationKit.jl&amp;type=Repositories\">BifurcationKit.jl</a> is the recommendation now. It is quite full-featured.</p>",
        "id": 229213345,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615146956
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Agreed. I'd just use BifurcationKit</p>",
        "id": 229213468,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615147066
    },
    {
        "content": "<p>[slack] &lt;anastasopoulos&gt; Alright, looks promising</p>",
        "id": 229214069,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615147578
    },
    {
        "content": "<p>[slack] &lt;Mattias Fält&gt; Not sure if this fits best here or under #autodiff<br>\nI have been trying to revive some code with autodiff through DiffEq with DiscreteCallback but it doesn't seem as easy anymore. I tried the example in <a href=\"https://diffeqflux.sciml.ai/dev/examples/hybrid_diffeq/\">https://diffeqflux.sciml.ai/dev/examples/hybrid_diffeq/</a><br>\nwhich works, but if you create the callback inside <code>predict_n_ode</code> then Zygote throws an <code>ERROR: LoadError: Mutating arrays is not supported</code><br>\nI can probably get around this some way, but the whole system seems very unstable. Is this a known bug?</p>",
        "id": 229300299,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615211283
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Not known. Open it up. @frankschae make note.</p>",
        "id": 229300458,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615211344
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I need to finish 2 papers this week and then I can start looking at a fix bugfixes.</p>",
        "id": 229300504,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615211360
    },
    {
        "content": "<p>[slack] &lt;Mattias Fält&gt; Ok, ill open an issue</p>",
        "id": 229300508,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615211361
    },
    {
        "content": "<p>[slack] &lt;Mattias Fält&gt; In DiffEqFlux?</p>",
        "id": 229300587,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615211396
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yup</p>",
        "id": 229301296,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615211649
    },
    {
        "content": "<p>[slack] &lt;frankschae&gt; does a fix like I used here:<br>\n<a href=\"https://diffeqflux.sciml.ai/dev/examples/SDE_control/\">https://diffeqflux.sciml.ai/dev/examples/SDE_control/</a><br>\nfor the noise processes maybe work analoguesly?</p>\n<div class=\"codehilite\" data-code-language=\"creategrid\"><pre><span></span><code>Zygote.@nograd CreateGrid #avoid taking grads of this function```\n</code></pre></div>",
        "id": 229301670,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615211780
    },
    {
        "content": "<p>[slack] &lt;Mattias Fält&gt; I think that I still need gradients through the callback. The integrator is updated based on a function that depends both on the training data and the current state in the integrator.</p>",
        "id": 229303554,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615212481
    },
    {
        "content": "<p>[slack] &lt;Mattias Fält&gt; For specifics on the problem you can look at this paper I wrote a while back <a href=\"https://arxiv.org/abs/1911.12663\">https://arxiv.org/abs/1911.12663</a><br>\nI can also send you the code if you want</p>",
        "id": 229304105,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615212637
    },
    {
        "content": "<p>[gitter] &lt;ChrisRackauckas&gt; @pbouffard for the most part, the packages should be independent in their development. DiffEq is really stable, so you should only need to be on release unless there's something major that happens (in which case, it's probably master in SciMLBase for an interface improvement relating to symbolics)</p>",
        "id": 230258860,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615746105
    },
    {
        "content": "<p>[slack] &lt;oxinabox&gt; Should be back shortly</p>",
        "id": 230258865,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615746109
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yay!</p>",
        "id": 230258870,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615746119
    },
    {
        "content": "<p>[slack] &lt;oxinabox&gt; this time the bot crashed not because of bugs in MattermostBridge / the libraries it uses. But because someone rebooted the server hosting my VM.</p>",
        "id": 230258928,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615746158
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Hey folks, can anyone indicate the best control theory library to go with DiffEq nowadays. Like there is <code>ControlSystems.jl</code> I believe, but I was not sure if that is still the one to use, or if there is any plan for a more integrated <code>GalacticControl</code> library in the offing <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>. I want to just start with a simple LTI system to work out the kinks, but then I am trying to model an irrigation system for agriculture, so the \"system\" will be the St. Venant PDE shallow water equations, and the control will be opening and closing the gate. Or is this something that I should look at MTK for?</p>",
        "id": 230260278,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615747723
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; MTK isn't quite there yet. It's getting really close though.</p>",
        "id": 230260361,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615747817
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; @chrisrackauckas Yes, seems like you guys are making really good progress. So no rush. So then is <code>ControlSystems.jl</code> the best plan for now, and then update to MTK in the future?</p>",
        "id": 230260517,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615748034
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes, and <a href=\"https://github.com/search?q=ControlSystems.jl&amp;type=Repositories\">ControlSystems.jl</a> may be a group we work with as a top level interface too. It's hard to know how this part is going to evolve.</p>",
        "id": 230260807,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615748333
    },
    {
        "content": "<p>[slack] &lt;Fredrik Bagge Carlson&gt; <a href=\"https://github.com/search?q=Controlsystems.jl&amp;type=Repositories\">Controlsystems.jl</a> almost exclusively concerns itself with linear control theory, for which it should correspond roughly to matlab control systems toolbox.</p>",
        "id": 230265173,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615752970
    },
    {
        "content": "<p>[slack] &lt;Fredrik Bagge Carlson&gt; Matlab has more tools for robust synthesis, and we have more of typical Julia stuff, like support for ad, uncertainty propagation and good support for complex coefficient systems.</p>",
        "id": 230265204,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615753039
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; @chrisrackauckas On a related note, I've been messing around with having MTK symbolically build open loop optimal control problems from the necessary conditions for the Pontryagin minimum principle and then passing it off to the <code>TwoPointBVProblem</code> solver (basically just pulling the function, parameters, and initial conditions out of the <code>ODESystem</code> manually). It seems to do pretty well. I'm just happy that it worked, to be honest. Is this a method you guys are already using with the <code>ControlSystem</code> type? The only thing I saw in the docs was for the discretize-then-optimize method.</p>\n<p>Also, how do you currently handle final conditions in the objective function for the <code>ControlSystem</code> type? Like for free final state problems and such.</p>",
        "id": 230276502,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615762201
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; how are you discretizing to the two point BVP?</p>",
        "id": 230276955,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615762747
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; <code>solve(bvp, MIRK4(), dt=0.05)</code></p>",
        "id": 230276979,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615762792
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; Here's a gist:<br>\n<a href=\"https://gist.github.com/jonniedie/e02c0a8f82a10329eeeee66bcb262978\">https://gist.github.com/jonniedie/e02c0a8f82a10329eeeee66bcb262978</a></p>",
        "id": 230277267,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615763023
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; I definitely didn't do it the cleanest way, with getting variables from the other system, though. The string thing is kinda a hack just to get it working because I was having a hard time doing the derivatives with respect to state variables of the other system without bringing those variables in directly.</p>",
        "id": 230277343,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615763110
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh yes, that's a variational method</p>",
        "id": 230277896,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615763724
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's different from the one we have so far which requires an optimization.</p>",
        "id": 230277905,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615763733
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; I don't know anything about Lie groups, but can these problem types not be used for faster sensitivity analysis?<br>\n<a href=\"https://diffeq.sciml.ai/stable/types/nonautonomous_linear_ode/#Note-About-Affine-Equations\">https://diffeq.sciml.ai/stable/types/nonautonomous_linear_ode/#Note-About-Affine-Equations</a></p>",
        "id": 230278207,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615764060
    },
    {
        "content": "<p>[slack] &lt;airpmb&gt; ```function spring_mass_damper_system(;name)<br>\n  @variables x(t)<br>\n  D = Differential(t)<br>\n  @parameters M b k<br>\n  eqs = [D(D(x)) ~ b/M<em>D(x) + k/M</em>x] # equations defining the system<br>\n  iv = t # the independent variable<br>\n  states = [x] # the dependent (state) variables<br>\n  ps = [M, b, k] # parameter variables<br>\n  default_u0 = [D(x) =&gt; 0.0, x =&gt; 0.0] # default initial conditions<br>\n  default_p = [M =&gt; 1.0, b =&gt; 1.0, k =&gt; 1.0] # default parameter values<br>\n  sys = ODESystem(eqs, iv, states, ps, name=name, default_u0=default_u0, default_p=default_p)<br>\n  ode_order_lowering(sys)<br>\nend</p>\n<p>function spring_mass_damper_problem()<br>\n  @named smd_sys = spring_mass_damper_system()<br>\n  @show smd_sys<br>\n  u0 = [] # initial conditions (empty = use defaults)<br>\n  tspan = (0, 10.0) # time span<br>\n  u0_kludge = Vector{Pair{Num, Float64}}() # <a href=\"https://github.com/SciML/ModelingToolkit.jl/issues/869\">https://github.com/SciML/ModelingToolkit.jl/issues/869</a><br>\n  prob = ODEProblem(smd_sys, u0_kludge, tspan)<br>\n  # return prob<br>\n  sol = solve(prob, Tsit5())<br>\nend</p>\n<p>sol = spring_mass_damper_problem()```<br>\nGives me</p>\n<div class=\"codehilite\" data-code-language=\"error\"><pre><span></span><code>Closest candidates are:\n  promote_typeof(::Any) at promotion.jl:271\n  promote_typeof(::Any, ::Any...) at promotion.jl:272\nStacktrace:\n  [1] varmap_to_vars(varmap::Dict{Num, Float64}, varlist::Vector{Term{Real, Nothing}}; defaults::Dict{Any, Any})\n    @ ModelingToolkit ~/.julia/dev/ModelingToolkit/src/variables.jl:15\n  [2] varmap_to_vars\n    @ ~/.julia/dev/ModelingToolkit/src/variables.jl:8 [inlined]\n  [3] #varmap_to_vars#11\n    @ ~/.julia/dev/ModelingToolkit/src/variables.jl:28 [inlined]\n  [4] (::ModelingToolkit.var\"#varmap_to_vars##kw\")(::NamedTuple{(:defaults,), Tuple{Dict{Any, Any}}}, ::typeof(ModelingToolkit.varmap_to_vars), varmap::Vector{Pair{Num, Float64}}, varlist::Vector{Term{Real, Nothing}})\n    @ ModelingToolkit ~/.julia/dev/ModelingToolkit/src/variables.jl:27\n  [5] process_DEProblem(constructor::Type, sys::ODESystem, u0map::Vector{Pair{Num, Float64}}, parammap::SciMLBase.NullParameters; version::Nothing, tgrad::Bool, jac::Bool, checkbounds::Bool, sparse::Bool, simplify::Bool, linenumbers::Bool, parallel::Symbolics.SerialForm, eval_expression::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n    @ ModelingToolkit ~/.julia/dev/ModelingToolkit/src/systems/diffeqs/abstractodesystem.jl:277\n  [6] process_DEProblem\n    @ ~/.julia/dev/ModelingToolkit/src/systems/diffeqs/abstractodesystem.jl:271 [inlined]\n  [7] (ODEProblem{true, tType, isinplace, P, F, K, PT} where {tType, isinplace, P, F, K, PT})(sys::ODESystem, u0map::Vector{Pair{Num, Float64}}, tspan::Tuple{Int64, Float64}, parammap::SciMLBase.NullParameters; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n    @ ModelingToolkit ~/.julia/dev/ModelingToolkit/src/systems/diffeqs/abstractodesystem.jl:323\n  [8] ODEProblem\n    @ ~/.julia/dev/ModelingToolkit/src/systems/diffeqs/abstractodesystem.jl:323 [inlined]\n  [9] ODEProblem\n    @ ~/.julia/dev/ModelingToolkit/src/systems/diffeqs/abstractodesystem.jl:323 [inlined]\n [10] #ODEProblem#162\n    @ ~/.julia/dev/ModelingToolkit/src/systems/diffeqs/abstractodesystem.jl:303 [inlined]\n [11] ODEProblem\n    @ ~/.julia/dev/ModelingToolkit/src/systems/diffeqs/abstractodesystem.jl:303 [inlined]\n [12] spring_mass_damper_problem()\n    @ Main ~/.julia/dev/ModelingToolkitExamples/examples/hellomtk.jl:78\n [13] top-level scope\n    @ ~/.julia/dev/ModelingToolkitExamples/examples/hellomtk.jl:83\nin expression starting at /Users/patrick/.julia/dev/ModelingToolkitExamples/examples/hellomtk.jl:83```\n</code></pre></div>",
        "id": 230278380,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615764328
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it won't automatically construct a Lie group problem in reverse. That would be a good thing to add.</p>",
        "id": 230278383,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615764332
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; Also, should it not be\" extend A by a column containing g, and furthermore a zero row, the corresponding state has initial condition 1.\"</p>",
        "id": 230278384,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615764343
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; Forward mode could benefit also by just adding zero rows to A? For example, for a reaction problem containing 500 u and 500 p?</p>",
        "id": 230279397,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615765641
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @yingbo_ma <a href=\"https://github.com/SciML/ModelingToolkit.jl/blob/master/src/systems/diffeqs/first_order_transform.jl#L10\">https://github.com/SciML/ModelingToolkit.jl/blob/master/src/systems/diffeqs/first_order_transform.jl#L10</a></p>",
        "id": 230280078,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615766479
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's dropping the other information</p>",
        "id": 230280082,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615766483
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what did you use instead of <code>remake</code>, setfield!?</p>",
        "id": 230280088,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615766495
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Yeah</p>",
        "id": 230280152,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615766559
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; can you tackle that really quickly?</p>",
        "id": 230280177,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615766585
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I have some stuff open to make autoswitch better <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 230280194,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615766593
    },
    {
        "content": "<p>[slack] &lt;airpmb&gt; Is the order lowering required? I tried without but got a different error</p>",
        "id": 230280201,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615766599
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Can you open an issue?</p>",
        "id": 230280746,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615767215
    },
    {
        "content": "<p>[slack] &lt;airpmb&gt; Sure</p>",
        "id": 230280788,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615767246
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Fixed <a href=\"https://github.com/SciML/ModelingToolkit.jl/pull/888\">https://github.com/SciML/ModelingToolkit.jl/pull/888</a></p>",
        "id": 230281110,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615767640
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; BTW, I am pretty sure you meant to write<br>\n<code>eqs = [D(D(x)) ~ -b/M*D(x) - k/M*x]</code><br>\nif you want a damped mass-spring system</p>",
        "id": 230281153,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615767687
    },
    {
        "content": "<p>[slack] &lt;airpmb&gt; Oh yeah the signs are incorrect, I'd originally written everything on the lhs (and didn't divide through by M) but it didn't like that.</p>",
        "id": 230281224,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615767779
    },
    {
        "content": "<p>[slack] &lt;airpmb&gt; Oh nice, I'll try that branch!</p>",
        "id": 230281403,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615768022
    },
    {
        "content": "<p>[slack] &lt;airpmb&gt; That's a lucky PR number too <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 230281412,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615768051
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Haha, are you aware of Chinese numerology? <a href=\"https://en.wikipedia.org/wiki/Chinese_numerology#Eight\">https://en.wikipedia.org/wiki/Chinese_numerology#Eight</a></p>",
        "id": 230281479,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615768126
    },
    {
        "content": "<p>[slack] &lt;airpmb&gt; Superficially, yeah</p>",
        "id": 230281489,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615768158
    },
    {
        "content": "<p>[slack] &lt;airpmb&gt; How can I create a step function of time to be included on the rhs of an ODE? My efforts so far all seem to result in <code>TypeError: non-boolean (Num) used in boolean context</code>.</p>",
        "id": 230283775,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615770855
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; maybe try<br>\n<a href=\"https://github.com/SciML/IfElse.jl\">https://github.com/SciML/IfElse.jl</a><br>\nor implement it as a discrete time callback?</p>",
        "id": 230284307,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615771538
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yes, <code>IfElse.ifelse</code> or <code>@register</code> it.</p>",
        "id": 230284404,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615771658
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Thanks @Fredrik Bagge Carlson. Thanks for helping me understand the differences between <code>ControlSystems.jl</code> and the Matlab toolkit. Control is still a new area for me, so I want to make sure I understand both the underlying algorithms as well as the package ecosystem. Things move so fast, hard to keep up <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>. But that is life <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>.</p>",
        "id": 230296039,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615784913
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; <a href=\"https://github.com/SciML/DiffEqSensitivity.jl/issues/398\">https://github.com/SciML/DiffEqSensitivity.jl/issues/398</a></p>",
        "id": 230324937,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615805535
    },
    {
        "content": "<p>[slack] &lt;jacobusmmsmit&gt; Has anyone had success with Strang splitting for multidimensional PDEs in Julia?</p>",
        "id": 230411139,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615839352
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; doing it by hand?</p>",
        "id": 230411315,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615839418
    },
    {
        "content": "<p>[slack] &lt;jacobusmmsmit&gt; Yeah</p>",
        "id": 230411398,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615839458
    },
    {
        "content": "<p>[slack] &lt;Siva&gt; I’m having some trouble setting up the underdamped langevin diffusion problem.</p>",
        "id": 230430160,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615846894
    },
    {
        "content": "<p>[slack] &lt;Siva&gt; Here is my attempt.</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    γ, u = p\n    x = @view u[1:2]\n    v = @view u[3:4]\n    dx = @view du[1:2]\n    dv = @view du[3:4]\n    dx = v\n    dv = -γ*v -u*gradU(x)\nend\n\nfunction uld_g!(du, u, p, t)\n    γ, u = p\n    x = @view u[1:2]\n    v = @view u[3:4]\n    dx = @view du[1:2]\n    dv = @view du[3:4]\n    @. dx = 0.0\n    @. dv = sqrt(2*γ*u)*ones(2)\nend\n\nu0 = [1., 1., 0., 0.]\np = (0.1, 1)\ntspan = (0.0,1.0)\nULD = SDEProblem(uld_f!, uld_g!, u0, tspan, p)\n\nsol = solve(ULD, EM(), dt=0.0001)```\nI get the following error\n\n```MethodError: no method matching view(::Int64, ::UnitRange{Int64})\nClosest candidates are:\n  view(::AbstractAlgebra.Generic.Mat{T}, ::UnitRange{Int64}, ::UnitRange{Int64}) where T&lt;:AbstractAlgebra.RingElement at /Users/sivapvarma/.julia/packages/AbstractAlgebra/aF5Iw/src/generic/Matrix.jl:411\n  view(::StepRangeLen, ::OrdinalRange{var\"#s79\", S} where {var\"#s79\"&lt;:Integer, S}) at subarray.jl:198\n  view(::StepRange, ::AbstractRange{var\"#s79\"} where var\"#s79\"&lt;:Integer) at subarray.jl:194\n  ...\n\nStacktrace:\n  [1] uld_f!(du::Vector{Float64}, u::Vector{Float64}, p::Tuple{Float64, Int64}, t::Float64)```\nI think I setup the correct dimension of u by specifying u0. But it still considering u as a scalar, Int64 somehow.\n</code></pre></div>",
        "id": 230430593,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615847027
    },
    {
        "content": "<p>[slack] &lt;Siva&gt; Found the issue, i’m redefining u when I unpack the parameters.</p>",
        "id": 230431846,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615847465
    },
    {
        "content": "<p>[slack] &lt;Igor _&gt; Hello!   I have a few questions about DiffEqFlux.sciml_train function.  I'm trying to use it to optimize some of the parameters of the ODE.<br>\n• The ODE depends on 4 parameters and some function. Can I supply parameters and this additional functions to the \"solve\" method together somehow? Looks like DiffEqFlux.solve \"p\" argument can be only a vector....        <br>\n            This ODe function supposed to be inside a module, could it be possible to pass another function as an argument to it (smth like  here <a href=\"https://diffeq.sciml.ai/dev/tutorials/ode_example/#Example-3:-Solving-Nonhomogeneous-Equations-using-Parameterized-Functions\">https://diffeq.sciml.ai/dev/tutorials/ode_example/#Example-3:-Solving-Nonhomogeneous-Equations-using-Parameterized-Functions</a> )<br>\n• Can I use other packages inside ODE function? I was trying to use Dierckx   and then it tells me   <code>ERROR: MethodError: no method matching Float64(::ReverseDiff.TrackedReal{Float64, Float64, Nothing})</code></p>",
        "id": 230443378,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615855159
    },
    {
        "content": "<p>[gitter] &lt;ig-or&gt; Hello!   I have a question about DiffEqFlux.sciml_train  and solve functions: I have to have some interpolation inside my ODe function implementation... and trying to use Dierckx package for this. Then it tells me that  \"MethodError: no method matching Float64(::ReverseDiff.TrackedReal{Float64, Float64, Nothing})\". Are there any workarounds in this case?</p>",
        "id": 230444568,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615856107
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; <a href=\"https://github.com/SciML/DiffEqSensitivity.jl/issues/395\">https://github.com/SciML/DiffEqSensitivity.jl/issues/395</a> even though it now gives the correct result, the number of partials is still still too high for zygote, making it a performance issue?</p>",
        "id": 230446300,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615857502
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; What do you mean?</p>",
        "id": 230446488,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615857683
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; You can use other functions which are differentiable. Dirckx is not, but <a href=\"https://github.com/search?q=DataInterpolations.jl&amp;type=Repositories\">DataInterpolations.jl</a> is</p>",
        "id": 230446572,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615857755
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; ForwardDiff<br>\n<code>ForwardDiff.Dual{ForwardDiff.Tag{typeof(cost),Float64},Float64,1}[Dual{ForwardDiff.Tag{typeof(cost),Float64}}(1.5,1.0), Dual{ForwardDiff.Tag{typeof(cost),Float64}}(1.0,0.0), Dual{ForwardDiff.Tag{typeof(cost),Float64}}(3.0,0.0), Dual{ForwardDiff.Tag{typeof(cost),Float64}}(1.0,0.0)]</code><br>\nZygote<br>\n<code>ForwardDiff.Dual{ForwardDiff.Tag{ODEFunction{true,typeof(fiip),UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,typeof(SciMLBase.DEFAULT_OBSERVED),Nothing},Float64},Float64,4}[Dual{ForwardDiff.Tag{ODEFunction{true,typeof(fiip),UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,typeof(SciMLBase.DEFAULT_OBSERVED),Nothing},Float64}}(1.5,1.0,0.0,0.0,0.0), Dual{ForwardDiff.Tag{ODEFunction{true,typeof(fiip),UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,typeof(SciMLBase.DEFAULT_OBSERVED),Nothing},Float64}}(1.0,0.0,1.0,0.0,0.0), Dual{ForwardDiff.Tag{ODEFunction{true,typeof(fiip),UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,typeof(SciMLBase.DEFAULT_OBSERVED),Nothing},Float64}}(3.0,0.0,0.0,1.0,0.0), Dual{ForwardDiff.Tag{ODEFunction{true,typeof(fiip),UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,typeof(SciMLBase.DEFAULT_OBSERVED),Nothing},Float64}}(1.0,0.0,0.0,0.0,1.0)]</code></p>",
        "id": 230446700,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615857860
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's erroring after that?</p>",
        "id": 230447020,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615858146
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; No it seems to work fine</p>",
        "id": 230447121,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615858229
    },
    {
        "content": "<p>[gitter] &lt;ig-or&gt; Thanks  chrisrackauckas, Looks like <a href=\"https://github.com/search?q=Interpolations.jl&amp;type=Repositories\">Interpolations.jl</a> is working!</p>",
        "id": 230447255,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615858332
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; the issue is that I am only calculating the derivative towards the first parameter, yet there are 4 partials in the zygote implementation.</p>",
        "id": 230447256,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615858333
    },
    {
        "content": "<p>[slack] &lt;airpmb&gt; I'm having trouble overriding a default initial condition when constructing an ODEProblem</p>",
        "id": 230447277,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615858356
    },
    {
        "content": "<p>[slack] &lt;airpmb&gt; It should simply be something like <code>ODEProblem(sys, [sys.x =&gt; 42.0], (0.0, 10.0))</code>, right?</p>",
        "id": 230447337,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615858413
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Looks right</p>",
        "id": 230450299,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615861070
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Oh. Odd</p>",
        "id": 230450350,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615861090
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; Shouldn't something like this come up often for problems described section 6 of your koopman paper: \"6  Optimization Under Uncertainty via the Koopman Expectation\"? I.e. you have to pass both control parameters and uncertain parameters, and optimize the control parameters. How did you deal with that?</p>",
        "id": 230450382,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615861126
    },
    {
        "content": "<p>[slack] &lt;airpmb&gt; It just silently ignores the updated value</p>",
        "id": 230450573,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615861270
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; can you post some code?</p>",
        "id": 230450987,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615861635
    },
    {
        "content": "<p>[slack] &lt;airpmb&gt; Yeah I'll post a MWE when I get a chance</p>",
        "id": 230453180,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615863561
    },
    {
        "content": "<p>[slack] &lt;airpmb&gt; Seems to have to do with namespacing:</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>using OrdinaryDiffEq\n\nfunction springmass()\n  @parameters t\n  @variables x(t)\n  D = Differential(t)\n  @parameters M b k\n  eqs = [D(D(x)) ~ 1/M * (-b*D(x) - k*x )] # equations defining the system\n  iv = t # the independent variable\n  states = [x] # the dependent (state) variables\n  ps = [M, b, k] # parameter variables\n  default_u0 = [D(x) =&gt; 0.0, x =&gt; 1.5] # default initial conditions\n  default_p = [M =&gt; 1.0, b =&gt; 1.0, k =&gt; 1.0] # default parameter values\n  @named smd_sys = ODESystem(eqs, iv, states, ps, default_u0=default_u0, default_p=default_p)\n  return ode_order_lowering(smd_sys)\nend\nsmd_sys = springmass()\nu0 = [smd_sys.x =&gt; -1.0] # initial conditions (empty = use defaults)\nprob = ODEProblem(smd_sys, u0, (0.0, 1.0))\n@show prob.u0 # prob.u0 = [0.0, 1.5] # hasn't been updated\nsol = solve(prob, Tsit5())\n@show sol.u[1] # sol.u[1] = [0.0, 1.5] # same```\nIf I do the same but without the function and just `u0 = [x =&gt; -1.0]` it works as expected.\n</code></pre></div>",
        "id": 230459335,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615870024
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; yes it seems like it <a href=\"https://github.com/SciML/ModelingToolkit.jl/issues/807\">https://github.com/SciML/ModelingToolkit.jl/issues/807</a></p>",
        "id": 230463602,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615874488
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; might be relevant issue</p>",
        "id": 230463605,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615874491
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; 100x accelerated uncertainty quantification of dynamical systems with Koopman Expectations? Come see how to use it with Pumas at the first Pumas 2.0 webinar at 12pm EST. Inviting the whole <a href=\"https://twitter.com/hashtag/pharma?src=hashtag_click\">https://twitter.com/hashtag/pharma?src=hashtag_click</a>, <a href=\"https://twitter.com/hashtag/julialang?src=hashtag_click\">https://twitter.com/hashtag/julialang?src=hashtag_click</a>, and <a href=\"https://twitter.com/hashtag/sciml?src=hashtag_click\">https://twitter.com/hashtag/sciml?src=hashtag_click</a> community.</p>\n<p><a href=\"https://form.jotform.com/210605786318054\">https://form.jotform.com/210605786318054</a></p>",
        "id": 230537648,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615910090
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; (i.e. 5 minutes!)</p>",
        "id": 230537672,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615910099
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://zoom.us/j/97970057487?pwd=ME1aODY1YkVIZjFFaUFZbXN6Y2U5Zz09\">https://zoom.us/j/97970057487?pwd=ME1aODY1YkVIZjFFaUFZbXN6Y2U5Zz09</a></p>",
        "id": 230539595,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615910569
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Try<br>\n<code>u0 = [@nonamespace(smd_sys.x) =&gt; -1.0] # initial conditions (empty = use defaults)</code></p>",
        "id": 230547567,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615912754
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; @chrisrackauckas this would be a use case for <code>@nonamespace</code> .</p>",
        "id": 230547654,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615912782
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; I have a strong urge for fries</p>",
        "id": 230552614,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615914477
    },
    {
        "content": "<p>[slack] &lt;airpmb&gt; Great, I'll give that a try... works, thanks!</p>",
        "id": 230578604,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615923972
    },
    {
        "content": "<p>[slack] &lt;airpmb&gt; <a href=\"https://discourse.julialang.org/t/new-julia-package-for-f16-aircraft-model/57323\">https://discourse.julialang.org/t/new-julia-package-for-f16-aircraft-model/57323</a></p>",
        "id": 230578633,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615923982
    },
    {
        "content": "<p>[slack] &lt;airpmb&gt; ^ would love to see this interfaced with/implemented in MTK (and might take a stab at it)</p>",
        "id": 230578763,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615924023
    },
    {
        "content": "<p>[slack] &lt;Ilia&gt; Hi everyone, my name is Ilia, I’m a PhD student working on algorithms for structural identifiability of ODE models. I wanted to help out in implementing some local and/or global identifiability algorithms for MTK and <a href=\"https://github.com/search?q=Symbolics.jl&amp;type=Repositories\">Symbolics.jl</a>.</p>",
        "id": 230629884,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615949090
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; welcome!</p>",
        "id": 230629924,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615949149
    },
    {
        "content": "<p>[slack] &lt;Ilia&gt; thank you! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 230630001,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1615949229
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Is it possible or recommended to solve a secondary \"nested\" ODE system from within the step function of the outer system?</p>",
        "id": 230867256,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616075845
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what do you mean?</p>",
        "id": 230868966,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616076465
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; solve a separate system of equations at each time step from within f</p>",
        "id": 230871645,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616077435
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; You can do that</p>",
        "id": 230871817,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616077504
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Ok. But I would imagine it causes issues with sensitivity analysis, right?</p>",
        "id": 230871942,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616077556
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it should just nest the differentiation</p>",
        "id": 230872587,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616077802
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I haven't tried it, but it sounds fun.</p>",
        "id": 230872624,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616077809
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; Wrap that inner solve in an optimizer and you’ve essentially got model predictive control.</p>",
        "id": 230884562,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616081670
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; Although you really would want those inner solves to happen at longer fixed time steps with a callback, not at every step of the simulation.</p>",
        "id": 230885119,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616081852
    },
    {
        "content": "<p>[slack] &lt;grahamas&gt; In ModelingToolkit, is there a way to define a parameter that has numbers as its fields, rather than being a number itself? e.g. I define a struct with fields <code>e</code> and <code>i</code> so that <code>@parameter A</code> (or whatever more complicated definition) can then be in an equation as <code>A.e + A.i</code> ?</p>",
        "id": 230916642,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616092560
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; not right now</p>",
        "id": 230917092,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616092758
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Err, <code>FieldVector</code> from <a href=\"https://github.com/search?q=StaticArrays.jl&amp;type=Repositories\">StaticArrays.jl</a></p>",
        "id": 230917123,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616092773
    },
    {
        "content": "<p>[slack] &lt;grahamas&gt; Also, if I define <code>@parameters theta t</code> and say <code>@variables u(t)</code> and <code>D = Differential(t)</code> and then have in my equation <code>D(u) ~ conv(kernel(theta), u)</code> , will it cleverly notice that <code>kernel(theta)</code> is always the same for given parameterization and precompute it, or do I need to make that a separate parameter?</p>",
        "id": 230917292,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616092834
    },
    {
        "content": "<p>[slack] &lt;grahamas&gt; Hmm this doesn't quite work, I think? With the <code>@parameters</code> macro since it says either Num or Array has no field <code>e</code> when parsing the equations. When I try to dive deeper, I'm not sure how to make the symbol, since the usual way to make an array symbol (what <code>@parameters</code>  does) relies on <code>Sym(name, inds)</code> having numeric <code>inds</code>. Anyway I'm fine with being unable to do this -- would've just been a convenience</p>",
        "id": 230920167,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616094024
    },
    {
        "content": "<p>[slack] &lt;atiyo ghosh&gt; Is there any spatial Gillespie simulation implementation in the diffeq ecosystem?</p>",
        "id": 230941094,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616103162
    },
    {
        "content": "<p>[slack] &lt;Guillaume Ausset&gt; @chrisrackauckas I'm using a BatchFastDense layer, which is basically just FastDense but with K independant channels. Is it something useful I should just upstream ?</p>\n<p>Also, why is there</p>\n<div class=\"codehilite\" data-code-language=\"if\"><pre><span></span><code>    W = @view p[reshape(1:(f.out*f.in),f.out,f.in)]\n  else\n    W = reshape(@view(p[1:(f.out*f.in)]),f.out,f.in)\n  end```\nin the current code ? I don't understand why the order matters on GPU vs CPU\n</code></pre></div>",
        "id": 230941642,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616103427
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; is there a reason you don't just batch using extra columns?</p>",
        "id": 230942611,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616103986
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; not yet. You'd have to build it from <a href=\"https://github.com/search?q=Catalyst.jl&amp;type=Repositories\">Catalyst.jl</a> directly. Though @isaacsas is working towards this kind of thing.</p>",
        "id": 230942705,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616104039
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; There’s a DiffEqJump PR that flattens spatial systems to a big list of reactions, but that isn’t going to be the best approach (though RSSACR can work well here we’ve found in limited testing). We’re missing optimizations to reduce memory use by the dependency graphs that are needed for big graphs/meshes though. This will hopefully get a big push this summer as we have a student interested in working on it if we can get funding, and I’ll hopefully be on sabbatical as of mid-May, so have more time too. If this interests you we’d love to get help with it though over in DiffEqJump.</p>",
        "id": 230943252,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616104337
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; So short answer is you can do it by just making a big list of jumps, but we’re lacking spatially optimized methods like the next sub volume method.</p>",
        "id": 230943357,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616104404
    },
    {
        "content": "<p>[slack] &lt;atiyo ghosh&gt; I'd be happy to help! I used to work on this stuff a while ago and would love to get more involved with it again.</p>",
        "id": 230944363,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616104908
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; If you take a look at the aggregators in DiffEqJump you can see how we’ve done the non-spatial systems.</p>",
        "id": 230946016,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616105759
    },
    {
        "content": "<p>[slack] &lt;atiyo ghosh&gt; Nice. Is a next subvolume method implementation the kind of thing that would be helpful? Happy to raise an issue over at DiffEqJump and move the discussion over there? Whatever is easiest.</p>",
        "id": 230946746,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616106162
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Yeah. We had several nested SSAs we were thinking about, including NSM.</p>",
        "id": 230946913,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616106286
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; There’s an existing spatial jump issue there we can chat in. Feel free to post in it (it hasn’t been updated in a while).</p>",
        "id": 230946981,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616106337
    },
    {
        "content": "<p>[slack] &lt;atiyo ghosh&gt; Sounds good!</p>",
        "id": 230947340,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616106590
    },
    {
        "content": "<p>[slack] &lt;Chaopeng Shen&gt; I'm looking at this example<br>\n<a href=\"https://github.com/SciML/DiffEqOperators.jl/blob/master/examples/heat_equation.jl\">https://github.com/SciML/DiffEqOperators.jl/blob/master/examples/heat_equation.jl</a><br>\nfor some boundary conditions, we need to make changes to the right hand side (RHS). However, if I was trying to wrap up the problem as a ODEProblem, how can I implement changes to the RHS? I see ways to modify A in Ax=b but not b. In fact b was never constructed in this code. In my Fortran code, I have a system of passing in and implementing customized BCs.</p>\n<p>I can of course construct A and b explicitly and solve A\\b, but I'd like to know if there is a more sciml way of doing this.</p>",
        "id": 230973062,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616126683
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; I'm trying to improve type stability in <code>DiffEqUncertainty.expectation()</code> and saw that <code>QuadratureProblem()</code>  was type unstable.  It is unclear to me why.<br>\n<code>@code_warntype QuadratureProblem((x,p)-&gt;sin(x[1]), -1.0, 1.0)</code></p>",
        "id": 231071887,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616179642
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; <code>ODEProblem()</code>  is also unstable<br>\n<code>@code_warntype ODEProblem((du,u,p,t)-&gt;du.=0.0, [-1.0, 2, 3], (0.0,1.0), [-1.0, 2,3])</code></p>",
        "id": 231072058,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616179708
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It relies on constant prop</p>",
        "id": 231072135,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616179749
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; if you put it in a function it should change?</p>",
        "id": 231072150,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616179757
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; ```function qprob_test()<br>\n    QuadratureProblem((x,p)-&gt;sin(x[1]), -1.0, 1.0)<br>\nend</p>\n<p>@code_warntype qprob_test()</p>\n<p>ariables<br>\n  #self#::Core.Compiler.Const(qprob_test, false)<br>\n<a href=\"https://github.com/JuliaLang/julia/issues/108\">#108</a>::var\"<a href=\"https://github.com/JuliaLang/julia/issues/108\">#108</a>#109\"</p>\n<p>Body::Any<br>\n1 ─      (<a href=\"https://github.com/JuliaLang/julia/issues/108\">#108</a> = %new(Main.:(var\"<a href=\"https://github.com/JuliaLang/julia/issues/108\">#108</a>#109\")))<br>\n│   %2 = <a href=\"https://github.com/JuliaLang/julia/issues/108\">#108</a>::Core.Compiler.Const(var\"<a href=\"https://github.com/JuliaLang/julia/issues/108\">#108</a>#109\"(), false)<br>\n│   %3 = Main.QuadratureProblem(%2, -1.0, 1.0)::Any<br>\n└──      return %3```</p>",
        "id": 231072339,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616179835
    },
    {
        "content": "<p>[slack] &lt;devmotion&gt; IIRC it's type stable when you use <code>ODEProblem{true}</code> i.e. if you specify explicitly that it's an in-place function</p>",
        "id": 231072370,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616179853
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh yes, forgot that piece.</p>",
        "id": 231072400,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616179865
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; ahhh.. that does it. Thanks</p>",
        "id": 231072891,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616180068
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; I’m starting to play with ODE solvers, but as I’m a Julia newbie I’m struggling with some basic errors.</p>\n<p>I’d like to solve the following super simple ODE:</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    T_melt = 0.0\n    α, μ, P, T  = params\n    ∂MB = α*P - μ*max(T-T_melt, 0.0)\nend```\nThen I’m defining the parameters and trying to solve the ODE:\n```tspan = (0.0f0,10.0f0)\nMB₀ = 0.0f0\np = Float32[1.3, 3.5, 10.0, 8.0]\nprob = ODEProblem(MB!, MB₀, tspan, p)\n\nsolution = solve(prob, Vern7())```\nBut I’m getting the following error:\n```ERROR: LoadError: MethodError: no method matching similar(::Float32, ::Type{Float32})```\nWhat’s actually going on here? Moreover, function MB! appears as a “generic function with 2 methods”. Why are there two methods?\n\nThanks a lot in advance!\n</code></pre></div>",
        "id": 231079903,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616183177
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I'm not sure what your ODE is supposed to be?</p>",
        "id": 231080068,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616183263
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; one thing i noticed was you have <code>MB!(du, p, t)</code>  but this should have 4 arguments</p>",
        "id": 231080078,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616183269
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; See <a href=\"https://diffeq.sciml.ai/stable/tutorials/ode_example/#Example-2:-Solving-Systems-of-Equations\">https://diffeq.sciml.ai/stable/tutorials/ode_example/#Example-2:-Solving-Systems-of-Equations</a> as an example</p>",
        "id": 231080094,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616183279
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; <a href=\"https://diffeq.sciml.ai/stable/basics/problem/#In-place-vs-Out-of-Place-Function-Definition-Forms\">https://diffeq.sciml.ai/stable/basics/problem/#In-place-vs-Out-of-Place-Function-Definition-Forms</a></p>",
        "id": 231080188,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616183312
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; Also, your input needs to be a vector, even if it’s just one element.</p>\n<p>Edit: for inplace functions, that is</p>",
        "id": 231080217,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616183334
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; And are you sure the dynamics don’t depend on the state variable, too? The way it’s set up here, the return of your function is just going be the same static value every time. So your integration will just give you a constant slope output.</p>",
        "id": 231080708,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616183584
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; Yes, I’ve tried using the initial value as a vector, but the output makes no sense:: <a href=\"https://files.slack.com/files-pri/T68168MUP-F01S2SPHWUU/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F01S2SPHWUU/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F01S2SPHWUU/download/image.png\"><img src=\"https://files.slack.com/files-pri/T68168MUP-F01S2SPHWUU/download/image.png\"></a></div>",
        "id": 231080729,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616183595
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; post the full code</p>",
        "id": 231080865,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616183645
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; This another issue that I’d like to deal with later. To begin with, I’m not even sure if using an ODE solver for this problem is a good idea for this problem. The thing is that 2 of the parameters (P and T) change in time. Parameters cannot change in the ODE solver, so I have no idea on how to represent that here.</p>",
        "id": 231081146,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616183775
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; if they change with time they are variables</p>",
        "id": 231081190,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616183803
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; so where should they be represented? the only thing changing here is tspan</p>",
        "id": 231081378,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616183893
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; <code>function f!(du, u, p, t)\n    P, T = u\n    α, μ, T_melt = p\n    du = α*P - μ*max(T-T_melt, 0.0)\nend</code></p>",
        "id": 231081491,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616183948
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; something like this</p>",
        "id": 231081505,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616183952
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; Well in what way do they change with time? Are they just a function of time? Or are they updated with the derivative function?</p>",
        "id": 231081653,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616184011
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; my post is wrong, du needs to be length 2 as well</p>",
        "id": 231081699,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616184025
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; (@anandj don’t forget to do <code>.=</code> instead of <code>=</code> )</p>",
        "id": 231081850,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616184091
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; that still wouldn't work for him. the rhs of du = ... returns a scalar</p>",
        "id": 231081880,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616184111
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; Oh, that’s true. There needs to be dynamics for both state variables. Unless they are just regular functions of time.</p>",
        "id": 231082041,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616184186
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; The thing is that P and T do not depend on time nor the derivative. That’s why I’m not even sure using an ODE solver for this is a good idea. The whole point of this was to then train an UDE in order to optimize the alpha and mu parameters based on training data, with P and T as input data and MB as target data.</p>",
        "id": 231082134,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616184234
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; Ah, I see. So what does your training data look like? Do P and T have some trajectory over time or are they just static values?</p>",
        "id": 231082518,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616184416
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; P is basically precipitation data, integrated within a certain timestep (hourly, daily…) and T is the average temperature for that timestep</p>",
        "id": 231082596,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616184471
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; i would find it very helpful if you're able to send this code or post it somewhere.<br>\nhave you checked out <a href=\"http://diffeqflux.sciml.ai\">http://diffeqflux.sciml.ai</a></p>",
        "id": 231083781,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616185014
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Btw, @chrisrackauckas, in case you find yourself in need of some examples of UDEs being used \"in the wild\":<br>\n<a href=\"https://meetingorganizer.copernicus.org/EGU21/EGU21-13409.html\">https://meetingorganizer.copernicus.org/EGU21/EGU21-13409.html</a></p>",
        "id": 231159221,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616261248
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; awesome!</p>",
        "id": 231159306,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616261342
    },
    {
        "content": "<p>[slack] &lt;Zhiyu Fu&gt; Is there any off-the-shelf quasi-newton solver with a sparse jacobian? Or more general when jacobian is sparse is there any value added for a quasi-newton method compared to full newton?</p>",
        "id": 231174966,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616278348
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It's always quasi Newton so give it a sparse Jacobian and your wish is granted</p>",
        "id": 231179314,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616283935
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; There's a major difference. Quasi is almost certainly better for almost every case</p>",
        "id": 231179322,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616283957
    },
    {
        "content": "<p>[slack] &lt;Zhiyu Fu&gt; I’m asking this question because the classic quasi newton like Broyden in NLsolve updates on inv(J), which is definitely not optimal when J is sparse</p>",
        "id": 231179383,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616284016
    },
    {
        "content": "<p>[slack] &lt;Zhiyu Fu&gt; so I was wondering any existing algorithm took advantage of the sparse structure</p>",
        "id": 231179417,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616284041
    },
    {
        "content": "<p>[slack] &lt;Zhiyu Fu&gt; &gt; It’s always quasi Newton<br>\nby “it”  do you meant the solver used in DifferentialEquations?</p>",
        "id": 231179487,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616284115
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Chris is probably talking about the DE solver, which if I recall right is a modified Newton method that lags the Jacobian for general nonlinear functions. It’s a good question if there are sparse-optimized quasi-Newton methods available in a Julia nonlinear solver package. Newton-Krylov was discussed some here <a href=\"https://discourse.julialang.org/t/is-there-a-julia-package-that-uses-newton-krylov-method-for-systems-of-nonlinear-equations/36520\">https://discourse.julialang.org/t/is-there-a-julia-package-that-uses-newton-krylov-method-for-systems-of-nonlinear-equations/36520</a></p>",
        "id": 231181295,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616286250
    },
    {
        "content": "<p>[slack] &lt;Zhiyu Fu&gt; &gt; Newton-Krylov was discussed some here<br>\nFantastic. Exactly what I’m looking for. Thanks!</p>\n<blockquote>\n<p>Chris is probably talking about the DE solver, which if I recall right is a modified Newton method that lags the Jacobian for general nonlinear functions<br>\ngood to know. I’ll also check that out.</p>\n</blockquote>",
        "id": 231181359,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616286353
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; This is the DE solver: <a href=\"https://github.com/SciML/DiffEqBase.jl/blob/master/src/nlsolve/newton.jl\">https://github.com/SciML/DiffEqBase.jl/blob/master/src/nlsolve/newton.jl</a></p>",
        "id": 231181429,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616286426
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; You might also ask in general or on Discourse.</p>",
        "id": 231181472,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616286482
    },
    {
        "content": "<p>[slack] &lt;Zhiyu Fu&gt; Thanks. Much appreciated</p>",
        "id": 231181498,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616286515
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Broyden is a bad quasi Newton</p>",
        "id": 231183692,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616289534
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; The methods in the ODE solvers are very specific and not ones you will find outside of ODE solverd</p>",
        "id": 231183703,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616289555
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; You know that you are solving many different but similar nonlinear equations so you reuse components between them, making a quasi Newton that still is semi exact via inverted Jacobians at different steps</p>",
        "id": 231183755,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616289616
    },
    {
        "content": "<p>[gitter] &lt;anicusan&gt; Hello all, I would like to develop a discrete element method (DEM) framework for granular media simulation that’s as well integrated with the SciML stack as possible - granular media being anything from pharma powders to rocks to galaxies (but mainly the former). Though DEM is very closely related to rigid body dynamics and molecular dynamics, it focuses on contact forces between “soft particles” with complex shapes. Fundamentally, it is just a huge system of ODEs or DAEs, but “huge” is the key word - with granular media, you need at least a million particles to capture complex dynamics. So using collision detection acceleration structures (octrees or bounding volume hierarchies / BVH) and multi-node parallelism is necessary. Having close integration with packages such as <code>ModellingToolkit.jl</code> would of course be amazing, but I wonder how well they would play with e.g. BVHs or non-standard DE values computations (computing the contact force between two particles involves finding their intersection distance, which would be done in an external C library) - things like sparsity detection or simplifications would not be possible, would they?</p>",
        "id": 231186235,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616293059
    },
    {
        "content": "<p>[gitter] &lt;anicusan&gt; This is a rather broad / open-ended question, but any pointers from more experienced SciML developers on how such a specialised simulator might be integrated with the rest of the stack would be greatly appreciated!</p>",
        "id": 231186313,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616293177
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @anicusan for the C calls you would need to register a few things, define derivatives, etc. And then it should play nicely</p>",
        "id": 231189653,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616297555
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; For the system you describe we may need to have state selection in MTK, which will be there but isn't right now. About a month or so.</p>",
        "id": 231189654,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616297559
    },
    {
        "content": "<p>[gitter] &lt;anicusan&gt; What exactly does “state selection” in ModellingToolkit refer to? If you have any resource I could read on it, it might be useful</p>",
        "id": 231218958,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616336267
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; See Dymola symbolics articles. It has to do with nonlinear tearing and choosing variables to get nonsingular systems. It shows up in rigid body dynamics if you want to make it robust</p>",
        "id": 231220386,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616337941
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Hey folks, I just wanted to check, but for <code>DiscreteProblem</code>, the timestep is expected to be 1 right. Meaning if I have a problem like<br>\n<code>prob = DiscreteProblem(modelfunc!, u0, tspan, params)</code><br>\nand <code>tspan = [0, 20]</code>, then that should represent 2 timesteps right. It will not discretize that range into something smaller? For some reason I am getting so relatively large numbers even with low probabilities. So I was just going through each possible source where I might me messing things up.</p>",
        "id": 231230070,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616348593
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you can choose a dt but it defaults to 1</p>",
        "id": 231230278,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616348828
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Yeah, that is what I thought. I am wondering if I am falling afoul of any of those passing a reference issues.  Here is a very simple toy example. I don't want to pull you into debugging too much here, but the julia references stuff is still a little ambiguous to me. I am using <code>du</code> as a preallocated array. But then I use it as a parameter for my binomial distribution--in that number represents the number of trials, with a given rate. It does not seem like this should be an issue, but I am just trying to cover my bases.</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    #step1\n    du[1] = u0.group1 - rand(Binomial(u0.group1, p.rag1))\n    du[2] = u0.group2 - rand(Binomial(u0.group2, p.rag2))\n\n    # step2\n    du[1] += rand(Binomial(du[1], p.rhag1))   &lt;--- is using du[1] here okay, or does it mess up the references?\n    du[2] += rand(Binomial(du[2], p.rhag2))\n    du```\n</code></pre></div>",
        "id": 231231023,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616349532
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; looks fine</p>",
        "id": 231231192,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616349664
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Okay that is good to know. I was worried about having <code>du[1]</code> on both sides. I mean it would normally be fine in python, but I was a bit less certain in julia. But all good. I commence to step through my code <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>.</p>",
        "id": 231231294,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616349749
    },
    {
        "content": "<p>[gitter] &lt;jlchan&gt; For an ODE system like the following</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span> <span class=\"n\">rhs!</span><span class=\"p\">(</span><span class=\"n\">dQ</span><span class=\"p\">,</span><span class=\"n\">Q</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"nd\">@view</span> <span class=\"n\">Q</span><span class=\"p\">[</span><span class=\"o\">:</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nd\">@view</span> <span class=\"n\">Q</span><span class=\"p\">[</span><span class=\"o\">:</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n    <span class=\"n\">dQ</span><span class=\"p\">[</span><span class=\"o\">:</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">.=</span> <span class=\"n\">u</span>\n    <span class=\"n\">dQ</span><span class=\"p\">[</span><span class=\"o\">:</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">.=</span> <span class=\"n\">v</span>\n    <span class=\"k\">return</span> <span class=\"nb\">nothing</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>I'm finding that storing <code>Q</code> as a VectorOfArray with underlying array of arrays storage works</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">Q</span> <span class=\"o\">=</span> <span class=\"n\">VectorOfArray</span><span class=\"p\">([</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">),</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)])</span>\n</code></pre></div>\n<p>but using an underlying <code>SVector</code> format doesn't.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">Q</span> <span class=\"o\">=</span> <span class=\"n\">VectorOfArray</span><span class=\"p\">(</span><span class=\"n\">SVector</span><span class=\"p\">{</span><span class=\"mi\">2</span><span class=\"p\">}(</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">),</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)))</span>\n</code></pre></div>\n<p>Is this expected?</p>\n<p>The <code>SVector</code> gives an error <code>ERROR: LoadError: MethodError: no method matching OrdinaryDiffEq.Tsit5Cache(::VectorOfArray{Float64,2,SArray{Tuple{2},Array{Float64,1},1,2}}, ...</code></p>",
        "id": 231237309,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616356351
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; share a full example as an issue in OrdinaryDiffEq.</p>",
        "id": 231237581,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616356716
    },
    {
        "content": "<p>[gitter] &lt;jlchan&gt; will do - thanks</p>",
        "id": 231237588,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616356736
    },
    {
        "content": "<p>[gitter] &lt;jlchan&gt; done - at <a href=\"https://github.com/SciML/OrdinaryDiffEq.jl/issues/1365\">https://github.com/SciML/OrdinaryDiffEq.jl/issues/1365</a></p>",
        "id": 231237747,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616356889
    },
    {
        "content": "<p>[slack] &lt;Jonas&gt; A quick question about average lifetimes of subsequent population. I have looked for the answer but couldn't find anything thus far. Any pointers appreciated. The question can one calculate the average lifetime over both population combine for the following equations:</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    LpDCm, LpDCb = u\n    R_pDC = R\n    p_pDCbm, δ_pDCbm, δ_pDCb, λ_pDC = p[1:(end-4)]\n    fr, delta, frac, tau = p[(end-3):end]\n\n    U = U_func(t, fr, delta, frac, tau)\n\n    du[1] = p_pDCbm * U - (δ_pDCbm + λ_pDC) * LpDCm ##pDCm\n\n    du[2] = λ_pDC * R_pDC * LpDCm - δ_pDCb * LpDCb ##pDCb\nend```\nwhere the average lifetime for the two population are defined as `τ1 = 1/(δ_pDCbm + λ_pDC)` and  `τ2 = 1/δ_pDCb` . So my question can one calculate the average lifetime a cell spends in the two states combined before \"dying\"?\n</code></pre></div>",
        "id": 231250427,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616371813
    },
    {
        "content": "<p>[gitter] &lt;RossSmyth&gt; Hello, I'm looking at using Julia for some simulation work, as soon I will not be able to use MATLAB . In MATLAB there is a function called <a href=\"https://www.mathworks.com/help/symbolic/sym.equationstomatrix.html\">equationsToMatrix()</a> and was wondering if there is an equivalent in the SciML ecosystem? I didn't see one in a look through some documentation. I've found it pretty useful for evaluating coupled ODEs in the past by converting to a mass matrix Ax=B form.</p>",
        "id": 231266874,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616392737
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @RossSmyth Just use <a href=\"https://github.com/search?q=ModelingToolkit.jl&amp;type=Repositories\">ModelingToolkit.jl</a> or <a href=\"https://github.com/search?q=Symbolics.jl&amp;type=Repositories\">Symbolics.jl</a> directly and calculate the Jacobian.</p>",
        "id": 231289214,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616409334
    },
    {
        "content": "<p>[gitter] &lt;HenriLaurie&gt; Quick question: is it possible to use callbacks for a DDEProblem? I ask because I get error messages, likely my own fault, but if it isn't possible I can stop looking ;-)</p>",
        "id": 231290392,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616409977
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes, they work on DDEs</p>",
        "id": 231291011,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616410357
    },
    {
        "content": "<p>[gitter] &lt;HenriLaurie&gt; Great! ... and bugs found (red face icon here)</p>",
        "id": 231291302,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616410520
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <span aria-label=\"rage\" class=\"emoji emoji-1f621\" role=\"img\" title=\"rage\">:rage:</span></p>",
        "id": 231291505,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616410623
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; Is there a convenient way to determine the type of an <code>ODESolution</code>  prior to solve, e.g. to make an empty array to push into?</p>",
        "id": 231309341,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616419801
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>Core.return_type</code></p>",
        "id": 231309598,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616419884
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; <code>Core.Compiler.return_type</code> ??</p>",
        "id": 231310449,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616420171
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; Do kwargs ever come into play for the solution type? There is no docs for <code>return_type</code> , so I'm unsure how you would use it with kwargs</p>",
        "id": 231312019,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616420737
    },
    {
        "content": "<p>[slack] &lt;simeondavidschaub99&gt; You can do something like</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">f</span> <span class=\"p\">(</span><span class=\"n\">generic</span> <span class=\"k\">function</span> <span class=\"n\">with</span> <span class=\"mi\">1</span> <span class=\"n\">method</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">Core</span><span class=\"o\">.</span><span class=\"n\">Compiler</span><span class=\"o\">.</span><span class=\"n\">return_type</span><span class=\"p\">(</span><span class=\"n\">Core</span><span class=\"o\">.</span><span class=\"n\">kwfunc</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">),</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"n\">typeof</span><span class=\"p\">((</span><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)),</span> <span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">),</span> <span class=\"kt\">Float64</span><span class=\"p\">})</span>\n<span class=\"kt\">Float64</span><span class=\"sb\">```</span>\n<span class=\"sb\">Note that `</span><span class=\"n\">return_type</span><span class=\"sb\">` is not a stable API though, so results are allowed to become less precise in future Julia versions.</span>\n</code></pre></div>",
        "id": 231313845,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616421452
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; @chrisrackauckas I'd like to add the option to return an <code>EnsembleSolution</code>  for all trajectories used in <code>expectation</code> . My thought was simply to <code>push!</code>  the DE Solution in the integrand and then construct the <code>EnsembleSolution</code> .  Hence the Q Re: <code>return_type</code>. Any thoughts on a cleaner approach?</p>",
        "id": 231318138,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616423083
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>return_type</code> is fine</p>",
        "id": 231318204,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616423111
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It's not going to break in DiffEq: we'll just open issues and say inference is broken to block the next Julia release if it doesn't work <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 231318263,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616423131
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; I also hope to clean up a lot of the type instability and make it more general wrt types, but am hitting a lot of box issues w/ captured variables in the integrand. Any general advice?</p>",
        "id": 231318987,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616423390
    },
    {
        "content": "<p>[slack] &lt;I Mas&gt; hi, I saw this <a href=\"https://mtk.sciml.ai/stable/tutorials/acausal_components/\">https://mtk.sciml.ai/stable/tutorials/acausal_components/</a> and the comparison with other tools here <a href=\"https://mtk.sciml.ai/dev/comparison/\">https://mtk.sciml.ai/dev/comparison/</a>. I wonder if it is possible to model acausal components with modal behaviour and transition conditions in MTK ?</p>",
        "id": 231320297,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616423810
    },
    {
        "content": "<p>[slack] &lt;I Mas&gt; in simscape for example they call it mode charts <a href=\"https://de.mathworks.com/help/physmod/simscape/lang/mode-chart-modeling.html\">https://de.mathworks.com/help/physmod/simscape/lang/mode-chart-modeling.html</a></p>",
        "id": 231320644,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616423956
    },
    {
        "content": "<p>[slack] &lt;simeondavidschaub99&gt; If you have closures make sure all variables that closure captures are only assigned to once or wrap the closure in smthg like <code>let x=x; ... end</code></p>",
        "id": 231321352,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616424218
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you get to the same place using IfElse.ifelse</p>",
        "id": 231321629,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616424324
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; But what if you want to write to the variable?</p>",
        "id": 231323583,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616424978
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; <code>function outer(x::AbstractArray{T}) where T\n    f = sin # in practice this would be solve()\n    A = Core.Compiler.return_type(f, (T,))[] \n    inner = function(y)\n        res = f(y)\n        push!(A, res)\n        return res\n    end\n    map(inner, x), A  # in practice map is a highel level funtion picking values of x, like hquadrature\nend</code></p>",
        "id": 231323612,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616424989
    },
    {
        "content": "<p>[slack] &lt;I Mas&gt; thank you...i think it would be helpful to have as an example a rectifier circuit: sin voltage source--Resistor---ideal diode-- gnd... how would you implement the component equaiton for the ideal diode. In modelica they have a curve parameter which either has the meaning of voltage or current depending if the diode is off or on..</p>",
        "id": 231323740,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616425034
    },
    {
        "content": "<p>[slack] &lt;simeondavidschaub99&gt; That should be fine, is there still boxing in this example?</p>",
        "id": 231323958,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616425106
    },
    {
        "content": "<p>[slack] &lt;I Mas&gt; ideal diode:  when it is off current is 0 (voltage arbitrary negative), when it is on voltage is 0 (current arbitrary positive)</p>",
        "id": 231323982,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616425116
    },
    {
        "content": "<p>[slack] &lt;I Mas&gt; and the variable off is a boolean variable in modelica</p>",
        "id": 231324287,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616425223
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; Is this Ok b/c A is already heap allocated? There is no boxing here. I missed a part in my MWE. Highlighted below.</p>",
        "id": 231324412,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616425262
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; What about</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    counter = 0\n    inner = function(y)\n        counter += 1\n        return y\n    end\n    map(inner, x), counter\nend```\n</code></pre></div>",
        "id": 231324680,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616425348
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; Here, counter is boxed, but if you use a <code>let</code>  block the counter returned by <code>outer</code>  will always be zero</p>",
        "id": 231325066,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616425461
    },
    {
        "content": "<p>[slack] &lt;simeondavidschaub99&gt; Yes, that's bad since you are reassigning <code>counter</code>. See <a href=\"https://github.com/JuliaLang/julia/issues/15276\">https://github.com/JuliaLang/julia/issues/15276</a></p>",
        "id": 231325177,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616425498
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; got it!</p>",
        "id": 231325488,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616425590
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; For the first MWE above I'm also surprised by <code>@code_warntype</code> that <code>A</code>  is not inferred.</p>",
        "id": 231325662,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616425658
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; if you end up making the rectifier, it'd be a great example to have <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 231325672,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616425661
    },
    {
        "content": "<p>[slack] &lt;simeondavidschaub99&gt; Use <code>Core.Compiler.return_type(f, Tuple{T})</code> instead of <code>Core.Compiler.return_type(f, (T,))</code>. The tfunc is only specialized for the former case.</p>",
        "id": 231326462,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616425922
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; This has been extremely helpful. Thank you!</p>",
        "id": 231326757,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616426025
    },
    {
        "content": "<p>[slack] &lt;I Mas&gt; i just copied parts of the ideal diode model from modelica as an example:</p>\n<div class=\"codehilite\" data-code-language=\"..\"><pre><span></span><code>Boolean off(start=true) \"Switching state\";\n...\nequation\n  v = (s*unitCurrent)*(if off then 1 else Ron) + Vknee;\n  i = (s*unitVoltage)*(if off then Goff else 1) + Goff*Vknee;\n  LossPower = v*i;\n  off = s &lt; 0;```\n</code></pre></div>",
        "id": 231331934,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616427568
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; Quick follow up, It is unclear to me how to extend this in this following MWE.</p>\n<div class=\"codehilite\" data-code-language=\"f1\"><pre><span></span><code>function f2(x,args...; kwargs...)\n    T = Core.Compiler.return_type(...)\n    result = T[]\n    for ii = 1:100\n        push!(result,f1(x,args...;kwargs...))\n    end\n    result\nend```\n</code></pre></div>",
        "id": 231363408,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616438738
    },
    {
        "content": "<p>[slack] &lt;simeondavidschaub99&gt; What are you having problems with?</p>",
        "id": 231363957,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616438975
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; how exactly to call <code>return_type</code>  is such a situation. I cannot splat the args into the <code>Tuple{}</code></p>",
        "id": 231364210,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616439060
    },
    {
        "content": "<p>[slack] &lt;simeondavidschaub99&gt; Does <code>typeof(args)</code> not work?</p>",
        "id": 231364380,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616439134
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; I'm retrying right now, but I don't think so</p>",
        "id": 231364428,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616439156
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; For this <code>T=Union{}</code></p>",
        "id": 231364638,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616439250
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; <code>function f2(x,args...; kwargs...)\n    T = Core.Compiler.return_type(Core.kwfunc(f1), Tuple{typeof((z=5,w=6)), typeof(f1), typeof(args)})\n    result = T[]\n    for ii = 1:100\n        push!(result,f1(x,args...;kwargs...))\n    end\n    result\nend</code></p>",
        "id": 231364643,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616439254
    },
    {
        "content": "<p>[slack] &lt;simeondavidschaub99&gt; That probably means it would be a MethodError. What exactly did you try?</p>",
        "id": 231364843,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616439334
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; Yes, a method error on <code>convert</code>  when doing the push</p>\n<div class=\"codehilite\" data-code-language=\"f1\"><pre><span></span><code>function f2(x,args...; kwargs...)\n    T = Core.Compiler.return_type(Core.kwfunc(f1), Tuple{typeof((z=5,w=6)), typeof(args)})\n    result = T[]\n    for ii = 1:100\n        push!(result,f1(x,args...;kwargs...))\n    end\n    result\nend\n\nf2(3,4; z=1, w=10)```\n</code></pre></div>",
        "id": 231365056,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616439411
    },
    {
        "content": "<p>[slack] &lt;simeondavidschaub99&gt; Notice the <code>typeof(f)</code> in the tuple type in my example above.</p>",
        "id": 231365288,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616439511
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; I'm sorry, I forgot that I changed that to see it was maybe a typo. You get the same result with<br>\n<code>T = Core.Compiler.return_type(Core.kwfunc(f1), Tuple{typeof((z=5,w=6)), typeof(f1), typeof(args)})</code></p>",
        "id": 231365551,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616439609
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; leads to <code>MethodError: convert(::Type{Union{}}, ::Int64) is ambiguous.</code>  during push. I suspect that is from <code>return_type</code>  not being call properly</p>",
        "id": 231365771,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616439669
    },
    {
        "content": "<p>[slack] &lt;simeondavidschaub99&gt; You are passing another argument x, so you will need to specify that as well</p>",
        "id": 231365814,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616439683
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; <code>T = Core.Compiler.return_type(Core.kwfunc(f1), Tuple{typeof((z=5,w=6)), typeof(f1), typeof(x),typeof(args)})</code>  produces the same</p>",
        "id": 231366012,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616439747
    },
    {
        "content": "<p>[slack] &lt;simeondavidschaub99&gt; Oh, sorry, I misunderstood above. <code>typeof(x)</code> won't work here since that's just another tuple type. You'll need something like <code>typeof.(args)...</code> then</p>",
        "id": 231366505,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616439941
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; That works... for some reason I thought you could splat into <code>{}</code></p>",
        "id": 231366719,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616440026
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; Sorry to keep bothering you, but my next challenge is how to generalize <code>typeof((z=5,w=6))</code>  to <code>kwargs...</code></p>",
        "id": 231366910,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616440095
    },
    {
        "content": "<p>[slack] &lt;simeondavidschaub99&gt; <code>typeof(NamedTuple(kwarg))</code></p>",
        "id": 231367210,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616440220
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; Thats what I expected, but<br>\n<code>MethodError: no method matching NamedTuple(::Base.Iterators.Pairs{Symbol,Int64,Tuple{Symbol,Symbol},NamedTuple{(:z, :w),Tuple{Int64,Int64}}})</code></p>",
        "id": 231367326,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616440266
    },
    {
        "content": "<p>[slack] &lt;simeondavidschaub99&gt; Might only work on newer versions. I think <code>values</code> might still work instead of NamedTuple though</p>",
        "id": 231367523,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616440350
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; new, as in v1.6? I am on 1.5.3. <code>values</code>  does the trick</p>",
        "id": 231367714,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616440438
    },
    {
        "content": "<p>[slack] &lt;simeondavidschaub99&gt; Might even be 1.7, not sure</p>",
        "id": 231367837,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616440478
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; Thank you for being so generous w/ your time.</p>",
        "id": 231367949,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616440519
    },
    {
        "content": "<p>[slack] &lt;simeondavidschaub99&gt; No problem</p>",
        "id": 231368034,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616440555
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; Seems like their should be a macro for doing this <code>@return_type f1(x, args...;kwargs...)</code></p>",
        "id": 231368157,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616440582
    },
    {
        "content": "<p>[slack] &lt;Guillaume Ausset&gt; I'm trying to make FastChain twice differentiable (it somehow mutates arrays)</p>\n<p>I rewrote FastChain as:</p>\n<div class=\"codehilite\" data-code-language=\"split_at\"><pre><span></span><code>function ChainRulesCore.rrule(\n  ::typeof(split_at),\n  p::AbstractVector{S},\n  idx::Int,\n  ) where S\n\n  function split_at_pullback(Δ)\n    return (\n      ChainRulesCore.NO_FIELDS,\n      ChainRulesCore.@thunk(vcat(Δ...)),\n      ChainRulesCore.NO_FIELDS,\n    )\n  end\n  split_at(p, idx), split_at_pullback\nend\n\napplychain(::Tuple{}, x, p) = x\n# applychain(fs::Tuple, x, p) = applychain(Base.tail(fs), first(fs)(x,p[1:paramlength(first(fs))]), p[(paramlength(first(fs))+1):end])\nfunction DiffEqFlux.applychain(fs::Tuple, x, p)\n  p₁, p₂ = split_at(p, DiffEqFlux.paramlength(first(fs)))\n  DiffEqFlux.applychain(Base.tail(fs), first(fs)(x, p₁), p₂)\nend\n(c::FastChain)(x,p) = applychain(c.layers, x, p)```\nYes it's ugly 🙂\n\nIf I run:\n\n```nn = FastChain(\n    FastDense(1,2, selu),\n    FastDense(2,1),\n    )\np = initial_params(nnb)\n\nfunction ftest(p)\n    gz, back = Zygote.pullback(z -&gt; nn(z, p), rand(1, 100))\n    back(gz)[1]\nend\n\ny, back = Zygote.pullback(ftest, p)\nback(y)[1]```\nI get a stray `Zero()` . Any ideas ?\n\n```8-element Array{Any,1}:\n -4.961157245626697\n  4.776112584950887\n -3.0912947608064307\n  3.257924132096858\n -3.3781788944196873\n -2.207525737666333\n  3.504429379232563\n   Zero()```\n</code></pre></div>",
        "id": 231394024,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616451916
    },
    {
        "content": "<p>[slack] &lt;atiyo ghosh&gt; I'm struggling to try and reduce allocations made when using <code>GhostDerivativeOperator</code>s from <code>DiffEqOperators</code> . Example:</p>\n<div class=\"codehilite\" data-code-language=\"d2x\"><pre><span></span><code>bcx = Neumann0BC(1.0, 1)\nop = d2x * bcx\n\nu = zeros(5,5)\nu[3,3] = 1.0\n@btime du = op * u # 99.501 μs (1155 allocations: 95.17 KiB)\n\ndu = zeros(5,5)\n@btime mul!(du, op, u) # 97.665 μs (1154 allocations: 94.89 KiB)```\nI was hoping for a bigger improvement from the inplace multiplication. Is this a necessary limitation of the operators being driven by convolutions?\n</code></pre></div>",
        "id": 231396226,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616453242
    },
    {
        "content": "<p>[slack] &lt;Ilia&gt; this <a href=\"https://www.lifl.fr/~sedoglav/Load/Sedoglavic2002.pdf\">https://www.lifl.fr/~sedoglav/Load/Sedoglavic2002.pdf</a> algorithm is efficient for local identifiability analysis, I started putting together some draft code for it, this is not ready yet, but any feedback is welcome: <a href=\"https://github.com/iliailmer/local-identifiability\">https://github.com/iliailmer/local-identifiability</a><br>\ni wonder how Symbolics/MTK will work with AbtractAlgebra and modular arithmetic for power series.</p>",
        "id": 231416268,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616468801
    },
    {
        "content": "<p>[slack] &lt;AlCap23&gt; Very nice! I was reading up on identifiability from the Lie Algebraic perspective the last two days and wanted to implement a similar approach, albeit from a brute force perspective over a known trajectory. I will read the paper a little more thoroughly and provide some feedback <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 231441164,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616491212
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; ```julia&gt; ReverseDiffVJP(compile=false)<br>\nERROR: MethodError: no method matching ReverseDiffVJP(; compile=false)<br>\nClosest candidates are:<br>\n  ReverseDiffVJP() at /home/arno/.julia/packages/DiffEqSensitivity/JqbFp/src/sensitivity_algorithms.jl:134 got unsupported keyword argument \"compile\"<br>\n  ReverseDiffVJP(::Any) at /home/arno/.julia/packages/DiffEqSensitivity/JqbFp/src/sensitivity_algorithms.jl:134 got unsupported keyword argument \"compile\"<br>\nStacktrace:<br>\n [1] top-level scope at REPL[27]:1</p>\n<p>julia&gt; ReverseDiffVJP(compile=true)<br>\nERROR: MethodError: no method matching ReverseDiffVJP(; compile=true)<br>\n...</p>\n<p>julia&gt; ReverseDiffVJP(true)<br>\nReverseDiffVJP{true}()</p>\n<p>julia&gt; ReverseDiffVJP(false)<br>\nReverseDiffVJP{false}()```<br>\ncompile does not seem to be a keyword like the docs suggest. I would fix this myself but I don't know in which direction, change the docs or actually make it a keyword argument.</p>",
        "id": 231468187,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616505531
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It's a default argument IIRC</p>",
        "id": 231470348,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616506397
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; In the codebase yes, but the docs use it as kw I think.</p>",
        "id": 231471488,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616506815
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh interesting</p>",
        "id": 231476479,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616508733
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the docs should get updated then</p>",
        "id": 231476484,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616508737
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I'm like 99% sure that I have done <code>ReverseDiffVJP(compile=true)</code> and it worked fine. So either something changed or maybe you have an old version?</p>",
        "id": 231477097,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616509009
    },
    {
        "content": "<p>[slack] &lt;Guillaume Ausset&gt; How do I diagnose a slow GPU solve ? It's currently very slow but GPU usage is also very low. I'd expect the GPU usage to at least be high. CPU usage is also surprisingly high, while I would expect nothing to happen on the CPU. :/</p>",
        "id": 231492349,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616514230
    },
    {
        "content": "<p>[slack] &lt;Guillaume Ausset&gt; Is there an easy way to do mixed GPU / CPU profiling and see where the time is spent ?</p>",
        "id": 231492480,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616514261
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; the usual thing is like scalar indexing, but that throws a warning</p>",
        "id": 231492503,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616514266
    },
    {
        "content": "<p>[slack] &lt;Guillaume Ausset&gt; I've disabled scalar indexing though</p>\n<p>CUDA.allowscalar(false)</p>\n<p>But yes that would have been my guess.</p>\n<p>My two current guesses are:</p>\n<ol>\n<li>a type instability cause my gradients to be recompiled every time</li>\n<li>I just suck at programming</li>\n</ol>",
        "id": 231492677,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616514332
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; haha same xd. sorry i can't help u more <span aria-label=\"oh no\" class=\"emoji emoji-1f615\" role=\"img\" title=\"oh no\">:oh_no:</span></p>",
        "id": 231493838,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616514719
    },
    {
        "content": "<p>[slack] &lt;Emir Hadzic&gt; is the jacobian generation faster for a model that's been written in modeling toolkit rather than for a model I used modelingtoolkitize for?</p>",
        "id": 231552230,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616537560
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it should be about the same, sans the tracing time.</p>",
        "id": 231552429,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616537697
    },
    {
        "content": "<p>[slack] &lt;Paul Barrett&gt; I came across a paper entitled “Geometric Algebra Levenberg-Marquardt”, that uses projective geometric algebra (PGA) for automatic differentiation. To the experts on autodiff, how widely used are PGA techniques for autodiff? Are there limitations to such techniques?</p>",
        "id": 231637897,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616594375
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I mean, the method of <a href=\"https://link.springer.com/chapter/10.1007/978-3-030-22514-8_51\">https://link.springer.com/chapter/10.1007/978-3-030-22514-8_51</a> isn't surprising. It's using forward-mode AD to compute matrix-free Hessian-vector products and then noting that CG converges within N iterations on positive definite matrices.</p>",
        "id": 231643518,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616596287
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Not only is it not optimal (forward-over-reverse would be better), but it's an overly complicated way of computing something that is well-known in other terms. It reminds me of category theory <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 231643698,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616596334
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Geometric algebra isn't bad though since it gives a nice algebraic way to compute and derive a ton of things, but most of what it's used for generally doesn't end up being too surprising.</p>",
        "id": 231643797,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616596365
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; So this is your take on category theory. <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 231644314,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616596519
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Also, it’s worth noting that CG doesn’t quite do that in practice, because the loss of orthogonality in finite precision arithmetic.</p>",
        "id": 231644901,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616596737
    },
    {
        "content": "<p>[slack] &lt;Paul Barrett&gt; Note that PGA has some nice successes in computer graphics, particularly in computing intersections of points, lines, and spheres, if you include conformal GA. I find geometric algebra preferable to complex algebra, it’s not as restrictive, and makes it easier to combine different spaces in a single model.</p>",
        "id": 231648369,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616597949
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; is this your full take on CT @chrisrackauckas</p>",
        "id": 231652040,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616599043
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; 🥺👉👈</p>",
        "id": 231652179,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616599087
    },
    {
        "content": "<p>[slack] &lt;Marco&gt; Hi all. I hope this is the right place to ask. Otherwise, please feel free to re-direct me! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<p>I am encountering an issue with the minimal MLK non-working example below:</p>\n<p><code>using Flux</code><br>\n<code>using Symbolics</code><br>\n<code>using DiffEqFlux</code><br>\n<code>using ModelingToolkit</code><br>\n<code>using NeuralPDE</code><br>\n<code>using GalacticOptim</code></p>\n<p><code>@parameters t, l, r</code><br>\n<code>TMAX = 1000.0</code><br>\n<code>LMAX = 300.0</code><br>\n<code>RMAX = 10.0</code></p>\n<p><code>Dt  = Differential(t)</code><br>\n<code>Dl  = Differential(l)</code><br>\n<code>Dr  = Differential(r)</code></p>\n<p><code>@variables u1(..), u2(..)</code></p>\n<p><code>domains = [</code><br>\n<code>t in ModelingToolkit.IntervalDomain(0.0,TMAX),</code><br>\n<code>l in ModelingToolkit.IntervalDomain(0.0,LMAX),</code><br>\n<code>r in ModelingToolkit.IntervalDomain(0.0,RMAX), ]</code><br>\n<code>steps = [ 10,10,10 ]</code> <br>\n<code>dxs = [</code><br>\n<code>(domains[i].domain.upper-domains[i].domain.lower)/steps[i]</code><br>\n<code>for i in 1:length(domains) ]</code><br>\n<code>indvars = [t,l,r]</code><br>\n<code>depvars = [u1,u2]</code></p>\n<p><code>inner = 30</code><br>\n<code>chains = [</code><br>\n<code>FastChain(</code><br>\n<code>FastDense(length(indvars),inner,Flux.σ),</code><br>\n<code>FastDense(inner,inner,Flux.σ),</code><br>\n<code>FastDense(inner,inner,Flux.σ),</code><br>\n<code>FastDense(inner,1))</code><br>\n<code>for u in depvars]</code><br>\n<code>strategy = GridTraining(dxs)</code><br>\n<code>discretization = PhysicsInformedNN(chains, strategy)</code></p>\n<p><code>I(t) = (t&lt;=TMAX/2) ? -1.0 : 1.0</code><br>\n<code>ModelingToolkit.@register I(t)</code></p>\n<p><code>eqs = [</code><br>\n<code>Dl(u1(t,l,r)) ~ 0.f0,</code><br>\n<code>Dr(u1(t,l,r)) ~ 0.f0,</code><br>\n<code>Dt(u2(t,l,r)) ~ 0.f0,</code><br>\n<code>Dl(u2(t,l,r)) ~ 0.f0,</code><br>\n<code>Dr(u2(t,l,r)) ~ 0.f0, ]</code><br>\n<code>bcs = [</code><br>\n<code>u1(t,0,0) ~ I(t),</code><br>\n<code>u2(0,0,r) ~ 2.f0, ]</code></p>\n<p><code>max_iterations = 3</code><br>\n<code>pde_system = PDESystem(eqs,bcs,domains,indvars,depvars)</code><br>\n<code>prob = discretize(pde_system,discretization)</code></p>\n<p>which produces an</p>\n<p><code>ERROR: LoadError: BoundsError: attempt to access 0-element Vector{Vector{Any}} at index [1]</code> </p>\n<p>in NeuralPDE/<code>pinns_pde_solve.jl</code> :get_argument() while returning the <code>first.(args_)</code> , that I think depends on the fact that <code>e isa Expr</code> is False in <code>find_thing_in_expr()</code>  for the <code>eqs</code> above.</p>\n<p>Any suggestions? :-D</p>",
        "id": 231655292,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616600155
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Is it wrong?</p>",
        "id": 231657529,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616600866
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 231660307,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616601801
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 231660498,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616601855
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; open an issue.</p>",
        "id": 231701404,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616616970
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; &gt; Note that PGA has some nice successes in computer graphics, particularly in computing intersections of points, lines, and spheres, if you include conformal GA. I find geometric algebra preferable to complex algebra, it’s not as restrictive, and makes it easier to combine different spaces in a single model.<br>\nDid those require PGA? From what I've seen, it's a neat language to simplify some coding, but I haven't seen a result which \"requires\" it.</p>",
        "id": 231701485,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616617010
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I think by definition anything you can do with it can just be done with simple vectors and calculus?</p>",
        "id": 231701501,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616617024
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I think you just need to make sure you add version to the Poly types for that stuff to work. Ask @shashi for some help there. I think he already has AbstractAlgebra wrapped for a few things.</p>",
        "id": 231702049,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616617257
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; open an issue.</p>",
        "id": 231702124,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616617284
    },
    {
        "content": "<p>[slack] &lt;mason.protter&gt; The Geometric Algebra True Believer™ would say</p>\n<blockquote>\n<p>sure, but you could also say the exact same thing about complex numbers. They're still very useful and nice</p>\n</blockquote>",
        "id": 231702127,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616617286
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Zygote isn't generally twice differentiable so I don't know if it'll work. Open an issue to track it?</p>",
        "id": 231702173,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616617317
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Complex is useful because complex analysis easily identifies a whole set of really powerful tools with holomorphic functions. If you didn't have all of those properties of holomorphic functions, with using complex analysis as the only simple way to prove some of those statements, then I think it would get a lot less use.</p>",
        "id": 231702404,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616617424
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; You kind of have the opposite with geometric algebra and category theory: you prove the statement without it first, and then show you can rewrite the statement in a nicer way.</p>",
        "id": 231702507,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616617450
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I think it's similar to the fact that you can write down Maxwell's equations with quaternions: it's cool but <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 231702561,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616617475
    },
    {
        "content": "<p>[slack] &lt;mason.protter&gt; Eh, GA does actually generalize many statements about complex numbers to statements about n-dimensional vector algebra / calculus</p>",
        "id": 231702625,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616617502
    },
    {
        "content": "<p>[slack] &lt;mason.protter&gt; It's not the most useful framework as we've already developed this machinery in other languages, but I don't thunk your characterization is fair</p>",
        "id": 231702708,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616617540
    },
    {
        "content": "<p>[slack] &lt;mason.protter&gt; The other thing I'd mention is that in Projective GA, you have a big vector space (whose elements represent points, lines, planes, etc) with a multiplication table that's somewhat spars (unlike regular GA), so I'd imagine that there's more room for more efficient computations in PGA than using matrices</p>",
        "id": 231703008,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616617672
    },
    {
        "content": "<p>[slack] &lt;mason.protter&gt; That is, the GA of 3D space in matrix form would look like</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>σ0 = SA[1 0 0 0\n        0 1 0 0\n        0 0 1 0\n        0 0 0 1];\n\nσ1 = SA[0 0 1 0\n        0 0 0 1\n        1 0 0 0\n        0 1 0 0];\n\nσ2 = SA[0  0  0  1\n        0  0 -1  0\n        0 -1  0  0\n        1  0  0  0];\n\nσ3 = SA[1 0  0  0\n        0 1  0  0\n        0 0 -1  0\n        0 0  0 -1];```\nand then the projective extension of that would be\n```⊗(a, b) = SMatrix(kron(a,b))\nh0 = SA[1 0; 0 1]\nh1 = SA[0 1; 0 0]\ne0 = σ0 ⊗ h0\ne1 = σ1 ⊗ h0\ne2 = σ2 ⊗ h0\ne3 = σ3 ⊗ h0\ne4 = σ0 ⊗ h1```\nand the multiplication table for `e_i`  and they're products has many zeros (because `h1` is nilpotent), so writing software that can take advantage of that can have many advantages. But probably there are ways to get similar effects through some clever manipulations\n</code></pre></div>",
        "id": 231703705,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616617950
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; @chrisrackauckas Can <code>Symbolics.jl</code> generate derivatives for functions with boolean expressions (e.g. <code>x &gt; 0</code> )? It doesn't seem to. <code>expand_derivatives</code> doesn't touch them, at least.</p>",
        "id": 231705567,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616618775
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> that probably needs some examples and tests.</p>",
        "id": 231705848,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616618899
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Here's a simple example:</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>@variables T\nh(T) = (T&lt;=0.0)*exp(-(T/0.1)^2)+(T&gt;0.0)\nu = h(T)\ndFdT = ∂T(u) |&gt; expand_derivatives```\n</code></pre></div>",
        "id": 231706524,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616619215
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Outputs: <code>Differential(T)(T &gt; 0.0) + Differential(T)(T &lt;= 0.0)*exp(-100.0(T^2)) - (200.0T*exp(-100.0(T^2))*(T &lt;= 0.0))</code></p>",
        "id": 231706553,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616619233
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Is this where <code>IfElse</code> is necessary?</p>",
        "id": 231706660,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616619275
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Assumptions might be needed too</p>",
        "id": 231706726,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616619311
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Is there a way to specify assumptions...?</p>",
        "id": 231706829,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616619353
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes, you just need a whole assumptions mechanism, like Mathematica</p>",
        "id": 231707068,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616619455
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; we don't have that at all right now.</p>",
        "id": 231707077,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616619459
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; ah, I see</p>",
        "id": 231707094,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616619467
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; we could probably do a few things to improve this easily though, but more generally solving this could be difficult.</p>",
        "id": 231707115,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616619480
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; should I try using <code>IfElse</code> or just stick with <code>ForawrdDiff</code> ?</p>",
        "id": 231707303,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616619565
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; If you use IfElse you should be fine.</p>",
        "id": 231707630,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616619667
    },
    {
        "content": "<p>Is the bridge working in both directions?</p>",
        "id": 231707848,
        "sender_full_name": "Brenhin Keller",
        "timestamp": 1616619755
    },
    {
        "content": "<p>[slack] &lt;cbkeller&gt; Looks like that’s a yes!</p>",
        "id": 231707888,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616619772
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; so using <code>IfElse</code> worked, but it appears that the generated function is type unsafe when broadcasted</p>",
        "id": 231722944,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616626857
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> MWE?</p>",
        "id": 231722987,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616626875
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; This should do it:</p>\n<div class=\"codehilite\" data-code-language=\"f\"><pre><span></span><code>@variables T\nθtot = 0.8\n∂F∂T_expr = build_function(∂T(F(T,θtot)) |&gt; expand_derivatives,T)\n∂F∂T = eval(∂F∂T_expr)\nTs = randn(100)\ndFdT(Ts) = ∂F∂T.(Ts) # new function for testing broadcasting\n@code_warntype ∂F∂T(-0.5) # OK\n@code_warntype dFdT(Ts) # not OK```\n</code></pre></div>",
        "id": 231723543,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616627174
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; and I guess you need</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>using IfElse```\n</code></pre></div>",
        "id": 231723599,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616627210
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; unrelated note, have you ever benchmarked <code>Symbolics.jl</code> generated derivatives vs <code>ForwardDiff</code> ? I would think that autodiff should theoretically be almost as fast.</p>",
        "id": 231723866,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616627392
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it should be on dense but not sparse.</p>",
        "id": 231724013,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616627470
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @yingbo_ma how do you show all optimizations on <code>@code_warntype</code>? I think that's the issue here.</p>",
        "id": 231724211,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616627604
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Gotta use Cthulhu</p>",
        "id": 231724258,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616627642
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; <code>ERROR: UndefVarError: ∂T not defined</code><br>\nCould you post a copy-paste-able example?</p>",
        "id": 231724437,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616627759
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; so just remove unicode chars?</p>",
        "id": 231724539,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616627809
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; <code>F(T,theta) = IfElse.ifelse(T&lt;=0.0,theta*exp(-(T/0.1)^2),theta)\n@variables T\ndT = Differential(T)\ntheta = 0.8\ndFdT_expr = build_function(dT(F(T,theta)) |&gt; expand_derivatives,T)\ndFdT1 = eval(dFdT_expr)\nTs = randn(100)\ndFdT2(Ts) = dFdT1.(Ts) # new function for testing broadcasting\n@code_warntype dFdT1(-0.5) # OK\n@code_warntype dFdT2(Ts) # not OK</code></p>",
        "id": 231724603,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616627867
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; <code>∂T</code> is not defined. I can copy-paste unicode.</p>",
        "id": 231724680,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616627907
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; fixed, I think</p>",
        "id": 231724697,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616627920
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; oof wait</p>",
        "id": 231724715,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616627934
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; oof</p>",
        "id": 231724717,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616627938
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; try now</p>",
        "id": 231724775,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616628000
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I should really kill my REPL to test it haha</p>",
        "id": 231724882,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616628051
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Ah, of course it’s unstable. The <code>dFdT1</code> function a global variable</p>",
        "id": 231724986,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616628118
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; ahhh... I didn't think about that</p>",
        "id": 231725059,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616628150
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; not used to worrying about that with functions, but I guess here it's technically a variable?</p>",
        "id": 231725070,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616628167
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; <code>dFdT2_2 = let dFdT1=dFdT1; Ts -&gt; dFdT1.(Ts); end\n@code_warntype dFdT2_2(Ts) # OK</code></p>",
        "id": 231725114,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616628204
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Or, you can make the function variable a const.</p>",
        "id": 231725216,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616628267
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; thanks!</p>",
        "id": 231725242,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616628292
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; No problem</p>",
        "id": 231725259,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616628302
    },
    {
        "content": "<p>[slack] &lt;Marco&gt; Looks like I finally won't be able to --- I reset my Manifest trying to fix things, and it (luckily/unfortunately?) worked. Will be more careful next time...</p>",
        "id": 231773667,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616666660
    },
    {
        "content": "<p>[slack] &lt;Marco&gt; As an addendum: if I move the solving to the GPU, I get an error related to the part with</p>\n<p><code>bcs = [</code><br>\n<code>u1(t,0,0) ~ I(t),</code><br>\n<code>u2(0,0,r) ~ 2.f0,</code><br>\n<code>]</code></p>\n<p>that reads, quite clearly:</p>\n<p><code>ERROR: LoadError: InvalidIRError: compiling kernel broadcast_kernel [...]</code><br>\n<code>Reason: unsupported dynamic function invocation (call to /)</code></p>\n<p>and that disappears if the <code>bcs</code> above are changed to</p>\n<p><code>bcs = [</code><br>\n<code>u1(t,0,0) ~ 1.f0,</code><br>\n<code>u2(0,0,r) ~ 2.f0,</code><br>\n<code>]</code></p>\n<p>Is anything on the roadmap/in the plans to make using <code>@register</code>-ed functions in BCs on CUDA?<br>\nIs there any way I can help with the issue?<br>\nWould perhaps discretising the function help as a workaround? (will look into that right away)</p>\n<p>Thanks for the help, and for the great work! :-)</p>",
        "id": 231773948,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616666777
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Making a registered function work on CUDA is just about making a Julia function work with CUDA.</p>",
        "id": 231793185,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616676218
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Just do the normal things and it will work</p>",
        "id": 231793212,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616676235
    },
    {
        "content": "<p>[slack] &lt;Marco&gt; Wow! Looking into it! Thanks!!!</p>",
        "id": 231797492,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616677988
    },
    {
        "content": "<p>[slack] &lt;ignace-computing&gt; Do you have examples of FVM solutions to a multidimensional Fokker-Planck equation (for particle distributions)? If not, please help me getting me started, I will then add an example (e.g. 1D or 2D) to the docs.</p>",
        "id": 231830567,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616688896
    },
    {
        "content": "<p>[slack] &lt;ignace-computing&gt; Actually, an example with a hyperbolic equation would also be nice. Then we can take it from there. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 231843040,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616693368
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; is it a known issue that zygote fails with DiffEqUncertainty expectation calls in batch mode?</p>",
        "id": 231858909,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616699267
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; For some integrators, yes.</p>",
        "id": 231860916,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616700045
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; There's a few issues like:</p>\n<p><a href=\"https://github.com/SciML/Quadrature.jl/issues/40\">https://github.com/SciML/Quadrature.jl/issues/40</a><br>\n<a href=\"https://github.com/SciML/Quadrature.jl/issues/61\">https://github.com/SciML/Quadrature.jl/issues/61</a></p>",
        "id": 231861054,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616700070
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; The Quadrature tests with Zygote do seem to work when <code>nout=1</code>. Is <code>nout=1</code> used by <code>expectation</code> when the observable <code>g</code> outputs a scalar?</p>",
        "id": 231864927,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616701542
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; When doing AD the gradient of the expectation gets transformed to the expectation of the gradient, so <code>nout</code> gets modified based on the number of parameters.</p>",
        "id": 231865432,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616701728
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; But why is that not also an issue for:</p>\n<div class=\"codehilite\" data-code-language=\"f\"><pre><span></span><code>lb =1.0\nub = 3.0\np = [2.0, 3.0, 4.0]\nprob = QuadratureProblem(f,lb,ub,p)\n\nfunction testf3(lb,ub,p; f=f)\n    prob = QuadratureProblem(f,lb,ub,p, batch = 10, nout=1)\n    solve(prob, CubatureJLp(); reltol=1e-3,abstol=1e-3)[1]\nend\n\ndp1 = ForwardDiff.gradient(p-&gt;testf3(lb,ub,p),p)\ndp2 = Zygote.gradient(p-&gt;testf3(lb,ub,p),p)[1]```\n</code></pre></div>",
        "id": 231865948,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616701972
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; When doing expectation does your observable produce a scalar or vector?</p>",
        "id": 231866817,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616702358
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; scalar</p>",
        "id": 231866843,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616702369
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; Can you post an issue with a MWE?</p>",
        "id": 231867129,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616702485
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; I'll try to isolate the problem and post it at DiffEqExpectation.</p>",
        "id": 231867239,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616702525
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/search?q=Trixi.jl&amp;type=Repositories\">Trixi.jl</a>?</p>",
        "id": 231951043,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616759189
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; Is ReverseDiff tape compilation (of a whole objective) safe with various sensalg for differential equations?</p>",
        "id": 231981298,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616771573
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; If you don’t have any branches</p>",
        "id": 231984731,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616772722
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; adaptive time stepping causes branches?</p>",
        "id": 231986350,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616773260
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; It depends on how you use ReverseDiff</p>",
        "id": 231986612,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616773362
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; If you use the continuous adjoint with ReverseDiff, then only branches in the ODE RHS function matter.</p>",
        "id": 231986681,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616773400
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; If you are differentiating a whole adaptive solver, then you cannot compile the tape.</p>",
        "id": 231986745,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616773433
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; I am using InterpolatingAdjoint, and there are no branches in my code other than the adaptive time steps the ODE solver takes. From your explanation I take it I can compile?</p>",
        "id": 231986934,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616773514
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Yes</p>",
        "id": 231986978,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616773527
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yes, the sensealg form only cares about branches in the RHS</p>",
        "id": 231995680,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616776706
    },
    {
        "content": "<p>[slack] &lt;airpmb&gt; <a href=\"https://discourse.julialang.org/t/plotting-odeproblem-solutions-with-makie/58096\">https://discourse.julialang.org/t/plotting-odeproblem-solutions-with-makie/58096</a></p>",
        "id": 232119646,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616880609
    },
    {
        "content": "<p>[slack] &lt;airpmb&gt; (x-post in #makie, I'll capture answers on Slack in the Discourse from either place)</p>",
        "id": 232119679,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616880649
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; For parameter estimation: what to do when the objective evaluates correctly, but the gradient calculation fails in the ODE solver. Does the trick with the <code>return Inf</code> still work then? <code>ForwardDiff.derivative(x-&gt;Inf,1.0)</code> returns a 0 derivative.</p>",
        "id": 232181839,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616953825
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; did you look into why the derivative is failing?</p>",
        "id": 232181876,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616953859
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Which method?</p>",
        "id": 232181879,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616953861
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; InterpolatingAdjoint(): initial dt too small (I'm guessing for the reverse solve, but I'm not sure how to diagnose that)</p>",
        "id": 232182113,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616954113
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; does it fail with forward diff or quadrature adjoint?</p>",
        "id": 232182138,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616954138
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; ForwardDiff is too slow. I can try again with quadrature adjoint but it will have to recompile for the night. (Also Zygote stack overflows).</p>",
        "id": 232182369,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616954379
    },
    {
        "content": "<p>[slack] &lt;SebastianM-C&gt; @chrisrackauckas I just realized that the <code>AbstractDiffEqCompositeOperator</code> cannot be moved to SciMLBase since it <code>&lt;:AbstractDiffEqLinearOperator</code> from DiffEqBase. In this case should I move them to that or should <code>AbstractDiffEqLinearOperator</code> be moved to SciMLBase?</p>",
        "id": 232195378,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616967823
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>AbstractDiffEqLinearOperator</code>  hmm why is that there?</p>",
        "id": 232195421,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616967855
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; That may have been an accident.</p>",
        "id": 232195427,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616967860
    },
    {
        "content": "<p>[slack] &lt;SebastianM-C&gt; Hmm... something is strange, it looks like it is actually defined in SciMLBase, but DiffEqOperators imports it from DiffEqBase. Sorry for the confusion</p>",
        "id": 232195607,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616968058
    },
    {
        "content": "<p>[slack] &lt;SebastianM-C&gt; <a href=\"https://github.com/SciML/DiffEqOperators.jl/blob/master/src/DiffEqOperators.jl#L6\">https://github.com/SciML/DiffEqOperators.jl/blob/master/src/DiffEqOperators.jl#L6</a></p>\n<p>This was confusing at first</p>",
        "id": 232195675,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616968114
    },
    {
        "content": "<p>[slack] &lt;airpmb&gt; What's the right syntax for extracting a certain state by name out of a solution at an arbitrary time (i.e. a combination of <code>sol[x]</code> where <code>x</code> is a variable and <code>sol(t)</code>)? What about for the whole dense solution? And in general is there a way to map a state variable to an index into the solution?</p>",
        "id": 232195890,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616968336
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @airpmb we haven't handled that part yet.</p>",
        "id": 232196143,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616968647
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; That's a good issue for SciMLBase though</p>",
        "id": 232196145,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616968655
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and we just started discussing it yesterday with the PDE stuff.</p>",
        "id": 232196151,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616968664
    },
    {
        "content": "<p>[slack] &lt;airpmb&gt; OK cool. Poking around a bit, on my last question it looks like I can maybe compare hashes between a variable that I have and the <code>states</code> field from the ODESystem, would that make sense?</p>",
        "id": 232196230,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616968751
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what do you mean?</p>",
        "id": 232196505,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616969015
    },
    {
        "content": "<p>[slack] &lt;airpmb&gt; The system has a <code>states</code> field the elements of which are the <code>@variable</code>s that are part of the system, and (I assume) the ordering of them is the same as the order of the states in the solution.</p>",
        "id": 232196717,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616969224
    },
    {
        "content": "<p>[slack] &lt;airpmb&gt; So if I've got an ODESystem <code>mysystem</code>, a solution <code>sol</code>, and one of those variables <code>x</code> (defined somewhere by <code>@variables x(t)</code>), and I want the dense solution for that state it seems that the <code>hash</code> field of one of the entries in <code>mysystem.states</code> will match <code>x.val.hash</code> at the index I'm looking for.</p>",
        "id": 232196937,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616969474
    },
    {
        "content": "<p>[slack] &lt;airpmb&gt; .. and then I would get my solution at an arbitrary time <code>t</code> with <code>sol(t, idxs=i)</code>  where <code>i</code> is that index.</p>",
        "id": 232197022,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616969597
    },
    {
        "content": "<p>[slack] &lt;airpmb&gt; Not sure if that makes it any clearer <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>. I think in part this is tricky because the states I'm interested in are \"vectors\" i.e. <code>@variables x[1:3]</code> and it doesn't seem you can just do <code>mysystem.x[1]</code> . Though, it seems I can do <code>mysystem.x₁</code> but it's a pain to type the subscript and not friendly to loop over all the elements of <code>x</code>.</p>",
        "id": 232197212,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616969848
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes, <code>sol(t, idxs=x)</code> can do the same lookup as the other approach, that is the plan.</p>",
        "id": 232198019,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616970797
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; Are the continuous adjoint methods (such as InterpolatingAdjoint) discrete forward over reverse compatible?</p>",
        "id": 232208160,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616982394
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes</p>",
        "id": 232208167,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616982404
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://diffeq.sciml.ai/stable/analysis/sensitivity/#Second-Order-Sensitivity-Analysis-via-second_order_sensitivities-(Experimental)\">https://diffeq.sciml.ai/stable/analysis/sensitivity/#Second-Order-Sensitivity-Analysis-via-second_order_sensitivities-(Experimental)</a></p>",
        "id": 232208171,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616982421
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that's how that works.</p>",
        "id": 232208174,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616982425
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; Right, but there is no high level interface for that yet?</p>",
        "id": 232208278,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616982526
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that's the high level interface. Is there a higher level interface you can think of on it?</p>",
        "id": 232208314,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616982587
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; For example that you could add an additional ForwardDiff.jacobian over this example:</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>  _prob = remake(prob,u0=u0,p=p)\n  sum(solve(_prob,Tsit5(),saveat=0.1,sensealg=QuadratureAdjoint()))\nend\ndu01,dp1 = Zygote.gradient(sum_of_solution,u0,p)```\n</code></pre></div>",
        "id": 232208508,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616982814
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that's a lower level interface, yeah</p>",
        "id": 232209115,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616983420
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you could directly call ForwardDiff.jacobian over that</p>",
        "id": 232209117,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616983427
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; We added the higher level hessian call but it's kind of an experimental interface but it's hard to tell the utility.</p>",
        "id": 232209161,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1616983446
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; Is anybody aware of any julia packages related to contraction analysis/theory for non-linear system stability analysis?</p>",
        "id": 232300574,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617037299
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; e.g. <a href=\"http://web.mit.edu/nsl/www/preprints/contraction.pdf\">http://web.mit.edu/nsl/www/preprints/contraction.pdf</a></p>",
        "id": 232301271,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617037543
    },
    {
        "content": "<p>[slack] &lt;Peter J&gt; I am interested in responses to this. I don't know what contraction analysis gets you that existing packages would not.</p>",
        "id": 232302156,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617037921
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; @Peter J What do you mean by \"I don't know what contraction analysis gets you that existing packages would not.\"</p>",
        "id": 232305228,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617039135
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; I did come across this <a href=\"https://github.com/karenl7/GeodesicCCM\">https://github.com/karenl7/GeodesicCCM</a></p>",
        "id": 232305265,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617039156
    },
    {
        "content": "<p>[slack] &lt;Peter J&gt; oh, perhaps I misunderstood the proposal, but there are packages under JuliaDynamics that do stability analysis for nonlinear systems</p>",
        "id": 232312660,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617042035
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Hi @chrisrackauckas I remember you had a website where you enter the vector field and display the solution. Is it still running? How safe is it (for example to code inspection, code injection…)</p>\n<p>I am planning on making one for one of my project</p>",
        "id": 232405659,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617101273
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"http://app.juliadiffeq.org/\">http://app.juliadiffeq.org/</a></p>",
        "id": 232414865,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617106594
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; lots of hacky code injection checks</p>",
        "id": 232414901,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617106612
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; excellent!!</p>",
        "id": 232416148,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617107279
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; is there a github for it?</p>",
        "id": 232416355,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617107389
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; old old old v0.5 stuff, yes</p>",
        "id": 232416472,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617107437
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I wouldn't do it that way anymore.</p>",
        "id": 232416487,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617107443
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Is there is better way?</p>",
        "id": 232418755,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617108459
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Publishing a Dash app is rather straightforward these days</p>",
        "id": 232418799,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617108477
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; This was straight Angular with <a href=\"https://github.com/search?q=Mux.jl&amp;type=Repositories\">Mux.jl</a></p>",
        "id": 232418851,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617108486
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; @rveltz I believe that @mbauman had a nice covid dash app that you could use as a starting point. I don't remember if he had a differential equation in there, but he might have. That will save you some time getting up and running.</p>",
        "id": 232420385,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617109137
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; <a href=\"http://covid-county-dash.herokuapp.com/\">http://covid-county-dash.herokuapp.com/</a></p>",
        "id": 232420924,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617109341
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; <a href=\"https://github.com/mbauman/CovidCountyDash.jl\">https://github.com/mbauman/CovidCountyDash.jl</a></p>",
        "id": 232420963,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617109357
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; thank you, ill look at it</p>",
        "id": 232421039,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617109395
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Say, I was wondering if I can numerically solve a differential equation that has integral terms in <code>diffeq</code>? I had not see a tutorial or reference to this on the website, though there are some mentions on discourse. If I had a relatively simple and well studied problem like this on below, is there an example of how to do this in diffeq?</p>\n<p>I have solved some integro-differential equations by laplace transform before, but not numerically. Would I use the <code>DDEProblem</code> interface and then refer to the integral as the <code>h(p,t)</code> function using say <code>Quadrature.jl</code>. I can give it a shot and try som code, but needed a point in the right direction.: <a href=\"https://files.slack.com/files-pri/T68168MUP-F01STUF2WF4/download/selection_009.png\">https://files.slack.com/files-pri/T68168MUP-F01STUF2WF4/download/selection_009.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F01STUF2WF4/download/selection_009.png\"><img src=\"https://files.slack.com/files-pri/T68168MUP-F01STUF2WF4/download/selection_009.png\"></a></div>",
        "id": 232424594,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617110805
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; You can use a DDEProblem</p>",
        "id": 232424652,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617110828
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; we just don't have good integro-differential equation tools right now</p>",
        "id": 232424675,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617110838
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; we're in the process of building some though.</p>",
        "id": 232424690,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617110843
    },
    {
        "content": "<p>[slack] &lt;mbauman&gt; No DiffEqs in that covid tracker (or any simulation or analyses beyond slicing and dicing)</p>",
        "id": 232424821,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617110887
    },
    {
        "content": "<p>[slack] &lt;mbauman&gt; just a plotter</p>",
        "id": 232424859,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617110899
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yeah, it's not a real Julia code... <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 232424921,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617110921
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; The covid tracker is actually rather nice because it gives some working examples of the controls and settings. You can almost keep the controls and just swap in your own functions <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>. Way back when I was looking at <code>Dash.jl</code> there were not many working examples, so I had to look at the python api, and then look at the source code. But of course, the project was really new then. So @mbauman’s code was really helpful. I imagine the docs have improved since Iooked at it a while ago.</p>",
        "id": 232425890,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617111276
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Okay I get you. Yeah, I will give it a shot and see what happens. I only found like 1-2 books on numerical methods for integro-differential equations and they are not particularly easy. So hopefully playing around with them in diffeq will help to make the literature more accessible.</p>",
        "id": 232426526,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617111527
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; Can some someone give me an example (or say non exist) of a linear ode with a mass matrix Mdx/dt = Ax, such that solution can't be written in terms of sums of products of polynomials, sinosoids and exponentials</p>",
        "id": 232491226,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617135636
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; FEM discretizations</p>",
        "id": 232492040,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617135950
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; wow, a finite dimension problem?</p>",
        "id": 232495987,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617137506
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; if M = I then x(t)=exp(At)x0 so I’d say no</p>",
        "id": 232496109,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617137545
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Oh I thought he meant like, write out each scalar</p>",
        "id": 232496262,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617137624
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes you can always do it like that if it's linear</p>",
        "id": 232496278,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617137631
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; in fact, even if it's infinite dimensional if the operator <code>exp(At)</code> has a convergent Taylor series</p>",
        "id": 232496379,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617137660
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; for pde, I agree, not poossible. Take a transport equation $dx/dt+dx/dz=0, x(0,z) = f0(z)$ then $x(t,z) = f0(z-t)$</p>",
        "id": 232496475,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617137708
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; if A is sectorial, I’d it is the same as for ODE</p>",
        "id": 232496568,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617137749
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; What's F0(z)</p>",
        "id": 232496651,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617137772
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; initial condition</p>",
        "id": 232496673,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617137780
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; Something like $dx(i,t)/dt+(x(i+1,t)-x(i-1,t))/2=0, f(i,0) = some_data[i]$ yields a solution that can't be expressed as an matrix exponential of something?</p>",
        "id": 232497660,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617138156
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; no in finite dimensions, it is always possible too express. with matrix exponential.</p>",
        "id": 232497835,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617138226
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; On a lattice, when i belongs to 1,2,3,4, (unbounded), Id say it is the same when A is a continuous linear operator. You would still get x(1,2,…,\\infty;t) = exp(At)x(1,2,…;0)</p>",
        "id": 232498062,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617138313
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; but the expression of exp(At) would be tricky. One. thing you have to know, is that in infinite dimension exp(At) is defined as the solution of dx/dt=Ax. So you have to detail your question a bit</p>",
        "id": 232498279,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617138410
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; Ok, thanks i was only interested in matrices, not linear operators.</p>",
        "id": 232498350,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617138458
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; Also i have no idea what a lattice is in this context</p>",
        "id": 232498531,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617138544
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Hi, is there a way to get the transition matrix from a <code>@reaction_network</code>?</p>",
        "id": 232588660,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617196630
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @isaacsas mentioned doing something about that, but I can't recall if that was mentioning about doing it in the future or having just added it.</p>",
        "id": 232588835,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617196696
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; I was doing the following in DiffEqBiological but it does not work anymore</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    # v = zeros(Int, Catalyst.prodstoichmat(model) |&gt; size)\n    v = zeros(Int, model.p_matrix |&gt; size)\n    p = DiscreteProblem(zeros(Int,size(v)[1]),(0.0,1.0))\n    prob = JumpProblem(p,Direct(),model)\n    for (j,r) in enumerate(prob.massaction_jump.net_stoch)\n        for k in r\n            v[k[1],j] = k[2]\n        end\n    end\n    v = v'\n    return v\nend```\n</code></pre></div>",
        "id": 232589005,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617196761
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; No explicit system type but you can use the Catalyst API to pull out a vector of rate laws, and the reactant/product stoichiometry matrices. <a href=\"https://github.com/SciML/Catalyst.jl/issues/306\">https://github.com/SciML/Catalyst.jl/issues/306</a></p>",
        "id": 232589564,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617196947
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; thank you! I am wondering if my function <code>get_stoichmatrix</code> is not just <code>prodstoichmat</code>?</p>",
        "id": 232590688,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617197354
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; <code>prodstoichmat(rn) .- substoichmat(rn)</code> should give the net stoichiometry matrix.</p>",
        "id": 232595562,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617199056
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; It will be numrxs by numspecies in dimensions.</p>",
        "id": 232595821,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617199137
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; can we just make that <code>net_sthoichmat(rn)</code> and give it a docstring?</p>",
        "id": 232595900,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617199170
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Yeah, I've been meaning too and keep forgetting...</p>",
        "id": 232596011,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617199207
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; When I'm in a lecture video compressing break I'll try to put it in later today.</p>",
        "id": 232596283,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617199311
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oof those, that's the hardest part about teaching online: the delay from actually rendering videos <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span> q</p>",
        "id": 232596442,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617199362
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; that’d be nice. It is tough as I am migrating my Phd student project from DEBiological to Catalyst</p>",
        "id": 232596466,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617199371
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Yeah, it is wasted time...</p>",
        "id": 232596495,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617199379
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; lol</p>",
        "id": 232596516,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617199382
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; @rveltz feel free to open issues!</p>",
        "id": 232596747,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617199453
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; ok</p>",
        "id": 232596778,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617199461
    },
    {
        "content": "<p>[slack] &lt;gregorykimmel&gt; I have a question about callbacks. I am trying to reset the population size by normalizing each individual compartment so the sum is 1 via:</p>\n<div class=\"codehilite\" data-code-language=\"condition\"><pre><span></span><code>    # This replates so that u sums to 1 (as in the initial condition)\n    affect!(integrator) = begin\n        if debugging &gt; 1\n            println(\"Max population reached...replating.\")\n        end\n        u = integrator.u\n        u = u/sum(u)\n        nothing\n    end\n\n    # Create callback\n    callback = ContinuousCallback(condition,affect!)```\nThe solver does reach it because I get the debugging statement to print, but the population does not update. I was following this example from the docs, https://diffeq.sciml.ai/stable/features/callback_functions/#callbacks:\n```function affect!(integrator)\n  u = integrator.u\n  resize!(integrator,length(u)+1)\n  maxidx = findmax(u)[2]\n  Θ = rand()\n  u[maxidx] = Θ\n  u[end] = 1-Θ\n  nothing\nend```\n</code></pre></div>",
        "id": 232617706,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617206672
    },
    {
        "content": "<p>[slack] &lt;jpfairbanks&gt; did you try the assignment as <code>integrator.u .= integrator.u./sum(integrator.u)</code>?  My gut says that your example is rebinding the variable u instead of modifying the value of <code>integrator.u</code></p>",
        "id": 232633057,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617212046
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; @rveltz just made a new release with a <code>netstoichmat</code> function for you.</p>",
        "id": 232666762,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617225512
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; wow, really nice, thank you!</p>",
        "id": 232668259,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617226235
    },
    {
        "content": "<p>[slack] &lt;SebastianM-C&gt; @chrisrackauckas I'm not sure I understand why does <code>I</code> appear in <a href=\"https://github.com/SciML/OrdinaryDiffEq.jl/pull/1368\">https://github.com/SciML/OrdinaryDiffEq.jl/pull/1368</a>. Should it be a <code>DiffEqScalar</code> or something like that?</p>",
        "id": 232763780,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617286636
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It's there because the perturbation should only be on the diagonal.</p>",
        "id": 232848151,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617326465
    },
    {
        "content": "<p>[slack] &lt;kevin.berlemont&gt; Hi all! Using Julia for a while (for computational neuroscience) now but I have never really used any specific packages. I need some speed for my simulations and I was wondering if someone uses the DiffEq package to simulate network of rate neurons (or know where to find an example)?</p>",
        "id": 232956314,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617400194
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yeah there's a few computational neuroscientists around here. @Dhruva I think was just working on one?</p>",
        "id": 232957359,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617401011
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I forget the name of the package I am thinking of</p>",
        "id": 232957364,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617401021
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; How is the linear solve needed in stiff solvers handled in the reverse solve of adjoint sensitivity analysis?<br>\nIs the structure of the adjoint problem automatically exploited?</p>",
        "id": 233003682,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617453382
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; if you declare sparsity it uses it in reverse</p>",
        "id": 233004641,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617454518
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; QuadratureAdjoint is thus optimal, and probably what you want to use with stiff solvers given the analysis in <a href=\"https://arxiv.org/abs/2103.15341\">https://arxiv.org/abs/2103.15341</a></p>",
        "id": 233004708,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617454579
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; So the stiff methods automatically knows that the jacobian towards λ* is just equal to -df/du?<br>\n<a href=\"https://diffeq.sciml.ai/latest/extras/sensitivity_math/#Adjoint-Sensitivity-Analysis\">https://diffeq.sciml.ai/latest/extras/sensitivity_math/#Adjoint-Sensitivity-Analysis</a><br>\nAnd thus sparsity of df/du suffices?</p>",
        "id": 233005223,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617455182
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes</p>",
        "id": 233008786,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617458678
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; And for interpolating adjoint? If I additionally pass a sparse df/dp the structure of that linear solve is also exploited?</p>",
        "id": 233009202,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617459136
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @yingbo_ma did we ever add a spot for that? I don't think so</p>",
        "id": 233009619,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617459656
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I think it has to treat that portion as potentially dense still?</p>",
        "id": 233009632,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617459671
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; But yes, we need to give an option for that or integrate more with automated sparsity detection.</p>",
        "id": 233009663,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617459687
    },
    {
        "content": "<p>[slack] &lt;Ari Katz&gt; @darsnack does spiking NNs</p>",
        "id": 233132267,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617592613
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; <code>ODEFunction(sys, jac=true, tgrad=true,simplify=true);\nWARNING: both SymbolicUtils and LinearAlgebra export \"cond\"; uses of it in module Symbolics must be qualified</code><br>\nShould I worry about this?</p>",
        "id": 233138456,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617600292
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; no</p>",
        "id": 233138639,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617600497
    },
    {
        "content": "<p>[slack] &lt;Dhruva&gt; Hi Kevin! I remember you from Woods Hole! I built a simple one for conductance based models, (NeuronBuilder on my dhruva2 github account). For rate-based ones…there are no callbacks for spike resets right, so I think you could directly use the NeuralODE function in the DiffEqFlux package</p>",
        "id": 233150236,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617612235
    },
    {
        "content": "<p>[slack] &lt;Dhruva&gt; I’m assuming its just a big ODE with a particular graph structure and no funny callbacks if it’s rate based, so you might want to also just build it directly in <a href=\"https://github.com/search?q=ModelingToolkit.jl&amp;type=Repositories\">ModelingToolkit.jl</a> @kevin.berlemont</p>",
        "id": 233150600,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617612524
    },
    {
        "content": "<p>[slack] &lt;darsnack&gt; Yes, but I haven’t worked with the DiffEq system (and I wouldn’t recommend someone use <a href=\"https://github.com/search?q=SpikingNN.jl&amp;type=Repositories\">SpikingNN.jl</a> at this stage). I have been working on it in the last month (not pushed branch), and the refactor that I have done should make it compatible with <a href=\"https://github.com/search?q=OrdinaryDiffEq.jl&amp;type=Repositories\">OrdinaryDiffEq.jl</a>. But I probably won’t get to that until post-May.</p>",
        "id": 233172280,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617629675
    },
    {
        "content": "<p>[slack] &lt;darsnack&gt; Thanks for the ping Ari</p>",
        "id": 233172295,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617629683
    },
    {
        "content": "<p>[slack] &lt;Nils&gt; That might come in handy for me, too; thank you!</p>",
        "id": 233198379,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617641617
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Feel free to open issues about these kinds of useful API functions. I’m busy the next month with classes but will make a big push on Catalyst issues starting in May.</p>",
        "id": 233203655,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617644132
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Are you thinking of the Network Dynamics package? They simulate the Kuramoto model and others that are often used as neuron models, right? I think you can do any arbitrary model with that one, like the Hodgekin-Huxley model as well.</p>",
        "id": 233237801,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617660283
    },
    {
        "content": "<p>[slack] &lt;yoshidk6&gt; Hi, I'm new to Julia and playing around with tutorials for DiffEqFlux. For this example of LV (<a href=\"https://diffeqflux.sciml.ai/stable/examples/optimization_ode/\">https://diffeqflux.sciml.ai/stable/examples/optimization_ode/</a>), I tried adding some system perturbations with <code>PresetTimeCallback()</code>. It did change the standalone simulation output. However when I put the callback into <code>solve()</code> inside loss calculation and <code>sciml_train()</code>, it says \"Interpolation disabled due to sensitivity analysis\", and the output no longer reflect saveat input. Anything else I have to do other than adding callback to <code>solve</code>, e.g. changing sensitivity algorithm?</p>\n<div class=\"codehilite\" data-code-language=\"t_event\"><pre><span></span><code>affect!(integrator) = integrator.u[1] += 1\ncb = PresetTimeCallback(t_event, affect!)\n\nfunction loss_w_cb(p)\n    sol = solve(prob, Tsit5(), p=p, saveat = tsteps, callback=cb)\n    println(sol)\n    loss = sum(abs2, sol.-1)\n    return loss, sol\nend\n\nresult_ode = DiffEqFlux.sciml_train(loss_w_cb, p,\n                                    ADAM(0.1),\n                                    # cb = callback,\n                                    maxiters = 100)```\n</code></pre></div>",
        "id": 233262700,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617680586
    },
    {
        "content": "<p>[slack] &lt;afisher&gt; Hi! i'd like to simulate an n-body gravitational problem and get the bodies' trajectories, but I'm having trouble!</p>\n<p>Solving for each body's acceleration, you get <code>a1 = G*m2 / r^2</code> or <code>x** = Gm2 / norm2(x)</code>. My confusion is on how to solve a system of n second-order equations and on how to keep track of the 2/3d <code>x</code> vector. Any help is highly appreciated!</p>",
        "id": 233267541,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617685828
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; @afisher You should be able to lower n second-order equations into 2n first-order equations fairly trivially. I'm assuming you have a state that is a 3D position, then you can just introduce an additional 3D velocity (so you have a 6D state) and a set of trivial differential equations to update the position (they just use the current velocity state).</p>",
        "id": 233268613,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617687096
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; You could easily solve such a system using <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a></p>",
        "id": 233268621,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617687106
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; There's also an automated order-reduction function in <a href=\"https://github.com/search?q=ModelingToolkit.jl&amp;type=Repositories\">ModelingToolkit.jl</a> (which you could use to build the whole differential system, then solve on <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a>)</p>",
        "id": 233268680,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617687159
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; You could try having a look at my <a href=\"https://github.com/search?q=OrbitalTrajectories.jl&amp;type=Repositories\">OrbitalTrajectories.jl</a> that does some of this, in particular the <code>EphemerisNBP</code> solver, but I'm not simulating an n-body gravitational problem exactly so your application might be a little different.</p>",
        "id": 233268730,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617687207
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; If you use <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a>, you don't need to keep track of the <code>x</code> vector -- all you have to do is provide the initial state (called <code>u0</code>) to the <code>solve()</code> function, and the solver will take care of tracking the <code>x</code> vector (starting with <code>u0</code>) for you.</p>",
        "id": 233268850,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617687333
    },
    {
        "content": "<p>[slack] &lt;afisher&gt; thanks! so i'd need to use a variable per coordinate? (i.e. i can't have e.g. u[1] = (x1, y1))</p>",
        "id": 233268878,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617687362
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; Then at the end the solver returns a <code>ODESolution</code>, which includes the entire history of the <code>x</code> vector, which you can then plot or something</p>",
        "id": 233268912,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617687368
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; Yes it would be u[1] = x, u[2] = y, u[3] = z</p>",
        "id": 233268926,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617687377
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; u[4] = x', u[5] = y', u[6] = z'</p>",
        "id": 233268932,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617687390
    },
    {
        "content": "<p>[slack] &lt;afisher&gt; got it!</p>",
        "id": 233268938,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617687403
    },
    {
        "content": "<p>[slack] &lt;afisher&gt; <a href=\"https://github.com/search?q=OrbitalDynamics.jl&amp;type=Repositories\">OrbitalDynamics.jl</a> looks great, it might be overkill though - i just want some 2d trajectories for 2-3 objects</p>",
        "id": 233268971,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617687450
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; yeah you could build that quite easily I think</p>",
        "id": 233269036,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617687511
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; your equations of motion would essentially be something like this</p>",
        "id": 233269040,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617687518
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; <code>du[1] = u[3]  # x-velocity\ndu[2] = u[4]  # y-velocity\ndu[3] = Gm2 / norm2(u[1:2])  # x-acceleration\ndu[4] = Gm2 / norm2(u[1:2])  # y-acceleration</code><br>\nsomething along those lines</p>",
        "id": 233269070,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617687583
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; then you just wrap that up in a function</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code> du[1] ...\nend```\nand build it into an `ODEProblem` object, then pass that into `solve()`\n</code></pre></div>",
        "id": 233269143,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617687640
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; of course that only simulates one object (in this case with the gravitational pull of a static object in the origin, I guess)</p>",
        "id": 233269160,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617687657
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; if you want more you need to expand your state vector to 4 variables (x, y, x', y') per object</p>",
        "id": 233269167,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617687668
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; (and accordingly also build up the equations of motion as necessary)</p>",
        "id": 233269194,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617687715
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; at least, that's how I think it works. xD</p>",
        "id": 233269248,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617687742
    },
    {
        "content": "<p>[slack] &lt;SebastianM-C&gt; You can also use <code>SecondOrderODEProblem</code> directly or <code>DynamicalODEProblem</code>. If you don't want to write the equations, you can use <code>NBodyProblems</code>or <code>Molly.jl</code></p>",
        "id": 233279558,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617695535
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; can you share a full example?</p>",
        "id": 233295980,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617704285
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; this doesn't seem like it would do it since there's no interpolation here.</p>",
        "id": 233296000,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617704301
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/search?q=NBodySimulator.jl&amp;type=Repositories\">NBodySimulator.jl</a></p>",
        "id": 233296042,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617704343
    },
    {
        "content": "<p>[slack] &lt;yoshidk6&gt; Thanks, here is the full code..: <a href=\"https://files.slack.com/files-pri/T68168MUP-F01T70WKAPQ/download/03-diffeqflux-normal-param-est.jl\">https://files.slack.com/files-pri/T68168MUP-F01T70WKAPQ/download/03-diffeqflux-normal-param-est.jl</a></p>",
        "id": 233322724,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617717406
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; Are there any structural identifiability tools in julia?<br>\nMore specifically, given a dynamic model <code>du/dt = f(u,theta,x,t)</code>,with u the dynamic states; theta the unknown parameters; x some control parameters, and a (possibly noisy) measurement model <code>y(t_i) = h(u,theta,x,t_i)</code> is is possible to estimate the true theta from the observations y, or will different values of theta give rise to exactly the same dynamics.</p>",
        "id": 233359415,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617730640
    },
    {
        "content": "<p>[slack] &lt;Fredrik Bagge Carlson&gt; Maybe <a href=\"https://discourse.julialang.org/t/ann-minimallydisruptivecurves-jl/47874\">https://discourse.julialang.org/t/ann-minimallydisruptivecurves-jl/47874</a><br>\ncould be of use?</p>",
        "id": 233366033,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617733558
    },
    {
        "content": "<p>[slack] &lt;Zhiyu Fu&gt; Is there any plan to implement a BVP-DAE solver in <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a>? If not, any guidance on the best practice to exploit the current tools to solve BVP-DAE?</p>",
        "id": 233380934,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617739898
    },
    {
        "content": "<p>[slack] &lt;Zhiyu Fu&gt; asking because many macroeconomic models are essentially BVP-DAE so it would be really handy if that could be solved directly with the package</p>",
        "id": 233381056,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617739948
    },
    {
        "content": "<p>[slack] &lt;afisher&gt; Thanks @chrisrackauckas, <a href=\"https://github.com/search?q=NBodySimualtor.jl&amp;type=Repositories\">NBodySimualtor.jl</a> was my first look, but i want to be able to add a hook to perturb the objects and am not sure how to do that with the interface</p>",
        "id": 233382929,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617740838
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; There's plans, but not one yet.</p>",
        "id": 233383124,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617740918
    },
    {
        "content": "<p>[slack] &lt;Zhiyu Fu&gt; got it thanks!</p>",
        "id": 233396534,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617745899
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yeah there isn't too much right now. <a href=\"https://github.com/alexeyovchinnikov/SIAN-Julia\">https://github.com/alexeyovchinnikov/SIAN-Julia</a></p>",
        "id": 233446608,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617781686
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; we're going to connect this kind of stuff to MTK over the summer.</p>",
        "id": 233446619,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617781694
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; <a href=\"https://github.com/afvillaverde/strike-goldd\">https://github.com/afvillaverde/strike-goldd</a> this seems nice</p>",
        "id": 233446736,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617781793
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; it uses matlab symbolic toolbox</p>",
        "id": 233446825,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617781832
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; @chrisrackauckas Is it permissible to use a variable <code>Num</code> in the condition for <code>IfElse</code> ? I get an error saying it's a non-boolean being used in a boolean context.</p>",
        "id": 233466413,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617792359
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yes for delayed application</p>",
        "id": 233469032,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617793816
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; MWE?</p>",
        "id": 233469038,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617793818
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 233471600,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617795313
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Ah, nevermind, I can't reproduce it anymore after restarting Julia. Something weird must have happened with my REPL state.</p>",
        "id": 233472967,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617796134
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://juliacomputing.com/products/juliasim/\">https://juliacomputing.com/products/juliasim/</a></p>",
        "id": 233540162,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617820624
    },
    {
        "content": "<p>[slack] &lt;Benjamin Chung&gt; I'm working on a toy control problem that has a lot of vector valued variables and functions; the documentation for ModelingToolkit mention that support for this exists, but is immature right now. Is there an example of use that I can look at to get started?</p>",
        "id": 233609713,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617865119
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; not quite</p>",
        "id": 233626423,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617874771
    },
    {
        "content": "<p>[slack] &lt;Benjamin Chung&gt; Ah, ok, so more or less just play around and see what works/</p>",
        "id": 233645317,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617885749
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah, it's not all quite there yet. We need a bit more tools for controls.</p>",
        "id": 233645374,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617885776
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; But please open issues. It's what I want to start doing a lot of over the summer. But there's a few other releases to do first.</p>",
        "id": 233648271,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617887072
    },
    {
        "content": "<p>[slack] &lt;I Mas&gt; Hi, following practical problem: I need to measure a somewhat complicated/nonlinear spring. The data is then used in a multi body simulation.  The force/torque of the spring (6D Vector) is a function of 3 positions and 3 rotation angles. so (Fx,Fy,Fz,Tx,Ty,Tz) = function (x,y,z, yaw, pitch roll). The idea is to subdivide the region into a grid and then take measurements and then use a lookup table during the simulation. The issue is that there may be many points and the measurements can take very very long. I wonder if machine learning (for me just a fancy word for curve fitting ?) could help me to reduce the number of points? How would I determine which points and how many points need to be measured? Is there a method to do that or is it at the end trial and error?</p>",
        "id": 233666211,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617893602
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Do you know precisely the equation and just want to fit the parameters?</p>",
        "id": 233676237,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617896278
    },
    {
        "content": "<p>[slack] &lt;kevin.berlemont&gt; I'm trying to model a system of stochastic differential equations using ModellingKittool. I have some rectified linear funcitons in my systems and thus I encountered the error: \"Only semi-explicit constant mass matrices are currently supported.\". This error doesn't appear if I use a ODESystem instead of a SDESystem.<br>\nMy model for the noise is pretty simple, just a brownian motion added to a few variables. I'm wondering if there would a way to include this kind of noise (trough a new variable maybe?) into an ODESystem in order to not raise the error?</p>",
        "id": 233736150,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617918524
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; In MTK: I can not find documentation on the <code>parallel</code> keyword in <code>ODEProblem</code> , nor on what the options for it are.<br>\nI also do not understand why <code>ODEFunction</code> does not have some of the keywords <code>ODEProblem</code> does, such as <code>checkbounds</code>.<br>\n<a href=\"https://mtk.sciml.ai/dev/systems/ODESystem/\">https://mtk.sciml.ai/dev/systems/ODESystem/</a></p>",
        "id": 233740156,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617920659
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Those docs need an update</p>",
        "id": 233757823,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617934022
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Can you open an issue with an MWE?</p>",
        "id": 233757833,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617934038
    },
    {
        "content": "<p>[slack] &lt;Benjamin Chung&gt; Just as a toy obvious way to try and get started, I tried doing<br>\n<code>prob = ODEProblem(structural_simplify(fol_separate), [x=&gt;[0.0,1.0]], (0.0,10.0), [tau=&gt;3])</code><br>\nin the composing differential equations example, but  the verner integrator wasn't able to initialize its caches (<code>zero</code> for vectors of floats doesn't exist). Is there a way to work around this, or am I misusing the interface?</p>",
        "id": 233767767,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617943667
    },
    {
        "content": "<p>[slack] &lt;I Mas&gt; No, there is no known equation behind it. We build the spring and measure it. The alternative would be to use nonlinear FEM to solve the elasticity problem but even then you just get numbers, no equation.. for the simulation only the numbers are needed.... but we follow more a build and test oriented approach.</p>",
        "id": 233806093,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617968172
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; so you're trying to train a neural differential equation of sorts?</p>",
        "id": 233806806,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617968604
    },
    {
        "content": "<p>[slack] &lt;I Mas&gt; well... maybe not the differential equation.. but I need a \"black box\" /lookup-table  that tells me the force/torque of the spring given the relative postion/orientation of the both interfaces of the spring.... this \"box\" I would use in a multi body simulation environment which then solves the equations of motion of the whole system.... so I need just the complicated version of  hookes law: F = k*x</p>",
        "id": 233807619,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617969039
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; have you tried the physics-informed neural net approach? Or the UDE?</p>",
        "id": 233807759,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617969132
    },
    {
        "content": "<p>[slack] &lt;I Mas&gt; I have no experience with this... do I have to feed this with some trajectories from a dynamic test/simulation... and this gives me a nerual net which mimics the right side of the ODE? ist this the approach you mean?</p>",
        "id": 233807880,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617969234
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://arxiv.org/abs/2001.04385\">https://arxiv.org/abs/2001.04385</a></p>",
        "id": 233809040,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617969838
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; or <a href=\"https://mitmath.github.io/18337/lecture3/sciml.html\">https://mitmath.github.io/18337/lecture3/sciml.html</a></p>",
        "id": 233809089,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617969852
    },
    {
        "content": "<p>[slack] &lt;I Mas&gt; you have already hookes law as an example <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 233809304,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617969966
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes</p>",
        "id": 233809317,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617969972
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that's why I thought you were asking about PINNs haha</p>",
        "id": 233809342,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617969980
    },
    {
        "content": "<p>[slack] &lt;I Mas&gt; so in the PINN example you learn F(x) based on a dynamic input (position/velocity)... my example is: I  have samples of F_i(x_i) , because I measure the spring under static conditions. I wondered: can machine learning help me to get an approximation for F(x) without taking a dense grid of measurement points and if yes, how can i choose the measurement points to get a good approximation for F(x)...</p>",
        "id": 233810270,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617970501
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It can, but</p>",
        "id": 233810956,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617970847
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; &gt; how can i choose the measurement points to get a good approximation for F(x)</p>",
        "id": 233810959,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617970849
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; That's a really fun question</p>",
        "id": 233810966,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617970852
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I don't know right now.</p>",
        "id": 233810969,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617970854
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I'll need to see the runnable example to get what you're talking about</p>",
        "id": 233812146,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617971404
    },
    {
        "content": "<p>[slack] &lt;I Mas&gt; i guess this is trial and error.... so I would take the measurements and then instead to sort the data which is then used by some interpolation method, i can throw it at a nerual network. If I have a function with 6 inputs and 6 outputs...i need 6 neural networks, each with 6 inputs and 1 output or is there some \"intelligence\" advantage to use one nerual network with 6 inputs AND 6 outputs?</p>",
        "id": 233812831,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617971689
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; if it's a truly lower dimensional object (which I think it would be), then it would be better to use a single neural network there.</p>",
        "id": 233812927,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617971732
    },
    {
        "content": "<p>[slack] &lt;I Mas&gt; so my naive understaning of a neural network is, that is a sort of \"universal curve fitting model\"...not more not less ?</p>",
        "id": 233813398,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617971945
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; essentially yes.</p>",
        "id": 233813445,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617971966
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 233813917,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617972188
    },
    {
        "content": "<p>[slack] &lt;Simone Carlo Surace&gt; Hi all, l'm developing a package for feedback particle filters, a specific algorithm for online state estimation in continuous-time models, especially models where the hidden state and observation processes are solutions to SDEs. (see <a href=\"https://github.com/simsurace/FeedbackParticleFilters.jl\">https://github.com/simsurace/FeedbackParticleFilters.jl</a>). Currently the package uses its own solver, which is quite naive, not easily customizable, and (probably) much slower than it could be. I would like to use <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a> as a backend for my package in order to make use of state-of-the-art solvers. The challenge I'm facing is that for particle filtering, one needs to basically set up an SDEProblem that consists of hidden state SDE dX = ..., observation SDE dY = ...,  and a system of SDEs for the particle system, which uses the differential dY as a noise source. In addition, the SDE for the particle filter, at least for the Feedback Particle Filter, is naturally expressed as a Stratonovich SDE, i.e. the term K(t)\\circ dY that appears in the SDEs for the particle system, is a Stratonovich term, whereas the remaining terms are Ito terms. I would like to ask whether there is anyone willing to help out writing this interface. Once the basics are established, this could be reused in a much more general package for continuous time filtering. The composability of <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a> with machine learning packages open up and endless array of possibilities that will be very valuable for researchers in this domain.</p>",
        "id": 233815852,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617973103
    },
    {
        "content": "<p>[slack] &lt;Simon Welker&gt; not particularly helpful to you, but a question: what does \"feedback particle filter\" mean here, exactly? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> are there particular applications? I'm curious because I'm working at modeling real physical particle ensembles whose trajectories are also modeled by SDEs. No worries if this is too basic a question.</p>",
        "id": 233816602,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617973405
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that seems pretty cool! For the observables, would ModelingToolkit's structural simplification elimination help?</p>",
        "id": 233816609,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617973408
    },
    {
        "content": "<p>[slack] &lt;Simone Carlo Surace&gt; @Simon Welker Have a look at <a href=\"https://ieeexplore.ieee.org/document/6530707\">https://ieeexplore.ieee.org/document/6530707</a></p>",
        "id": 233816816,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617973486
    },
    {
        "content": "<p>[slack] &lt;Benjamin Chung&gt; Ah, sure</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>@variables t x(t) RHS(t)\n@parameters τ\nD = Differential(t)\n\n# your first ODE, consisting of a single equation, indicated by ~\n@named fol_separate = ODESystem([ RHS  ~ (1 - x)/τ,\n                                  D(x) ~ RHS ])\n\nusing DifferentialEquations: solve\n\nprob = ODEProblem(structural_simplify(fol_separate), [x =&gt; [0.0, 0.0]], (0.0,10.0), [τ =&gt; 3.0])```\n</code></pre></div>",
        "id": 233816838,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617973501
    },
    {
        "content": "<p>[slack] &lt;Simon Welker&gt; cheers!</p>",
        "id": 233816895,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617973529
    },
    {
        "content": "<p>[slack] &lt;Simone Carlo Surace&gt; @chrisrackauckas Thanks and thanks for the tip. I will look into that.</p>",
        "id": 233816942,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617973549
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>x</code> is a scalar and you gave it an array</p>",
        "id": 233817430,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617973744
    },
    {
        "content": "<p>[slack] &lt;Benjamin Chung&gt; Is there somewhere to specify that <code>x</code> is an array? At least to a superficial analysis, nothing that's done to <code>x</code> should require that it's a scalar.</p>",
        "id": 233817873,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617973924
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 233818257,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617974065
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>x</code> is a symbolic scalar, or it's supposed to be</p>",
        "id": 233818368,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617974109
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you should be doing <code>x[1:2](t)</code> if you wanted a symbolic vector.</p>",
        "id": 233818403,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617974118
    },
    {
        "content": "<p>[slack] &lt;Benjamin Chung&gt; Ah, okay, this was why I was wondering about an example, as I didn't find any information on this in the documentation.</p>",
        "id": 233818628,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617974197
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; open an issue for us to document that.</p>",
        "id": 233818887,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617974296
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; we are in the middle of changing and improving the array symbolics though, so it'll likely get more docs after that's all done.</p>",
        "id": 233819186,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617974406
    },
    {
        "content": "<p>[slack] &lt;Benjamin Chung&gt; It would probably be easiest to use if it could be caught before it reaches solver cache initialization? The error message that one gets is very unclear</p>",
        "id": 233819189,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617974408
    },
    {
        "content": "<p>[slack] &lt;Benjamin Chung&gt; Makes sense.</p>",
        "id": 233819195,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617974410
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah it should get caught earlier</p>",
        "id": 233819306,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617974450
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @shashi total hype dropping this at the same time: <a href=\"https://github.com/JuliaSymbolics/SymbolicArrays.jl\">https://github.com/JuliaSymbolics/SymbolicArrays.jl</a></p>",
        "id": 233819323,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617974458
    },
    {
        "content": "<p>[slack] &lt;Benjamin Chung&gt; In a probably similar case, I'm getting the following when I try to create the system<br>\n<code>julia&gt; @named fol_separate = ODESystem([ RHS  .~ (1 .- x)/τ,\n                                         D.(x) .~ RHS ])\nERROR: type Array has no field lhs\nStacktrace:\n [1] getproperty(x::Vector{Equation}, f::Symbol)\n   @ Base .\\Base.jl:33\n [2] ODESystem(eqs::Vector{Vector{Equation}}, iv::Nothing; kwargs::Base.Iterators.Pairs{Symbol, Symbol, Tuple{Symbol}, NamedTuple{(:name,), Tuple{Symbol}}})\n   @ ModelingToolkit ~\\.julia\\packages\\ModelingToolkit\\PysRU\\src\\systems\\diffeqs\\odesystem.jl:148\n [3] top-level scope\n   @ REPL[40]:1</code></p>",
        "id": 233819365,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617974473
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>[ RHS  .~ (1 .- x)/τ;D.(x) .~ RHS ])</code></p>",
        "id": 233819465,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617974514
    },
    {
        "content": "<p>[slack] &lt;Benjamin Chung&gt; Full runnable example</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>@variables t x[1:2](t) RHS[1:2](t)\n@parameters τ\nD = Differential(t)\n# your first ODE, consisting of a single equation, indicated by ~\n@named @named fol_separate = ODESystem([ RHS  .~ (1 .- x)/τ,\n                                         D.(x) .~ RHS ])\nusing DifferentialEquations: solve\nprob = ODEProblem(structural_simplify(fol_separate), [x =&gt; [0.0, 0.0]], (0.0,10.0), [τ =&gt; 3.0])```\n</code></pre></div>",
        "id": 233819531,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617974528
    },
    {
        "content": "<p>[slack] &lt;Benjamin Chung&gt; Duh, ok</p>",
        "id": 233819565,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617974543
    },
    {
        "content": "<p>[slack] &lt;Benjamin Chung&gt; Hmm, same complaint, actually.</p>",
        "id": 233819614,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617974561
    },
    {
        "content": "<p>[slack] &lt;Benjamin Chung&gt; Oops, missed the D.(x) somehow, forgot to broadcst</p>",
        "id": 233819789,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617974636
    },
    {
        "content": "<p>[slack] &lt;Benjamin Chung&gt; Okay, and that made the example work. I'll submit the bug.</p>",
        "id": 233820149,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617974766
    },
    {
        "content": "<p>[slack] &lt;Benjamin Chung&gt; Ah, okay, I see why I had problems finding the documentation for @variables; the notation is documented in the docstring but since it's part of <a href=\"https://github.com/search?q=Symbolics.jl&amp;type=Repositories\">Symbolics.jl</a> and not <a href=\"https://github.com/search?q=ModelingToolkit.jl&amp;type=Repositories\">ModelingToolkit.jl</a> it doesn't show up in the latter's documentation. I'm not sure if this is actually a documentation issue, then?</p>",
        "id": 233821484,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617975309
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that's still an MTK documentation issue IMO. We should make it easier to learn about the CAS as it's important for MTK</p>",
        "id": 233821564,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617975352
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; we don't signal it enough right now.</p>",
        "id": 233821575,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617975356
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It kind of assumes you know <a href=\"https://github.com/search?q=Symbolics.jl&amp;type=Repositories\">Symbolics.jl</a>, which will be okay in 10 years, but not this year.</p>",
        "id": 233821641,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617975371
    },
    {
        "content": "<p>[slack] &lt;Simone Carlo Surace&gt; Maybe ModelingToolkit has indeed already solved this problem. I need to do something like this:<br>\ndX = f(X) dt + g(X) dW<br>\ndY = h(X) dt + dV<br>\ndP (particle system) = f(P) dt + g(P) dB + K(P) \\circ (dY - ... dt).<br>\nIs reusing the whole differential dY supported? As a first step, it would already be great to do this without the Stratonovich part, then use one solver for everything. In my current solver, I use the Heun method only for the last term in dP, and use Euler-Maruyama for everything else. Of course, this is not very easy to customize, e.g. make adaptive. Is there a way of mixing Ito and Stratonovich SDEs in ModelingToolkit? There's probably a library somewhere that will convert the two types of SDE. But the problem with that approach is that the derivative of K might be very expensive to compute. In order to compute K itself, we need the whole machinery of <code>GainEstimationMethod</code> within <a href=\"https://github.com/search?q=FeedbackParticleFilters.jl&amp;type=Repositories\">FeedbackParticleFilters.jl</a>.</p>",
        "id": 233822277,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617975617
    },
    {
        "content": "<p>[slack] &lt;Benjamin Chung&gt; Ok, I submitted <a href=\"https://github.com/SciML/ModelingToolkit.jl/issues/956\">https://github.com/SciML/ModelingToolkit.jl/issues/956</a>.</p>",
        "id": 233823085,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617975935
    },
    {
        "content": "<p>[slack] &lt;kevin.berlemont&gt; Thanks, yes I opened an issue. That's my first issue ever opened so hopefully I gave all the necessary information</p>",
        "id": 233829537,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617978265
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Hey folks. I have been looking at some papers on Variational methods for image processing--like image segmentation. So a lot of these methods use PDEs to either denoise an image or to segment the image using combinations of mean curvature flow by level set methods, etc. I was wondering if within the Julia ecosystem, we have any packages with these types of tools? It is kinda a specialized area, so I was not sure where to look. I can probably use MTK as the unifying framework, but then I was not sure if there are any libraries for level set methods or solvers in Julia?</p>",
        "id": 233860569,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617989096
    },
    {
        "content": "<p>[slack] &lt;gregorykimmel&gt; Hey all, I have a function ODE model that contains a large number of compartments (on the orders of 1000s or 10000s). I want to add functionality for the user that allows them to artificially set compartments with sizes &lt;1 to 0. Is it safe to do this within the function <code>myModel(du,u,pars,t)</code>  where I have the line<br>\n<code>u[u .&lt; 1.0] .= 0.0</code><br>\nOr will this not change u in the integrator? In which case, everytime I need to use a callback to set all compartments in <code>intergrator.u</code>  that are less than 1 to 0?</p>",
        "id": 233869453,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617992892
    },
    {
        "content": "<p>[slack] &lt;Dodd Gray&gt; I need a component library of materials for specifying spatially inhomogeneous nonlinear PDEs, where material susceptibilities both specify the PDE and can depend on PDE variables and (fixed) parameters (temperature, electric field, etc.) via symbolic empirical models and might be scalar or Array-valued. Would defining <code>Material&lt;:ModelingToolkit.AbstractSystem</code> be a reasonable approach here? Unlike the other <code>AbsractSystem</code> subtypes I've seen, these are not systems of equations to be solved, rather they are simpler containers of symbolic models meant to nest into <code>PDESystem</code>s. Is there a better way? I am new to MTK and might be totally misunderstanding how to use it.</p>",
        "id": 233869795,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617993025
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you can probably do it, but I don't know if anyone is doing it.</p>",
        "id": 233881803,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617998204
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that is definitely not safe.</p>",
        "id": 233881898,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617998247
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; A callback is probably required to handle it properly, as otherwise this introduces discontinuities into the dynamics which are irreversible.</p>",
        "id": 233881953,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1617998274
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Oh yeah. Sounds good. I have some matlab code that I can start to port to julia. So let me give it a shot and see if it goes anywhere.</p>",
        "id": 233896577,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618004487
    },
    {
        "content": "<p>[slack] &lt;Andreas Schlaginhaufen&gt; Hey, I've been trying to use the Lagrangian code for <a href=\"https://github.com/search?q=ModelingToolkit.jl&amp;type=Repositories\">ModelingToolkit.jl</a> from <a href=\"https://discourse.julialang.org/t/solving-symbolic-equations/57978/\">https://discourse.julialang.org/t/solving-symbolic-equations/57978/</a> post, but I am getting a <strong><code>no method matching depwarn(::String, ::Symbol; force=true)</code></strong>  error, even for the example in the post. I'm on ModelingToolkit v5.14.2 and Symbolics v0.1.17. Is this a bug or am I doing something wrong?</p>",
        "id": 233897070,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618004778
    },
    {
        "content": "<p>[slack] &lt;gregorykimmel&gt; Ok. That is what I figured. Thanks.</p>",
        "id": 233902297,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618008053
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; You're probably not doing anything wrong. I wrote that using some functions that weren't part of the <code>Symbolics</code> API and thus subject to change.  With that said, I'm getting an error, but not that one. Mine is<br>\n<code>ERROR: LoadError: UndefVarError: q̈₁ not defined</code><br>\nwhich I guess means <code>Symbolics.solve_for</code> no longer errors when it can't solve for something. That makes sense, though. I probably shouldn't have been relying on that error in the first place; this was just something I wrote quickly as a proof-of-concept. Still a little weird that it was able to solve for that before and it isn't now. @chrisrackauckas, any thoughts on why that would be?</p>",
        "id": 233909305,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618013236
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I think @yingbo_ma made a working version in an issue?</p>",
        "id": 233910072,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618013912
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; I can't seem to reverse AD through problems set up to use jac vec stuff for stiff equations.</p>\n<div class=\"codehilite\" data-code-language=\"zygote.gradient\"><pre><span></span><code>ERROR: MethodError: no method matching adjoint(::JacVecOperator{Float64, typeof(dynamic_sys!), Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{ForwardDiff.Dual{DiffEqOperators.JacVecTag, Float64, 1}}, Vector{Float64}, Vector{Float64}, Float64, Bool}) ```\n</code></pre></div>",
        "id": 233913463,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618017257
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; I didn’t post it. I have it locally</p>",
        "id": 233923631,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618027540
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; <a href=\"https://discourse.julialang.org/t/solving-symbolic-equations/57978/10\">https://discourse.julialang.org/t/solving-symbolic-equations/57978/10</a></p>",
        "id": 233924093,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618028039
    },
    {
        "content": "<p>[slack] &lt;Benjamin Chung&gt; @yingbo_ma I just wanted to follow up on the closure of the aforementioned issue, since it seems like a discussion of whether it's warranted is needed.</p>",
        "id": 233935644,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618040498
    },
    {
        "content": "<p>[slack] &lt;Benjamin Chung&gt; I'd generally suggest that it would be helpful for the documentation to describe how to define vectors of symbolic variables, and for the error messages when you attempt to use a vector in place of a scalar to guide the user towards a solution (as, right now, and as called out in the issue, the error message arises from the integrator's cache initialization which... is not that helpful).</p>",
        "id": 233935730,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618040604
    },
    {
        "content": "<p>[slack] &lt;Benjamin Chung&gt; Is the example in the issue fixable? Sure, and I found a solution (see up in this thread), but at the same time, that solution is difficult for the user to discover from the ModelingToolkit documentation or by examining the error message when you misuse the library.</p>",
        "id": 233935804,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618040697
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; I don’t see how this is confusing. You just need to know a little bit of Julia programming to find the bug.</p>",
        "id": 233936040,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618040950
    },
    {
        "content": "<p>[slack] &lt;Benjamin Chung&gt; What I find confusing about it is that the stack trace given is to</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">ODEFunction</span><span class=\"p\">{</span><span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"n\">ModelingToolkit</span><span class=\"o\">.</span><span class=\"n\">var</span><span class=\"s\">\"#f#140\"</span><span class=\"p\">{</span><span class=\"n\">RuntimeGeneratedFunctions</span><span class=\"o\">.</span><span class=\"n\">RuntimeGeneratedFunction</span><span class=\"p\">{(</span><span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"s\">\"##arg#257\"</span><span class=\"p\">),</span> <span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"s\">\"##arg#258\"</span><span class=\"p\">),</span> <span class=\"o\">:</span><span class=\"n\">t</span><span class=\"p\">),</span> <span class=\"n\">ModelingToolkit</span><span class=\"o\">.</span><span class=\"n\">var</span><span class=\"s\">\"#_RGF_ModTag\"</span><span class=\"p\">,</span> <span class=\"n\">ModelingToolkit</span><span class=\"o\">.</span><span class=\"n\">var</span><span class=\"s\">\"#_RGF_ModTag\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mh\">0x9d679005</span><span class=\"p\">,</span> <span class=\"mh\">0xf9e93d3d</span><span class=\"p\">,</span> <span class=\"mh\">0xde33153c</span><span class=\"p\">,</span> <span class=\"mh\">0x87232e20</span><span class=\"p\">,</span> <span class=\"mh\">0xd9de51d2</span><span class=\"p\">)},</span> <span class=\"n\">RuntimeGeneratedFunctions</span><span class=\"o\">.</span><span class=\"n\">RuntimeGeneratedFunction</span><span class=\"p\">{(</span><span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"s\">\"##out#259\"</span><span class=\"p\">),</span> <span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"s\">\"##arg#257\"</span><span class=\"p\">),</span> <span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"s\">\"##arg#258\"</span><span class=\"p\">),</span> <span class=\"o\">:</span><span class=\"n\">t</span><span class=\"p\">),</span> <span class=\"n\">ModelingToolkit</span><span class=\"o\">.</span><span class=\"n\">var</span><span class=\"s\">\"#_RGF_ModTag\"</span><span class=\"p\">,</span> <span class=\"n\">ModelingToolkit</span><span class=\"o\">.</span><span class=\"n\">var</span><span class=\"s\">\"#_RGF_ModTag\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mh\">0x3159e5b6</span><span class=\"p\">,</span> <span class=\"mh\">0xdb5210ba</span><span class=\"p\">,</span> <span class=\"mh\">0x212b43ea</span><span class=\"p\">,</span> <span class=\"mh\">0x1f3d7d71</span><span class=\"p\">,</span> <span class=\"mh\">0xb1165cc1</span><span class=\"p\">)}},</span> <span class=\"n\">LinearAlgebra</span><span class=\"o\">.</span><span class=\"kt\">UniformScaling</span><span class=\"p\">{</span><span class=\"kt\">Bool</span><span class=\"p\">},</span> <span class=\"n\">Nothing</span><span class=\"p\">,</span> <span class=\"n\">Nothing</span><span class=\"p\">,</span> <span class=\"n\">Nothing</span><span class=\"p\">,</span> <span class=\"n\">Nothing</span><span class=\"p\">,</span> <span class=\"n\">Nothing</span><span class=\"p\">,</span> <span class=\"n\">Nothing</span><span class=\"p\">,</span> <span class=\"n\">Nothing</span><span class=\"p\">,</span> <span class=\"n\">Nothing</span><span class=\"p\">,</span> <span class=\"n\">Nothing</span><span class=\"p\">,</span> <span class=\"n\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Symbol</span><span class=\"p\">},</span> <span class=\"kt\">Symbol</span><span class=\"p\">,</span> <span class=\"n\">ModelingToolkit</span><span class=\"o\">.</span><span class=\"n\">var</span><span class=\"s\">\"#generated_observed#145\"</span><span class=\"p\">{</span><span class=\"n\">ODESystem</span><span class=\"p\">,</span> <span class=\"kt\">Dict</span><span class=\"p\">{</span><span class=\"kt\">Any</span><span class=\"p\">,</span> <span class=\"kt\">Any</span><span class=\"p\">}},</span> <span class=\"n\">Nothing</span><span class=\"p\">},</span> <span class=\"n\">t</span><span class=\"o\">::</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"n\">dt</span><span class=\"o\">::</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"n\">reltol</span><span class=\"o\">::</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"n\">calck</span><span class=\"o\">::</span><span class=\"kt\">Bool</span><span class=\"p\">,</span> <span class=\"c\">#unused#::Val{true})</span>\n    <span class=\"err\">@</span> <span class=\"n\">OrdinaryDiffEq</span> <span class=\"o\">~\\.</span><span class=\"n\">julia</span><span class=\"o\">\\</span><span class=\"n\">packages</span><span class=\"o\">\\</span><span class=\"n\">OrdinaryDiffEq</span><span class=\"o\">\\</span><span class=\"mi\">5</span><span class=\"n\">egkj</span><span class=\"o\">\\</span><span class=\"n\">src</span><span class=\"o\">\\</span><span class=\"n\">caches</span><span class=\"o\">\\</span><span class=\"n\">verner_caches</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">153</span><span class=\"sb\">```</span>\n</code></pre></div>",
        "id": 233936131,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618041045
    },
    {
        "content": "<p>[slack] &lt;Benjamin Chung&gt; This is part of the DifferentialEquations integrator. Since the problem is created without error, this then implies that model is fine, but that the issue is in problem definition or in the initialization/use of the integrator</p>",
        "id": 233936156,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618041097
    },
    {
        "content": "<p>[slack] &lt;Benjamin Chung&gt; Moreover, I would note that, again, the solution in the Github issue isn't actually a solution to the problem. What I was trying to do, as mentioned in said issue, was use vectors in ModelingToolkit, which making <code>x</code>  notably does not solve</p>",
        "id": 233936249,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618041198
    },
    {
        "content": "<p>[slack] &lt;Benjamin Chung&gt; The solution to the specific functional issue in the thread is</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>@variables t x[1:2](t) RHS[1:2](t)\n@parameters τ\nD = Differential(t)\n# your first ODE, consisting of a single equation, indicated by ~\n@named @named fol_separate = ODESystem([ RHS  .~ (1 .- x)/τ,\n                                         D.(x) .~ RHS ])\nusing DifferentialEquations: solve\nprob = ODEProblem(structural_simplify(fol_separate), x .=&gt; [0.0, 0.0], (0.0,10.0), [τ =&gt; 3.0])\nsolve(prob) ```\nHowever, as noted in the thread, I have a functional solution to my problem; the issue is not one of correct functionality, but that the documentation and the error messages do not aim one in the right direction.\n</code></pre></div>",
        "id": 233936287,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618041244
    },
    {
        "content": "<p>[slack] &lt;Benjamin Chung&gt; I would suggest, then, that the fact that this desired fix wasn't clear is something that points towards the error message not being particularly helpful when trying to identify the source of the problem.</p>",
        "id": 233936375,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618041320
    },
    {
        "content": "<p>[slack] &lt;Benjamin Chung&gt; I'm generally fairly familiar, even, with DiffEq's internals, and spent a while looking into why initialization was failing, nor realizing that the issue was not in solver initialization but instead in problem definition.</p>",
        "id": 233936463,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618041454
    },
    {
        "content": "<p>[slack] &lt;Benjamin Chung&gt; Knowing that the issue is really that DiffEq is expecting all variables to be scalars, and that you can fix this by using a different form of the @variable macro, requires that one understand not only a bit of Julia, but also fairly extensive knowledge of the preconditions built into the associated libraries.</p>\n<p>While I would agree that this is a failing in my own knowledgebase, this is also something that could be fairly easily addressed in documentation and/or pointed at in error messages. Ideally, when a vector is passed in place of a scalar, it should produce an error message that says that this is invalid, not try to initialize the solver and then error out when trying to figure out what a zero element for an arbitrary vector looks like.</p>",
        "id": 233936783,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618041779
    },
    {
        "content": "<p>[slack] &lt;Benjamin Chung&gt; When I saw that error message, I thought that I needed to somehow provide my own zero initializer for the internal caches somehow, not that DiffEq needed me to unroll the vector. Again, this is a failing on my part, but it's one that I would argue could be fairly easily avoided with a short example.</p>",
        "id": 233936835,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618041825
    },
    {
        "content": "<p>[slack] &lt;Benjamin Chung&gt; If it would make it easier, I can submit a pull request against the documentation with the simple control system (attitude control for a quadcopter) that I'm working on. It illustrates the use of symbolic vectors in a fairly small and simple example.</p>",
        "id": 233937377,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618042395
    },
    {
        "content": "<p>[slack] &lt;Andreas Schlaginhaufen&gt; Thanks guys! This works nicely for my little n-pendulum example</p>",
        "id": 233944591,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618050493
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I think it's an issue that we don't mention the vector form at all in the documentation. It should go somewhere.</p>",
        "id": 233945649,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618051584
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Also, it's a bit interesting that we allow mapping vectors to the scalar symbolic variables.</p>",
        "id": 233945657,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618051602
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; That's something we should check for, especially as we move down the line towards really enforcing types for array symbolics.</p>",
        "id": 233945662,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618051622
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Do you mind to post your example as well?</p>",
        "id": 233967886,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618071472
    },
    {
        "content": "<p>[slack] &lt;Benjamin Chung&gt; If interested, here's the toy LQR controller</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>using LinearAlgebra\nusing DifferentialEquations\nusing ControlSystems\n\n@variables t yaw thrust[1:4](t) omega[1:3](t) qbi[1:3](t)\nD = Differential(t)\n\nprop_pos = [[1.0,1.0,0.0],[1.0,-1.0,0.0],[-1.0,1.0,0.0],[-1.0,-1.0,0.0]]\nI = [1.0 0 0; 0 1 0; 0 0 1]\nI_inv = inv(I)\n\n@named dynamics = ODESystem([\n    D.(omega) .~ I_inv * (sum(cross(prop_pos[i], thrust[i]*[0.0,0.0,1.0]) for i=1:4) .- cross(omega, I*omega) .+ [0.0,0.0, yaw]);\n    D.(qbi) .~ 0.25 * ((1-sum(qbi .^ 2)) * omega - 2 * cross(omega, qbi) + 2*dot(omega,qbi)*qbi) ])\n\n#get the indices\ncontrols = indexin([thrust; yaw], states(dynamics))\ndyn_states = indexin([qbi; omega], states(dynamics))\n\n#linearize to a state-space system\njac_fun = eval(generate_jacobian(dynamics)[2])\nnum_jac = Array{Float64}(UndefInitializer(), length(equations(dynamics)), length(states(dynamics)))\nlinearization_point = Array{Float64}(UndefInitializer(), length(states(dynamics)))\nfor (k,v) in [indexin(thrust,states(dynamics)) .=&gt; 1.0;\n              indexin(yaw, states(dynamics)) .=&gt; 0.0\n              indexin(qbi,states(dynamics)) .=&gt; [0.0, 0.0, 0.0];\n              indexin(omega,states(dynamics)) .=&gt; [0.0, 0.0, 0.0]]\n    linearization_point[k] = v\nend\njac_fun(reshape(num_jac, :), linearization_point, [], 0.0)\n\nA = num_jac[dyn_states, dyn_states]\nB = num_jac[dyn_states, controls]\nC = zeros(0, size(A)[2])\nDm = zeros(0, size(B)[2])\n\n# linearized state-space model\nssm = ss(A,B,C,Dm)\nL = lqr(ssm, UniformScaling(1.0), UniformScaling(1.0))\n\n# setup the controlled dynamic system\n@named dynamics_controlled = ODESystem([\n    states(dynamics)[controls] .~ -L*states(dynamics)[dyn_states];\n    D.(omega) .~ I_inv * (sum(cross(prop_pos[i], thrust[i]*[0.0,0.0,1.0]) for i=1:4) .- cross(omega, I*omega) .+ [0.0,0.0, yaw]);\n    D.(qbi) .~ 0.25 * ((1-sum(qbi .^ 2)) * omega - 2 * cross(omega, qbi) + 2*dot(omega,qbi)*qbi) ])\n\n\nprob = ODEProblem(structural_simplify(dynamics_controlled), [omega .=&gt; [0.1,0.1,0.1]; qbi .=&gt; [0.0,0.0,0.0]], (0.0,10.0), [])\nsolve(prob)```\n</code></pre></div>",
        "id": 234006829,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618106810
    },
    {
        "content": "<p>[slack] &lt;Benjamin Chung&gt; Is there a cleaner way of writing that for loop? Having to do all that indexin isn't as clean as I'd like</p>",
        "id": 234006850,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618106840
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yes, take a look at the lower process of Catalyst via ReactionSystem as a guide.</p>",
        "id": 234028704,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618131206
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; open an issue.</p>",
        "id": 234028709,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618131219
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://www.meetup.com/stuttgart-julia-programming-language-meetup-gruppe/events/277447050/\">https://www.meetup.com/stuttgart-julia-programming-language-meetup-gruppe/events/277447050/</a></p>",
        "id": 234049642,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618151758
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; I saw that DiffEqBase introduces an alternative broadcasting operation <code>@..</code>. Is this aiming to address some of the performance issues with <code>@.</code>? Where is it defined in DiffEqBase?</p>",
        "id": 234095142,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618194811
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; <a href=\"https://github.com/SciML/DiffEqBase.jl/blob/master/src/diffeqfastbc.jl\">https://github.com/SciML/DiffEqBase.jl/blob/master/src/diffeqfastbc.jl</a></p>",
        "id": 234097235,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618197034
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; It basically converts broadcasts into maps</p>",
        "id": 234097251,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618197060
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; But it’s just much better to avoid using bc all together if you are not concerned with genericness.</p>",
        "id": 234097286,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618197121
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; It’s a pity that it cannot match the performance of ordinary for loops</p>",
        "id": 234097358,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618197185
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; Thanks!</p>",
        "id": 234097460,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618197310
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; It has the potential to be better though</p>",
        "id": 234097561,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618197398
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; there’s much more structure in broadcasting statements than for loops</p>",
        "id": 234097576,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618197428
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; It’s pretty challenging to optimize away all the abstractions</p>",
        "id": 234097617,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618197482
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Since</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"mi\">3</span>\n <span class=\"mi\">4</span>\n <span class=\"mi\">5</span><span class=\"sb\">```</span>\n<span class=\"sb\">is valid, LLVM has to figure out that arrays with length 1 are a special case and generate more efficient code for the length-n case.</span>\n</code></pre></div>",
        "id": 234097775,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618197633
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Maybe your student can hack the bc implementation in Julia to make it fast <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 234098521,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618198386
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; If I can find a student who really knows Julia, that’d be really useful for me too! </p>\n<p>I was interested in customizing broadcast to play nicer with @avx and multithreading, but since I’ve never even written a macro before, I figure I have some things to learn before writing anything fast and useful.</p>",
        "id": 234098748,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618198605
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; as in, broadcasting automatically tmaps?</p>",
        "id": 234098764,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618198633
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; huh, interesting - I haven’t seen tmap before</p>",
        "id": 234098786,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618198669
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; its in scimlbase</p>",
        "id": 234098795,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618198680
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; Gotcha, so not tmap in <a href=\"https://github.com/jw3126/ThreadingTools.jl\">https://github.com/jw3126/ThreadingTools.jl</a>?</p>",
        "id": 234098847,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618198700
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; probably almost identical</p>",
        "id": 234098852,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618198710
    },
    {
        "content": "<p>[slack] &lt;mason.protter&gt; Why not just use <code>@avxt</code>?</p>",
        "id": 234098887,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618198780
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; Doesn’t yet support broadcasting over StructArrays</p>",
        "id": 234098969,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618198843
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; <a href=\"https://julialang.slack.com/archives/CF53T1DU4/p1618189873188800\">https://julialang.slack.com/archives/CF53T1DU4/p1618189873188800</a></p>",
        "id": 234098980,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618198867
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; @elrodc mentioned that <code>@avxt</code> might be easier to support for a more restrictive version of broadcasting, and mentioned <code>@..</code></p>",
        "id": 234099144,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618199062
    },
    {
        "content": "<p>[slack] &lt;mason.protter&gt; Ah I see</p>",
        "id": 234099291,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618199189
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; It seems really slow</p>",
        "id": 234099369,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618199268
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; ```import SciMLBase:tmap<br>\nu,v = ntuple(x-&gt;randn(1000),2)<br>\nU = StructArray((u=u,v=v))<br>\nf(U) = exp(U.u)*sin(U.v)</p>\n<p>@btime f.($U); #   12.092 μs (2 allocations: 7.97 KiB)<br>\n@btime tmap($f,$U); # 438.346 μs (1055 allocations: 3.97 MiB)```</p>",
        "id": 234099478,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618199380
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; oh wow that doesn't look great. im not sure where tmap actually gets used</p>",
        "id": 234099533,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618199421
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; maybe open an issue? it could just be the overhead for spawn, right?</p>",
        "id": 234099567,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618199464
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; does it get better if you make the problem much bigger?</p>",
        "id": 234099583,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618199489
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; LoopVectorization also gets better performance with loops</p>",
        "id": 234099588,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618199500
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; But in most cases the difference is hopefully small.</p>",
        "id": 234099647,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618199543
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; let me check…</p>",
        "id": 234099659,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618199570
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; Because LoopVectorization doesn't flatten yet, the biggest differences will be when <code>eachindex</code> returns linear indices for multidimensional arrays.</p>",
        "id": 234099675,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618199597
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; Once it starts flattening, there'll be a lot more examples, since that optimization isn't valid for broadcasts</p>",
        "id": 234099687,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618199641
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; for a 100k length vector,</p>\n<div class=\"codehilite\" data-code-language=\"1.408\"><pre><span></span><code>  97.911 ms (100118 allocations: 318.53 MiB) # tmap(f,U)```\nso I guess it got worse?\n</code></pre></div>",
        "id": 234099758,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618199709
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; testing this version of tmap now <a href=\"https://discourse.julialang.org/t/type-stable-threaded-map/24498/10?u=jlchan\">https://discourse.julialang.org/t/type-stable-threaded-map/24498/10?u=jlchan</a></p>",
        "id": 234099760,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618199713
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; The problem with broadcasts is that a lot of behavior is determined by information only known at runtime</p>",
        "id": 234099800,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618199762
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; Makes it harder to compile efficient code, as you don't have that runtime information.</p>",
        "id": 234099856,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618199793
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; We can enumerate all the special cases and optimize the common case.</p>",
        "id": 234099874,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618199824
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; yeah, it’s slower than broadcast too.</p>\n<div class=\"codehilite\" data-code-language=\"1.463\"><pre><span></span><code>  2.375 ms (527 allocations: 5.04 MiB) # SciMLBase.tmap\n  3.673 ms (559 allocations: 5.04 MiB) # ktf Transducers tmap```\n</code></pre></div>",
        "id": 234099888,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618199845
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; Enumerating all the special cases can really blow up code.</p>",
        "id": 234099896,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618199854
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; I am only aware of length-1 being the special case.</p>",
        "id": 234099916,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618199875
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; If we have 5 3d arrays...</p>",
        "id": 234099974,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618199895
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; But most of these don't need special handling</p>",
        "id": 234099992,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618199919
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; size == 1 -&gt; stride = 0.<br>\nThat gets most of them (and are the cases LV currently gets)</p>",
        "id": 234100003,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618199937
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; We can use fallback code for all the cases that are not common</p>",
        "id": 234100004,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618199939
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Common being all arrays are of the same size (scalars are also ok)</p>",
        "id": 234100027,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618199986
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; it could be all those individual allocations, i thought i saw an inplace tmap somewhere, if that isn't faster asymptotically then its definitely an issue</p>",
        "id": 234100030,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618199991
    },
    {
        "content": "<p>[slack] &lt;mason.protter&gt; <code>size == 1</code> is already broken in <a href=\"https://github.com/search?q=LoopVectorization.jl&amp;type=Repositories\">LoopVectorization.jl</a> though right?: <a href=\"https://files.slack.com/files-pri/T68168MUP-F01UNBCBXEC/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F01UNBCBXEC/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F01UNBCBXEC/download/image.png\"><img src=\"https://files.slack.com/files-pri/T68168MUP-F01UNBCBXEC/download/image.png\"></a></div>",
        "id": 234100200,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618200077
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; Yeah, I should probably add a check and fall back to regular materialize</p>",
        "id": 234100210,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618200102
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; I should spend some time to improve <code>@..</code> and make a separate package for generic yet reasonably fast bc.</p>",
        "id": 234100217,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618200112
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; @elrodc wanna team up?</p>",
        "id": 234100284,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618200151
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; I'm down</p>",
        "id": 234100300,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618200179
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; Maybe LV broadcasting should also add a \"all same size\" branch to use linear indexing</p>",
        "id": 234100358,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618200242
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; yeah, I wondered about that too. Couldn’t find <code>tmap!</code> in SciMLBase, but will look around online for it later</p>",
        "id": 234100394,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618200245
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; yeah</p>",
        "id": 234100412,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618200257
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; Manually calling <code>vec</code> was way faster in @Jesse Chan's example, since the matrices were 10x10_000.</p>",
        "id": 234100470,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618200325
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; With AVX512, that meant only 10/16 vector lanes were getting used. A pretty extreme example of where that special casing would help a lot.</p>",
        "id": 234100548,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618200409
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; that was nice to know - that <code>vec</code> could fix broadcast not auto-flattening</p>",
        "id": 234100585,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618200433
    },
    {
        "content": "<p>[slack] &lt;mason.protter&gt; Wouldn't you just make a <code>@noinline</code> function barrier between all the special cases? Presumably the function barrier should be very little overhead compared to a broadcast expression, right?</p>",
        "id": 234100588,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618200437
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; noinline will make bc allocate</p>",
        "id": 234100623,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618200480
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; bc must inline all the functions to be not allocating</p>",
        "id": 234100676,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618200503
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; I am worried about compile times. Assuming it all infers (and it had better!) each has to compile</p>",
        "id": 234100706,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618200529
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; But I think 3 cases will be enough, and that's reasonable.</p>",
        "id": 234100719,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618200549
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Well, it needs to inline everything except axes checks</p>",
        "id": 234100721,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618200550
    },
    {
        "content": "<p>[slack] &lt;mason.protter&gt; I don't mean the functions in the broadcast expression, I mean the different forms of the expression</p>",
        "id": 234100727,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618200568
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; (really, it's more than 3 because base broadcasting already makes a bunch of versions)</p>",
        "id": 234100732,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618200579
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Urg, that needs some macro gymnastics that I don’t like</p>",
        "id": 234100789,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618200612
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; There's a 1 in a contiguous axis not known at compile time: base broadcast to handle that</p>",
        "id": 234100791,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618200614
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; All same size: linear indexing</p>",
        "id": 234100806,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618200625
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; It makes broadcasting less powerful</p>",
        "id": 234100830,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618200649
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; Else (there's a 1 in a non-contiuous axis): set the strides associated to the 1s to 0 so that you can index normally using cartesian indexing. This is currently the only behavior.</p>",
        "id": 234100922,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618200743
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; Yeah, creating structs with functions fields (broadcastables) allocates, so they need to inline to get compiled away.</p>",
        "id": 234101000,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618200847
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; LoopVectorization is set up to do those gymnastics</p>",
        "id": 234101025,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618200877
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; (it can run on multiple threads without allocations, afterall, and that obviously isn't inlined)</p>",
        "id": 234101041,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618200910
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; But there is value of course to having a generic <code>@..</code> that handles arbitrary Julia types, like dual numbers</p>",
        "id": 234101082,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618200953
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; or anything someone may want to throw at it. We should still be able to get that to work</p>",
        "id": 234101149,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618201001
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; but just inlining 3 different cases is probably reasonable enough.</p>",
        "id": 234101171,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618201036
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Also runtime alias checks? <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 234101183,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618201064
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; Base broadcasting assumes non-aliasing</p>",
        "id": 234101186,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618201081
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; are we really going to support it?</p>",
        "id": 234101226,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618201091
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; (e.g., you can't do a cumsum through aliased sums with broadcasting)</p>",
        "id": 234101250,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618201125
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Yeah, it’s probably fine not supporting it</p>",
        "id": 234101326,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618201209
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; bc with array alias is pretty weird</p>",
        "id": 234101332,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618201220
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; Although, if we don't add <code>@simd ivdep</code> (which we can't add if we want <code>BitArray</code>s to work...)</p>",
        "id": 234101360,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618201257
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; LLVM would automatically add alias checks</p>",
        "id": 234101366,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618201262
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; Broadcasting breaks these by copying arrays if they alias</p>",
        "id": 234101402,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618201280
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; I guess the semantics of broadcasting are that inputs aren't modified, so that's why it copies?</p>",
        "id": 234101456,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618201330
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; Versus if LLVM's alias checks fail, it'd run the loops serially, modifying the inputs correctly (following the loop as written).</p>",
        "id": 234101486,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618201377
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; If someone wrote a broadcast expression instead of loops, I get how maybe \"as the loops were written\" isn't exactly clear</p>",
        "id": 234101517,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618201441
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; I am not sure how generic can <code>@..</code> be</p>",
        "id": 234101702,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618201586
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; We have to promote styles and such</p>",
        "id": 234101757,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618201667
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; Do we just want to be generic w/ respect to element type, and for array dims assume all dims unknown at compile time are equal?</p>",
        "id": 234101808,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618201695
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; We can have a wrapper style, so <code>@.. a + b + c</code> becomes sth like <code>W(a) .+ W(b) .+ W(c)</code></p>",
        "id": 234101821,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618201731
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; So just a fast bc for Array and StaticArray?</p>",
        "id": 234101842,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618201763
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; I think we can hijack other styles similar, copyto! and such, but generate more versions of them</p>",
        "id": 234101906,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618201824
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; So this can work generically for different array types as well</p>",
        "id": 234101934,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618201842
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; Or extending it by adding the extra 2 cases.</p>\n<p>For broadcasting, I always recursively descended into the Broadcasted objects to reconstruct the loops</p>",
        "id": 234101951,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618201877
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Do you also construct the flattened <code>f</code> ?</p>",
        "id": 234101968,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618201910
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; No</p>",
        "id": 234101971,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618201917
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; Reconstructing the loops lets me avoid making the flattened <code>f</code>. You can instead make the unflattened bunch of calls on individual arguments</p>",
        "id": 234102092,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618202011
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; So the first target is just to have a faster bc for Array that’s generic wrt element types</p>",
        "id": 234102095,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618202017
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; and avoid issues like the compiler giving up on recursions</p>",
        "id": 234102101,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618202027
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Cool</p>",
        "id": 234102147,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618202050
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; • Sizes have to match, and memory layouts. No mixing row major (e.g. <code>Adjoint</code>) and column major arrays...</p>",
        "id": 234102427,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618202374
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; <a href=\"https://github.com/JuliaLang/julia/issues?q=is%3Aissue+is%3Aopen+broadcast+label%3Aperformance\">https://github.com/JuliaLang/julia/issues?q=is%3Aissue+is%3Aopen+broadcast+label%3Aperformance</a></p>",
        "id": 234102540,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618202466
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; Gives some issues where we can make sure that our implementation wins</p>",
        "id": 234102554,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618202488
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; lol, that’s quite a few</p>",
        "id": 234102571,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618202517
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; I like the idea of just generating for loops given a broadcast tree</p>",
        "id": 234102648,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618202561
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; Did you fix this already? I can't get a MWE with lotka volterra to give the same error. For a large reaction network it also doesn't error immediately like before, and I will know if its correct if it ever finishes compiling.</p>\n<p>I have noticed that compile times for adjoint solves are prohibitively long whenever I do anything with ODEFunction, such as passing a dense or sparse jacobian made by MTK, or  Jv.<br>\nThis compared to the more reasonable compile times using sparse automatic differentiation that occurs when no ODEFunction is passed.</p>",
        "id": 234112744,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618211045
    },
    {
        "content": "<p>[slack] &lt;Andreas Schlaginhaufen&gt; Sure. As I just found out I am still getting a \"<em>syntax: invalid let syntax\"</em> error when I try to pass vector valued parameters<br>\np = Dict([<br>\n    g =&gt; 9.806<br>\n    l =&gt; repeat([1.0], n)<br>\n    m =&gt; repeat([1.0], n)<br>\n]).<br>\nIt works fine when I simply use something like,<br>\np = Dict([<br>\n    g =&gt; 9.806<br>\n    l =&gt; 1.0<br>\n    m =&gt; 1.0<br>\n]).<br>\nBut I'll post the code <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 234136898,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618224130
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Threading would be bad on broadcast in the majority of cases.</p>",
        "id": 234140764,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618226369
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I think your idea of threading overhead is off. This is very much expected.</p>",
        "id": 234140775,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618226388
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @elrodc @yingbo_ma what about just adding a few more dispatches?</p>",
        "id": 234140913,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618226449
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I think it's fine to have an Array dispatch that does absolutely everything</p>",
        "id": 234140934,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618226463
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; a BitArray that doesn't ivdep</p>",
        "id": 234140954,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618226467
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; etc.</p>",
        "id": 234140959,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618226468
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; It seems that if one generates a method on the fly with <code>ModelingToolkit</code> and/or <code>Symbolics.jl</code>  (e.g. an analytical derivative), there arise some world age issues when calling it later (i.e. I get the classic <code>The applicable method may be too new: running in world age...</code> error). Does anyone know the right way to do this to avoid this issue?</p>",
        "id": 234141359,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618226704
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you used <code>expression=Val{false}</code> or <a href=\"https://github.com/search?q=RuntimeGeneratedFunctions.jl&amp;type=Repositories\">RuntimeGeneratedFunctions.jl</a>?</p>",
        "id": 234142401,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618227300
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; ehm... no I just did <code>eval(expr)</code> where <code>expr</code> was generated by <code>build_function</code> and then stored the resulting function in a struct <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 234142606,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618227411
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; should I use <code>RuntimeGeneratedFunctions.jl</code> ?</p>",
        "id": 234142619,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618227423
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes</p>",
        "id": 234142679,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618227476
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; We do also want to make sure we avoid things like:<br>\n<a href=\"https://github.com/JuliaLang/julia/issues/27988\">https://github.com/JuliaLang/julia/issues/27988</a><br>\nI didn't try <code>@..</code> , but as the problem comes up with <code>flatten</code>, that's a motivation for avoiding that approach.</p>",
        "id": 234143860,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618228139
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; If it was threading overhead, shouldn’t that get amortized for larger array sizes? Instead <code>tmap</code> goes from <del>40x slower for a length 1000 array to </del>100x slower for a length 100000 array.</p>\n<p>Moreover, just <code>@threads</code> + for loop gives me 4x speedup compared with broadcast.</p>",
        "id": 234144976,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618228739
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>tmap</code> is just <code>@threads</code>?</p>",
        "id": 234145157,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618228832
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; OK, just tried starting from <code>SciMLBase: tmap</code> - it’s the <code>reduce(vcat,batch_data)</code> line that eats up all the time. Replacing that with <code>return batch_data</code> fixes things.</p>\n<p>My use case just needs <code>return batch_data</code>. What is <code>reduce(vcat,batch_data)</code> for?</p>",
        "id": 234146182,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618229368
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; paste a link?</p>",
        "id": 234146783,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618229690
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; oops - that would’ve been easier for you to find, my bad.</p>\n<p><a href=\"https://github.com/SciML/SciMLBase.jl/blob/03f3c62e4e6539ea57f0f51c77b85d6d44152dc0/src/ensemble/basic_ensemble_solve.jl#L232\">https://github.com/SciML/SciMLBase.jl/blob/03f3c62e4e6539ea57f0f51c77b85d6d44152dc0/src/ensemble/basic_ensemble_solve.jl#L232</a></p>",
        "id": 234147254,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618229957
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh, that should be <code>tighten_container_eltype</code></p>",
        "id": 234147443,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618230064
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; actually</p>",
        "id": 234147479,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618230073
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's just not needed at all because of the Core.return_type handling.</p>",
        "id": 234147488,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618230081
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; let's spawn the test suite and see what it says, but I don't think it's necessary.</p>",
        "id": 234147607,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618230138
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/SciML/SciMLBase.jl/pull/50\">https://github.com/SciML/SciMLBase.jl/pull/50</a></p>",
        "id": 234147608,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618230140
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; @chrisrackauckas Using RuntimeGeneratedFunctions, the generated function seems to be allocating, even though it theoretically shouldn't. Would it matter that it was generated from an (immutable) struct method (i.e. callable struct)?</p>",
        "id": 234150040,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618231280
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; no, shouldn't matter.</p>",
        "id": 234150089,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618231299
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; hmm...</p>",
        "id": 234150112,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618231313
    },
    {
        "content": "<p>[slack] &lt;wuerfel&gt; I’m using a continuous callback to check when some condition <code>x</code> hits zero and alter my system parameters <code>p</code> if so. I’d like to inspect this condition later on. Right know I am using a saving callback for that, because <code>x</code> depends und <code>p</code> and since the history of <code>p</code> is not saved I can’t recover the information from the solution.<br>\nTwo problems:</p>\n<ul>\n<li>two conditions for two callbacks. Therefore I am calculating <code>x</code> twice for every time step.</li>\n<li>unlike in the solution, the saving callback won’t save right before the other affect kicks in: in the plots it looks like my condition was never actually reached.</li>\n</ul>\n<p>Any ideas?</p>",
        "id": 234150259,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618231365
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; ok, it's not the function itself, it must be the way I'm calling it. Does splatting cause allocation? e.g. <code>∇f(T,f_argsᵢ...)</code> where the splatted argument is a tuple with fully concrete types. I thought this should be type stable?</p>",
        "id": 234150739,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618231559
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; splatting does unless it's a tuple with fully concrete types</p>",
        "id": 234151559,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618231878
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Indeed our regression tests said it could be removed. Thanks.</p>",
        "id": 234158843,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618234636
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; Sweet, glad it was useful. Thanks for explaining</p>",
        "id": 234159516,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618234854
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Hi @chrisrackauckas I cant use DiffEqOp, I get:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"p\">[</span> <span class=\"n\">Info</span><span class=\"o\">:</span> <span class=\"n\">Precompiling</span> <span class=\"n\">DiffEqOperators</span> <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"n\">fdde737</span><span class=\"o\">-</span><span class=\"mi\">9</span><span class=\"n\">c7f</span><span class=\"o\">-</span><span class=\"mi\">55</span><span class=\"n\">bf</span><span class=\"o\">-</span><span class=\"n\">ade8</span><span class=\"o\">-</span><span class=\"mi\">46</span><span class=\"n\">b3f136cc48</span><span class=\"p\">]</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">LoadError</span><span class=\"o\">:</span> <span class=\"kt\">LoadError</span><span class=\"o\">:</span> <span class=\"kt\">UndefVarError</span><span class=\"o\">:</span> <span class=\"n\">SciMLBase</span> <span class=\"n\">not</span> <span class=\"n\">defined</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n  <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n    <span class=\"err\">@</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">DiffEqOperators</span><span class=\"o\">/</span><span class=\"n\">DMYUH</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">MOLFiniteDifference</span><span class=\"o\">/</span><span class=\"n\">MOL_discretization</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">14</span>\n  <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"n\">mod</span><span class=\"o\">::</span><span class=\"kt\">Module</span><span class=\"p\">,</span> <span class=\"n\">_path</span><span class=\"o\">::</span><span class=\"n\">String</span><span class=\"p\">)</span>\n    <span class=\"err\">@</span> <span class=\"n\">Base</span> <span class=\"o\">./</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">386</span>\n  <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">String</span><span class=\"p\">)</span>\n    <span class=\"err\">@</span> <span class=\"n\">DiffEqOperators</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">DiffEqOperators</span><span class=\"o\">/</span><span class=\"n\">DMYUH</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">DiffEqOperators</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n  <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n    <span class=\"err\">@</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">DiffEqOperators</span><span class=\"o\">/</span><span class=\"n\">DMYUH</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">DiffEqOperators</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">51</span>\n  <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"n\">include</span>\n    <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">386</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n  <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]</span> <span class=\"n\">include_package_for_output</span><span class=\"p\">(</span><span class=\"n\">pkg</span><span class=\"o\">::</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">PkgId</span><span class=\"p\">,</span> <span class=\"n\">input</span><span class=\"o\">::</span><span class=\"n\">String</span><span class=\"p\">,</span> <span class=\"n\">depot_path</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"n\">String</span><span class=\"p\">},</span> <span class=\"n\">dl_load_path</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"n\">String</span><span class=\"p\">},</span> <span class=\"n\">load_path</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"n\">String</span><span class=\"p\">},</span> <span class=\"n\">concrete_deps</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Pair</span><span class=\"p\">{</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">PkgId</span><span class=\"p\">,</span> <span class=\"kt\">UInt64</span><span class=\"p\">}},</span> <span class=\"n\">source</span><span class=\"o\">::</span><span class=\"n\">Nothing</span><span class=\"p\">)</span>\n    <span class=\"err\">@</span> <span class=\"n\">Base</span> <span class=\"o\">./</span><span class=\"n\">loading</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">1213</span>\n  <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n    <span class=\"err\">@</span> <span class=\"n\">none</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n  <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]</span> <span class=\"n\">eval</span>\n    <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">boot</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">360</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n  <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]</span> <span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Expr</span><span class=\"p\">)</span>\n    <span class=\"err\">@</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">MainInclude</span> <span class=\"o\">./</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">446</span>\n <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n    <span class=\"err\">@</span> <span class=\"n\">none</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n<span class=\"kp\">in</span> <span class=\"n\">expression</span> <span class=\"n\">starting</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">rveltz</span><span class=\"o\">/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">DiffEqOperators</span><span class=\"o\">/</span><span class=\"n\">DMYUH</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">MOLFiniteDifference</span><span class=\"o\">/</span><span class=\"n\">MOL_discretization</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">14</span>\n<span class=\"kp\">in</span> <span class=\"n\">expression</span> <span class=\"n\">starting</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">rveltz</span><span class=\"o\">/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">DiffEqOperators</span><span class=\"o\">/</span><span class=\"n\">DMYUH</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">DiffEqOperators</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"n\">Failed</span> <span class=\"n\">to</span> <span class=\"n\">precompile</span> <span class=\"n\">DiffEqOperators</span> <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"n\">fdde737</span><span class=\"o\">-</span><span class=\"mi\">9</span><span class=\"n\">c7f</span><span class=\"o\">-</span><span class=\"mi\">55</span><span class=\"n\">bf</span><span class=\"o\">-</span><span class=\"n\">ade8</span><span class=\"o\">-</span><span class=\"mi\">46</span><span class=\"n\">b3f136cc48</span><span class=\"p\">]</span> <span class=\"n\">to</span> <span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">rveltz</span><span class=\"o\">/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">compiled</span><span class=\"o\">/</span><span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"mi\">6</span><span class=\"o\">/</span><span class=\"n\">DiffEqOperators</span><span class=\"o\">/</span><span class=\"n\">jl_1FxxFE</span><span class=\"o\">.</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">error</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">::</span><span class=\"n\">String</span><span class=\"p\">)</span>\n   <span class=\"err\">@</span> <span class=\"n\">Base</span> <span class=\"o\">./</span><span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">33</span>\n <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"n\">compilecache</span><span class=\"p\">(</span><span class=\"n\">pkg</span><span class=\"o\">::</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">PkgId</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">::</span><span class=\"n\">String</span><span class=\"p\">,</span> <span class=\"n\">internal_stderr</span><span class=\"o\">::</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">TTY</span><span class=\"p\">,</span> <span class=\"n\">internal_stdout</span><span class=\"o\">::</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">TTY</span><span class=\"p\">)</span>\n   <span class=\"err\">@</span> <span class=\"n\">Base</span> <span class=\"o\">./</span><span class=\"n\">loading</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">1360</span>\n <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"n\">compilecache</span><span class=\"p\">(</span><span class=\"n\">pkg</span><span class=\"o\">::</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">PkgId</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">::</span><span class=\"n\">String</span><span class=\"p\">)</span>\n   <span class=\"err\">@</span> <span class=\"n\">Base</span> <span class=\"o\">./</span><span class=\"n\">loading</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">1306</span>\n <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"n\">_require</span><span class=\"p\">(</span><span class=\"n\">pkg</span><span class=\"o\">::</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">PkgId</span><span class=\"p\">)</span>\n   <span class=\"err\">@</span> <span class=\"n\">Base</span> <span class=\"o\">./</span><span class=\"n\">loading</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">1021</span>\n <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"n\">require</span><span class=\"p\">(</span><span class=\"n\">uuidkey</span><span class=\"o\">::</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">PkgId</span><span class=\"p\">)</span>\n   <span class=\"err\">@</span> <span class=\"n\">Base</span> <span class=\"o\">./</span><span class=\"n\">loading</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">914</span>\n <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]</span> <span class=\"n\">require</span><span class=\"p\">(</span><span class=\"n\">into</span><span class=\"o\">::</span><span class=\"kt\">Module</span><span class=\"p\">,</span> <span class=\"n\">mod</span><span class=\"o\">::</span><span class=\"kt\">Symbol</span><span class=\"p\">)</span>\n   <span class=\"err\">@</span> <span class=\"n\">Base</span> <span class=\"o\">./</span><span class=\"n\">loading</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">901</span> <span class=\"sb\">```</span>\n<span class=\"sb\">Is it expected? Note that</span>\n\n<span class=\"sb\">```</span><span class=\"p\">(</span><span class=\"nd\">@v1</span><span class=\"o\">.</span><span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"n\">pkg</span><span class=\"o\">&gt;</span> <span class=\"n\">st</span>\n      <span class=\"n\">Status</span> <span class=\"sb\">`~/.julia/environments/v1.6/Project.toml`</span>\n  <span class=\"p\">[</span><span class=\"mf\">621f4979</span><span class=\"p\">]</span> <span class=\"n\">AbstractFFTs</span> <span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"mf\">0.1</span>\n  <span class=\"p\">[</span><span class=\"mf\">6e4</span><span class=\"n\">b80f9</span><span class=\"p\">]</span> <span class=\"n\">BenchmarkTools</span> <span class=\"n\">v0</span><span class=\"o\">.</span><span class=\"mf\">5.0</span>\n  <span class=\"p\">[</span><span class=\"mf\">0f109</span><span class=\"n\">fa4</span><span class=\"p\">]</span> <span class=\"n\">BifurcationKit</span> <span class=\"n\">v0</span><span class=\"o\">.</span><span class=\"mf\">1.3</span> <span class=\"sb\">`https://github.com/rveltz/BifurcationKit.jl.git#master`</span>\n  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"n\">ca6dcf5</span><span class=\"p\">]</span> <span class=\"n\">BlockPowerFlow</span> <span class=\"n\">v0</span><span class=\"o\">.</span><span class=\"mf\">1.0</span> <span class=\"sb\">`https://github.com/exanauts/BlockPowerFlow.jl#master`</span>\n  <span class=\"p\">[</span><span class=\"mi\">052768</span><span class=\"n\">ef</span><span class=\"p\">]</span> <span class=\"n\">CUDA</span> <span class=\"n\">v2</span><span class=\"o\">.</span><span class=\"mf\">6.3</span>\n  <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"n\">fdde737</span><span class=\"p\">]</span> <span class=\"n\">DiffEqOperators</span> <span class=\"n\">v4</span><span class=\"o\">.</span><span class=\"mf\">23.0</span>\n  <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"n\">a1cc6ca</span><span class=\"p\">]</span> <span class=\"n\">FFTW</span> <span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"mf\">3.2</span>\n  <span class=\"p\">[</span><span class=\"mi\">28</span><span class=\"n\">b8d3ca</span><span class=\"p\">]</span> <span class=\"n\">GR</span> <span class=\"n\">v0</span><span class=\"o\">.</span><span class=\"mf\">57.3</span>\n  <span class=\"p\">[</span><span class=\"mb\">0b1</span><span class=\"n\">a1467</span><span class=\"p\">]</span> <span class=\"n\">KrylovKit</span> <span class=\"n\">v0</span><span class=\"o\">.</span><span class=\"mf\">5.2</span>\n  <span class=\"p\">[</span><span class=\"mf\">7f56</span><span class=\"n\">f5a3</span><span class=\"p\">]</span> <span class=\"n\">LSODA</span> <span class=\"n\">v0</span><span class=\"o\">.</span><span class=\"mf\">6.2</span>\n  <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"n\">a12625a</span><span class=\"p\">]</span> <span class=\"n\">LinearMaps</span> <span class=\"n\">v3</span><span class=\"o\">.</span><span class=\"mf\">3.0</span>\n  <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"n\">d4711f2</span><span class=\"p\">]</span> <span class=\"n\">MatrixMarket</span> <span class=\"n\">v0</span><span class=\"o\">.</span><span class=\"mf\">3.1</span>\n  <span class=\"p\">[</span><span class=\"n\">cddba4cf</span><span class=\"p\">]</span> <span class=\"n\">MeanField2d</span> <span class=\"n\">v0</span><span class=\"o\">.</span><span class=\"mf\">1.0</span> <span class=\"sb\">`https://gitlab.inria.fr/rveltz/meanfield2d.git#master`</span>\n  <span class=\"p\">[</span><span class=\"n\">d96e819e</span><span class=\"p\">]</span> <span class=\"n\">Parameters</span> <span class=\"n\">v0</span><span class=\"o\">.</span><span class=\"mf\">12.2</span>\n  <span class=\"p\">[</span><span class=\"mi\">86206</span><span class=\"n\">cdf</span><span class=\"p\">]</span> <span class=\"n\">PiecewiseDeterministicMarkovProcesses</span> <span class=\"n\">v0</span><span class=\"o\">.</span><span class=\"mf\">0.1</span> <span class=\"sb\">`https://github.com/rveltz/PiecewiseDeterministicMarkovProcesses.jl.git#master`</span>\n  <span class=\"p\">[</span><span class=\"mi\">91</span><span class=\"n\">a5bcdd</span><span class=\"p\">]</span> <span class=\"n\">Plots</span> <span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"mf\">11.2</span>\n  <span class=\"p\">[</span><span class=\"mf\">92933f4</span><span class=\"n\">c</span><span class=\"p\">]</span> <span class=\"n\">ProgressMeter</span> <span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"mf\">5.0</span>\n  <span class=\"p\">[</span><span class=\"mi\">295</span><span class=\"n\">af30f</span><span class=\"p\">]</span> <span class=\"n\">Revise</span> <span class=\"n\">v3</span><span class=\"o\">.</span><span class=\"mf\">1.14</span>\n  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"n\">bca4576</span><span class=\"p\">]</span> <span class=\"n\">SciMLBase</span> <span class=\"n\">v1</span><span class=\"o\">.</span><span class=\"mf\">11.0</span>\n  <span class=\"p\">[</span><span class=\"n\">efcf1570</span><span class=\"p\">]</span> <span class=\"n\">Setfield</span> <span class=\"n\">v0</span><span class=\"o\">.</span><span class=\"mf\">7.0</span>\n  <span class=\"p\">[</span><span class=\"mi\">65</span><span class=\"n\">edfddc</span><span class=\"p\">]</span> <span class=\"n\">SixelTerm</span> <span class=\"n\">v0</span><span class=\"o\">.</span><span class=\"mf\">1.0</span> <span class=\"sb\">`https://github.com/tshort/SixelTerm.jl#master````</span>\n</code></pre></div>",
        "id": 234161346,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618235427
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; uhh not expected.</p>",
        "id": 234161496,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618235480
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; what can I do?</p>",
        "id": 234162081,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618235658
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>]resolve</code>?</p>",
        "id": 234162812,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618235890
    },
    {
        "content": "<p>[slack] &lt;mjsheikh&gt; Add the SciML base package</p>",
        "id": 234162825,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618235895
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; I did both, see the <code>]st</code>  above</p>",
        "id": 234162855,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618235908
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; The tests run fine, so I think you just need to <code>resolve</code>?</p>",
        "id": 234162977,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618235949
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; no luckl</p>",
        "id": 234164114,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618236296
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; odd.</p>",
        "id": 234164134,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618236305
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; <code>``[rveltz@nefgpu01 ~]$ sh juliaLoad.sh\nloading CUDA OK\n               _\n   _       _ _(_)_     |  Documentation: https://docs.julialang.org\n  (_)     | (_) (_)    |\n   _ _   _| |_  __ _   |  Type \"?\" for help, \"]?\" for Pkg help.\n  | | | | | | |/ _</code> |  |<br>\n  | | |_| | | | (_| |  |  Version 1.6.0 (2021-03-24)<br>\n _/ |\\__'_|_|_|\\__'_|  |<br>\n|__/                   |</p>\n<p>julia&gt; using Di<br>\nDiffEqOperators Distributed<br>\njulia&gt; using DiffEqOperators<br>\n[ Info: Precompiling DiffEqOperators [9fdde737-9c7f-55bf-ade8-46b3f136cc48]<br>\nERROR: LoadError: LoadError: UndefVarError: SciMLBase not defined<br>\nStacktrace:<br>\n  [1] top-level scope<br>\n    @ ~/.julia/packages/DiffEqOperators/DMYUH/src/MOLFiniteDifference/MOL_discretization.jl:14<br>\n  [2] include(mod::Module, _path::String)<br>\n    @ Base ./Base.jl:386<br>\n  [3] include(x::String)<br>\n    @ DiffEqOperators ~/.julia/packages/DiffEqOperators/DMYUH/src/DiffEqOperators.jl:1<br>\n  [4] top-level scope<br>\n    @ ~/.julia/packages/DiffEqOperators/DMYUH/src/DiffEqOperators.jl:51<br>\n  [5] include<br>\n    @ ./Base.jl:386 [inlined]<br>\n  [6] include_package_for_output(pkg::Base.PkgId, input::String, depot_path::Vector{String}, dl_load_path::Vector{String}, load_path::Vector{String}, concrete_deps::Vector{Pair{Base.PkgId, UInt64}}, source::Nothing)<br>\n    @ Base ./loading.jl:1213<br>\n  [7] top-level scope<br>\n    @ none:1<br>\n  [8] eval<br>\n    @ ./boot.jl:360 [inlined]<br>\n  [9] eval(x::Expr)<br>\n    @ Base.MainInclude ./client.jl:446<br>\n [10] top-level scope<br>\n    @ none:1<br>\nin expression starting at /home/rveltz/.julia/packages/DiffEqOperators/DMYUH/src/MOLFiniteDifference/MOL_discretization.jl:14<br>\nin expression starting at /home/rveltz/.julia/packages/DiffEqOperators/DMYUH/src/DiffEqOperators.jl:1<br>\nERROR: Failed to precompile DiffEqOperators [9fdde737-9c7f-55bf-ade8-46b3f136cc48] to /home/rveltz/.julia/compiled/v1.6/DiffEqOperators/jl_kXCstl.<br>\nStacktrace:<br>\n [1] error(s::String)<br>\n   @ Base ./error.jl:33<br>\n [2] compilecache(pkg::Base.PkgId, path::String, internal_stderr::Base.TTY, internal_stdout::Base.TTY)<br>\n   @ Base ./loading.jl:1360<br>\n [3] compilecache(pkg::Base.PkgId, path::String)<br>\n   @ Base ./loading.jl:1306<br>\n [4] _require(pkg::Base.PkgId)<br>\n   @ Base ./loading.jl:1021<br>\n [5] require(uuidkey::Base.PkgId)<br>\n   @ Base ./loading.jl:914<br>\n [6] require(into::Module, mod::Symbol)<br>\n   @ Base ./loading.jl:901</p>\n<p>(@v1.6) pkg&gt; resolve<br>\n  No Changes to <code>~/.julia/environments/v1.6/Project.toml</code><br>\n  No Changes to <code>~/.julia/environments/v1.6/Manifest.toml</code></p>\n<p>julia&gt; using DiffEqOperators<br>\n[ Info: Precompiling DiffEqOperators [9fdde737-9c7f-55bf-ade8-46b3f136cc48]<br>\nERROR: LoadError: LoadError: UndefVarError: SciMLBase not defined<br>\nStacktrace:<br>\n  [1] top-level scope<br>\n    @ ~/.julia/packages/DiffEqOperators/DMYUH/src/MOLFiniteDifference/MOL_discretization.jl:14<br>\n  [2] include(mod::Module, _path::String)<br>\n    @ Base ./Base.jl:386<br>\n  [3] include(x::String)<br>\n    @ DiffEqOperators ~/.julia/packages/DiffEqOperators/DMYUH/src/DiffEqOperators.jl:1<br>\n  [4] top-level scope<br>\n    @ ~/.julia/packages/DiffEqOperators/DMYUH/src/DiffEqOperators.jl:51<br>\n  [5] include<br>\n    @ ./Base.jl:386 [inlined]<br>\n  [6] include_package_for_output(pkg::Base.PkgId, input::String, depot_path::Vector{String}, dl_load_path::Vector{String}, load_path::Vector{String}, concrete_deps::Vector{Pair{Base.PkgId, UInt64}}, source::Nothing)<br>\n    @ Base ./loading.jl:1213<br>\n  [7] top-level scope<br>\n    @ none:1<br>\n  [8] eval<br>\n    @ ./boot.jl:360 [inlined]<br>\n  [9] eval(x::Expr)<br>\n    @ Base.MainInclude ./client.jl:446<br>\n [10] top-level scope<br>\n    @ none:1<br>\nin expression starting at /home/rveltz/.julia/packages/DiffEqOperators/DMYUH/src/MOLFiniteDifference/MOL_discretization.jl:14<br>\nin expression starting at /home/rveltz/.julia/packages/DiffEqOperators/DMYUH/src/DiffEqOperators.jl:1<br>\nERROR: Failed to precompile DiffEqOperators [9fdde737-9c7f-55bf-ade8-46b3f136cc48] to /home/rveltz/.julia/compiled/v1.6/DiffEqOperators/jl_FFcsjv.<br>\nStacktrace:<br>\n [1] error(s::String)<br>\n   @ Base ./error.jl:33<br>\n [2] compilecache(pkg::Base.PkgId, path::String, internal_stderr::Base.TTY, internal_stdout::Base.TTY)<br>\n   @ Base ./loading.jl:1360<br>\n [3] compilecache(pkg::Base.PkgId, path::String)<br>\n   @ Base ./loading.jl:1306<br>\n [4] _require(pkg::Base.PkgId)<br>\n   @ Base ./loading.jl:1021<br>\n [5] require(uuidkey::Base.PkgId)<br>\n   @ Base ./loading.jl:914<br>\n [6] require(into::Module, mod::Symbol)<br>\n   @ Base ./loading.jl:901</p>\n<p>(@v1.6) pkg&gt; s<br>\nERROR: Could not determine command</p>\n<p>(@v1.6) pkg&gt; st<br>\n      Status <code>~/.julia/environments/v1.6/Project.toml</code><br>\n  [621f4979] AbstractFFTs v1.0.1<br>\n  [6e4b80f9] BenchmarkTools v0.5.0<br>\n  [0f109fa4] BifurcationKit v0.1.3 <code>https://github.com/rveltz/BifurcationKit.jl.git#master</code><br>\n  [0ca6dcf5] BlockPowerFlow v0.1.0 <code>https://github.com/exanauts/BlockPowerFlow.jl#master</code><br>\n  [052768ef] CUDA v2.6.3<br>\n  [9fdde737] DiffEqOperators v4.23.0<br>\n  [7a1cc6ca] FFTW v1.3.2<br>\n  [28b8d3ca] GR v0.57.3<br>\n  [0b1a1467] KrylovKit v0.5.2<br>\n  [7f56f5a3] LSODA v0.6.2<br>\n  [7a12625a] LinearMaps v3.3.0<br>\n  [4d4711f2] MatrixMarket v0.3.1<br>\n  [cddba4cf] MeanField2d v0.1.0 <code>https://gitlab.inria.fr/rveltz/meanfield2d.git#master</code><br>\n  [d96e819e] Parameters v0.12.2<br>\n  [86206cdf] PiecewiseDeterministicMarkovProcesses v0.0.1 <code>https://github.com/rveltz/PiecewiseDeterministicMarkovProcesses.jl.git#master</code><br>\n  [91a5bcdd] Plots v1.11.2<br>\n  [92933f4c] ProgressMeter v1.5.0<br>\n  [295af30f] Revise v3.1.14<br>\n  [0bca4576] SciMLBase v1.11.1<br>\n  [efcf1570] Setfield v0.7.0<br>\n  [65edfddc] SixelTerm v0.1.0 `https://github.com/tshort/SixelTerm.jl#master````</p>",
        "id": 234164214,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618236335
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; well a tag is needed anyways.</p>",
        "id": 234164409,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618236402
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and master is good, so</p>",
        "id": 234164425,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618236406
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it must've been the ScaledDiffEqOperator move</p>",
        "id": 234164437,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618236414
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; OK trying the master now</p>",
        "id": 234164468,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618236426
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; dont work <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span> I had the same issue on another cluster machine yesterday and a <code>] resolve</code>  did the thing</p>",
        "id": 234164866,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618236537
    },
    {
        "content": "<p>[slack] &lt;Gabriel Baraldi&gt; I'm not sure if it will work, but deleting the manifest and calling <code>] instantiate</code> solved some issues before</p>",
        "id": 234165133,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618236632
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; i removed Project.toml and reintalled everything <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 234165971,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618236909
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; thank you  everybody</p>",
        "id": 234165992,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618236913
    },
    {
        "content": "<p>[slack] &lt;Gabriel Baraldi&gt; nuking the enviroment is always a good option its just annoying</p>",
        "id": 234166162,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618236948
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://julialang.slack.com/archives/C8P49NJHG/p1618238126107500\">https://julialang.slack.com/archives/C8P49NJHG/p1618238126107500</a></p>",
        "id": 234172409,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618239046
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; yeah that's why I am confused... they are definitely concrete types. Is there a quick alternative to splatting? like a macro or generated function that just expands the arguments?</p>",
        "id": 234182887,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618242436
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>ntuple</code>?</p>",
        "id": 234189239,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618244924
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @Stephan Sahm is running a <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a> tutorial right now! See <a href=\"https://discourse.julialang.org/t/meetup-introduction-to-differential-equations-in-julia/58776/5\">https://discourse.julialang.org/t/meetup-introduction-to-differential-equations-in-julia/58776/5</a> if you're interested. I don't know much about this meetup but it looks like fun <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 234197044,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618248015
    },
    {
        "content": "<p>[slack] &lt;tshort&gt; I have a simple model I'm having trouble with. The following model solves, but as far as I can tell, the answers are all zeros (not right).</p>",
        "id": 234210434,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618253312
    },
    {
        "content": "<p>[slack] &lt;tshort&gt; <code>using ModelingToolkit\n@parameters t\nconst D = Differential(t)\n@variables v(t)\nsys = initialize_system_structure(ODESystem([0 ~ 0.3v + 0.005D(v) - 0.1sin(377t)], t))\nprob = ODAEProblem(sys, [v =&gt; 0.0], (0, 0.1))\nusing DifferentialEquations, Plots\nsol = solve(prob, Tsit5())\nplot(sol)</code></p>",
        "id": 234210442,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618253315
    },
    {
        "content": "<p>[slack] &lt;tshort&gt; Am I goofing something?</p>",
        "id": 234210468,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618253331
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>using ModelingToolkit\n@parameters t\nconst D = Differential(t)\n@variables v(t)\nsys = structural_simplify(ODESystem([D(v) ~ (0.3v - 0.1sin(377t))/-0.005], t))\nprob = ODAEProblem(sys, [v =&gt; 0.0], (0, 0.1))\nusing Plots\nsol = solve(prob, Tsit5())\nplot(sol)</code></p>",
        "id": 234212858,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618254308
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; is fine'</p>",
        "id": 234212859,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618254308
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @yingbo_ma the thing that used to throw an error for derivatives on the rhs seems to no longer error <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span></p>",
        "id": 234212918,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618254324
    },
    {
        "content": "<p>[slack] &lt;tshort&gt; The reason I specified it that way is because that's the model I got back from <code>structural_simplify</code> from this model: <a href=\"https://github.com/SciML/ModelingToolkit.jl/issues/963\">https://github.com/SciML/ModelingToolkit.jl/issues/963</a>.</p>",
        "id": 234213195,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618254445
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; We don’t support derivatives on the rhs</p>",
        "id": 234213400,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618254516
    },
    {
        "content": "<p>[slack] &lt;tshort&gt; Ahh. Got it.</p>",
        "id": 234213485,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618254539
    },
    {
        "content": "<p>[slack] &lt;tshort&gt; Thanks!</p>",
        "id": 234213792,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618254677
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah, it's something that is coming.</p>",
        "id": 234213824,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618254695
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it used to error for that reason</p>",
        "id": 234213832,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618254700
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I think the lowering of D(v) on the RHS now actually works because of DAEProblem</p>",
        "id": 234213845,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618254712
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but that means it builds something we don't want there <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 234213868,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618254721
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Doing this brings it down to just one 16 byte (pointer?) allocation per call:<br>\n<code>@generated unsplat(f, args::NTuple{N}) where {N} = :(f($([:(args[$k]) for k in 1:N]...)))</code></p>\n<p>where <code>f</code> is the runtime generated function. Any chance that <code>RuntimeGeneratedFunctions.init</code> or the context module might affect this?</p>",
        "id": 234235737,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618263794
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; return <code>nothing</code> at the end?</p>",
        "id": 234235877,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618263865
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; at the end of what? the generated function?</p>",
        "id": 234236210,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618264067
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; It's created by <code>build_function</code> so I don't think I have control of that? And it's an analytical derivative so it has to return the derivative, I suppose.</p>",
        "id": 234236282,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618264099
    },
    {
        "content": "<p>[slack] &lt;tshort&gt; I have a <a href=\"https://github.com/tshort/Sims.jl/pull/79\">https://github.com/tshort/Sims.jl/pull/79</a> to an old package of mine called <a href=\"http://tshort.github.io/Sims.jl/latest/\">http://tshort.github.io/Sims.jl/latest/</a> to use ModelingToolkit. This is an alternative way to compose acausal models out of components with MTK. Sims uses a functional style as opposed to the more object-oriented<br>\napproach of ModelingToolkit, Modia, and Modelica. See an example <a href=\"https://github.com/tshort/Sims.jl/blob/2fb68ba5c1360202ecd99939ae5ac41be1e2e226/examples/circuit.jl\">https://github.com/tshort/Sims.jl/blob/2fb68ba5c1360202ecd99939ae5ac41be1e2e226/examples/circuit.jl</a>. This package becomes a ridiculously small amount of code. It's only a flattening pass. MTK does all the work.</p>",
        "id": 234237099,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618264629
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; DASKR has JLLs now BTW</p>",
        "id": 234237392,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618264809
    },
    {
        "content": "<p>[slack] &lt;tshort&gt; To me, model composition with this approach is cleaner than the Modelica approach with <code>connect</code>s all over.</p>",
        "id": 234237401,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618264815
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @yingbo_ma is adding connects, because delayed connections are useful for some things, but I agree I like just writing the equation. I think it's much more clear in a lot of cases.</p>",
        "id": 234237455,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618264862
    },
    {
        "content": "<p>[slack] &lt;tshort&gt; Great on DASKR, but the MTK version of Sims can use any MTK solver.</p>",
        "id": 234237497,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618264895
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah</p>",
        "id": 234237508,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618264905
    },
    {
        "content": "<p>[slack] &lt;tshort&gt; Delayed connections are interesting to me, too. In the original Sims, I had delayed variables to get the same (I think) effect. Edit: actually, it was a <code>delay</code> function that I used.</p>",
        "id": 234237607,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618264946
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Wrapping the function in <code>Base.splat</code> after it gets created seems to fix it, zero allocations. I'm pretty sure there's some kind of bug here with <code>RuntimeGeneratedFunctions</code> and/or the compiler with how splatting gets lowered. That seems like the only reason why the same code doesn't allocate for a normal function but allocates for a runtime generated one. But I can't reproduce it in a MWE, so....</p>",
        "id": 234238779,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618265665
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; Is there an example of <a href=\"https://github.com/search?q=DiffEq.jl&amp;type=Repositories\">DiffEq.jl</a> used with StructArrays?</p>",
        "id": 234255171,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618277469
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I don't know of one.</p>",
        "id": 234255479,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618277750
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 234256100,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618278258
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; anyone have any suggestions for dealing with exploding gradients in an ODE where the physical variables are very large? e.g. energy in J is on the order of 10^8, so it seems to cause my gradients to go to NaN</p>",
        "id": 234295415,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618306539
    },
    {
        "content": "<p>[slack] &lt;SebastianM-C&gt; You could try to reformulate your problem in other units (e.g. MJ)</p>",
        "id": 234296509,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618307122
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; hmm, yes that could work. I guess I would have to change all of the various constants to avoid having to convert back to J.</p>",
        "id": 234297492,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618307640
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; see <a href=\"https://arxiv.org/abs/2103.15341\">https://arxiv.org/abs/2103.15341</a></p>",
        "id": 234298763,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618308212
    },
    {
        "content": "<p>[slack] &lt;caseykneale&gt; is it significantly slower to train a NeuralSDE vs a NeuralODE?</p>",
        "id": 234309634,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618314125
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Nice! But at the moment, I am (for now) just trying to optimize parameters in the system, not replacing the entire equation with a neural network. So I don't see how the scaling approach in equation 11 would work.</p>",
        "id": 234310803,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618314789
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes</p>",
        "id": 234313395,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618315982
    },
    {
        "content": "<p>[slack] &lt;atiyo ghosh&gt; is operating on <code>log(energy)</code> an option?</p>",
        "id": 234315396,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618316881
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Hmm. I'm not sure. I assume you mean solving the equation d(log(E))/dt ? I suppose you would have to derive the heat equation for log-energy.</p>",
        "id": 234320460,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618318985
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Ah, I see, the gradient scales with the number of time steps:: <a href=\"https://files.slack.com/files-pri/T68168MUP-F01U22QHGRK/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F01U22QHGRK/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F01U22QHGRK/download/image.png\"><img src=\"https://files.slack.com/files-pri/T68168MUP-F01U22QHGRK/download/image.png\"></a></div>",
        "id": 234327072,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618321413
    },
    {
        "content": "<p>[slack] &lt;caseykneale&gt; anyone else having trouble having both DiffEqFlux and Zygote in the same package. I know it sounds dumb obviously one pkg depends on the other, but if I try to make a Zygote adjoint I can't precompile DiffEqFlux - edit: actually it might not be related to Zygote. edit - taking this to general as I think this is a 1.6 buggy bug</p>",
        "id": 234329525,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618322271
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 234341188,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618325997
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; Was curious, turns out it works fine if your StructArray has vector/array entries. Neat!</p>\n<p>MWE:</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    dQ .= Q\n    return nothing\nend\nQ = StructArray([MVector{2}(1.,2.) for i = 1:5])\nprob = ODEProblem(rhs!,Q,(0.0,.10))\nsol = solve(prob,Tsit5())```\n</code></pre></div>",
        "id": 234341527,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618326039
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; @chrisrackauckas I think the problem might be that the parameters are being used in a non-linear optimization routine within the step function (solving the equation E = TC + Ltheta). It's not clear to me whether or not it's mathematically correct for autodiff to accumulate gradients through that solver (but my intuition says it is not). What would be the best way for me to exclude the Newton iteration from the autodiff computation and just use the final (solved) values? A custom <code>frule</code> from <code>ChainRules</code> ?</p>",
        "id": 234362761,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618332936
    },
    {
        "content": "<p>[slack] &lt;tshort&gt; Anyone know anything about (a still WIP) <a href=\"https://github.com/search?q=OpenModelica.jl&amp;type=Repositories\">OpenModelica.jl</a>? Interesting slides: <a href=\"https://www.openmodelica.org/images/M_images/OpenModelicaWorkshop_2021/0945_OMWorkshop_2021.pdf\">https://www.openmodelica.org/images/M_images/OpenModelicaWorkshop_2021/0945_OMWorkshop_2021.pdf</a></p>",
        "id": 234415873,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618355419
    },
    {
        "content": "<p>[slack] &lt;tshort&gt; 100,000 lines of MetaModelica code translated... Sounds complex. Anyway, exciting to see more folks jumping in here.</p>",
        "id": 234415977,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618355497
    },
    {
        "content": "<p>[slack] &lt;tshort&gt; Would be nice to see MTK compatibility.</p>",
        "id": 234416044,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618355524
    },
    {
        "content": "<p>[slack] &lt;Dodd Gray&gt; thanks!</p>",
        "id": 234433147,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618368478
    },
    {
        "content": "<p>[slack] &lt;tshort&gt; Is an ODAEProblem in MTK supposed to be able to handle a DAE with no differential terms? I'm trying one (to mimic <a href=\"https://simulationresearch.lbl.gov/modelica/releases/msl/3.2/help/Modelica_Electrical_Analog_Examples.html#Modelica.Electrical.Analog.Examples.HeatingResistor\">https://simulationresearch.lbl.gov/modelica/releases/msl/3.2/help/Modelica_Electrical_Analog_Examples.html#Modelica.Electrical.Analog.Examples.HeatingResistor</a>) and seeing a stack overflow upon solving.</p>",
        "id": 234481905,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618399577
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I don't think it can.</p>",
        "id": 234483856,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618400654
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Make it a SteadyStateProblem?</p>",
        "id": 234483866,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618400665
    },
    {
        "content": "<p>[slack] &lt;tshort&gt; I'll try that. Is this something that should be supported or at least documented? Modelica tools handle this sort of model.</p>",
        "id": 234484079,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618400772
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; We need to make it a bit easier to do, I agree.</p>",
        "id": 234484450,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618400997
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It's worth an issue</p>",
        "id": 234484508,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618401006
    },
    {
        "content": "<p>[slack] &lt;tshort&gt; Ok. I'll file one.</p>",
        "id": 234484538,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618401025
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; We're slowing move more towards just having a <code>System</code> type from which <code>DEProblem</code> is what you call, and it figures out whether to make it a <code>SDESystem</code> and create an <code>SDEProblem</code> etc.</p>",
        "id": 234484571,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618401038
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; But for now what everyone is using is the lower pieces of this. Like <code>solve(prob,Tsit5())</code>  before <code>solve(prob)</code> is made.</p>",
        "id": 234484604,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618401065
    },
    {
        "content": "<p>[slack] &lt;tshort&gt; Oh, that's cool!</p>",
        "id": 234484619,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618401074
    },
    {
        "content": "<p>[slack] &lt;caseykneale&gt; that'd be really snappy</p>",
        "id": 234501609,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618408138
    },
    {
        "content": "<p>[slack] &lt;caseykneale&gt; any pointers for when a NODE won't fit smooth real world data? The lineshape of the data isn't all that bad compared to what I want to actually fit later on. Looks like an asymetric guassian with some random lumps and bumps along the way in it. IE: it's not far from some of the examples.</p>\n<p>I've tried tuning the NN topology, different solvers, ANODEs, etc. Adding regularization parameters, etc. I have an idea for a better objective function, but overall I'm not sure if something else I'm doing is wrong.</p>",
        "id": 234502381,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618408437
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; did you follow the FAQ?</p>",
        "id": 234509965,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618411240
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; Am i misremembering, or did you use to be able to index into threaded EnsembleSolutions with <code>sols[i]</code>  to get the ith solution? Now it gives me the group of solutions that were solved by the ith thread. When I <code>map</code> over <code>sols</code> though, it acts as if it’s a single vector of solutions, like I’d expect.</p>",
        "id": 234536594,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618419856
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; Actually, this looks like it might be a bug, so I’ll file an issue. When I <code>plot(sols)</code> it gives me an error that <code>type Array has no field u</code> which sounds like the <code>Vector</code> of <code>ODECompositeSolution</code>s inside is supposed to be an <code>ArrayPartition</code></p>",
        "id": 234541249,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618421600
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's a bug</p>",
        "id": 234543782,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618422436
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/SciML/SciMLBase.jl/pull/51\">https://github.com/SciML/SciMLBase.jl/pull/51</a></p>",
        "id": 234543789,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618422437
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Wow retroactive bug fix <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 234544762,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618422785
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; You filed the bug fix PR before it was brought up</p>",
        "id": 234544807,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618422811
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah... I noticed I made a goof yesterday</p>",
        "id": 234545477,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618423063
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; I have a problem that I can write in the form <code>M*du = A*u</code> where <code>M</code> and <code>A</code> are sparse matrices and will be quite large. Is there a (good) way to solve for <code>u(t)</code> where I trade the non-sparse matrix exponential for a sparse-preserving time-stepped solution?</p>",
        "id": 234546946,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618423559
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; If you use an implicit solver, it will try to minimize the number of LU factorization</p>",
        "id": 234547365,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618423704
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Ah, maybe just use a Rosenbrock solver</p>",
        "id": 234547507,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618423778
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; And pass <code>jac</code> and <code>jac_prototype</code> to the ODEFunction</p>",
        "id": 234547649,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618423828
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; awesome, thanks! I will dig into that. I assume there is no issue also passing in the LHS matrix <code>M</code> as the mass matrix?</p>",
        "id": 234548123,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618424023
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; at the moment it is nonsingular</p>",
        "id": 234548159,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618424040
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Yeah, but there might be performance issues with W matrix generation</p>",
        "id": 234548382,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618424120
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; what is W?</p>",
        "id": 234548424,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618424137
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; I - gamma<em>dt</em>J</p>",
        "id": 234548445,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618424147
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Where gamma is a real scalar</p>",
        "id": 234548467,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618424157
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; If there’s a performance problem, then file an issue to OrdinaryDiffEq. I will take a look.</p>",
        "id": 234548588,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618424193
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; is your thought that I is dense and when then generate another dense matrix?</p>",
        "id": 234548636,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618424217
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; No, the indexing to a sparse matrix might be quite slow.</p>",
        "id": 234548736,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618424256
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Also, make sure that the sparsity pattern of J is the same with <code>M - gamma*dt*J</code></p>",
        "id": 234548817,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618424284
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; So the sparsity pattern of W should be the union of J and M</p>",
        "id": 234548968,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618424338
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; M is both symmetric and nonzero on the diagonal so should be fine</p>",
        "id": 234548975,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618424342
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; oh with J, okay</p>",
        "id": 234549031,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618424363
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; But we just assume that the sparsity pattern of J is the superset of M, so we use the sparsity pattern of J to make W</p>",
        "id": 234549033,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618424364
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; so actually from above <code>A</code> is generated from <code>M</code> so there have the same pattern</p>",
        "id": 234549168,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618424410
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Cool</p>",
        "id": 234549193,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618424422
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; I will need to read through the docs with these new keywords, will report back with any (or no) issues! Thanks again</p>",
        "id": 234549295,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618424461
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Regrettably, there’re not many ODE solvers that support matrix matrices besides Rosenbrock solvers.</p>",
        "id": 234549659,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618424599
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; @Andrew Leonard you can actually just use the <code>DiffEqArrayOperator</code> like <a href=\"https://github.com/SciML/OrdinaryDiffEq.jl/blob/master/test/algconvergence/linear_method_tests.jl#L6\">https://github.com/SciML/OrdinaryDiffEq.jl/blob/master/test/algconvergence/linear_method_tests.jl#L6</a></p>",
        "id": 234550723,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618425022
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; ah, it doesn’t work. I will try to file a PR today.</p>",
        "id": 234551168,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618425201
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; that looks awesome, and exactly what I am looking for. Including the Affine variant.</p>",
        "id": 234551334,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618425256
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; where is <code>DiffEqArrayOperator</code> actually defined...? I can't seem to find it anywhere (DiffEqBase, DiffEqOperators,et.c)</p>",
        "id": 234554103,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618426414
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Maybe SciMLBase?</p>",
        "id": 234554146,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618426431
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; I didn't see an import statement, but I will check there</p>",
        "id": 234554236,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618426460
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; BTW, reflection in Julia is very powerful. You can do things like</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"c\"># 1 method for type constructor:</span>\n<span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">DiffEqArrayOperator</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">::</span><span class=\"n\">AType</span><span class=\"p\">;</span> <span class=\"n\">update_func</span><span class=\"p\">)</span> <span class=\"n\">where</span> <span class=\"n\">AType</span> <span class=\"kp\">in</span> <span class=\"n\">SciMLBase</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">scheme</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">SciMLBase</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">operators</span><span class=\"o\">/</span><span class=\"n\">basic_operators</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">92</span><span class=\"sb\">```</span>\n</code></pre></div>",
        "id": 234554241,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618426461
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; lol look at that, thanks!</p>",
        "id": 234554302,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618426487
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; so it looks like I am able to construct an <code>ODEFunction</code> from the <code>DiffEqArrayOperator</code> and pass in my mass matrix?<br>\n<code>ODEFunction(array_op;mass_matrix=M)</code></p>",
        "id": 234556593,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618427283
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Yeah</p>",
        "id": 234557219,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618427530
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; is it possible to tell solve that my mass matrix is not singular, aka my problem is not a dae? The <code>ArrayInterface</code> doesn't seem to like my <code>Symmetric{Float64,SparseMatrixCSC{Float64,Int64}}</code> type...</p>",
        "id": 234605932,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618452919
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; @Andrew Leonard could you give me a MWE? I will look into it</p>",
        "id": 234608941,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618455568
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; here is the stacktrace (which I can give now):</p>\n<div class=\"codehilite\" data-code-language=\"error\"><pre><span></span><code>Closest candidates are:\n  bunchkaufman!(::Hermitian{T,S} where S&lt;:StridedArray{T, 2} where T&lt;:Union{Complex{Float32}, Complex{Float64}}, ::Bool; check) at /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/bunchkaufman.jl:102\n  bunchkaufman!(::Union{Hermitian{T,S}, Symmetric{T,S}, Symmetric{Complex{T},S}} where S&lt;:(StridedArray{T, 2} where T) where T&lt;:Union{Float32, Float64}, ::Bool; check) at /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/bunchkaufman.jl:96\n  bunchkaufman!(::StridedArray{var\"#s822\", 2} where var\"#s822\"&lt;:Union{Complex{Float32}, Complex{Float64}, Float32, Float64}, ::Bool; check) at /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/bunchkaufman.jl:108\n  ...\nStacktrace:\n [1] bunchkaufman(::Symmetric{Float64,SparseMatrixCSC{Float64,Int64}}, ::Bool; check::Bool) at /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.5/LinearAlgebra/src/bunchkaufman.jl:186\n [2] issingular(::Symmetric{Float64,SparseMatrixCSC{Float64,Int64}}) at /Users/aleonard31/.julia/packages/ArrayInterface/VEFPY/src/ArrayInterface.jl:245\n [3] __init(::ODEProblem{Array{Float64,1},Tuple{Float64,Float64},true,SciMLBase.NullParameters,ODEFunction{true,DiffEqArrayOperator{Float64,SparseMatrixCSC{Float64,Int64},typeof(SciMLBase.DEFAULT_UPDATE_FUNC)},Symmetric{Float64,SparseMatrixCSC{Float64,Int64}},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,typeof(SciMLBase.DEFAULT_OBSERVED),Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},SciMLBase.StandardODEProblem}, ::Rodas5{0,true,DefaultLinSolve,DataType}, ::Tuple{}, ::Tuple{}, ::Tuple{}, ::Type{Val{true}}; saveat::Tuple{}, tstops::Tuple{}, d_discontinuities::Tuple{}, save_idxs::Nothing, save_everystep::Bool, save_on::Bool, save_start::Bool, save_end::Nothing, callback::Nothing, dense::Bool, calck::Bool, dt::Float64, dtmin::Nothing, dtmax::Float64, force_dtmin::Bool, adaptive::Bool, gamma::Rational{Int64}, abstol::Nothing, reltol::Nothing, qmin::Rational{Int64}, qmax::Int64, qsteady_min::Int64, qsteady_max::Rational{Int64}, qoldinit::Rational{Int64}, fullnormalize::Bool, failfactor::Int64, beta1::Nothing, beta2::Nothing, maxiters::Int64, internalnorm::typeof(DiffEqBase.ODE_DEFAULT_NORM), internalopnorm::typeof(opnorm), isoutofdomain::typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), unstable_check::typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), verbose::Bool, timeseries_errors::Bool, dense_errors::Bool, advance_to_tstop::Bool, stop_at_next_tstop::Bool, initialize_save::Bool, progress::Bool, progress_steps::Int64, progress_name::String, progress_message::typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), userdata::Nothing, allow_extrapolation::Bool, initialize_integrator::Bool, alias_u0::Bool, alias_du0::Bool, initializealg::OrdinaryDiffEq.DefaultInit, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /Users/aleonard31/.julia/packages/OrdinaryDiffEq/5egkj/src/solve.jl:101```\n</code></pre></div>",
        "id": 234609610,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618456050
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; so looks like in determining if the problem is a dae (<code>is_dae</code>) it tries to use the <code>bunchkaufman</code> algorithm which doesn't appear to like the symmetric-sparse type</p>",
        "id": 234609724,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618456138
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; obviously my use-case is specialized, but I know from construction that my mass matrix is not singular</p>",
        "id": 234609753,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618456174
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; You can pass in custom linear solve algorithms like <code>cholesky</code></p>",
        "id": 234609890,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618456277
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; <a href=\"https://diffeq.sciml.ai/latest/features/linear_nonlinear/#Basic-linsolve-method-choice:-Factorization-by-LinSolveFactorize\">https://diffeq.sciml.ai/latest/features/linear_nonlinear/#Basic-linsolve-method-choice:-Factorization-by-LinSolveFactorize</a></p>",
        "id": 234609967,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618456333
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Like this</p>",
        "id": 234609969,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618456334
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; the current issue is in <code>__init</code>, <code>issingular</code> before any solves</p>",
        "id": 234609978,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618456341
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; so, <code>issingular</code> for my <code>Symmetric{Float64,SparseMatrixCSC{Float64,Int64}}</code> does not work, becaue of <code>issingular</code> calling the <code>bunchkaufman</code> function for symmetric matrices, and it seems like that does not like my sparse type</p>",
        "id": 234610125,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618456461
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; but that seems to be in <code>LinearAlgebra</code> so I imagine a fix there will not be quick...</p>",
        "id": 234610157,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618456488
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; ah, damn</p>",
        "id": 234610513,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618456792
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Yeah, could you file an issue for this? I don’t think I have the capacity to work on this now.</p>",
        "id": 234610823,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618456981
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; an issue addressing this...for a workaround? I will tomorrow</p>",
        "id": 234611711,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618457680
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; So I don't know if you guys want the issue, I also can't call <code>det</code> on my type because of the <code>LinearAlgebra</code> limitations. So I think it is an issue on their end?</p>",
        "id": 234665352,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618489519
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; with that being said...I plan on using other matrix types (possibly a <code>LinearMap</code> for matrix-free). I will know these are nonsingular. Also a use case where I force a singular matrix to introduce a conservation equation...so if there can be an option (where <code>true</code> is singular, <code>false</code> nonsingular, <code>default:nothing</code> run the normal checks), I can open an issue for that.</p>",
        "id": 234666076,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618489858
    },
    {
        "content": "<p>[slack] &lt;timkim&gt; I'm getting an <code>ArgumentError: Converting an instance of ReverseDiff.TrackedReal{Float32, Float32, Nothing} to Float32 is not defined. Please use </code>ReverseDiff.value<code> instead.</code> error when I execute the following code:</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>using LinearAlgebra\n\ntspan = (0.0f0,1.0f0)\ntrange = range(tspan[1],tspan[2],length=100)\n\nf = FastDense(10, 1)\nθ = initial_params(f)\nu0 = Flux.glorot_normal(3*10)\n\na = u -&gt; @view u[1:10,:]\nb = u -&gt; @view u[11:20,:]\nc = u -&gt; @view u[21:30,:]\n\nconst R = randn(Float32,10,10)\nconst A = zeros(Float32,10,3)\n\nfunction foo!(du,u,p,t)\n    da = @view du[1:10,:]\n    db = @view du[11:20,:]\n    dc = @view du[21:30,:]\n\n    mul!(A,R,tanh.(a(u)))\n\n    da .= a(u) .+ A .+ f(b(u), p)\n    db .= -b(u)\n    dc .= -c(u)\nend\n\nprob = ODEProblem(foo!, reshape(repeat(u0, 3), length(u0), 3), tspan, θ);\n\nfunction loss_foo(p)\n    _prob = remake(prob, p=p)\n    u_hat = Array(solve(_prob, VCABM(), saveat=trange,\n                reltol=1e-6, abstol=1e-6, sensealg=BacksolveAdjoint()))\n    loss = sum(abs2, u_hat)\n    return loss\nend\n\ncb = function (p, l)\n    println(l)\n    return false\nend\n\n# Burn in loss\ncb(θ,loss_foo(θ))\n\nres = DiffEqFlux.sciml_train(loss_foo, θ, ADAM(0.01), cb = cb, maxiters = 10)```\nWould anyone be able to help me solve this issue? I'm also wondering if this code can be made more efficient.\n</code></pre></div>",
        "id": 234744889,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618517599
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; What about <code>sensealg = InterpolatingAdjoint(autojacvec=ReverseDiffVJP(true))</code>?</p>",
        "id": 234746016,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618518064
    },
    {
        "content": "<p>[slack] &lt;timkim&gt; Thanks David! I still get the same error.</p>",
        "id": 234747941,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618518814
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; A quick fix would be</p>\n<div class=\"codehilite\" data-code-language=\"tmp\"><pre><span></span><code>    da = @view du[1:10,:]\n    db = @view du[11:20,:]\n    dc = @view du[21:30,:]\n    #mul!(A,R,tanh.(a(u)))\n    da .= a(u) .+ tmp .+ f(b(u), p)\n    db .= -b(u)\n    dc .= -c(u)```\n</code></pre></div>",
        "id": 234748835,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618519182
    },
    {
        "content": "<p>[slack] &lt;timkim&gt; Yea, I think that might solve the problem. I guess I'm wondering if <code>mul!</code>  would be compatible with DiffEqFlux.</p>",
        "id": 234749049,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618519280
    },
    {
        "content": "<p>[slack] &lt;timkim&gt; I'm trying to solve an ODE that is large (&gt;100) and has matrix multiplications, and not sure what would be the most efficient way of doing this.</p>",
        "id": 234749171,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618519327
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; BTW, it's probably better to <code>using OrdinaryDiffEq</code> instead (faster compilation)</p>",
        "id": 234749173,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618519328
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; and slices on the LHS don't allocate</p>",
        "id": 234749216,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618519352
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; if i am not completely wrong</p>",
        "id": 234749231,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618519362
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; so du[1:10,:] = ... should be fine</p>",
        "id": 234749248,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618519375
    },
    {
        "content": "<p>[slack] &lt;timkim&gt; Yea, it was just for notational convenience.</p>",
        "id": 234749322,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618519412
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; 12 sec with Backsolve vs 1 sec with the other one...</p>",
        "id": 234749608,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618519525
    },
    {
        "content": "<p>[slack] &lt;timkim&gt; Interesting that backsolve takes longer than interpolatingadjoint</p>",
        "id": 234750187,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618519780
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; you maybe want to check the tanh broadcasting as well</p>",
        "id": 234750426,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618519887
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; still not sure when it's safe to just use <code>.</code> and when to use something else</p>",
        "id": 234750474,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618519915
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; you could also have a look at static arrays</p>",
        "id": 234750565,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618519943
    },
    {
        "content": "<p>[slack] &lt;Logan Brooks&gt; hi all, could anyone point me to documentation/example of how to setup monte carlo parameter estimation for multiple subjects where their observation times differ between subjects?</p>",
        "id": 234761464,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618524230
    },
    {
        "content": "<p>[slack] &lt;bhvieira&gt; Do Unitful and DifferentialEquations play along together? Just asking in case they do and I can just plug it all together <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 234768751,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618528086
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; yup</p>",
        "id": 234769618,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618528581
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; ctrl+f <a href=\"https://diffeq.sciml.ai/stable/\">https://diffeq.sciml.ai/stable/</a></p>",
        "id": 234769624,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618528587
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; If you follow <a href=\"https://diffeqflux.sciml.ai/dev/examples/data_parallel/\">https://diffeqflux.sciml.ai/dev/examples/data_parallel/</a> and then take out the <code>saveat</code> it should work?</p>",
        "id": 234772221,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618530145
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Backsolve can take longer because it recomputes instead of using memory</p>",
        "id": 234772271,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618530197
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; effective use of memory can let you compute less.</p>",
        "id": 234772278,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618530205
    },
    {
        "content": "<p>[slack] &lt;bhvieira&gt; No way <img alt=\":mind_blown:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/7178/emoji/images/15574.gif\" title=\"mind blown\"></p>",
        "id": 234773096,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618530790
    },
    {
        "content": "<p>[slack] &lt;bhvieira&gt; Thanks @lungd!</p>",
        "id": 234773104,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618530797
    },
    {
        "content": "<p>[slack] &lt;Logan Brooks&gt; Does this assume <code>tspan</code> is the same for each subject?  How is individual time encoded?</p>\n<p>Can you also make <code>saveat=data_times</code>  in this example<br>\n<a href=\"https://tutorials.sciml.ai/html/ode_extras/04-monte_carlo_parameter_estim.html\">https://tutorials.sciml.ai/html/ode_extras/04-monte_carlo_parameter_estim.html</a><br>\nvary from subject to subject?</p>",
        "id": 234781294,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618537098
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; just place it in the <code>ODEProblem</code></p>",
        "id": 234785195,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618540592
    },
    {
        "content": "<p>[slack] &lt;Logan Brooks&gt; thanks!</p>",
        "id": 234789761,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618544950
    },
    {
        "content": "<p>[slack] &lt;timkim&gt; @chrisrackauckas Is <code>mul!</code> compatible with DiffEqFlux?</p>",
        "id": 234798995,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618552965
    },
    {
        "content": "<p>[slack] &lt;timkim&gt; I think we can use * instead, and make it work but <code>mul!</code> seemed to be faster.</p>",
        "id": 234799072,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618553033
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Just fyi, my experience is that they do not work well together. You can get it working for some simple use cases, but it doesn't take much to break it. Also, there's a significant performance hit when using Unitful types vs floats.</p>",
        "id": 234812765,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618560773
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It is with certain vjp choices, but it's just a bad idea for a lot of reverse diffs</p>",
        "id": 234816549,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618562573
    },
    {
        "content": "<p>[slack] &lt;bhvieira&gt; I'm working on textbook examples of neuronal firing, basic first order coupled stuff for a course. I'll see how it fares, but just the thought of it working is exciting already. It's very gratifying for physicists to use units I guess <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 234840896,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618574596
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Oh I was excited too! I'm not even a physicist. I like having units in code because, being not a physicist, I suck at remembering which quantities should have which units.</p>\n<p>And if you don't care about performance, it might still end up working for you!</p>",
        "id": 234861919,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618583099
    },
    {
        "content": "<p>[slack] &lt;AlexS&gt; Hi! I asked a question in discourse about DEDataArrays in OrdinaryDiffEq a couple of days ago. Maybe someone could give me a hint </p>\n<p><a href=\"https://discourse.julialang.org/t/ordinarydiffeq-unexpected-results-in-dedataarray/59282?u=alexs12\">https://discourse.julialang.org/t/ordinarydiffeq-unexpected-results-in-dedataarray/59282?u=alexs12</a></p>",
        "id": 234865068,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618584208
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah I bookmarked it</p>",
        "id": 234865377,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618584339
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; rough week <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 234865384,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618584343
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; if someone else has a response they might get to it before me.</p>",
        "id": 234865408,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618584353
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I have 19 slack PMs and 9 Discourse bookmarks right now, and I'll be working through the one-by-one <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 234865505,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618584377
    },
    {
        "content": "<p>[slack] &lt;AlexS&gt; Thanks a lot, Chris!</p>",
        "id": 234867744,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618585202
    },
    {
        "content": "<p>[slack] &lt;bhvieira&gt; The only thing that bit me was having all equations have the same units (I saw <code>ComponentArrays</code> solutions, but couldn't make it work, and it was a single unit). All the rest worked perfectly (including units for time), which can save a lot of time to check unit compatibility.</p>",
        "id": 234872298,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618586332
    },
    {
        "content": "<p>[slack] &lt;Tino Sulzer&gt; Does anyone have an idea for how I could go about doing this? I was thinking maybe rewriting as a difference equation (<code>y[k+1] = y[k] + f2(y[k])</code>) then using adaptive Adams-Bashforth with integer step sizes &lt;<a href=\"https://math.stackexchange.com/questions/4093656/adaptive-stepping-of-a-discrete-time-system\">https://math.stackexchange.com/questions/4093656/adaptive-stepping-of-a-discrete-time-system</a>&gt;: <a href=\"https://files.slack.com/files-pri/T68168MUP-F01VAMG83C0/download/screen_shot_2021-04-16_at_5.01.17_pm.png\">https://files.slack.com/files-pri/T68168MUP-F01VAMG83C0/download/screen_shot_2021-04-16_at_5.01.17_pm.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F01VAMG83C0/download/screen_shot_2021-04-16_at_5.01.17_pm.png\"><img src=\"https://files.slack.com/files-pri/T68168MUP-F01VAMG83C0/download/screen_shot_2021-04-16_at_5.01.17_pm.png\"></a></div>",
        "id": 234920682,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618606971
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah, if it's well-defined then you can approximate to the continuous operator y' = f(y) and then use some method to solve it</p>",
        "id": 234922061,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618607385
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Not Adams-Bashforth because that method is both implicit and cannot take large steps</p>",
        "id": 234922129,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618607403
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but <code>VCABM</code> , etc.</p>",
        "id": 234922195,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618607418
    },
    {
        "content": "<p>[slack] &lt;Tino Sulzer&gt; The problem is it has to always be integer steps</p>",
        "id": 234923139,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618607750
    },
    {
        "content": "<p>[slack] &lt;ignace-computing&gt; Can't you work with a fixed timestep <code>dt=1.</code> in that case , for instance?</p>",
        "id": 234923500,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618607953
    },
    {
        "content": "<p>[slack] &lt;Tino Sulzer&gt; Yes, but I would like to make it adaptive, since evaluating <code>f</code> is expensive<br>\nFor example, for some ks,</p>\n<div class=\"codehilite\" data-code-language=\"delta\"><pre><span></span><code>y_next = y_now + dt * Delta```\nis a pretty good approximation (i.e. `f` is almost constant for the next `dt` steps)\n</code></pre></div>",
        "id": 234923758,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618608109
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; You cannot skip points unless you assume there's some underlying continuity property: it's easy to build an arbitrarily bad counter example.</p>",
        "id": 234925317,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618608978
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Just make the point that you skip be f(y) = M and let M be sufficiently large</p>",
        "id": 234925345,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618609002
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Because you're not stepping smoothly, that can be arbitrarily placed at a single point with a sufficiently steep hat function, or you can even make it a smooth molifier if you want f to be smooth.</p>",
        "id": 234925439,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618609071
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; As long as it's not chaotic you can't have dense trajectories and so you can put that adverse point in your trajectory and so boom, your method has arbitrarily large error bounds (i.e. no error bounds)</p>",
        "id": 234925549,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618609122
    },
    {
        "content": "<p>[slack] &lt;Tino Sulzer&gt; There is underlying continuity but I can only evaluate f for one step (basically to evaluate f I have to do a full discharge/charge cycle of a battery) - though now I think about it I could just evaluate f for the closest integer step and let the ODE solver pretend f is continuous: <a href=\"https://files.slack.com/files-pri/T68168MUP-F01U699J8Q7/download/figure_1.png\">https://files.slack.com/files-pri/T68168MUP-F01U699J8Q7/download/figure_1.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F01U699J8Q7/download/figure_1.png\"><img src=\"https://files.slack.com/files-pri/T68168MUP-F01U699J8Q7/download/figure_1.png\"></a></div>",
        "id": 234928839,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618611020
    },
    {
        "content": "<p>[slack] &lt;Tino Sulzer&gt; There is underlying continuity but I can only evaluate f for one step (basically to evaluate f I have to do a full discharge/charge cycle of a battery) - though now I think about it I could just evaluate f for the closest integer step and let the ODE solver pretend f is continuous<br>\nHere <code>y</code> would be the value at the peak of each cycle</p>",
        "id": 234928885,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618611044
    },
    {
        "content": "<p>[slack] &lt;Tino Sulzer&gt; Anyway I think I got some ideas to try</p>",
        "id": 234928924,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618611079
    },
    {
        "content": "<p>[slack] &lt;Tino Sulzer&gt; What’s the best adaptive stepper to use when dydt is very non-stiff and I want as few function evals as possible?</p>",
        "id": 234928977,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618611120
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; VCABM or one of the Tsit5/Verner methods</p>",
        "id": 234929046,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618611149
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Anyone have a suggestion for what to do when <code>ForwardDiff</code> and <code>FiniteDiff</code> produce different gradients for a UDE? The loss is a simple MSE computed on the output of <code>solve</code> . I can verify visually that <code>FiniteDiff</code> is correct, so it's <code>ForwardDiff</code> that is somehow computing incorrect gradients.</p>",
        "id": 234974988,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618651480
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; MWE?</p>",
        "id": 234975631,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618652192
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I'm not sure how to create an MWE for this, tbh. I would first need to know how/where the gradients are getting messed up, and I'm struggling to think of ways to really debug it.</p>",
        "id": 234976769,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618653575
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Even just an example</p>",
        "id": 234976973,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618653742
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Well here's my loss function. The loss is being computed against observation data, in this case:</p>\n<div class=\"codehilite\" data-code-language=\"#\"><pre><span></span><code># Assumes y to be a DimArray from DimensionalData\nfunction sparse_loss(prob, y, p, u0, tspan)\n    prob = remake(prob, p=p, u0=u0, tspan=tspan)\n    # solve discretized system\n    sol = solve(prob, Euler(), dt=2*60.0, saveat=3600.0, sensealg=ForwardDiffSensitivity());\n    depths = cells(prob.f.f.grid)\n    ts = Dates.epochms2datetime.(sol.t.*1000.0)\n    Tsol  = DimArray(reduce(hcat,map(u -&gt; u.state.soil.T, sol.u)), (Z(depths.*100),Ti(ts)))\n    z_y = dims(y,Z)\n    t_sol = dims(Tsol,Ti)\n    mean((Tsol[Z(Near(z_y.val))] .- y[Ti(t_sol.val)]).^2)\nend```\n</code></pre></div>",
        "id": 234977822,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618654610
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I could also show you plots?</p>",
        "id": 234977872,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618654683
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; If I can't run it I don't know if it's worth looking at it. I don't know DimArray and all of that so <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> maybe that's dropping a gradient</p>",
        "id": 234978742,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618655544
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you can cut it out and check <code>sum(sol)</code></p>",
        "id": 234978745,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618655551
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that's already a bit more MWEish</p>",
        "id": 234978751,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618655560
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Yeah the issue is that my model isn't condensed into a single function or anything. There's lots of code spread across lots of files. It is installable as a Julia package though via a git repository. So I could make an MWE if you don't mind doing that.</p>",
        "id": 234978984,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618655772
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Hmm. The gradients seem to be correct (and it converges to the \"true\" parameter value) if I train it on model generated data, like what's done in a lot of the SciML examples.</p>",
        "id": 234981028,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618658017
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Is there something conceptually wrong with evaluating the loss only at certain points in the PDE discretization? i.e. I only have observation for a handful of points in the discretization gird.</p>",
        "id": 234981115,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618658105
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; well, it could very well not be constraining the whole solution if the data is too sparse.</p>",
        "id": 234981261,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618658269
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I suppose, yes. But this still doesn't explain why the gradients appear to be incorrect when training on the real data (<code>FiniteDiff</code> too, actually). I am optimizing just one parameter here, so we have the luxury of plotting the loss function:: <a href=\"https://files.slack.com/files-pri/T68168MUP-F01VBFHQS4Q/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F01VBFHQS4Q/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F01VBFHQS4Q/download/image.png\"><img src=\"https://files.slack.com/files-pri/T68168MUP-F01VBFHQS4Q/download/image.png\"></a></div>",
        "id": 234981966,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618659017
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I'll try removing the <code>DimArray</code> stuff just in case that's somehow messing with it... although that would be surprising</p>",
        "id": 234982028,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618659104
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; So even with model-generated data (which seems to more or less find the right solution), <code>FiniteDiff</code> and <code>ForwardDiff</code> produce different gradients. I'll keep digging into that and hopefully I can come up with something that can be isolated in an MWE.</p>",
        "id": 234987483,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618664846
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; @chrisrackauckas One potential issue might be this non-linear solver step, I think I mentioned it before. Since the NL solver is inexact (within a fairly high tolerance), changing the parameter value not only induces a change in the underlying function but also in the NL solver residual which is not tracked by autodiff.</p>",
        "id": 234996130,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618673061
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; @chrisrackauckas Here's a MWE on the heat equation</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>using ModelingToolkit\nusing ComponentArrays, LinearAlgebra\nusing Plots\n\nconst nknots = 10\nconst h = 1.0/(nknots+1)\nx = range(0, step=h, length=nknots)\nu0 = sin.(π*x)\n\n@inline function f(du,u,p,t)\n  du .= zero(eltype(u))\n  u₃ = @view u[3:end]\n  u₂ = @view u[2:end-1]\n  u₁ = @view u[1:end-2]\n  k = p[1]\n  @. du[2:end-1] = k*((u₃ - 2*u₂ + u₁)/(h^2.0))\n  nothing\nend\n\np_true = ComponentArray(k=0.42)\nprob = ODEProblem(f, u0, (0.0,1.0), p_true)\n@time sol_true = solve(prob, Rodas4P(), saveat=0.1)\nplot(sol_true, legend=nothing)\n\nfunction loss(prob0, p)\n  prob = remake(prob0, u0=convert.(eltype(p),prob0.u0), p=p)\n  sol = solve(prob, Rodas4P(autodiff=false), saveat=0.1, sensealg=ForwardDiffSensitivity())\n  sum((sol .- sol_true).^2)\nend\n\np0 = ComponentArray(k=1.0)\nfwdgrad = ForwardDiff.gradient(p -&gt; loss(prob,p), p0)\nfndgrad = FiniteDiff.finite_difference_gradient(p -&gt; loss(prob,p), p0)\n@assert isapprox(fwdgrad[1], fndgrad[1], atol=0.01) \"Gradients $(fwdgrad[1]) and $(fndgrad[1]) differ by $(fwdgrad[1] - fndgrad[1])\"\n# ERROR: LoadError: AssertionError: Gradients 0.6679079743739968 and 0.7849880982048549 differ by -0.11708012383085808```\nPerhaps it's just numerical error :man-shrugging:\n</code></pre></div>",
        "id": 234997939,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618674780
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; So i asked about this elsewhere, but is there a straightforward way to put time dependence in a neural differential equation?  I’m thinking of the scenario where I expect the righthand side, <code>f(t,u)</code> to have genuine <code>t</code> dependence.</p>",
        "id": 235038714,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618715671
    },
    {
        "content": "<p>[slack] &lt;Kim Laberinto (he/him)&gt; @gideon.simpson I'm not sure if you were able to see my previous message. Would this sort of example be what you're looking for? <a href=\"https://julialang.slack.com/archives/C6A044SQH/p1618710816461100?thread_ts=1618710174.460600&amp;cid=C6A044SQH\">https://julialang.slack.com/archives/C6A044SQH/p1618710816461100?thread_ts=1618710174.460600&amp;cid=C6A044SQH</a></p>",
        "id": 235038898,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618715945
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Or even the tutorial on it: <a href=\"https://diffeqflux.sciml.ai/stable/examples/exogenous_input/\">https://diffeqflux.sciml.ai/stable/examples/exogenous_input/</a></p>",
        "id": 235038974,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618716037
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 235038983,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618716049
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 235038987,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618716059
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; that’s it.  is exogenous a term that comes from the ML community?</p>",
        "id": 235039124,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618716202
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; no, modeling and simulation, or differential equation communities.</p>",
        "id": 235039332,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618716414
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; The essential here is to pad out the input layer of NN with an additional input that will correspond to time, and mask it inside a standard <code>ODEProblem</code>, rather than directly using the <code>NeuralODE</code> type, right?</p>",
        "id": 235039853,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618716982
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes</p>",
        "id": 235049387,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618728065
    },
    {
        "content": "<p>[slack] &lt;mjsheikh&gt; I have :</p>\n<div class=\"codehilite\" data-code-language=\"3-element\"><pre><span></span><code>[0.0, 0.0, 0.0]\n[0.0, 0.0, 0.0]\n[0.0, 0.0, 0.0]```\nWhen trying to mutate the first tuple of one of the `MArray`, the first tuples of remaining MArrays also get mutated.\nAny workarounds for this??\n</code></pre></div>",
        "id": 235067685,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618747973
    },
    {
        "content": "<p>[slack] &lt;Fredrik Bagge Carlson&gt; Did you create the outer vector with <code>fill</code>? If so, all elements refer to the same <code>MArray</code></p>",
        "id": 235067995,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618748338
    },
    {
        "content": "<p>[slack] &lt;mjsheikh&gt; That 3 element array is actually a column of a matrix. I declared that using zeros with eltype <code>MArray</code></p>",
        "id": 235068914,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618749252
    },
    {
        "content": "<p>[slack] &lt;Fredrik Bagge Carlson&gt; Yeah, I think zeros for MArray internally uses fill?</p>",
        "id": 235068953,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618749277
    },
    {
        "content": "<p>[slack] &lt;mjsheikh&gt; Oh, workaround??</p>",
        "id": 235068963,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618749300
    },
    {
        "content": "<p>[slack] &lt;Fredrik Bagge Carlson&gt; use list comprehension</p>",
        "id": 235068973,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618749309
    },
    {
        "content": "<p>[slack] &lt;mjsheikh&gt; Ohk, thanks :)</p>",
        "id": 235069055,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618749379
    },
    {
        "content": "<p>[slack] &lt;Kim Laberinto (he/him)&gt; You might also be interested in Control Theory sort of stuff, if you're looking for terms/things to look up.</p>\n<p>for example you have a system du/dt = f(u, t).<br>\nYou might want to apply some sort of control to purposefully change the state to get the system to do something you want. This can involve something like the following:</p>\n<p>du/dt = f(u,t) + C(u, t)</p>\n<p>where C(u,t) is some \"control law\". Some form of exogenous input to the system to get the system to do what you want.</p>\n<p>Other key words include: state space control, optimal control, robust control</p>",
        "id": 235069958,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618750144
    },
    {
        "content": "<p>[slack] &lt;Zhiyu Fu&gt; For BVP solvers like MIRK4, can we specify unequally-spaced time steps manually instead of a fixed <code>dt</code>?</p>",
        "id": 235088301,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618768213
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; No, MIRK4 needs a bit more work.</p>",
        "id": 235088349,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618768284
    },
    {
        "content": "<p>[slack] &lt;Zhiyu Fu&gt; I see...thx!</p>",
        "id": 235088452,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618768387
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; @chrisrackauckas Did you take a look at this? Or do you think it's just normal numerical error from <code>FiniteDiff</code> ?</p>",
        "id": 235089980,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618769879
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; reduce that to <code>abstol=1e-14,reltol=1e-14</code> to debug it.</p>",
        "id": 235090500,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618770385
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; If I'm doing some basic work with <code>DiffEqFlux</code> for simple systems (ODEs of dimensions 1-3), is there any way to speed things up without <code>CUDA</code>?  I'm just trying to learn some stuff on a laptop that does not have an NVIDIA graphics card, and it's pretty slow</p>",
        "id": 235092021,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618771919
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; How would I modify <a href=\"https://diffeqflux.sciml.ai/stable/examples/exogenous_input/\">https://diffeqflux.sciml.ai/stable/examples/exogenous_input/</a> to work with the <code>GalacticOptim</code> module?  Essentially, how could I use the optimization strategy from <a href=\"https://diffeqflux.sciml.ai/stable/examples/neural_ode_sciml/\">https://diffeqflux.sciml.ai/stable/examples/neural_ode_sciml/</a> in this one.</p>",
        "id": 235096946,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618776826
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; You just change the optimizer you call</p>",
        "id": 235100455,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618779685
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; That is going to be far too small for CUDA. Just optimize the CPU code first</p>",
        "id": 235100562,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618779715
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; Where I'm a little stuck with that, is that the first example uses a <code>NeuralODE</code> type, so the lines:</p>\n<div class=\"codehilite\" data-code-language=\"optfunc\"><pre><span></span><code>optprob = GalacticOptim.OptimizationProblem(optfunc, prob_neuralode.p)```\nare sensible.  But in the exogenous example, it's defined in terms of `ODEProblem`, which doesn't seem to have the same structure\n</code></pre></div>",
        "id": 235101554,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618779985
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; In that case it's exactly the same except you just use the parameters vector</p>",
        "id": 235101649,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618780028
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; Is there currently an issue calculating the gradient where an EnsembleProblem is involved?<br>\nI get <strong><code>DimensionMismatch(\"tried to assign 24×11 array to 24×11 destination\")</code></strong></p>",
        "id": 235102009,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618780170
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Nope, see the tests on ut</p>",
        "id": 235102166,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618780223
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; Then there is a problem with my local env. I get a similar error if I copy paste <a href=\"https://github.com/SciML/DiffEqBase.jl/blob/master/test/downstream/ensemble_ad.jl\">https://github.com/SciML/DiffEqBase.jl/blob/master/test/downstream/ensemble_ad.jl</a></p>",
        "id": 235102384,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618780384
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; using the output of a call to <code>initial_params</code> ?</p>",
        "id": 235102427,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618780426
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; post <code>]st -m</code>  or try updating. running that file works for me</p>",
        "id": 235104088,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618782020
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; <code>``(@v1.6) pkg&gt; st -m\n      Status </code>~/.julia/environments/v1.6/Manifest.toml<code>\n  [c3fe647b] AbstractAlgebra v0.15.1\n  [621f4979] AbstractFFTs v1.0.1\n  [1520ce14] AbstractTrees v0.3.4\n  [79e6a3ab] Adapt v3.3.0\n  [ec485272] ArnoldiMethod v0.1.0\n  [4fba245c] ArrayInterface v3.1.7\n  [4c555306] ArrayLayouts v0.6.5\n  [bf4720bc] AssetRegistry v0.1.0\n  [c52e3926] Atom v0.12.31\n  [ff3c4d4f] AutoOptimize v0.1.0 </code>https://github.com/SciML/AutoOptimize.jl#master`<br>\n  [13072b0f] AxisAlgorithms v1.0.0<br>\n  [ab4f0b2a] BFloat16s v0.1.0<br>\n  [aae01518] BandedMatrices v0.16.8<br>\n  [6e4b80f9] BenchmarkTools v0.7.0<br>\n  [764a87c0] BoundaryValueDiffEq v2.7.1<br>\n  [fa961155] CEnum v0.4.1<br>\n  [8d3b24bd] CMAEvolutionStrategy v0.2.1<br>\n  [00ebfdb7] CSTParser v2.5.0<br>\n  [052768ef] CUDA v2.6.3<br>\n  [7057c7e9] Cassette v0.3.5<br>\n  [082447d4] ChainRules v0.7.60<br>\n  [d360d2e6] ChainRulesCore v0.9.37<br>\n  [b630d9fa] CheapThreads v0.2.2<br>\n  [53a63b46] CodeTools v0.7.1<br>\n  [da1fd8a2] CodeTracking v1.0.5<br>\n  [944b1d66] CodecZlib v0.7.0<br>\n  [35d6a980] ColorSchemes v3.12.0<br>\n  [3da002f7] ColorTypes v0.10.12<br>\n  [5ae59095] Colors v0.12.7<br>\n  [861a8166] Combinatorics v1.0.2<br>\n  [a80b9123] CommonMark v0.6.4<br>\n  [38540f10] CommonSolve v0.2.0<br>\n  [bbf7d656] CommonSubexpressions v0.3.0<br>\n  [34da2185] Compat v3.27.0<br>\n  [b0b7db55] ComponentArrays v0.9.4<br>\n  [88cd18e8] ConsoleProgressMonitor v0.1.2<br>\n  [187b0558] ConstructionBase v1.1.0<br>\n  [d38c429a] Contour v0.5.7<br>\n  [a8cc5b0e] Crayons v4.0.4<br>\n  [9a962f9c] DataAPI v1.6.0<br>\n  [82cc6244] DataInterpolations v3.3.1<br>\n  [864edb3b] DataStructures v0.18.9<br>\n  [e2d170a0] DataValueInterfaces v1.0.0<br>\n  [bcd4f6db] DelayDiffEq v5.29.2<br>\n  [2b5f629d] DiffEqBase v6.59.0<br>\n  [459566f4] DiffEqCallbacks v2.16.1<br>\n  [5a0ffddc] DiffEqFinancial v2.4.0<br>\n  [aae7a2af] DiffEqFlux v1.36.1<br>\n  [c894b116] DiffEqJump v6.14.0<br>\n  [77a26b50] DiffEqNoiseProcess v5.7.1<br>\n  [055956cb] DiffEqPhysics v3.9.0<br>\n  [41bf760c] DiffEqSensitivity v6.43.2<br>\n  [163ba53b] DiffResults v1.0.3<br>\n  [b552c78f] DiffRules v1.0.2<br>\n  [0c46a032] DifferentialEquations v6.16.0<br>\n  [c619ae07] DimensionalPlotRecipes v1.2.0<br>\n  [b4f34e82] Distances v0.10.2<br>\n  [31c24e10] Distributions v0.24.15<br>\n  [ced4e74d] DistributionsAD v0.6.21<br>\n  [33d173f1] DocSeeker v0.4.3<br>\n  [ffbed154] DocStringExtensions v0.8.4<br>\n  [e30172f5] Documenter v0.26.3<br>\n  [d4d017d3] ExponentialUtilities v1.8.4<br>\n  [e2ba6199] ExprTools v0.1.3<br>\n  [c87230d0] FFMPEG v0.4.0<br>\n  [7a1cc6ca] FFTW v1.3.2<br>\n  [9aa1b823] FastClosures v0.3.2<br>\n  [5789e2e9] FileIO v1.7.0<br>\n  [1a297f60] FillArrays v0.11.7<br>\n  [6a86dc24] FiniteDiff v2.8.0<br>\n  [53c48c17] FixedPointNumbers v0.8.4<br>\n  [08572546] FlameGraphs v0.2.5<br>\n  [587475ba] Flux v0.12.1<br>\n  [59287772] Formatting v0.4.2<br>\n  [f6369f11] ForwardDiff v0.10.18<br>\n  [069b7b12] FunctionWrappers v1.1.2<br>\n  [de31a74c] FunctionalCollections v0.5.0<br>\n  [d9f16b24] Functors v0.2.1<br>\n  [fb4132e2] FuzzyCompletions v0.4.1<br>\n  [0c68f7d7] GPUArrays v6.2.2<br>\n  [61eb1bfa] GPUCompiler v0.10.0<br>\n  [28b8d3ca] GR v0.57.4<br>\n  [a75be94c] GalacticOptim v1.1.0<br>\n  [5c1252a2] GeometryBasics v0.3.12<br>\n  [af5da776] GlobalSensitivity v1.0.0<br>\n  [42e2da0e] Grisu v1.0.0<br>\n  [cd3eb016] HTTP v0.9.5<br>\n  [9fb69e20] Hiccup v0.2.2<br>\n  [0e44f5e4] Hwloc v1.3.0<br>\n  [b5f81e59] IOCapture v0.1.1<br>\n  [7869d1d1] IRTools v0.4.2<br>\n  [615f187c] IfElse v0.1.0<br>\n  [9b13fd28] IndirectArrays v0.5.1<br>\n  [d25df0c9] Inflate v0.1.2<br>\n  [83e8ac13] IniFile v0.5.0<br>\n  [a98d9a8b] Interpolations v0.13.2<br>\n  [c8e1da08] IterTools v1.3.0<br>\n  [42fd0dbc] IterativeSolvers v0.9.0<br>\n  [82899510] IteratorInterfaceExtensions v1.0.0<br>\n  [692b3bcd] JLLWrappers v1.3.0<br>\n  [682c06a0] JSON v0.21.1<br>\n  [98e50ef6] JuliaFormatter v0.12.3<br>\n  [aa1ae85d] JuliaInterpreter v0.8.13<br>\n  [e5e0dc1b] Juno v0.8.4<br>\n  [5ab0869b] KernelDensity v0.6.2<br>\n  [929cbde3] LLVM v3.6.0<br>\n  [7c4cb9fa] LNR v0.2.1<br>\n  [b964fa9f] LaTeXStrings v1.2.1<br>\n  [2ee39098] LabelledArrays v1.6.0<br>\n  [23fbe1c1] Latexify v0.14.12<br>\n  [a5e1c1ea] LatinHypercubeSampling v1.8.0<br>\n  [73f95e8e] LatticeRules v0.0.1<br>\n  [50d2b5c4] Lazy v0.15.1<br>\n  [1d6d02ad] LeftChildRightSiblingTrees v0.1.2<br>\n  [093fc24a] LightGraphs v1.3.5<br>\n  [d3d80556] LineSearches v7.1.1<br>\n  [e6f89c97] LoggingExtras v0.4.6<br>\n  [bdcacae8] LoopVectorization v0.12.12<br>\n  [6f1432cf] LoweredCodeUtils v2.0.0<br>\n  [1914dd2f] MacroTools v0.5.6<br>\n  [739be429] MbedTLS v1.0.3<br>\n  [442fdcdd] Measures v0.3.1<br>\n  [e89f7d12] Media v0.5.0<br>\n  [c03570c3] Memoize v0.4.4<br>\n  [e1d29d7a] Missings v0.4.5<br>\n  [961ee093] ModelingToolkit v5.14.4<br>\n  [46d2c3a1] MuladdMacro v0.2.2<br>\n  [f9640e96] MultiScaleArrays v1.8.1<br>\n  [ffc61752] Mustache v1.0.10<br>\n  [d41bc354] NLSolversBase v7.8.0<br>\n  [2774e3e8] NLsolve v4.5.1<br>\n  [872c559c] NNlib v0.7.18<br>\n  [15e1cf62] NPZ v0.4.1<br>\n  [77ba4419] NaNMath v0.3.5<br>\n  [8913a72c] NonlinearSolve v0.3.8<br>\n  [510215fc] Observables v0.3.3<br>\n  [6fe1bfb0] OffsetArrays v1.6.2<br>\n  [429524aa] Optim v1.3.0<br>\n  [bac558e1] OrderedCollections v1.4.0<br>\n  [1dea7af3] OrdinaryDiffEq v5.52.4<br>\n  [90014a1f] PDMats v0.11.0<br>\n  [65888b18] ParameterizedFunctions v5.10.0<br>\n  [d96e819e] Parameters v0.12.2<br>\n  [69de0a69] Parsers v1.1.0<br>\n  [fa939f87] Pidfile v1.2.0<br>\n  [14b8a8f1] PkgTemplates v0.7.16<br>\n  [ccf2f8ad] PlotThemes v2.0.1<br>\n  [995b91a9] PlotUtils v1.0.10<br>\n  [91a5bcdd] Plots v1.11.2<br>\n  [e409e4f3] PoissonRandom v0.4.0<br>\n  [85a6dd25] PositiveFactorizations v0.2.4<br>\n  [21216c6a] Preferences v1.2.1<br>\n  [33c8b6b6] ProgressLogging v0.1.4<br>\n  [92933f4c] ProgressMeter v1.5.0<br>\n  [1fd47b50] QuadGK v2.4.1<br>\n  [8a4e6c94] QuasiMonteCarlo v0.2.2<br>\n  [74087812] Random123 v1.3.1<br>\n  [fb686558] RandomExtensions v0.4.3<br>\n  [e6cf234a] RandomNumbers v1.4.0<br>\n  [c84ed2f1] Ratios v0.4.0<br>\n  [3cdcf5f2] RecipesBase v1.1.1<br>\n  [01d81517] RecipesPipeline v0.3.2<br>\n  [731186ca] RecursiveArrayTools v2.11.3<br>\n  [f2c3362d] RecursiveFactorization v0.1.12<br>\n  [189a3867] Reexport v1.0.0<br>\n  [ae029012] Requires v1.1.3<br>\n  [ae5879a3] ResettableStacks v1.1.0<br>\n  [37e2e3b7] ReverseDiff v1.8.0<br>\n  [295af30f] Revise v3.1.15<br>\n  [79098fc4] Rmath v0.7.0<br>\n  [7e49a35a] RuntimeGeneratedFunctions v0.5.2<br>\n  [476501e8] SLEEFPirates v0.6.15<br>\n  [1bc83da4] SafeTestsets v0.0.1<br>\n  [0bca4576] SciMLBase v1.12.1<br>\n  [6c6a2e73] Scratch v1.0.3<br>\n  [efcf1570] Setfield v0.7.0<br>\n  [992d4aef] Showoff v1.0.2<br>\n  [699a6c99] SimpleTraits v0.9.3<br>\n  [ed01d8cd] Sobol v1.5.0<br>\n  [a2af1166] SortingAlgorithms v0.3.1<br>\n  [47a9eef4] SparseDiffTools v1.13.2<br>\n  [684fba80] SparsityDetection v0.3.4<br>\n  [276daf66] SpecialFunctions v1.3.0<br>\n  [860ef19b] StableRNGs v1.0.0<br>\n  [aedffcd0] Static v0.2.4<br>\n  [90137ffa] StaticArrays v1.1.0<br>\n  [2913bbd2] StatsBase v0.33.5<br>\n  [4c63d2b9] StatsFuns v0.9.7<br>\n  [9672c7b4] SteadyStateDiffEq v1.6.2<br>\n  [789caeaf] StochasticDiffEq v6.33.1<br>\n  [7792a7ef] StrideArraysCore v0.1.5<br>\n  [88034a9c] StringDistances v0.10.0<br>\n  [09ab397b] StructArrays v0.5.1<br>\n  [c3572dad] Sundials v4.4.1<br>\n  [d1185830] SymbolicUtils v0.11.0<br>\n  [0c5d862f] Symbolics v0.1.21<br>\n  [3783bdb8] TableTraits v1.0.1<br>\n  [bd369af6] Tables v1.4.2<br>\n  [5d786b92] TerminalLoggers v0.1.3<br>\n  [8290d209] ThreadingUtilities v0.4.1<br>\n  [a759f4b9] TimerOutputs v0.5.8<br>\n  [0796e94c] Tokenize v0.5.16<br>\n  [9f7883ad] Tracker v0.2.16<br>\n  [3bb67fe8] TranscodingStreams v0.9.5<br>\n  [592b5752] Trapz v2.0.2<br>\n  [a2a6695c] TreeViews v0.3.0<br>\n  [bc48ee85] Tullio v0.2.13<br>\n  [30578b45] URIParser v0.4.1<br>\n  [5c2747f8] URIs v1.2.0<br>\n  [3a884ed6] UnPack v1.0.2<br>\n  [b8865327] UnicodePlots v1.3.0<br>\n  [1986cc42] Unitful v1.7.0<br>\n  [3d5dd08c] VectorizationBase v0.19.27<br>\n  [19fa3120] VertexSafeGraphs v0.1.2<br>\n  [0f1e0344] WebIO v0.8.15<br>\n  [104b5d7c] WebSockets v1.5.9<br>\n  [cc8bc4a8] Widgets v0.6.2<br>\n  [efce3f68] WoodburyMatrices v0.5.3<br>\n  [a5390f91] ZipFile v0.9.3<br>\n  [e88e6eb3] Zygote v0.6.9<br>\n  [700de1a5] ZygoteRules v0.2.1<br>\n  [6e34b625] Bzip2_jll v1.0.6+5<br>\n  [83423d85] Cairo_jll v1.16.0+6<br>\n  [5ae413db] EarCut_jll v2.1.5+1<br>\n  [2e619515] Expat_jll v2.2.7+6<br>\n  [b22a6f82] FFMPEG_jll v4.3.1+4<br>\n  [f5851436] FFTW_jll v3.3.9+7<br>\n  [a3f928ae] Fontconfig_jll v2.13.1+14<br>\n  [d7e528f0] FreeType2_jll v2.10.1+5<br>\n  [559328eb] FriBidi_jll v1.0.5+6<br>\n  [0656b61e] GLFW_jll v3.3.3+0<br>\n  [d2c73de3] GR_jll v0.57.2+0<br>\n  [78b55507] Gettext_jll v0.20.1+7<br>\n  [7746bdde] Glib_jll v2.59.0+4<br>\n  [e33a78d0] Hwloc_jll v2.4.1+0<br>\n  [1d5cc7b8] IntelOpenMP_jll v2018.0.3+2<br>\n  [aacddb02] JpegTurbo_jll v2.0.1+3<br>\n  [c1c5ebd0] LAME_jll v3.100.0+3<br>\n  [dd4b983a] LZO_jll v2.10.0+3<br>\n  [dd192d2f] LibVPX_jll v1.9.0+1<br>\n  [e9f186c6] Libffi_jll v3.2.1+4<br>\n  [d4300ac3] Libgcrypt_jll v1.8.5+4<br>\n  [7e76a0d4] Libglvnd_jll v1.3.0+3<br>\n  [7add5ba3] Libgpg_error_jll v1.36.0+3<br>\n  [94ce4f54] Libiconv_jll v1.16.0+7<br>\n  [4b2f31a3] Libmount_jll v2.34.0+3<br>\n  [89763e89] Libtiff_jll v4.1.0+2<br>\n  [38a345b3] Libuuid_jll v2.34.0+7<br>\n  [856f044c] MKL_jll v2021.1.1+1<br>\n  [e7412a2a] Ogg_jll v1.3.4+2<br>\n  [458c3c95] OpenSSL_jll v1.1.1+6<br>\n  [efe28fd5] OpenSpecFun_jll v0.5.3+4<br>\n  [91d4177d] Opus_jll v1.3.1+3<br>\n  [2f80f16e] PCRE_jll v8.42.0+4<br>\n  [30392449] Pixman_jll v0.40.0+0<br>\n  [ea2cea3b] Qt5Base_jll v5.15.2+0<br>\n  [f50d1b31] Rmath_jll v0.3.0+0<br>\n  [fb77eaff] Sundials_jll v5.2.0+1<br>\n  [a2964d1f] Wayland_jll v1.17.0+4<br>\n  [2381bf8a] Wayland_protocols_jll v1.18.0+4<br>\n  [02c8fc9c] XML2_jll v2.9.11+0<br>\n  [aed1982a] XSLT_jll v1.1.33+4<br>\n  [4f6342f7] Xorg_libX11_jll v1.6.9+4<br>\n  [0c0b7dd1] Xorg_libXau_jll v1.0.9+4<br>\n  [935fb764] Xorg_libXcursor_jll v1.2.0+4<br>\n  [a3789734] Xorg_libXdmcp_jll v1.1.3+4<br>\n  [1082639a] Xorg_libXext_jll v1.3.4+4<br>\n  [d091e8ba] Xorg_libXfixes_jll v5.0.3+4<br>\n  [a51aa0fd] Xorg_libXi_jll v1.7.10+4<br>\n  [d1454406] Xorg_libXinerama_jll v1.1.4+4<br>\n  [ec84b674] Xorg_libXrandr_jll v1.5.2+4<br>\n  [ea2f1a96] Xorg_libXrender_jll v0.9.10+4<br>\n  [14d82f49] Xorg_libpthread_stubs_jll v0.1.0+3<br>\n  [c7cfdc94] Xorg_libxcb_jll v1.13.0+3<br>\n  [cc61e674] Xorg_libxkbfile_jll v1.1.0+4<br>\n  [12413925] Xorg_xcb_util_image_jll v0.4.0+1<br>\n  [2def613f] Xorg_xcb_util_jll v0.4.0+1<br>\n  [975044d2] Xorg_xcb_util_keysyms_jll v0.4.0+1<br>\n  [0d47668e] Xorg_xcb_util_renderutil_jll v0.3.9+1<br>\n  [c22f9ab0] Xorg_xcb_util_wm_jll v0.4.1+1<br>\n  [35661453] Xorg_xkbcomp_jll v1.4.2+4<br>\n  [33bec58e] Xorg_xkeyboard_config_jll v2.27.0+4<br>\n  [c5fb5394] Xorg_xtrans_jll v1.4.0+3<br>\n  [3161d3a3] Zstd_jll v1.4.8+0<br>\n  [0ac62f75] libass_jll v0.14.0+4<br>\n  [f638f0a6] libfdk_aac_jll v0.1.6+4<br>\n  [b53b4c65] libpng_jll v1.6.37+6<br>\n  [f27f6e37] libvorbis_jll v1.3.6+6<br>\n  [1270edf5] x264_jll v2020.7.14+2<br>\n  [dfaa095f] x265_jll v3.0.0+3<br>\n  [d8fb68d0] xkbcommon_jll v0.9.1+5<br>\n  [0dad84c5] ArgTools<br>\n  [56f22d72] Artifacts<br>\n  [2a0f44e3] B<br>\n[message truncated]</p>",
        "id": 235104292,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618782215
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; I will post package status for my own package. just a sec...</p>",
        "id": 235104376,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618782293
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; if you make a temp env and try to run that file itll work. im sure you can get it now that i've verified that file runs as expected</p>",
        "id": 235104411,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618782328
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; I am working on a package and activate it with <code>activate .</code></p>",
        "id": 235104495,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618782398
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; If I copy+paste the code from the file it fails</p>",
        "id": 235104505,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618782416
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; Is that supposed to fail?</p>",
        "id": 235104510,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618782421
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; ]st -m is not shorter than what I've posted before</p>",
        "id": 235104556,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618782472
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; Mby that's the reason?</p>",
        "id": 235104561,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618782479
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; im going to be mean and tell you to read the docs <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 235104641,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618782547
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; Nah, that's fine</p>",
        "id": 235104754,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618782667
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; Interesting</p>",
        "id": 235106005,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618783985
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; It fails in Atom only</p>",
        "id": 235106008,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618783990
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yes</p>",
        "id": 235106809,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618784931
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; Hurray, it works with VScode xD</p>",
        "id": 235107145,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618785302
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; @anandj sry to bother you but can you tell me why this throws an error when I set JULIA_NUM_THREADS &gt; 1</p>",
        "id": 235112509,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618791270
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; are you doing something that isn't thread safe?</p>",
        "id": 235113615,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618792355
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; running the test</p>",
        "id": 235113677,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618792390
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; atom set num of threads automatically while vscode does not (i guess)</p>",
        "id": 235113752,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618792445
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; that's why it worked before</p>",
        "id": 235113757,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618792449
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; i run linux on an amd cpu (if that helps)</p>",
        "id": 235113902,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618792574
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; same error with 1.5.3</p>",
        "id": 235113954,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618792644
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; BTW, what's 'ut' in 'tests on ut' ? <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 235114185,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618792926
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it</p>",
        "id": 235114239,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618793009
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; oh</p>",
        "id": 235114243,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618793014
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; open an issue?</p>",
        "id": 235114245,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618793018
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; DiffEqBase?</p>",
        "id": 235114254,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618793041
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; <a href=\"https://github.com/SciML/DiffEqBase.jl/issues/658\">https://github.com/SciML/DiffEqBase.jl/issues/658</a></p>",
        "id": 235114575,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618793382
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; on a side note, are you working on C elegans models?</p>",
        "id": 235114648,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618793437
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; yeah <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 235116645,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618795847
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; thats super cool! have you seen openworm</p>",
        "id": 235116656,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618795862
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; have you seen the video of the crawling worm?</p>",
        "id": 235116670,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618795883
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; *simulated</p>",
        "id": 235116679,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618795899
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; no</p>",
        "id": 235116726,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618795928
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; where is that?</p>",
        "id": 235116728,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618795933
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; it's more like a gif</p>",
        "id": 235116747,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618795955
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; <a href=\"https://github.com/openworm/OpenWorm\">https://github.com/openworm/OpenWorm</a></p>",
        "id": 235116750,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618795956
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; wow thats awesome</p>",
        "id": 235116759,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618795974
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; thanks</p>",
        "id": 235116761,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618795982
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; you made?</p>",
        "id": 235116769,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618795985
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 235116792,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618795990
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; was my master thesis</p>",
        "id": 235116806,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618795996
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; are you trying to get openworm to julia?</p>",
        "id": 235116809,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618796005
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; well</p>",
        "id": 235116815,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618796015
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; or using SciML solvers etc</p>",
        "id": 235116817,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618796016
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; i am trying out what's possible, where i can use it</p>",
        "id": 235116868,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618796055
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; yeah makes sense. don't want to just redo everything</p>",
        "id": 235116900,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618796072
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; what're you looking at now?</p>",
        "id": 235116902,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618796077
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; @isaacsas and I have been chatting about the PDE boundary specification issue and how we handle spatial structures. sounds like this could be a great use case</p>",
        "id": 235116920,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618796112
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; hey that would be super awesome if we could talk about C. elegans.</p>",
        "id": 235116958,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618796161
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; @Alex Cohen c elegans stuff</p>",
        "id": 235117007,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618796181
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; but. tbh, it's 3:30 here and I rly need to go to bed now xD</p>",
        "id": 235117009,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618796181
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; haha i get u get that sleep</p>",
        "id": 235117017,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618796195
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; let's get in touch tomorrow?</p>",
        "id": 235117026,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618796212
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; absolutely anytime!</p>",
        "id": 235117035,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618796225
    },
    {
        "content": "<p>[slack] &lt;ignace-computing&gt; Sorry for bothering you guys...<br>\nI would like to see the source code under the hood of how a PDESystem (part of ModelingToolkit) is set up. More specifically: where are the discretizations defined, if any discretization is used?<br>\nThis would be a great help for relatively new users like me... once I am off with the basics I might even help with the package development <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>.<br>\nThanks!</p>",
        "id": 235134841,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618814973
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; each discretizer package has its own code</p>",
        "id": 235135054,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618815121
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/SciML/DiffEqOperators.jl/blob/master/src/MOLFiniteDifference/MOL_discretization.jl\">https://github.com/SciML/DiffEqOperators.jl/blob/master/src/MOLFiniteDifference/MOL_discretization.jl</a></p>",
        "id": 235135104,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618815134
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/SciML/NeuralPDE.jl/blob/master/src/pinns_pde_solve.jl\">https://github.com/SciML/NeuralPDE.jl/blob/master/src/pinns_pde_solve.jl</a></p>",
        "id": 235135139,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618815152
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and the FEM version isn't packaged up yet.</p>",
        "id": 235135152,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618815163
    },
    {
        "content": "<p>[slack] &lt;ignace-computing&gt; Thank you!!!</p>",
        "id": 235136885,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618816075
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; oh yeah speaking of that, @chrisrackauckas what's the status of MOL discretization? does it work with more than one dependent variable now?</p>",
        "id": 235140297,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618818192
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; barely</p>",
        "id": 235140487,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618818325
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I'd still say, wait until the summer is over for really using it</p>",
        "id": 235140504,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618818337
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; unless you want to be demoing it and opening issues</p>",
        "id": 235140518,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618818347
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I might revisit it in a month or two when I (hopefully) have some time, then I can help demo it on my use case. I would like to migrate my model to ModelingToolkit in the future.</p>",
        "id": 235140666,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618818429
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; A MTK tutorial on heat equation + phase change would be cool. I have the necessary stuff on my end, would just be matter of copy-pasta to do it in MTK.</p>",
        "id": 235140863,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618818578
    },
    {
        "content": "<p>[slack] &lt;Tino Sulzer&gt; hoping to fix this by the end of the day</p>",
        "id": 235209733,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618849667
    },
    {
        "content": "<p>[slack] &lt;Logan Brooks&gt; @chrisrackauckas follow up question I’ve setup the following problem but am unable to get the model to train.   It throws a <code>TaskFailedExecption</code> then says <code>nested task error: UndefRefError: access to undefined reference</code></p>\n<p>Any help would be greatly appreciated</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>using DifferentialEquations\nusing OrdinaryDiffEq, DiffEqFlux, DiffEqSensitivity, Flux, Plots\nusing ModelingToolkit\nusing DataDrivenDiffEq\n\n\nkeys = [1,2]\nd_time = [[7.0,20.0],[8.0,24.0]]\namt = [[3.6,9.0],[3.6,9.0]]\ndv_times = [[0.0, 5.3, 27.1, 55.1, 76.0],[0.0,12.9,33.9,54.9,75.8,117.8,138.7]]\ndv_values = [[22.0,26.0,15.0,23.0,32.0],[14.0,13.0,12.0,13.0,15.0,19.0,21.0]]\ninitial_conditions = [[0.0, 0.0, 14.0, 0.5, 6.3, 10.3, 1.9, 6.05, 3.5],[0.0, 0.0, 22.0, 1.2, 7.1, 20.9, 1.8, 5.5, 2.8]]\n\nd_dose_times = Dict(keys .=&gt; d_time)\nd_id_time_amt = Dict(keys[i] =&gt; Dict(d_time[i].=&gt;amt[i]) for i= 1:length(keys))\nd_initial_conditions = Dict(keys .=&gt; initial_conditions)\nd_dv_times = Dict(keys .=&gt; dv_times)\nd_dv_values = Dict(keys .=&gt; dv_values)\n\ntspan = [0.0, 138.7]\nann = FastChain(FastDense(2, 50, tanh), FastDense(50, 1))\np = Float64.(initial_params(ann))\nu0 = d_initial_conditions[1]\n\nfunction udetgi!(du,u,p,t)\n    Central, Periph, PD, clss,v1,v2,cld,vmax,c50 = u\n    z = ann([Central,PD], p)\n    dCentral = -clss/v1* Central - cld/v1*Central + cld/v2*Periph - ((vmax * Central/v1)/ (c50 +Central/v1))\n    dPeriph = cld/v1*Central  - cld/v2*Periph\n    dPD = PD * z[1]\n\n    du[1] = dCentral; du[2] = dPeriph; du[3] = dPD\nend\n\nThreads.nthreads()\n\nprob = ODEProblem(udetgi!, u0, tspan, p)\n\nfunction prob_func(prob, i, repeat)\n    affect!(integrator) = integrator.u[1] += d_id_time_amt[keys[i]][integrator.t]\n    cb_tmp = PresetTimeCallback(d_dose_times[keys[i]], affect!, save_positions=(false, false))\n    initial_conditions_tmp = d_initial_conditions[keys[i]]\n    save_at_tmp = d_dv_times[keys[i]]\n    remake(prob, u0 = initial_conditions_tmp, p= p, abstol = 1e-6,reltol = 1e-6,\n           callback = cb_tmp, save_at = save_at_tmp)\nend\n\n\nensemble_prob = EnsembleProblem(prob, prob_func = prob_func)\n\nsim = solve(ensemble_prob,\n            EnsembleThreads(),\n            trajectories = length(keys),\n            sensealg=ReverseDiffAdjoint())\n\nplot(sim, vars= [1], tspan = (0:30)) # This looks ok\n\nfunction tgimodel!(p, ensemble, keys = keys)\n    prob = ODEProblem(udetgi!, u0, tspan, p)\n\n    function prob_func(prob, i, repeat, keys = keys)\n        save_at_tmp = d_dv_times[keys[i]]\n        affect!(integrator) = integrator.u[1] += d_id_time_amt[keys[i]][integrator.t]\n        cb_tmp = PresetTimeCallback(d_dose_times[keys[i]], affect!, save_positions=(false, false))\n        remake(prob,\n                u0 = d_initial_conditions[keys[i]],\n                p = p,\n                abstol = 1e-6,reltol = 1e-6,\n                saveat = save_at_tmp,\n                callback = cb_tmp)\n    end\n    ensemble_prob = EnsembleProblem(prob, prob_func = prob_func)\n\n    sim = solve(ensemble_prob, ensemble, trajectories = length(keys), sensealg=ReverseDiffAdjoint())\n\nend\n\nfunction predict_n_ode(p)\n    tgimodel!(p, EnsembleThreads())\nend\n\npred_nod = predict_n_ode(p)\n\nplot(pred_nod, vars= [1,3], tspan = (0:30)) # This looks bad\n\nfunction loss_n_ode(p, keys = keys)\n    pred = predict_n_ode(p)\n    loss = [mean(sum(abs2,d_dv_values[keys[i]] .- Array(pred[i])[3,:])) for i=1:length(pred) ]\n    mean(loss)\nend\n\nloss_n_ode(p)\n\nloss_threaded(p) = mean([mean(sum(abs2,d_dv_values[keys[i]] .- Array(tgimodel!(p, EnsembleThreads())[i])[3,:])) for i=1:length(tgimodel!(p, EnsembleThreads())) ])\n\nl1 = loss_threaded(p)\n#opt = ADAM(0.1)\ncb = function (p,l) # callback function to observe training\n    @show l\n    false\nend\n\n\nres1_uode = DiffEqFlux.sciml_train(loss_threaded, p, ADAM(0.01), cb = cb, maxiters = 100) ```\n</code></pre></div>",
        "id": 235252709,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618867553
    },
    {
        "content": "<p>[slack] &lt;Logan Brooks&gt; These is also some odd behavior with the multiple dose (multiple subject) and callbacks: <a href=\"https://files.slack.com/files-pri/T68168MUP-F01UTESUQM9/download/screen_shot_2021-04-19_at_12.58.50_pm.png\">https://files.slack.com/files-pri/T68168MUP-F01UTESUQM9/download/screen_shot_2021-04-19_at_12.58.50_pm.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F01UTESUQM9/download/screen_shot_2021-04-19_at_12.58.50_pm.png\"><img src=\"https://files.slack.com/files-pri/T68168MUP-F01UTESUQM9/download/screen_shot_2021-04-19_at_12.58.50_pm.png\"></a></div>",
        "id": 235260075,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618871690
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Just use Pumas for this</p>",
        "id": 235266092,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618875435
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; diffeq doesnt have progress bar integration right? if i wanna see how far into a solve i am (fixed dt)</p>",
        "id": 235360685,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618931570
    },
    {
        "content": "<p>[slack] &lt;vaibhavdixit02&gt; Does passing <code>progress=true</code> do anything?</p>",
        "id": 235361032,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618931700
    },
    {
        "content": "<p>[slack] &lt;vaibhavdixit02&gt; I have seen it used at some places but not very familiar with the <code>solve</code> setup and how pervasive this is</p>",
        "id": 235361143,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618931740
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; <code>progress=true</code> should work.</p>",
        "id": 235363565,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618932448
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; Thank you both!</p>",
        "id": 235364661,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618932833
    },
    {
        "content": "<p>[slack] &lt;mschauer&gt; Can you remind me about the standard choice of performant RNG</p>",
        "id": 235413479,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618952118
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/search?q=RandomNumbers.jl&amp;type=Repositories\">RandomNumbers.jl</a></p>",
        "id": 235413555,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618952154
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Xorishiro128 or something of the sort benchmarked really well</p>",
        "id": 235413600,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618952165
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; probably needs to be revisited</p>",
        "id": 235413613,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618952172
    },
    {
        "content": "<p>[slack] &lt;mschauer&gt; Thank you, let’s give it a try</p>",
        "id": 235415108,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618952548
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; does Base not have performant RNG? why</p>",
        "id": 235415807,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618952715
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it does, it's just not as good</p>",
        "id": 235416369,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618952863
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Be careful with the Xorishiro128 family methods. I think some of them fail standard tests in Big Crush and such. You can see the discussion at <a href=\"https://github.com/JuliaLang/julia/issues/27614\">https://github.com/JuliaLang/julia/issues/27614</a> to see what is being planned for future Julia versions. Alternatively, some of the Random123 and PCG generators are known to pass the Big Crush tests. (You have to look at their respective papers though to see which generators they recommend, at least for PCG <a href=\"https://github.com/search?q=RandomNumbers.jl&amp;type=Repositories\">RandomNumbers.jl</a> didn’t actually discuss or test with the author’s recommended generator.)</p>",
        "id": 235424239,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618956647
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://sunoru.github.io/RandomNumbers.jl/dev/man/benchmark/#Big-Crush-Test\">https://sunoru.github.io/RandomNumbers.jl/dev/man/benchmark/#Big-Crush-Test</a></p>",
        "id": 235424452,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618956777
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the Plus one passes</p>",
        "id": 235424454,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618956781
    },
    {
        "content": "<p>[slack] &lt;cbkeller&gt; Also <a href=\"https://github.com/JuliaSIMD/VectorizedRNG.jl\">https://github.com/JuliaSIMD/VectorizedRNG.jl</a></p>",
        "id": 235425310,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618957279
    },
    {
        "content": "<p>[slack] &lt;cbkeller&gt; which is Xoshiro256++</p>",
        "id": 235425332,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618957298
    },
    {
        "content": "<p>[slack] &lt;ericphanson&gt; See also <a href=\"https://github.com/JuliaLang/julia/pull/40546\">https://github.com/JuliaLang/julia/pull/40546</a> (there’s more description in the original PR, <a href=\"https://github.com/JuliaLang/julia/pull/34852\">https://github.com/JuliaLang/julia/pull/34852</a>). Looks super cool!</p>",
        "id": 235426539,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618958039
    },
    {
        "content": "<p>[slack] &lt;iv.borissov&gt; Hi, could you help me find proper algorithm settings for an <code>ODEProblem</code> ? There are 750 eqs in my problem and a number of doses (<code>DiscreteCallbacks</code>). Default <code>AutoTsit5(Rosenbrock23())</code>  fails with <code>ERROR: LoadError: LinearAlgebra.SingularException(751)</code> .  The stacktrace is :</p>\n<div class=\"codehilite\" data-code-language=\"stacktrace\"><pre><span></span><code> [1] checknonsingular at\nC:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\LinearAlgebra\\src\\factorization.jl:19 [inlined]\n [2] checknonsingular at\nC:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\LinearAlgebra\\src\\factorization.jl:21 [inlined]\n [3] lu!(::Array{Float64,2}, ::Val{true}; check::Bool) at\nC:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\LinearAlgebra\\src\\lu.jl:85\n [4] lu! at C:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.5\\LinearAlgebra\\src\\lu.jl:81 [inlined]\n(repeats 2 times)\n [5] (::DefaultLinSolve)(::Array{Float64,1}, ::Array{Float64,2}, ::Array{Float64,1}, ::Bool; reltol::Nothing,\nkwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at\nC:\\Julia\\packages\\DiffEqBase\\vaBCL\\src\\linear_nonlinear.jl:79\n [6] DefaultLinSolve at C:\\Julia\\packages\\DiffEqBase\\vaBCL\\src\\linear_nonlinear.jl:63 [inlined]\n [7] perform_step!(::OrdinaryDiffEq.ODEIntegrator{CompositeAlgorithm{Tuple{Tsit5,Rosenbrock23{0,true,DefaultLinSolve,Da\ntaType}},OrdinaryDiffEq.AutoSwitchCache{Tsit5,Rosenbrock23{0,true,DefaultLinSolve,DataType},Rational{Int64},Int64}},tru\ne,Array{Float64,1},Nothing,Float64,Params{LabelledArrays.LArray{Float64,1,Array{Float64,1}```\n`CVODE_BDF`  also gets stuck with warnings like `[CVODES WARNING]  CVode   Internal t = 48293.4 and h = 1.30344e-014 are such that t + h = t on the next step`\n</code></pre></div>",
        "id": 235480111,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618997409
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; sounds like it's not an algorithm issue but a model issue?</p>",
        "id": 235480622,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618997673
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; would you happen to know why you have a singular Jacobian?</p>",
        "id": 235480645,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618997693
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Is this a DAE?</p>",
        "id": 235480650,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618997697
    },
    {
        "content": "<p>[slack] &lt;iv.borissov&gt; It is an ODE system. I don't know why Jacobian can turn singular, I need to check with colleagues who developed the model. Still another <code>LSODE</code> based solver was able to solve the problem.</p>",
        "id": 235481949,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618998414
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; which one?</p>",
        "id": 235482150,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618998508
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>lsoda()</code> ?</p>",
        "id": 235482169,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618998519
    },
    {
        "content": "<p>[slack] &lt;iv.borissov&gt; well, it is a different ODE solver software (not Julia) based on Fortran <code>LSODE</code></p>",
        "id": 235482669,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618998801
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and you did a call to the Julia implementation of the rhs?</p>",
        "id": 235482836,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618998909
    },
    {
        "content": "<p>[slack] &lt;iv.borissov&gt; No the reactions were separately translated both to the input format of DBSolve (the name of this software) and to Julia</p>",
        "id": 235483027,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618999006
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; so how do you know it's the same model?</p>",
        "id": 235483081,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618999042
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Did you try comparing the rhs on a random vector between the two and show that they get the same exact derivative values?</p>",
        "id": 235483176,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618999084
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; BTW, you can call into LSODE from SciPyDiffEq if you want to do the 1-1 comparison. Though CVODE_BDF is an LSODE derivative, and LSODA is LSODE adapting between the Adams and BDF versions</p>",
        "id": 235483302,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618999155
    },
    {
        "content": "<p>[slack] &lt;iv.borissov&gt; Well the error happens when I turn on a special switcher (resonsible for the tumor growth). Without this switcher (<code>DiscreteCallback</code>) both Julia and DBSolve simulations show the same results</p>",
        "id": 235483796,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618999393
    },
    {
        "content": "<p>[slack] &lt;iv.borissov&gt; But with this switcher on the matrix singularity error happens, while <code>LSODE</code>  seems not to encounter this problem</p>",
        "id": 235483949,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618999481
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; LSODE doesn't have discrete callbacks, so how did you implement it there?</p>",
        "id": 235484051,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618999543
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; And how did you implement the DiscreteCallback?</p>",
        "id": 235484062,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1618999551
    },
    {
        "content": "<p>[slack] &lt;iv.borissov&gt; @chrisrackauckas sorry, I was away from my computer. If I undersnad correctly this DBSolve software, which intrnally uses LSODE, terminates one simulation , changes values and starts another one to imitate what is called <code>DiscreteCallback</code>  in <a href=\"https://github.com/search?q=DiffEq.jl&amp;type=Repositories\">DiffEq.jl</a></p>",
        "id": 235496764,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619006194
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's close but not the same given the <code>reinit</code>.</p>",
        "id": 235496882,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619006265
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but I think the main thing to check is, does the rhs give exactly the same values on a random vector?</p>",
        "id": 235496958,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619006288
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>using DifferentialEquations, DiffEqSensitivity, DiffEqFlux, Flux\nusing ModelingToolkit\nusing ComponentArrays, LinearAlgebra\nusing Plots\nconst nknots = 10\nconst h = 1.0/(nknots+1)\nx = range(0, step=h, length=nknots)\nu0 = sin.(π*x)\n@inline function f(du,u,p,t)\n  du .= zero(eltype(u))\n  u₃ = @view u[3:end]\n  u₂ = @view u[2:end-1]\n  u₁ = @view u[1:end-2]\n  k = p[1]\n  @. du[2:end-1] = k*((u₃ - 2*u₂ + u₁)/(h^2.0))\n  nothing\nend\np_true = ComponentArray(k=0.42)\nprob = ODEProblem(f, u0, (0.0,1.0), p_true)\n@time sol_true = solve(prob, Rodas4P(), saveat=0.1, abstol=1e-14, reltol=1e-14)\nplot(sol_true, legend=nothing)\nfunction loss(prob0, p)\n  prob = remake(prob0, u0=convert.(eltype(p),prob0.u0), p=p)\n  sol = solve(prob, Rodas4P(autodiff=false), saveat=0.1, sensealg=InterpolatingAdjoint(),\n                                             abstol=1e-8, reltol=1e-8)\n  sum((sol .- sol_true).^2)\nend\np0 = ComponentArray(k=1.0)\nusing ForwardDiff, FiniteDiff, Zygote\nfwdgrad = ForwardDiff.gradient(p -&gt; loss(prob,p), p0)\nrevgrad = Zygote.gradient(p -&gt; loss(prob,p), p0)[1]\nfndgrad = FiniteDiff.finite_difference_gradient(p -&gt; loss(prob,p), p0)\n@assert isapprox(fwdgrad[1], revgrad[1], atol=0.01) \"Gradients $(fwdgrad[1]) and $(revgrad[1]) differ by $(fwdgrad[1] - revgrad[1])\"\n@assert isapprox(fwdgrad[1], fndgrad[1], atol=0.01) \"Gradients $(fwdgrad[1]) and $(fndgrad[1]) differ by $(fwdgrad[1] - fndgrad[1])\"</code></p>",
        "id": 235497359,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619006466
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's just a tolerance and finite difference thing</p>",
        "id": 235497374,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619006471
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; notice that forward and reverse mode are the same</p>",
        "id": 235497390,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619006478
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but finite difference just has numerical errors</p>",
        "id": 235497400,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619006484
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; this is to be expected</p>",
        "id": 235497406,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619006487
    },
    {
        "content": "<p>[slack] &lt;iv.borissov&gt; The tricky thing is that \"tumor event\" changes the rhs - it adds some new terms ( which were zeros before) to rhs equations . Yes, I will check the rhs results</p>",
        "id": 235498158,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619006864
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; @chrisrackauckas You mentioned before on GitHub that there are issues with <code>DEDataArray</code> fields not getting properly propagated through some linear algebra operations. I think I just observed that with TRBDF2 (but no other solvers, so far). Is there a known workaround for this?</p>",
        "id": 235500749,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619008182
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; there is no workaround for that.</p>",
        "id": 235501127,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619008346
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; in fact, there can be no general workaround for it, which is why DEDataArray is basically going away.</p>",
        "id": 235501180,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619008374
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; <span aria-label=\"disappointed\" class=\"emoji emoji-1f61e\" role=\"img\" title=\"disappointed\">:disappointed:</span></p>",
        "id": 235501217,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619008385
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; but I need it....</p>",
        "id": 235501315,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619008432
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; any case where it was used, it wasn't needed</p>",
        "id": 235501434,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619008474
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you could just have a constant value in the array that is changed at callbacks</p>",
        "id": 235501450,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619008486
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; you mean in the state vector?</p>",
        "id": 235501669,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619008580
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I need it because I have lots of state variables that are diagnostic/non-integrated and get updated at every timestep (i.e. not suitable for callbacks). <code>DEDataArray</code> remains the best solution because in-place updating a struct field doesn't work with reverse mode autodiff.</p>",
        "id": 235501982,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619008723
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Is there a ClimA developer somewhere around here that could tell me how they solve this problem? I know climate models must have it as well.</p>",
        "id": 235502536,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619008981
    },
    {
        "content": "<p>[slack] &lt;I Mas&gt; I recently found this <a href=\"https://github.com/ModiaSim/TinyModia.jl\">https://github.com/ModiaSim/TinyModia.jl</a> which says that it builds on top of <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a>... I knew about Modia, but this seems to be replaced by TinyModia... is anybody using this? (currently I am using OpenModelica but I would be interested to try out different tools)</p>",
        "id": 235502914,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619009148
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; TinyModia is cool, but in this space you should also check out <a href=\"https://github.com/SciML/ModelingToolkit.jl\">https://github.com/SciML/ModelingToolkit.jl</a></p>",
        "id": 235503199,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619009273
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; The <a href=\"https://github.com/search?q=Modia.jl&amp;type=Repositories\">Modia.jl</a> -&gt; <a href=\"https://github.com/search?q=TinyModia.jl&amp;type=Repositories\">TinyModia.jl</a> change has a lot in common with the <a href=\"https://github.com/search?q=ModelingToolkit.jl&amp;type=Repositories\">ModelingToolkit.jl</a> playbook.</p>",
        "id": 235503293,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619009299
    },
    {
        "content": "<p>[slack] &lt;I Mas&gt; so coming from Modelica I guess TinyModia may be more familiar... but I say this without really knowing MTK... I understand that both of them build on top of <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a> and both support acausal hybrid modelling which is the main reason why i switched from Simulink to Modelica in the first placce</p>",
        "id": 235503670,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619009484
    },
    {
        "content": "<p>[slack] &lt;I Mas&gt; hmm although this also looks quite modelica-like <a href=\"https://mtk.sciml.ai/stable/tutorials/acausal_components/\">https://mtk.sciml.ai/stable/tutorials/acausal_components/</a></p>",
        "id": 235504145,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619009697
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; Would <a href=\"https://github.com/jonniedie/SimulationLogs.jl\">https://github.com/jonniedie/SimulationLogs.jl</a> be helpful here? Logging works lazily so there's no cost while the simulation is running. It goes back and calculates the values after the fact when you call <code>get_log</code> on your solution.</p>",
        "id": 235508337,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619011355
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Maybe? This would mean that the intermediate values (like your <code>a</code> and <code>b</code> here) have to be allocated on each step, right? As opposed to in-place updates? Then again, I suppose that's happening with <code>DEDataArray</code> too because the whole array gets copied at every time step.</p>",
        "id": 235509906,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619011888
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 235510067,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619011933
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; It won’t change anything about the simulation as it runs. In the example case, <code>a</code> will be a stack allocated variable just as it was before the <code>@log</code> was placed there and <code>b</code> won’t come into existence. When you call <code>get_log</code> it will run back through for every time step and push those values to arrays. So that’s where the allocation happens; after the fact. But if you want to save values, they’ll have to be allocated somewhere, right?</p>",
        "id": 235511208,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619012348
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; Even in-place solves push your state vector at each time step to an output array.</p>",
        "id": 235511427,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619012430
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; yes, but I'm dealing with a PDE, so those would be (presumably heap allocated) arrays.</p>",
        "id": 235511444,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619012436
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; because each intermediate variable is defined on the whole discretized grid</p>",
        "id": 235511477,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619012451
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; Oh yeah, what I was getting at is while the simulation is running, <code>a</code> isn’t going to be doing anything different than it already was. If it’s an array, it will still be an array. So there are no extra allocations while the simulation is running. There will, of course, be more allocations when <code>get_log</code> goes back and saves the variables for each time step.</p>",
        "id": 235512522,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619012851
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; But that’s just by definition of saving values.</p>",
        "id": 235512685,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619012895
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Ok, yeah, I see. Seems pretty nice. I'll have to think about if there's a way to rewrite my model to use that instead. I quite liked the <code>DEDataArray</code> solution, though, because everything was nicely wrapped up in one struct, so \"user\" code (i.e. where the actual processes are defined) could just read/write those variables without worrying about saving them, copying them, etc.</p>",
        "id": 235512986,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619013013
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Did you originally make this because of the problems with <code>DEDataArray</code> ?</p>",
        "id": 235513102,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619013065
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; And just to be clear, it actually re-evaluates the model function at each of the saved time points, correct? Using the saved solution? Seems like that might be a bit slow depending on how costly <code>f</code> is.</p>",
        "id": 235513852,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619013310
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; I made it because I am (or at least was ;-)) a Simulink user and I really missed the ability to click “Log Selected Signals” on any internal signal in the simulation for saving or debugging. I never used DEDataArray because I had read the caveats Chris mentioned on discourse and other places.</p>\n<p>As for speed, I’ve mostly used it on models that used an explicit solver, so it’s just one extra function call per time step, which isn’t much in comparison to how many times the function was called per timestep while the simulation was running. I’ve found it to take around 1/5-1/4 of the time that it took to solve the simulation.</p>\n<p>For you with an implicit solver, I’d imagine it would be comparatively faster because implicit solvers have to do a lot more heavy computation under the hood. But maybe I’m wrong on that.</p>",
        "id": 235517932,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619014770
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; But that is correct, it’s running back through and re-calling the function for each time step</p>",
        "id": 235518052,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619014804
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; But honestly, I would just try slapping a <code>@log</code> somewhere in your simulation and see how long it takes to <code>get_log</code>.</p>",
        "id": 235518394,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619014924
    },
    {
        "content": "<p>[slack] &lt;Simon Welker&gt; Hi all <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> I have an SDE in two dimensions, so a solution is a curve <code>f(t)=[x,y]</code>. Beyond that, I would also like to get a (multi)function <code>g(y)=x</code>, i.e. get the position(s) <code>x</code> given a certain <code>y</code>. Are there any capabilities for this in the ecosystem that I just don't know the name for? In particular, special interpolation facilities, so I could evaluate this at arbitrary points <code>y</code>? (If something like this for getting all positions doesn't exist, the first such position would also be fine).</p>",
        "id": 235521369,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619015983
    },
    {
        "content": "<p>[slack] &lt;Simon Welker&gt; So far I've done terrible things like search through the result array until the sign of the distance to a given <code>y</code> flips for the first time, and then linearly interpolate there</p>",
        "id": 235521451,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619016003
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; Is there a list of DiffEq functions that one might need to extend so they work with non-standard arrays? I’m getting an error (I think due to solution type changing) when I use StructArrays with <a href=\"https://github.com/search?q=DiffEq.jl&amp;type=Repositories\">DiffEq.jl</a>. Here’s a MWE</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    du .= u\n    return nothing\nend\nu = StructArray([MVector{2}(1.,2.) for i = 1:5])\ndu = similar(u)\nprob = ODEProblem(rhs_structarray!,u,(0.0,.1))\nsol = solve(prob,Tsit5())```\nwhich gives `ERROR: MethodError: no method matching rhs_structarray!(*::Vector{MVector{2, Float64}}*, ::Vector{MVector{2, Float64}}, ::SciMLBase.NullParameters, ::Float64)`. In other words, `du` seems to have changed from a `StructArray` of `MVectors` to a `Vector` of `MVectors`\n\nIs there a way to determine where the type of `du` gets changed?\n</code></pre></div>",
        "id": 235534739,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619020127
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I actually frequently have to use forward Euler with tiny time steps because even the implicit methods struggle with phase change <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 235539508,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619021992
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; But thanks, I'll give it a try!</p>",
        "id": 235539519,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619021998
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; Oh, and you can also pass a time vector into <code>get_log</code> to get values at those points instead of every saved timestep, which sounds like it might be useful here.</p>",
        "id": 235540110,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619022226
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Wait, what happens if <code>a</code> gets modified again later?</p>",
        "id": 235540245,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619022280
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; without <code>@log</code> being used</p>",
        "id": 235540261,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619022289
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; if I understand the way this works correctly, I could hypothetically pre-initialize a bunch of variable arrays with <code>@log</code> and then modify them later in the step function, and the final value they hold when the step function returns should be what <code>get_log</code> returns...?</p>",
        "id": 235540576,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619022416
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; or does it capture whatever the value of <code>a</code> is exactly where <code>@log</code> is used?</p>",
        "id": 235540974,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619022589
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; Wait, I’ve gotta think about what you’re saying. So in your case, you have a persistent value that you’re modifying in-place at each function call? Sorry I guess I missed that earlier. In that case, I’m not sure this would work for you. Because each time <code>a</code> is captured, it’s not making a copy. It’s just capturing what’s there.</p>",
        "id": 235541211,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619022664
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; yes, but I only care about the value at that time step</p>",
        "id": 235541272,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619022692
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; and I could hypothetically re-allocate them at each function evaluation... that's kind of happening anyway at the moment.</p>",
        "id": 235541321,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619022712
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; in other words, I don't use the value from the previous time step, they are functions of the state variable</p>",
        "id": 235541441,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619022754
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; Yeah, I think you’d have to, unfortunately. Maybe I should put in an explicit <code>copy</code> statement when things get logged to prevent this.</p>",
        "id": 235541596,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619022797
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; so if <code>a</code> gets modified later in the function, that change wouldn't show up in the output</p>",
        "id": 235541669,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619022833
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; <code>function lorenz!(du, u, p, t)\n    @log a = u[2]-u[1]\n    @log b u[3]+a\n    a = b + a\n    du[1] = p[1]*a\n    du[2] = u[1]*(p[2]-u[3]) - u[2]\n    du[3] = u[1]*u[2] - p[3]*u[3]\nend</code><br>\nso with your example, what if I did that?</p>",
        "id": 235541805,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619022862
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; In that example, you are rebinding the value of <code>a</code> so it would only log the value it was when you logged it. But if <code>a</code> was mutable and you modified it later, it would get modified.</p>",
        "id": 235542059,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619022960
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; so if <code>a</code> were an array and we modified it in-place, what would <code>get_log</code> produce?</p>",
        "id": 235542196,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619023002
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; Whatever value it was changed to. So I think what I’m going to do is put in a <code>deepcopy</code> when we log values so they are no longer bound to the variable after they’re logged.</p>",
        "id": 235542697,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619023205
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; but I actually want that behavior <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 235542755,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619023225
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I want it to be what it was changed to. But I guess that, in general, most users would expect it to be the value at that exact line.</p>",
        "id": 235542851,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619023268
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; Oh wait, you want it to log the last value it was changed to? In that case just put a <code>@log a</code> at the end of your function .</p>",
        "id": 235542890,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619023288
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; ahhh, ok</p>",
        "id": 235542929,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619023306
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; yeah that could work, I'll give it a try</p>",
        "id": 235542974,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619023322
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; I was wondering if this might be related to <a href=\"https://github.com/SciML/OrdinaryDiffEq.jl/issues/1365\">https://github.com/SciML/OrdinaryDiffEq.jl/issues/1365</a></p>",
        "id": 235543277,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619023464
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Ahh, it was PractRand it fails:</p>",
        "id": 235563734,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619031753
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; <a href=\"https://en.wikipedia.org/wiki/Xoroshiro128%2B\">https://en.wikipedia.org/wiki/Xoroshiro128%2B</a></p>",
        "id": 235563736,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619031754
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; I don't understand the ++ vs ** differences (or if they are the same), but the PCG author seems to feel there are still some drawbacks to that one. See <a href=\"https://www.pcg-random.org/posts/a-quick-look-at-xoshiro256.html\">https://www.pcg-random.org/posts/a-quick-look-at-xoshiro256.html</a></p>",
        "id": 235564255,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619031951
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; At the same time, there seems to be a lot of back and forth between the PCG author and the Xoroshiro/Xoshiro authors, so who knows...</p>",
        "id": 235564392,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619031992
    },
    {
        "content": "<p>[slack] &lt;cbkeller&gt; Yeah, the ++ and ** are a bit different — c.f.:<br>\n<a href=\"https://prng.di.unimi.it/xoshiro256plusplus.c\">https://prng.di.unimi.it/xoshiro256plusplus.c</a><br>\n<a href=\"https://prng.di.unimi.it/xoshiro256starstar.c\">https://prng.di.unimi.it/xoshiro256starstar.c</a></p>",
        "id": 235566179,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619032744
    },
    {
        "content": "<p>[slack] &lt;cbkeller&gt; But more broadly yeah, it’s unclear if one can trust what the PCG authors say about the Xoshiro authors, and vice versa, since it appears to have gotten personal</p>",
        "id": 235566442,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619032850
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; I have a problem that I am trying to solve that is unstable with the non-W Rosenbrock methods but stable with <code>Rosenbrock23</code> and <code>Rosenbrock32</code> . I take it that is indicative of the structure of the ODE problem? Any tips on how to understand this instability?</p>",
        "id": 235575394,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619036651
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; see <a href=\"https://arxiv.org/abs/2103.05244\">https://arxiv.org/abs/2103.05244</a> and <a href=\"https://www.stochasticlifestyle.com/modelingtoolkit-modelica-and-modia-the-composable-modeling-future-in-julia/\">https://www.stochasticlifestyle.com/modelingtoolkit-modelica-and-modia-the-composable-modeling-future-in-julia/</a></p>",
        "id": 235576273,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619037076
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; and it seems that the <code>Rosenbrock23</code> solution hits a point where <code>u</code> stops changing, like an exact steady-state value (although one \"should not\" exist)?</p>",
        "id": 235577912,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619037907
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Autodiff?</p>",
        "id": 235584870,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619040267
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; yeah so, unfortunately, I don't think SimulationLogs will resolve my dependence on <code>DEDataArray</code> . But it will be useful for a lot of other things :)</p>",
        "id": 235588364,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619041965
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; Oh, that’s too bad. Anything in particular?</p>",
        "id": 235589654,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619042618
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; what is autodiff?</p>",
        "id": 235604828,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619052978
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; Not sure if this is a known issue with <code>1.6</code>, but I am trying to save an <code>ODESolution</code> using <code>JLD</code> and running into the error mentioned here <a href=\"https://github.com/JuliaIO/JLD.jl/issues/57\">https://github.com/JuliaIO/JLD.jl/issues/57</a>. Figured I would FYI here.</p>",
        "id": 235605008,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619053157
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Did you turn off autodiff?</p>",
        "id": 235606428,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619054418
    },
    {
        "content": "<p>[slack] &lt;briochemc&gt; Have you tried <a href=\"https://github.com/JuliaIO/JLD2.jl\">https://github.com/JuliaIO/JLD2.jl</a> instead of <a href=\"https://github.com/search?q=JLD.jl&amp;type=Repositories\">JLD.jl</a>?</p>",
        "id": 235606722,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619054714
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; JLD2 seems to have worked. Maybe not the question to ask here, but is JLD2 supposed to take over JLD?</p>",
        "id": 235607406,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619055453
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; I did not. Does it still use autodiff if the ODEProblem is built around an ODEFunction holding a time-invariant DiffEqArrayOperator?</p>",
        "id": 235607614,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619055660
    },
    {
        "content": "<p>[slack] &lt;briochemc&gt; I'm not sure that's the goal, but my impression is that JLD2 is more used and receives more attention... Maybe it's a good time to get an update of the state of things between packages that allow you to load/save data?</p>",
        "id": 235607722,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619055780
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It shouldn't need to diff at that point</p>",
        "id": 235609095,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619057021
    },
    {
        "content": "<p>[slack] &lt;Peter J&gt; I just use <code>Serialization</code>  in base unless it's a performance sensitive application.</p>",
        "id": 235609792,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619057467
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; my system looks like <code>M*du = A*u</code> where M and A are square, full rank. <code>u(t)</code> should look like an undamped oscillator, would this cause issues with the non-Rosenbrock-W solvers?</p>",
        "id": 235610247,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619057831
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that should be fine</p>",
        "id": 235610840,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619058328
    },
    {
        "content": "<p>[slack] &lt;vaibhavdixit02&gt; <a href=\"https://symbolics.juliasymbolics.org/dev/tutorials/converting_to_C/\">https://symbolics.juliasymbolics.org/dev/tutorials/converting_to_C/</a> uses <a href=\"https://github.com/JuliaSymbolics/Symbolics.jl/blob/12977ab4b50594518724a1a2938c792dd845a724/src/build_function.jl#L458\">https://github.com/JuliaSymbolics/Symbolics.jl/blob/12977ab4b50594518724a1a2938c792dd845a724/src/build_function.jl#L458</a> which is now deprecated <a href=\"https://github.com/JuliaSymbolics/Symbolics.jl/blob/12977ab4b50594518724a1a2938c792dd845a724/src/build_function.jl#L464\">https://github.com/JuliaSymbolics/Symbolics.jl/blob/12977ab4b50594518724a1a2938c792dd845a724/src/build_function.jl#L464</a>, what does <code>build_function</code> expect now since it's an <code>AbstractArray</code> ?</p>\n<p>I am not building the symbolic expression explicitly as in the test <a href=\"https://github.com/JuliaSymbolics/Symbolics.jl/blob/12977ab4b50594518724a1a2938c792dd845a724/test/build_targets.jl#L4\">https://github.com/JuliaSymbolics/Symbolics.jl/blob/12977ab4b50594518724a1a2938c792dd845a724/test/build_targets.jl#L4</a> instead using a <code>ODESystem</code>?</p>",
        "id": 235677423,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619098339
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @vaibhavdixit02 it should be an array of terms instead of an array of equations</p>",
        "id": 235686000,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619101165
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; ahh what's the syntax you're using there?</p>",
        "id": 235686129,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619101207
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I don't know if the automatic generation from an ODESystem was updated or tested. We should make sure it works on the new form though</p>",
        "id": 235686165,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619101222
    },
    {
        "content": "<p>[slack] &lt;vaibhavdixit02&gt; <code> ModelingToolkit.build_function(\n        ModelingToolkit.equations(sys),ModelingToolkit.states(sys),\n        ModelingToolkit.parameters(sys),ModelingToolkit.independent_variable(sys),\n          fname = :sho,\n          target = ModelingToolkit.StanTarget()\n      )</code><br>\nWhere <code>sys</code> is an <code>ODESystem</code></p>",
        "id": 235697540,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619104851
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Well part of the issue is that I wrote my code to be very modular/generalized.... it's a generic framework for permafrost modeling. The other part of the problem is that there are some non-integrated state variables which have implicit dependencies on the values of non-integrated state variables from the previous time step, or so I thought. After looking into this further, I found that I could remove such dependencies and make them true \"observables\" and/or intermediary variables.</p>\n<p>However, I can foresee this being a problem again in the future. There are some processes which I would like to implement that will likely be non-integrated but have a dependence on the variable values at the last time step, which <code>SimulationLogs</code> wouldn't be able to help with.</p>\n<p>That being said, it's probably better not to solve future problems <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> Maybe I can make something work with just SimulationLogs + ComponentArrays for now and remove the dependence on <code>DEDataArray</code> . I'll let you know if it works!</p>\n<p>I hope that wasn't too boring/too much detail <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 235701706,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619106583
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Also from my limited testing, <code>SimulationLogs</code> works beautifully. I actually don't understand how it's so fast.... I guess it depends on the saving interval.</p>",
        "id": 235702423,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619106868
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; I like the details <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>. Since it’s a pretty new package, I’ve been trying to see where I need to bend it to support other people’s workflows, so having that information is pretty valuable to me. So thanks!</p>\n<p>As for using values from previous time steps, how is that being done? Are you using a callback to save those values, or are you saving them each time your function is called?  If it’s the latter, it seems like it would be saving a value that isn’t necessarily correct for the time step that the solver actually chooses. Or am I misunderstanding that?</p>",
        "id": 235704960,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619107910
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Use continuous callbacks to save at zero crossings.</p>",
        "id": 235705998,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619108308
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Poincure sections?</p>",
        "id": 235706004,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619108311
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Yes, you're right. It's technically not correct, but the time steps are generally small enough that I guess it didn't make a difference. The good news is, for my current (heat conduction + phase change) model, I was able to fix it so that all variables only depend on the prognostic (integrated) state. So now it's correct!</p>\n<p>I think in general, geophysical models tend to require bending the rules of \"correctness\" though <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 235707490,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619108972
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Oh, right, I meant to ask, how does <code>SimulationLogs</code> interact with autodiff? I suppose for <code>ReverseDiff</code> it wouldn't affect anything and for <code>ForwardDiff</code> it would log the <code>Dual</code>  values?</p>",
        "id": 235713866,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619111358
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; I guess it would depend on when <code>get_log</code> was called. If the autodiff is happening internal to the solve, the logging would work the same as if there was no autodiff (because the outputs have already been converted from <code>Dual</code> to regular numbers). If you’re optimizing around a simulation, your optimizer is using autodiff, and <code>get_log</code> is being called in, say, your objective function to get values, I guess they would be <code>Dual</code>s at that point. Which is what you’d want them to be.</p>",
        "id": 235720639,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619114027
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Cool! For the latter case you mentioned, would that also work with the adjoint sensitivity methods, i.e. if you used the outputs of <code>get_log</code> in your loss?</p>",
        "id": 235722121,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619114580
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; I... think so? Haha.</p>",
        "id": 235722367,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619114673
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; I’d imagine it would.</p>",
        "id": 235722390,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619114686
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; Is this possibly related to <a href=\"https://github.com/SciML/RecursiveArrayTools.jl/issues/135\">https://github.com/SciML/RecursiveArrayTools.jl/issues/135</a></p>\n<div class=\"codehilite\" data-code-language=\"a\"><pre><span></span><code>ForwardDiff.jacobian(x-&gt;[sincos(sum(x))...], A) # 2x8 Matrix{Float64}\nZygote.jacobian(x-&gt;[sincos(sum(x))...], A)\n\nERROR: LoadError: BoundsError: attempt to access 1-element view(reshape(::ArrayPartition{Float64, Tuple{Vector{Float64}, Vector{Float64}}}, 8, 1), 1, :) with eltype Float64 at index [1, 2, 3, 4, 5, 6, 7, 8]\nStacktrace:\n [1] copyto_unaliased!(deststyle::IndexLinear, dest::SubArray{Float64, 1, Base.ReshapedArray{Float64, 2, ArrayPartition{Float64, Tuple{Vector{Float64}, Vector{Float64}}}, Tuple{}}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, srcstyle::IndexLinear, src::FillArrays.Fill{Float64, 1, Tuple{Base.OneTo{Int64}}})\n   @ Base ./abstractarray.jl:964\n [2] copyto!\n   @ ./abstractarray.jl:950 [inlined]\n [3] _gradcopy!(dst::SubArray{Float64, 1, Base.ReshapedArray{Float64, 2, ArrayPartition{Float64, Tuple{Vector{Float64}, Vector{Float64}}}, Tuple{}}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}, src::FillArrays.Fill{Float64, 1, Tuple{Base.OneTo{Int64}}})\n   @ Zygote ~/.julia/packages/Zygote/RxTZu/src/lib/grad.jl:169\n [4] jacobian(f::Function, args::ArrayPartition{Float64, Tuple{Vector{Float64}, Vector{Float64}}})\n   @ Zygote ~/.julia/packages/Zygote/RxTZu/src/lib/grad.jl:151\n [5] top-level scope\n   @ ~/GitLab/KoopmanSandbox/TypeStableExpectation/DEU_sandbox.jl:56\nin expression starting at /home/me/GitLab/KoopmanSandbox/TypeStableExpectation/DEU_sandbox.jl:56```\n</code></pre></div>",
        "id": 235733301,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619119221
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; Do we have continuation methods for boundary value problems?</p>",
        "id": 235736357,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619120473
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; no</p>",
        "id": 235738487,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619121366
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; maybe in BifurcationKit</p>",
        "id": 235738503,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619121374
    },
    {
        "content": "<p>[slack] &lt;wuerfel&gt; I can change the system size inside a callback with <code>resize!(integrator, newsize)</code>. Is it possible to use a different function for my resized system? something like <code>integrator.f = f_for_new_size</code> . Or will this always require a new ode problem?</p>",
        "id": 235740697,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619122377
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; ```julia&gt; @btime sol = solve(prob,Tsit5(),reltol=1e-5,abstol=1e-7);<br>\n  363.795 μs (10215 allocations: 853.27 KiB)</p>\n<p>julia&gt; @btime sol = solve(prob,Tsit5(),reltol=1e-5,abstol=1e-6);<br>\n  350.770 μs (9816 allocations: 820.09 KiB)</p>\n<p>julia&gt; @btime sol = solve(prob,Tsit5(),reltol=1e-5,abstol=1e-5);<br>\n  362.820 μs (10206 allocations: 852.25 KiB)```<br>\nCan somebody explain how something like this might happen both on the time and memory front?</p>",
        "id": 235748810,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619125725
    },
    {
        "content": "<p>[slack] &lt;Simon Welker&gt; oh brilliant, that already helps a lot. thank you!</p>",
        "id": 235751552,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619127046
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Ok, I successfully replaced <code>DEDataArray</code> with a variable caching system + <code>ComponentArray</code> state variable (was using it inside <code>DEDataArray</code> already anyway, so that was easy) + <code>SimulationLogs</code> for tracking the diagnostic variables. I even managed to automatically log all of the diagnostic variables by generating the <code>@log</code> calls on-the-fly in my fancy <code>@generated</code> step function. I can explain the latter part more, if you're interested..</p>\n<p>Will try to give <code>ReverseDiff</code> a quick test tomorrow. That would be super cool if it works because it actually didn't before (it breaks <code>DEDataArray</code> ). So far I'm still really impressed by <code>SimulationsLogs</code> :)</p>",
        "id": 235759928,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619131503
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; Nice! I’m glad to hear it’s working! I just wrote some tests for ComponentArrays+ReverseDiff  so I’ll try to push an update tonight for that tonight as well.</p>",
        "id": 235765057,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619134733
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; Haha, well now I’m interested in the <code>@generated</code> step function.</p>",
        "id": 235765065,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619134739
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Lower tolerance can be more stable</p>",
        "id": 235768729,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619137415
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; The properties are asymtopic</p>",
        "id": 235768744,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619137424
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://diffeq.sciml.ai/stable/basics/faq/#Switching-ODE-functions-in-the-middle-of-integration\">https://diffeq.sciml.ai/stable/basics/faq/#Switching-ODE-functions-in-the-middle-of-integration</a></p>",
        "id": 235790265,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619156755
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Ok well you asked for it <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<p>Basically, I'm re-implementing an existing permafrost/land-surface model (called CryoGrid, it's written in MATLAB) in Julia w/ SciML. I'm doing this because 1) I hate MATLAB and 2) trying to do hybrid ODE solving + machine learning in MATLAB sounds like a nightmare <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n<p>The existing model has a modular structure to allow scientists to implement or modify \"modules\" for specific processes that they are interested  in and then just plug that module into the model without making any changes to the core model code.</p>\n<p>In order to replicate this in Julia, while still being super fast, I use <code>@generated</code> functions to dynamically compile a step function which calls some interface methods for each layer/process the user has included in their configuration. The state is a named tuple of arrays that is also dynamically compiled based on the model configuration.  The result is that the user can simply declare variables for their process and then write the code implementing the derivatives. All of the plumbing and setup happens auto-magically in the <code>@generated</code>  functions. I'll spare you the details of the generated function implementations, of course, but here's an example of what the user code looks like (this is for heat conduction):</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    Δk = Δ(state.grids.k) # cell sizes\n    ΔT = Δ(state.grids.T)\n    # Diffusion on non-boundary cells\n    heatconduction!(state.T,ΔT,state.k,Δk,state.dH)\n    # Compute temperature flux by dividing by C_eff;\n    # C_eff should be computed by the freeze curve.\n    @inbounds @. state.dT[2:end-1] = state.dH[2:end-1] / state.Ceff[2:end-1]\n    return nothing\nend```\nso `prognosticstep!` will get called by the `@generated` function.\n\nIt's basically a pseudo-symbolic modeling framework... and as such will likely get (at least partially) replaced by MTK eventually. But my preliminary experiments with MTK convinced me that it's too young and too inflexible for what I'm trying to do. So I did this instead.\n</code></pre></div>",
        "id": 235810938,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619169501
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; one workaround in <a href=\"https://github.com/SciML/OrdinaryDiffEq.jl/issues/1386\">https://github.com/SciML/OrdinaryDiffEq.jl/issues/1386</a></p>",
        "id": 235849157,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619188023
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; Oh cool. Haha, yeah I think everything that’s reasonably flexible and modular eventually becomes a pseudo-symbolic modeling framework. I’m glad to see ModelingToolkit shaping up to be something that can hopefully unify all of that.</p>",
        "id": 235863511,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619192647
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Sadly, I forgot about a particular process that actually does (currently) depend on the previous time steps of diagnostic values. It is <strong>technically</strong> wrong, but I guess doing it correctly is quite expensive so.... I'll just have to keep these changes on a branch until I can figure that out <span aria-label=\"disappointed\" class=\"emoji emoji-1f61e\" role=\"img\" title=\"disappointed\">:disappointed:</span></p>",
        "id": 235881063,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619199880
    },
    {
        "content": "<p>[slack] &lt;iv.borissov&gt; Yes, you are right, the problem was in the model, not the algorithm</p>",
        "id": 235989107,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619286340
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I've been trying to define my discretized PDE as a DAE (PDAE?)... I noticed that, when I set my mass matrix entries to zero for the algebraic variables and then call <code>init</code> on the problem, the initial values of the algebraic variables in <code>integrator.u</code> look super weird and do not match my <code>u0</code> . Maybe I missed something about how mass matrices are handled. Is there some initial transformation of the algebraic variables in <code>u0</code> ?</p>",
        "id": 236016795,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619306355
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Is your initial state consistent?</p>",
        "id": 236018558,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619307800
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; It was supposed to be, I found a bug on my end. That seems to have fixed it.</p>",
        "id": 236020334,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619309178
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; It's taking forever to even do one time step, though, with <code>ImplicitEuler</code> . I even used a <code>BandedMatrix</code> for the Jacobian, so I'm a bit surprised. Maybe the nonlinearity in the algebraic variable is just too nasty.</p>",
        "id": 236020407,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619309256
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; I was experimenting with the <code>DiffEqFlux</code>, and based on this <a href=\"https://diffeqflux.sciml.ai/stable/examples/neural_sde/\">https://diffeqflux.sciml.ai/stable/examples/neural_sde/</a> , I was trying to do a 1D version of this with constant diffusion:</p>\n<div class=\"codehilite\" data-code-language=\"u0\"><pre><span></span><code>drift_nn = FastChain(FastDense(1, 5, elu), FastDense(5, 1))\ndiffusion_nn = FastChain((x,p)-&gt;Float32[0.1])\n\ntspan = (0.0f0, 10.0f0);\n\nneural_sde = NeuralDSDE(drift_nn, diffusion_nn, tspan, SOSRI())```\nBut when I try to do ensemble runs (based on the example):\n```u = repeat(u0, 1, 10)\nneural_sde(u)```\nI get an error:\n```DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(1), Base.OneTo(10)), must have singleton at dim 2\")\n\nStacktrace```\n</code></pre></div>",
        "id": 236023213,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619311448
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; @chrisrackauckas  Does factorization work on a Banded matrix by default? Or do I need to write my own LinSolve?</p>",
        "id": 236048957,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619339387
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes, it does</p>",
        "id": 236049297,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619339727
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; hmm... well I let <code>step!</code> run overnight and it never finished. I know the newton implementation in <code>DiffEqBase</code> has an iteration limit, so I suspect that this is an issue with the factorization/linear-solve..?</p>",
        "id": 236049599,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619340087
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; do you have any tips for how to debug this? In VS code it seems to just hang somewhere in the <code>DiffEqBase</code> or <code>OrdinaryDiffEq</code> internals, even with the debugger attached. I can't see any information about where or what it's getting stuck on.</p>",
        "id": 236051423,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619342264
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; Never mind, this seems to fix it:<br>\n<code>diffusion_nn = FastChain((x,p)-&gt;Float32(0.1) *ones(Float32,size(x)))</code></p>",
        "id": 236068578,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619360194
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Do the solvers in <code>OrdinaryDiffEq</code> use the <code>nlsolve</code> implementation from <code>DiffEqBase</code> ? It appears that they don't, and if that's the case, why are there two different implementations of <code>nlsolve!</code> ?</p>",
        "id": 236069506,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619361248
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 236111814,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619403709
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Hi, you can have a look at <a href=\"https://github.com/search?q=BifurcationKit.jl&amp;type=Repositories\">BifurcationKit.jl</a>. If you have encoded your BVP, it is easy to set up. Otherwise look at the tutorials in the docs to see how to do continuation of BVPs</p>",
        "id": 236146900,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619430781
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; I'm trying to make use of multithreading in training a Neural SDE model, and I'm having the following problem.  I have coded:</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    problem_ = remake(neural_problem, p = p, u0 = u0)\n    ensemble_problem_ = EnsembleProblem(problem_)\n    ensemble_soln_ = solve(ensemble_problem_, EM(), ensemble, dt= 0.1, trajectories = n,\n        saveat = tdata)\n    nn_means, nn_vars = Array.(timeseries_point_meanvar(ensemble_soln_, tdata))\n    loss = sum(abs2, sde_data_means - nn_means) + sum(abs2, sde_data_vars - nn_vars)\n    return loss, nn_means, nn_vars\nend\n\nopt = ADAM(0.025)\n\nloss_ = p-&gt;  loss(p, EnsembleThreads(), n = 10^4);\n\nresult1 = DiffEqFlux.sciml_train(loss_, neural_sde.p, opt, maxiters = 100)```\n`neural_problem` is of type `SDEProblem`, which wraps around a neural drift and diffusion term (perhaps there is a better way to do this?)\n\nAll of this gives me the error:\n```Mutating arrays is not supported\n\nStacktrace:\n...```\nThis happens after it runs for a while, during which time I noticed that while it is initially takign advantage of the multiple threads, it shortly stops, and merely runs on a single thread (at least that's how it appears in `htop`).\n</code></pre></div>",
        "id": 236210814,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619457400
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; I didn't run your code but I think it you didn't define the ensemble problem correctly.<br>\nTry to define a prob_func() which returns the new ODEProblem (<a href=\"https://diffeq.sciml.ai/stable/features/ensemble/#ensemble\">https://diffeq.sciml.ai/stable/features/ensemble/#ensemble</a>)</p>",
        "id": 236214738,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619458941
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; Regarding the mutation issue. That could be related to <code>Array.</code></p>",
        "id": 236214860,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619458990
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; Is it that I'm using <code>SDEProblem</code> (which I've used elsewhere), or merely that <code>remake</code> is inadqeuate for this?</p>",
        "id": 236214925,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619459029
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; I think it's unrelated to the concrete DE type</p>",
        "id": 236215045,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619459066
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; also, I've used <code>Array</code> in this way elsewhere (based on their examples, see <a href=\"https://diffeqflux.sciml.ai/stable/examples/neural_sde/\">https://diffeqflux.sciml.ai/stable/examples/neural_sde/</a>)</p>",
        "id": 236215155,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619459113
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; <code>function prob_func(prob,i,repeat)\n  remake(prob, p=..., u0=...)\nend\nprob = SDEProblem(...)\nensemble_prob = EnsembleProblem(prob, prob_func=prob_func)</code></p>",
        "id": 236215230,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619459143
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; Zygote, at least, does not like array mutations. Some function you are using is mutating internally. mby timeseries_point_meanvar? Don't know which line is causing this error.</p>",
        "id": 236216315,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619459550
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; granted, i haven't used within an optimization setting (i.e., usually just run and do that in post processing)</p>",
        "id": 236216389,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619459586
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; And you can check the number of available threads with <code>Threads.nthreads()</code></p>",
        "id": 236216410,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619459593
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; yea, that part I'm good on</p>",
        "id": 236216426,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619459602
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; I am not an expert, just trying to help because I learn something as well doing so <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span><br>\nI would suggest to change the example so it looks more like what you can find online</p>",
        "id": 236216620,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619459689
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; You could also try to use another sensealg</p>",
        "id": 236216783,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619459762
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; oh BTW, I think that <code>Array.</code> line you've seen online works because it's outside the loss function</p>",
        "id": 236217109,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619459891
    },
    {
        "content": "<p>[slack] &lt;timkim&gt; I'm finding that when I install a new version of Julia (1.6.0), add DiffEqFlux, and then do \"using DiffEqFlux\", I get the following error message. Does anyone have an idea what would resolve this? I don't have Distributions or packages that use Distributions.: <a href=\"https://files.slack.com/files-pri/T68168MUP-F0203A6FGCT/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F0203A6FGCT/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F0203A6FGCT/download/image.png\"><img src=\"https://files.slack.com/files-pri/T68168MUP-F0203A6FGCT/download/image.png\"></a></div>",
        "id": 236244891,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619471579
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; got it working.  i think it was the <code>timeseries_point_meanvar</code> function that was screwing things up</p>",
        "id": 236249668,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619473365
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; do progress bars currently work with VSCode?</p>",
        "id": 236255010,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619476451
    },
    {
        "content": "<p>[slack] &lt;devmotion&gt; Seems to be <a href=\"https://github.com/TuringLang/DistributionsAD.jl/issues/163\">https://github.com/TuringLang/DistributionsAD.jl/issues/163</a>. It should be fixed by <a href=\"https://github.com/TuringLang/DistributionsAD.jl/pull/164\">https://github.com/TuringLang/DistributionsAD.jl/pull/164</a>.</p>",
        "id": 236255843,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619476985
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; I’m just looking at this example (<a href=\"https://diffeqflux.sciml.ai/stable/examples/neural_ode_flux/\">https://diffeqflux.sciml.ai/stable/examples/neural_ode_flux/</a>) that directly uses <code>Flux</code> for training, and I’m a bit confused that <code>predict_n_ode</code> and <code>loss_n_ode</code> do not take arguments, also, the comment <code>loss_n_ode() # n_ode.p stores the initial parameters of the neural ODE</code> doesn’t make a lot of sense to me.  Can anyone explain?</p>",
        "id": 236268305,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619485086
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It uses Flux's reference-based system</p>",
        "id": 236268427,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619485202
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; so i’m guessing everything is happening in place?</p>",
        "id": 236268519,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619485231
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; also, it seems slightly odd to train on the initial condition</p>",
        "id": 236268798,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619485437
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; depends on what you're doing</p>",
        "id": 236268871,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619485475
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; Related: Is there a way to get <code>EnsembleProblem</code> to play nicely with <code>Flux</code>, as in:</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    prob_ = remake(n_ode, p=p)\n    ensemble_ = EnsembleProblem(prob_, prob_func = ic_func)\n    soln_ = solve(ensemble_, Tsit5(),trajectories = n,saveat=tdata);\n    Array(soln_)\nend```\n</code></pre></div>",
        "id": 236270515,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619486789
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; Here, <code>n_ode</code> is of type <code>ODEProblem</code></p>",
        "id": 236270535,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619486817
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; this throws off a long error like:</p>\n<div class=\"codehilite\" data-code-language=\"methoderror\"><pre><span></span><code>Closest candidates are:```\nwhen i call the optimizer\n</code></pre></div>",
        "id": 236270558,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619486845
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; yes, but only sometimes.... look on the very bottom where it usually says \"Julia evaluating\"</p>",
        "id": 236299043,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619511328
    },
    {
        "content": "<p>[slack] &lt;devmotion&gt; The issue should be fixed if you update your packages.</p>",
        "id": 236335389,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619529839
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; Is there a way to keep the same Array dimensions in the output solution of a solver (e.g. Matrix)? I’m solving a PDE on a Matrix directly with ComponentArray, but I’m getting flattened solutions at the output (1-dimensional).</p>\n<div class=\"codehilite\" data-code-language=\"p\"><pre><span></span><code>u₀ = ComponentArray(H=H₀, B=B) # H and B are Matrices with size (193, 189)\ntspan = (0.0, 10.0)\n\n# Create ODE problem based on the SIA\nSIA_prob = ODEProblem(iceflow!, u₀, tspan, p)\n# Solve the SIA\nSIA_sol = solve(SIA_prob, Tsit5())```\nAnd when I do:\n`println(size(SIA_sol.u[end]))`\nInstead of getting `(193, 189)`, I get:\n`(72954,)`\n\nThanks a lot in advance!\n</code></pre></div>",
        "id": 236356436,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619536491
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Seems like a ComponentArrays thing. Open an issue there, but I don't quite think your idea there is right</p>",
        "id": 236360628,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619537888
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the <code>u</code> is not that size and could be ragged</p>",
        "id": 236360689,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619537912
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; Actually it seems that the <code>u</code> is a flattened combination of the <code>H</code> and <code>B</code> matrices (hence twice the flattened length of <code>(193, 189)</code>)</p>",
        "id": 236360936,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619538019
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; Oh, <code>size</code> gives the flattened vector size, not the size of the internal components. That’s part of the AbstractArray interface that it has to follow to work as expected as a vector for solver purposes. You can always get the size of, say, the <code>H</code> component as <code>size(u.H)</code></p>",
        "id": 236363072,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619538827
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; Maybe a better way to think of it is ComponentArrays <strong>are</strong> flat arrays that just happen to expose structured components to users for convenience.</p>",
        "id": 236365895,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619539914
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; But your internal components <code>H</code> and <code>B</code> are still accessible as matrices from the solution output with something like <code>SIA_sol.u[end].H</code></p>",
        "id": 236366489,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619540136
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; OK, that’s exactly what I wanted to know. Thanks a lot @Jonnie!</p>",
        "id": 236371591,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619542127
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; Odd - I’m getting an error when using the <code>progress=true</code> flag in VSCode.<br>\n<code>┌ Error: Exception while generating log record in module OrdinaryDiffEq at /Users/jessechan/.julia/packages/OrdinaryDiffEq/vxMSM/src/integrators/integrator_utils.jl:128</code></p>",
        "id": 236371726,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619542200
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; If I want to use multhreading solves on a <code>NueralODE</code> using, say, an <code>EnsembleProblem</code> approach, do I have to wrap the <code>NeuralODE</code> inside of an <code>ODEProblem</code> ?I can't seem to find a way to use <code>NeuralODE</code> directly with <code>EnsembleProblem</code> or <code>EnsembleSolve</code></p>",
        "id": 236405468,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619556541
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; a NeuralODE is an ODEProblem</p>",
        "id": 236406665,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619557073
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; just use the direct interface</p>",
        "id": 236406673,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619557078
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; so this is the code I'm trying (and failing) with:</p>\n<div class=\"codehilite\" data-code-language=\"random.seed\"><pre><span></span><code>ndata= 21;\ntspan = (0.0f0, 5.0f0);\ntdata = range(tspan[1], tspan[2], length = ndata);\n\nf_nn = FastChain(FastDense(1,20,tanh),FastDense(20,1));\nn_ode = NeuralODE(f_nn, tspan, Tsit5(), saveat=tdata)\n\nn = 10^4;\nu0data = randn(Float32, 1,n);\n\nfunction ic_func(prob, i, repeat)\n    remake(prob, u0=[u0data[i]])\nend\n\nfunction predict_n_ode(p)\n    prob_ = remake(n_ode, p=p)\n    ensemble_ = EnsembleProblem(prob_, prob_func = ic_func)\n    soln_ = solve(ensemble_,trajectories = n,saveat=tdata);\n    return Array(soln_)\nend```\n</code></pre></div>",
        "id": 236415183,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619559669
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Hmm. Are you on the latest VS Code and OrdinaryDiffEq version?</p>",
        "id": 236417021,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619560729
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; Good point - just updated, trying again</p>",
        "id": 236417279,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619560868
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; Hm…I’m getting the same logging error, but noticed the stacktrace included something on <code>SVectors</code></p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">│</span>   <span class=\"n\">exception</span> <span class=\"o\">=</span>\n<span class=\"n\">│</span>    <span class=\"kt\">MethodError</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">method</span> <span class=\"n\">matching</span> <span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"n\">SVector</span><span class=\"p\">{</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">})</span><span class=\"sb\">```</span>\n<span class=\"sb\">I’m using an array of SVectors but I didn’t expect the logging to depend on solution type.</span>\n\n<span class=\"sb\">The solver still works fine, it’s just the logger that fails</span>\n</code></pre></div>",
        "id": 236417863,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619561201
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; what do you mean the logger fails? does <code>solve</code> throw an exception or finish normally?</p>",
        "id": 236418484,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619561607
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; <code>solve</code> finishes normally, but the progress bar doesn’t show progress (and prints error messages to the screen)</p>",
        "id": 236418656,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619561734
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; I tried it with a regular Array type, and the approach in <a href=\"https://diffeq.sciml.ai/stable/features/progress_bar/\">https://diffeq.sciml.ai/stable/features/progress_bar/</a> works fine. I guess it’s just the array type</p>",
        "id": 236418741,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619561773
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; weird, I actually just noticed that I don't see the progress bar anymore, and I am also using a custom array type. I don't get any errors though.</p>",
        "id": 236418818,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619561827
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I could have sworn it worked before, but it might have been with a different problem where I was using normal arrays.</p>",
        "id": 236418854,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619561854
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; no worries. good to know the situations where it does work so far</p>",
        "id": 236418948,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619561901
    },
    {
        "content": "<p>[slack] &lt;grahamas&gt; How is it failing?</p>",
        "id": 236431045,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619569252
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; <code>p_init = initial_params(f_nn);\npredict_n_ode(p_init)</code><br>\nproduces:<br>\n<code>MethodError: no method matching NeuralODE(; model=FastChain{Tuple{FastDense{typeof(tanh), DiffEqFlux.var\"#initial_params#73\"{Vector{Float32}}}, FastDense{typeof(identity), DiffEqFlux.var\"#initial_params#73\"{Vector{Float32}}}}}((FastDense{typeof(tanh), DiffEqFlux.var\"#initial_params#73\"{Vector{Float32}}}...</code></p>",
        "id": 236433236,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619570989
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; I think the issue is that i’m not properly passing the NN params into the problem, but I’m not entirely sure how to accomplish that in this case</p>",
        "id": 236433297,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619571016
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; Alternatively, this works:</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    return Array(n_ode(u0data, p))\nend```\nbut I’m not sure it’s taking full advantage of the available threads\n</code></pre></div>",
        "id": 236435847,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619573154
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; Switching it to this:</p>\n<div class=\"codehilite\" data-code-language=\"f_nn\"><pre><span></span><code>f(u,p,t) = f_nn(u,p)\n\nn_ode = ODEProblem(f, u0, tspan, Tsit5(), saveat=tdata)```\nI then get the expected behavior, but it involves wrapping it inside the other data structure in a way that is counter to my expectations\n</code></pre></div>",
        "id": 236436933,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619574086
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Is it possible to construct an <code>ODEProblem</code> for an ODE/PDE in mixed form? i.e. <code>du/dt = f(x)</code> where <code>x</code> is an implicit function of <code>u</code> . Making <code>x</code> a state variable and solving it as a DAE is one way, but I was wondering if there is another way that still uses just <code>u</code> as the state.</p>",
        "id": 236463554,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619595440
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; MTK's structural_simplify handles this through elimination and rewrites</p>",
        "id": 236501593,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619614572
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; any examples in the docs?</p>",
        "id": 236506701,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619616627
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I believe the first two tutorials show a bit of this?</p>",
        "id": 236506980,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619616732
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; the one on automatic index lowering? I thought that was kind of a different thing, but I guess it could work.</p>",
        "id": 236507399,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619616893
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; no</p>",
        "id": 236507847,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619617075
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the first one</p>",
        "id": 236507851,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619617077
    },
    {
        "content": "<p>[slack] &lt;Daniel Moore&gt; I'm hopeful to use the DiffEQ package, but I have a potential hang up. If context helps, this problem is for a beam subjected to dynamic loading modeled as a single degree of freedom system. So while I can define the equations of motion for the beam which relate the loading, acceleration, and velocity to its response, the initial condition is static so without a load there is no response. Where should I be looking for how to include this dynamic loading? Or is this a roll-your-own situation? Thanks!</p>",
        "id": 236541707,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619628856
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; not sure what you mean, but it sounds like a DAE?</p>",
        "id": 236541849,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619628934
    },
    {
        "content": "<p>[slack] &lt;Daniel Moore&gt; after just now looking up differential-algebraic system of equations, that seems correct to me.</p>",
        "id": 236542439,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619629199
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah so just check out <a href=\"https://diffeq.sciml.ai/stable/tutorials/dae_example/\">https://diffeq.sciml.ai/stable/tutorials/dae_example/</a></p>",
        "id": 236549982,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619632169
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://mtk.sciml.ai/dev/mtkitize_tutorials/modelingtoolkitize_index_reduction/\">https://mtk.sciml.ai/dev/mtkitize_tutorials/modelingtoolkitize_index_reduction/</a></p>",
        "id": 236549995,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619632180
    },
    {
        "content": "<p>[slack] &lt;Daniel Moore&gt; great, thanks! Just knowing I should be looking at the DAE section was helpful. Take care!</p>",
        "id": 236558653,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619635767
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; I\"m getting an error with <code>SecondOrderODEProblem</code> that surprised me when I try to do a <code>remake</code> on the initial condition:</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    return -0.1f0 * du - 1.0f0 * u\nend\n\nu0 = Float32(0);\ndu0 = Float32(1);\ntspan = (Float32(0.), Float32(10.));\nprob = SecondOrderODEProblem{false}(rhs,  du0, u0,  tspan)\n\nsoln1 = solve(prob); # works fine\n\nprob = remake(prob, u0 = (0.f0, 1.f0)) # displays updated initial condition\n\nsoln2 = solve(prob); #returns the following error:\n\nMethodError: no method matching size(::Tuple{Float32, Float32})\nClosest candidates are:\n  size(::Tuple, ::Integer) at tuple.jl:27\n  size(::Union{LinearAlgebra.QR, LinearAlgebra.QRCompactWY, LinearAlgebra.QRPivoted}) at /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/qr.jl:524\n  size(::Union{LinearAlgebra.QR, LinearAlgebra.QRCompactWY, LinearAlgebra.QRPivoted}, ::Integer) at /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/qr.jl:523\n  ...\n\nStacktrace:...```\n</code></pre></div>",
        "id": 236558674,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619635777
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh, oh...</p>",
        "id": 236559618,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619636134
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah open an issue on that.</p>",
        "id": 236559629,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619636139
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; That one is tricky.</p>",
        "id": 236559636,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619636141
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; gotcha</p>",
        "id": 236559652,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619636145
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; it's no problem for me to write as a first order system, but i was just trying out this type</p>",
        "id": 236559686,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619636158
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; not sure if it was discussed, but I do find the decision to make the parameters ordered as (velocity, position) run counter to my ODE training</p>",
        "id": 236559835,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619636202
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; not sure if this is more appropriate for flux or sciml channels, but is there a way to write a callback function providing basic information (i.e., current loss, iterate, etc.) that works well inside of a jupyter notebook, in the spirit of <code>ProgressMeter</code>?</p>",
        "id": 236564311,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619638009
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; I have a very large problem that I just solved (took &gt;2 hours) in which I specified <code>saveat</code> times. I have now decided I am curious of what the actual timesteps were, am I able to get this from the returned solution? or do I need to run it again?</p>",
        "id": 236566559,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619638984
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 236567966,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619639601
    },
    {
        "content": "<p>[slack] &lt;Kim Laberinto (he/him)&gt; If I remember correctly, might <code>sol.t</code> be what you are looking for? I believe <code>sol</code>  (output of the solve) has a field <code>t</code>  that is an array specifying the times of each saved point</p>",
        "id": 236568205,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619639711
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; <code>sol.t</code> gives me the <code>saveat</code> points I specified, not the full set of steps the solver made</p>",
        "id": 236569017,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619640039
    },
    {
        "content": "<p>[slack] &lt;Kim Laberinto (he/him)&gt; Ah I see! Sorry, I misinterpreted the question</p>",
        "id": 236569112,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619640068
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah it drops this info</p>",
        "id": 236570241,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619640583
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you can use a callback for this</p>",
        "id": 236570255,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619640592
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; I will just remove my saveat points while still testing, thanks</p>",
        "id": 236570980,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619640879
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; <code>prob = remake(prob, u0 = (0.f0, 1.f0)) # displays updated initial condition</code><br>\n@Gideon Dresdner are you sure that you want to use a tuple for the initial condition?</p>",
        "id": 236571246,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619640977
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; I think you want <code>@SVector [0.f0, 1.f0]</code></p>",
        "id": 236571339,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619641016
    },
    {
        "content": "<p>[slack] &lt;jgreener64&gt; Is there any way to stop a callback running the acceleration function for a <code>SecondOrderODEProblem</code>?<br>\nIt seems to be run every time one or more callbacks are used, e.g. when using <code>DiscreteCallback</code> or <code>PeriodicCallback</code>.<br>\nHappy to have a look in the code, I was just wondering if there was an easy option to disable it for a lightweight callback.<br>\nI tried setting the <code>initialize</code> keyword argument to a function that returns nothing, but that didn't help.</p>",
        "id": 236575438,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619642833
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; &gt; Is there any way to stop a callback running the acceleration function for a <code>SecondOrderODEProblem</code>?<br>\nWhat do you mean?</p>",
        "id": 236580282,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619644302
    },
    {
        "content": "<p>[slack] &lt;jgreener64&gt; ```using DifferentialEquations</p>\n<p>accel_counter = 0</p>\n<p>function acceleration!(accels, vels, coords, p, t)<br>\n    global accel_counter += 1<br>\n    accels .= rand(length(coords))<br>\nend</p>\n<p>condition(u, t, integrator) = true</p>\n<p>function emptycallback(integrator)<br>\n    # Do nothing<br>\nend</p>\n<p>tspan = (0.0, 10.0)</p>\n<p>cb = DiscreteCallback(condition, emptycallback)<br>\nprob = SecondOrderODEProblem(acceleration!, rand(100), rand(100), tspan, callback=cb)<br>\nsol = solve(prob, VelocityVerlet(), dt=1.0)</p>\n<p>println(accel_counter)<code>``\nPrints </code>20` though there are only 10 time steps.</p>",
        "id": 236581236,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619644506
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; if the FSAL is setup correctly it shouldn't need to be re-evaluated?</p>",
        "id": 236581549,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619644584
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Are you on master with your changes?</p>",
        "id": 236581562,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619644589
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It should total 11 in order to get the interpolation.</p>",
        "id": 236581584,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619644595
    },
    {
        "content": "<p>[slack] &lt;jgreener64&gt; Yeah on master, it's 20 with the callback and 11 without.</p>",
        "id": 236581806,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619644669
    },
    {
        "content": "<p>[slack] &lt;jgreener64&gt; I can dig into it tomorrow, was just wondering if there was something obvious I was missing.</p>",
        "id": 236581993,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619644724
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh interesting</p>",
        "id": 236582353,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619644823
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; in the callback are you changing <code>u</code>?</p>",
        "id": 236582393,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619644832
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh I see</p>",
        "id": 236582677,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619644908
    },
    {
        "content": "<p>[slack] &lt;jgreener64&gt; Tested both, happens whether I change <code>u</code> or not.</p>",
        "id": 236582716,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619644921
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; in the callback, if you do <code>u_modified!(integrator,false)</code> it should go back to 11</p>",
        "id": 236582720,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619644922
    },
    {
        "content": "<p>[slack] &lt;jgreener64&gt; Works great, thanks.</p>",
        "id": 236582942,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619644975
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah, if it doesn't know whether you changed <code>u</code> it takes a pessimistic guess</p>",
        "id": 236583053,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619645004
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; if you did change it, it needs to re-evaluate the starting velocity</p>",
        "id": 236583098,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619645017
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; to have the double sides for the interpolation</p>",
        "id": 236583122,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619645024
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; since it cannot carry over the value from the previous step if <code>u</code> changed</p>",
        "id": 236583173,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619645037
    },
    {
        "content": "<p>[slack] &lt;jgreener64&gt; Can you force it to pretend that <code>u</code> didn't change with that line if you know that carrying over the velocity is okay?<br>\nMy use case is moving atoms back into their bounding box, the coordinates are changed but it shouldn't affect the velocity Verlet integration at all or change the velocities.</p>",
        "id": 236583654,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619645185
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes, that's what <code>u_modified!</code> is for, and it's documented and in the public API for this purpose</p>",
        "id": 236583692,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619645209
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; things like the <code>SavingCallback</code> make use of this</p>",
        "id": 236583716,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619645224
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the name is a little bad, since technically if you change <code>t</code> or <code>p</code> you also need it to be true, so <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> but that can be fixed up down the line</p>",
        "id": 236583831,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619645282
    },
    {
        "content": "<p>[slack] &lt;jgreener64&gt; <span aria-label=\"100\" class=\"emoji emoji-1f4af\" role=\"img\" title=\"100\">:100:</span> thanks.</p>",
        "id": 236584071,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619645379
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; For ML problems, if I want to do something like minibatching, can I do that with <code>DiffEqFlux.sciml_train</code>, or should I just use <code>Flux</code> directly?</p>",
        "id": 236596930,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619653191
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you can do that with either</p>",
        "id": 236598315,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619654223
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; The docs seem a little unclear as to how to write my loss function for <code>sciml_train</code> (as in, how would I write it to handle the <code>(x,y)</code> pair, and also if <code>sciml_train</code> takes, as one of its arguments, a collection of data points</p>",
        "id": 236601121,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619656224
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; Using <code>sciml_train</code> aside, when I try to accomplish my sequential training  independent runs of an ODE with <code>Flux.train!</code> , I’m getting a fairly unpleasant stack trace and the &lt;#C7LFJTXV5|flux-bridged&gt; think it’s coming from the differential equtaions side - see attachment.: <a href=\"https://files.slack.com/files-pri/T68168MUP-F020RH17T7B/download/stacktrace.md\">https://files.slack.com/files-pri/T68168MUP-F020RH17T7B/download/stacktrace.md</a></p>",
        "id": 236605953,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619660148
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; Might be related, but I was looking at this example (&lt;<a href=\"https://diffeqflux.sciml.ai/stable/examples/neural_gde/\">https://diffeqflux.sciml.ai/stable/examples/neural_gde/</a>&gt;), and ended up getting a not entirely dissimilar error (see attached): <a href=\"https://files.slack.com/files-pri/T68168MUP-F0212QE3H4Y/download/error2.md\">https://files.slack.com/files-pri/T68168MUP-F0212QE3H4Y/download/error2.md</a></p>",
        "id": 236608714,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619662349
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Share code?</p>",
        "id": 236621901,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1619674646
    },
    {
        "content": "<p>[slack] &lt;wsphillips&gt; Two questions: 1) what's the significance of flagging MTKParameterCtx in the metadata of symbols (other than it seems to happens when declaring parameters I can't see it referenced elsewhere?) 2) Is the metadata field intended for common use (e.g. freely annotating symbols) or reserved as private API? (it's not really documented from what I can tell, but might be useful)</p>",
        "id": 237192545,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620060992
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; &gt; 1) what's the significance of flagging MTKParameterCtx in the metadata of symbols (other than it seems to happens when declaring parameters I can't see it referenced elsewhere?)<br>\nIt makes the system type able to automatically distinguish between parameters and non-parameters</p>",
        "id": 237192779,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620061090
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; &gt; 2) Is the metadata field intended for common use (e.g. freely annotating symbols) or reserved as private API? (it's not really documented from what I can tell, but might be useful)<br>\nIt'll be more public later</p>",
        "id": 237192806,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620061098
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; for now, we need to make use of it first.</p>",
        "id": 237192811,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620061103
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 237193154,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620061234
    },
    {
        "content": "<p>[slack] &lt;oliver.schulz&gt; Can DiffEq handle time-dependent (non-homogenous) ODEs if the time dependency is not smooth but consists of sharp transitions (in this case, Covid-intervention-measures) in time? Do I need to hint to the solver when such step-like transistions of parameters may occur?</p>",
        "id": 237215572,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620070223
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>tstops</code> or <code>d_discontinuities</code> can be helpful</p>",
        "id": 237215690,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620070287
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; those can designate discontinuity time points for the solver to hit exactly, and will improve the performance.</p>",
        "id": 237215724,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620070303
    },
    {
        "content": "<p>[slack] &lt;oliver.schulz&gt; Thanks Chris!</p>",
        "id": 237215800,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620070326
    },
    {
        "content": "<p>[slack] &lt;oliver.schulz&gt; It's not enough to have saveat points there, right (since those may be filled by interpolation later)?</p>",
        "id": 237216079,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620070449
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah</p>",
        "id": 237216342,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620070556
    },
    {
        "content": "<p>[slack] &lt;oliver.schulz&gt; Which solver would you recommend for such SIR-model like cases (ODE, 1st order, very \"well behaved\", will want one save point per day anyhow to compare to data)?</p>",
        "id": 237216806,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620070730
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; for neural differential equations of the sort in the github examples, is their generic improvement when training on GPUs, or is this a problem dependent/implementation dependent issue?</p>",
        "id": 237216813,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620070737
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; very problem dependent</p>",
        "id": 237216830,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620070747
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you need rather large neural networks for GPUs to matter</p>",
        "id": 237216853,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620070755
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and that's generally a truth about GPUs</p>",
        "id": 237216864,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620070761
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I recommend just playing with matmuls on your system</p>",
        "id": 237216891,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620070776
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; what's the rough order of magnitude where it starts paying off?  100s? 1000s? (I'm really very new to neural networks)</p>",
        "id": 237216930,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620070802
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>N = 32\nusing CUDA, BenchmarkTools\nA = randn(N,N); B = randn(N,N)\n_A = CuArray(A); _B = CuArray(B)\n@btime A*B\n@btime _A * _B</code></p>",
        "id": 237217072,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620070847
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Maybe it would be good to make a <code>GPUCutoff.jl</code>  that just has this in a loop</p>",
        "id": 237217105,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620070865
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; give everyone a quick answer.</p>",
        "id": 237217124,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620070874
    },
    {
        "content": "<p>[slack] &lt;jlumpe&gt; If my ODE function needs to use an intermediate array for calculations, what's the best way to avoid allocating it in the function body?</p>",
        "id": 237241404,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620081145
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; just use a functor or make a parameter to hold the cache.</p>",
        "id": 237243913,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620082820
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; There seems to potentially be a race condition using multi-threaded <code>EnsembleProblem</code> with a <code>CallbackSet</code> containing a <code>PeriodicCallback</code> -- I'm running into an error (only when <code>trajectories &gt; 1</code> ) where the call to <code>add_tstop!</code> from <code>PeriodicCallback</code> tries to add a new tstop that is \"behind the current time\" (i.e. <code>tnew &lt; integrator.t</code>). Has anyone seen something like this before?</p>",
        "id": 237264074,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620099916
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 237264263,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620100103
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 237268164,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620103871
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; I think that this might be happening because the <code>index</code> value defined in the <code>PeriodicCallback</code> constructor is maybe being shared across threads? When testing with just 2 threads, this error seems to happen when one thread calls the <code>initialize_periodic</code> function, seemingly resetting the <code>index</code>  value to 1 on the other thread which has already been setting <code>tstops</code> .</p>",
        "id": 237268371,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620104058
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; Made an issue about this here: <a href=\"https://github.com/SciML/DiffEqCallbacks.jl/issues/99\">https://github.com/SciML/DiffEqCallbacks.jl/issues/99</a></p>",
        "id": 237270364,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620106034
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Hi,</p>\n<p>I have issue locating thre code ODESolution. Can someone points this to me please?</p>",
        "id": 237276366,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620111059
    },
    {
        "content": "<p>[slack] &lt;frankschae&gt; <a href=\"https://github.com/SciML/SciMLBase.jl/blob/master/src/solutions/ode_solutions.jl\">https://github.com/SciML/SciMLBase.jl/blob/master/src/solutions/ode_solutions.jl</a></p>",
        "id": 237277814,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620111912
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; thank you</p>",
        "id": 237278665,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620112450
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; @chrisrackauckas Before I spend time on this... 1) do you know of any reason why one couldn't or shouldn't add a backtracking line search to the modified Newton's method implemented in <code>OrdinaryDiffEq</code> ? and 2) is this something that you would be interested in merging into the main <code>OrdinaryDiffEq</code> repo?</p>",
        "id": 237286746,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620116970
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Just to be clear, I mean just making it an option for the user for certain problems, not enabling it by default.</p>",
        "id": 237286858,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620117015
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Hello,</p>\n<p>Is is possible to generate the Fokker-Planck equation from a <code>@reaction_network</code> which encodes a Continuous time Markov chain? In short, I need to generate the infinitesimal generator</p>",
        "id": 237289469,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620118357
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It's possible but we don't have a function for that right now</p>",
        "id": 237304023,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620125985
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It's an open issue</p>",
        "id": 237304031,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620125989
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; OK, I almost did it:</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    A = zeros(Any, (numspecies(rn), numspecies(rn)))\n    for (k,rx) in enumerate(reactions(rn))\n        @assert length(rx.substrates) == 1\n        @assert length(rx.products) == 1\n        i = smap[rx.substrates[1]]\n        j = smap[rx.products[1]]\n        A[i, j] = rx.rate\n    end\nend```\nThe only remaining this is to populate the rates which are symbolic for now. Hence, it should be (I dont know how to pass the parameter to get the rates)\n\n```function getInfinitesimalGenerator(rn, par; smap=speciesmap(rn))\n    A = zeros(Any, (numspecies(rn), numspecies(rn)))\n    for (k,rx) in enumerate(reactions(rn))\n        @assert length(rx.substrates) == 1\n        @assert length(rx.products) == 1\n        i = smap[rx.substrates[1]]\n        j = smap[rx.products[1]]\n        A[i, j] = rx.rate\n    end\nend```\n</code></pre></div>",
        "id": 237306509,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620127279
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; Following up on this, is the <code>N</code> a proxy for the system size in a NN?</p>",
        "id": 237367885,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620150019
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes</p>",
        "id": 237368122,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620150087
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; I noticed something strange: feature of bug?</p>\n<div class=\"codehilite\" data-code-language=\"odefun\"><pre><span></span><code>F = (u,p) -&gt; odefun((u),p,0)```\nF does not accept views for u. This can be remedied by doing `F = (u,p) -&gt; odefun(Array(u),p,0)` , Is it intended?\n</code></pre></div>",
        "id": 237379337,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620154323
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what do you mean?</p>",
        "id": 237380004,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620154628
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; It errors</p>",
        "id": 237381243,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620155136
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; how so?</p>",
        "id": 237382299,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620155527
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oop only?</p>",
        "id": 237382318,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620155533
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Arg, I have trouble to nail it down. I thought I had it.</p>\n<p>When I pass this bifurcationKit</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>using BifurcationKit, Plots, LinearAlgebra, Setfield\nconst BK = BifurcationKit\n\nusing Catalyst\nrn = @reaction_network begin\n    (v0+v*(S*X)^n/((S*X)^n+(D*A)^n+K^n),d), ∅ ↔ X\n    (τ*X,τ), ∅ ↔ A\nend S D τ v0 v K n d\n\nodefun = ODEFunction(convert(ODESystem,rn),jac=true)\nF = (u,p) -&gt; odefun((u),p,0) # this is because MK does not like views\nJ = (u,p) -&gt; odefun.jac((u),p,0) # this is because MK does not like views```\nI got an error when doing `tmpJ = @views pb.J(u0c[:, 1], par)`  where `pb.J` is the `J` above\n```ERROR: MethodError: no method matching create_array(::Type{Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}}, ::Nothing, ::Val{2}, ::Val{(2, 2)}, ::Float64, ::Float64, ::Float64, ::Float64)\nClosest candidates are:\n  create_array(::Type{var\"#s257\"} where var\"#s257\"&lt;:StaticArrays.SArray, ::Nothing, ::Val, ::Val{dims}, ::Any...) where dims at /Users/rveltz/.julia/packages/SymbolicUtils/9iQGH/src/code.jl:459\n  create_array(::Type{var\"#s257\"} where var\"#s257\"&lt;:StaticArrays.SArray, ::Any, ::Val, ::Val{dims}, ::Any...) where dims at /Users/rveltz/.julia/packages/SymbolicUtils/9iQGH/src/code.jl:463\n  create_array(::Type{var\"#s257\"} where var\"#s257\"&lt;:UpperTriangular{T, P}, ::Any, ::Val, ::Val, ::Any...) where {T, P} at /Users/rveltz/.julia/packages/SymbolicUtils/9iQGH/src/code.jl:454\n  ...\nStacktrace:\n  [1] create_array\n    @ ~/.julia/packages/SymbolicUtils/9iQGH/src/code.jl:442 [inlined]\n  [2] macro expansion\n    @ ~/.julia/packages/SymbolicUtils/9iQGH/src/code.jl:375 [inlined]\n  [3] macro expansion\n    @ ~/.julia/packages/RuntimeGeneratedFunctions/3SZ1T/src/RuntimeGeneratedFunctions.jl:124 [inlined]\n  [4] macro expansion\n    @ ./none:0 [inlined]\n  [5] generated_callfunc\n    @ ./none:0 [inlined]\n  [6] (::RuntimeGeneratedFunctions.RuntimeGeneratedFunction{(Symbol(\"##arg#261\"), Symbol(\"##arg#262\"), :t), ModelingToolkit.var\"#_RGF_ModTag\", ModelingToolkit.var\"#_RGF_ModTag\", (0x418acdf6, 0x8314b963, 0x739875f7, 0x703db2b9, 0xe8884371)})(::SubArray{Float64, 1, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, ::Vector{Float64}, ::Int64)\n    @ RuntimeGeneratedFunctions ~/.julia/packages/RuntimeGeneratedFunctions/3SZ1T/src/RuntimeGeneratedFunctions.jl:112\n  [7] (::ModelingToolkit.var\"#_jac#152\"{RuntimeGeneratedFunctions.RuntimeGeneratedFunction{(Symbol(\"##arg#261\"), Symbol(\"##arg#262\"), :t), ModelingToolkit.var\"#_RGF_ModTag\", ModelingToolkit.var\"#_RGF_ModTag\", (0x418acdf6, 0x8314b963, 0x739875f7, 0x703db2b9, 0xe8884371)}, RuntimeGeneratedFunctions.RuntimeGeneratedFunction{(Symbol(\"##out#263\"), Symbol(\"##arg#261\"), Symbol(\"##arg#262\"), :t), ModelingToolkit.var\"#_RGF_ModTag\", ModelingToolkit.var\"#_RGF_ModTag\", (0x4668a6fa, 0x79467988, 0x573c9ff9, 0x7131b1dd, 0xc97ea044)}})(u::SubArray{Float64, 1, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, p::Vector{Float64}, t::Int64)\n    @ ModelingToolkit ~/.julia/packages/ModelingToolkit/Mo4gw/src/systems/diffeqs/abstractodesystem.jl:188\n  [8] (::var\"#11#12\")(u::SubArray{Float64, 1, Base.ReshapedArray{Float64, 2, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, p::Vector{Float64})\n    @ Main ~/work/prog_gd/julia/dev/dev1/BifurcationKit/examples/catalystEx1.jl:13\n  [9] cylicPOTrapBlock!(pb::PeriodicOrbitTrapProblem{var\"#9#10\", var\"#11#12\", Nothing, Nothing, Nothing, Vector{Float64}, DefaultLS, BifurcationKit.TimeMesh{Vector{Float64}}}, u0::Vector{Float64}, par::Vector{Float64}, Jc::BlockArrays.BlockMatrix{Float64, Matrix{SparseArrays.SparseMatrixCSC{Float64, Int64}}, Tuple{BlockArrays.BlockedUnitRange{Vector{Int64}}, BlockArrays.BlockedUnitRange{Vector{Int64}}}})\n    @ BifurcationKit ~/work/prog_gd/julia/dev/dev1/BifurcationKit/src/periodicorbit/PeriodicOrbitTrapeze.jl:343\n [10] jacobianPOTrapBlock(pb::PeriodicOrbitTrapProblem{var\"#9#10\", var\"#11#12\", Nothing, Nothing, Nothing, Vector{Float64}, DefaultLS, BifurcationKit.TimeMesh{Vector{Float64}}}, u0::Vector{Float64}, par::Vector{Float64}; γ::Float64)\n    @ BifurcationKit ~/work/prog_gd/julia/dev/dev1/BifurcationKit/src/periodicorbit/PeriodicOrbitTrapeze.jl:322\n [11] (::PeriodicOrbitTrapProblem{var\"#9#10\", var\"#11#12\", Nothing, Nothing, Nothing, Vector{Float64}, DefaultLS, BifurcationKit.TimeMesh{Vector{Float64}}})(::Val{:JacFullSparse}, u0::Vector{Float64}, par::Vector{Float64}; γ::Float64, δ::Float64)\n    @ BifurcationKit ~/work/prog_gd/julia/dev/dev1/BifurcationKit/src/periodicorbit/PeriodicOrbitTrapeze.jl:382\n [12] PeriodicOrbitTrapProblem\n    @ ~/work/prog_gd/julia/dev/dev1/BifurcationKit/src/periodicorbit/PeriodicOrbitTrapeze.jl:380 [inlined]\n [13] continuationPOTrap(prob::PeriodicOrbitTrapProblem{var\"#9#10\", var\"#11#12\", Nothing, Nothing, Nothing, Vector{Float64}, DefaultLS, BifurcationKit.TimeMesh{Vector{Float64}}}, orbitguess::Vector{Float64}, par::Vector{Float64}, lens::Setfield.IndexLens{Tuple{Int64}}, contParams::ContinuationPar{Float64, DefaultLS, DefaultEig{typeof(real)}}, linearAlgo::BorderingBLS{DefaultLS, Float64}; linearPO::Symbol, printSolution::Function, updateSectionEveryStep::Int64, kwargs::Base.Iterators.Pairs{Symbol, Any, NTuple{5, Symbol}, NamedTuple{(:verbosity, :plotSolution, :normC, :tangentAlgo, :plot), Tuple{Int64, BifurcationKit.var\"#530#540\"{BifurcationKit.var\"#530#531#541\"{var\"#31#35\", PeriodicOrbitTrapProblem{var\"#9#10\", var\"#11#12\", Nothing, Nothing, Nothing, Vector{Float64}, DefaultLS, BifurcationKit.TimeMesh{Vector{Float64}}}}}, var\"#33#36\", BorderedPred, Bool}}})\n    @ BifurcationKit ~/work/prog_gd/julia/dev/dev1/BifurcationKit/src/periodicorbit/PeriodicOrbitTrapeze.jl:887\n [14] #continuation#629\n    @ ~/work/prog_gd/julia/dev/dev1/BifurcationKit/src/periodicorbit/PeriodicOrbitTrapeze.jl:962 [inlined]\n [15] continuation(F::var\"#9#10\", dF::var\"#11#12\", d2F::typeof(d2F), d3F::typeof(d3F), br::ContResult{NamedTuple{(:x, :param, :itnewton, :itlinear, :ds, :theta, :n_unstable, :n_imag, :stable, :step), Tuple{Float64, Float64, Int64, Int64, Float64, Float64, Int64, Int64, Bool, Int64}}, Vector{ComplexF64}, Matrix{ComplexF64}, GenericBifPoint{Float64, NamedTuple{(:x,), Tuple{Float64}}, Vector{Float64}}, Nothing, Nothing, Vector{Float64}, Setfield.IndexLens{Tuple{Int64}}}, ind_bif::Int64, _contParams::ContinuationPar{Float64, DefaultLS, DefaultEig{typeof(real)}}, prob::PeriodicOrbitTrapProblem{Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, DefaultLS, BifurcationKit.TimeMesh{Vector{Float64}}}; Jᵗ::Nothing, δ::Float64, δp::Float64, ampfactor::Float64, usedeflation::Bool, nev::Int64, updateSectionEveryStep::Int64, kwargs::Base.Iterators.Pairs{Symbol, Any, NTuple{7, Symbol}, NamedTuple{(:tangentAlgo, :linearPO, :verbosity, :plot, :printSolution, :plotSolution, :normC), Tuple{BorderedPred, Symbol, Int64, Bool, var\"#30#34\", var\"#31#35\", var\"#33#36\"}}})\n    @ BifurcationKit ~/work/prog_gd/julia/dev/dev1/BifurcationKit/src/periodicorbit/PeriodicOrbits.jl:366\n [16] top-level scope\n    @ none:1\n\njulia&gt; ```\n</code></pre></div>",
        "id": 237382753,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620155739
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; however I am now confused because</p>\n<div class=\"codehilite\" data-code-language=\"u0\"><pre><span></span><code>@views J(u0[:,1], params) # runs fine\nJ(view(u0,:,1), params) # runs fine```\n:woman-shrugging:\n</code></pre></div>",
        "id": 237383072,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620155877
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; this throws bottomless eltype stackoverflow on <code>solve</code></p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>function f(du, u, p, t)\n    du[1] = u\nend\nprob = ODEProblem(f, Pair[], (0,1.))\nsol = solve(prob)```\nshould i open an issue?\n</code></pre></div>",
        "id": 237384665,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620156606
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; im aware its wrong since no u0</p>",
        "id": 237384684,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620156616
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah that u0 makes no sense.</p>",
        "id": 237385962,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620157153
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; yeah im aware lol, but stackoverflows are bad</p>",
        "id": 237386179,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620157246
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; okay, add a dispatch in RecursiveArrayTools that cuts it early to an error.</p>",
        "id": 237386221,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620157268
    },
    {
        "content": "<p>[slack] &lt;atiyo ghosh&gt; I'd love it if I could access the solution up until the point of error/interrupt for a problematic <code>solve</code> . It would help a lot with empowering users to debug things for themselves. Some kind of <code>debug</code> keyword arg to <code>solve</code> would be super cool. Or am I the only one who thinks so? Or is there already similar functionality which I'm missing?</p>",
        "id": 237394174,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620160795
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; Not sure if that answers your question but you could use the integrator interface and use the step function or a SavingCallback</p>",
        "id": 237398232,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620162270
    },
    {
        "content": "<p>[slack] &lt;atiyo ghosh&gt; That makes sense. That hadn't occurred to me. Thanks!</p>",
        "id": 237459260,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620203464
    },
    {
        "content": "<p>[slack] &lt;ignace-computing&gt; Hello. Could I please briefly talk to one of the <a href=\"https://github.com/search?q=DiffEqOperators.jl&amp;type=Repositories\">DiffEqOperators.jl</a> developers (possibly over Jitsi or so)?</p>",
        "id": 237463469,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620205582
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; sure.</p>",
        "id": 237474423,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620211640
    },
    {
        "content": "<p>[slack] &lt;ignace-computing&gt; Great. Let us use the below link, whenever it suits you. I am available from now on till late in the evening (Europe time) and also tomorrow and so on.<br>\n<a href=\"https://meet.jit.si/ImportantMuseumsExpressTemporarily\">https://meet.jit.si/ImportantMuseumsExpressTemporarily</a></p>",
        "id": 237477476,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620213341
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I went on but it's empty.</p>",
        "id": 237478468,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620213882
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; What do you want to chat about?</p>",
        "id": 237478481,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620213886
    },
    {
        "content": "<p>[slack] &lt;ignace-computing&gt; I just closed itµ</p>",
        "id": 237478495,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620213896
    },
    {
        "content": "<p>[slack] &lt;ignace-computing&gt; I come back <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 237478503,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620213902
    },
    {
        "content": "<p>[slack] &lt;ignace-computing&gt; I am there now.</p>",
        "id": 237478571,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620213940
    },
    {
        "content": "<p>[slack] &lt;ignace-computing&gt; Can you hear me?</p>",
        "id": 237478668,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620213984
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; no</p>",
        "id": 237478680,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620213993
    },
    {
        "content": "<p>[slack] &lt;ignace-computing&gt; ok...</p>",
        "id": 237478697,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620214008
    },
    {
        "content": "<p>[slack] &lt;ignace-computing&gt; I will sort this out</p>",
        "id": 237478800,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620214080
    },
    {
        "content": "<p>[slack] &lt;ignace-computing&gt; I think it's on my side</p>",
        "id": 237478837,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620214084
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; @isaacsas i remember you sent me a paper on the tutorial <a href=\"https://catalyst.sciml.ai/stable/tutorials/bifurcation_diagram/\">https://catalyst.sciml.ai/stable/tutorials/bifurcation_diagram/</a>. Can you sent a again  please? I am playing with this. II captured the periodic orbit  from the  Hopf. It is bizarre, like a canard explosion</p>",
        "id": 237553455,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620243464
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; @isaacsas btw thbak you for the generator, my student is playing with it</p>",
        "id": 237553629,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620243537
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; <a href=\"https://files.slack.com/files-pri/T68168MUP-F0210S8BVGB/download/screen_shot_2021-05-05_at_21.56.00.png\">https://files.slack.com/files-pri/T68168MUP-F0210S8BVGB/download/screen_shot_2021-05-05_at_21.56.00.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F0210S8BVGB/download/screen_shot_2021-05-05_at_21.56.00.png\"><img src=\"https://uploads.zulipusercontent.net/eff4780607844317c58aee48a623e86d50b5d0c4/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303231305338425647422f646f776e6c6f61642f73637265656e5f73686f745f323032312d30352d30355f61745f32312e35362e30302e706e67\"></a></div>",
        "id": 237555703,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620244570
    },
    {
        "content": "<p>[slack] &lt;Toby Harvey&gt; I have a bunch of time varying parameters inside an ode function defining a problem. At everytimestep I would like to save the state variable, but also these time varying parameters. Secondly I would like the solver to terminate on a condition on the time derivative of the state variables...it seems like <code>SavingCallback</code> is the thing to use here. So I have tried doing the following. This is my function for the saving call back:</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    if isdefined(i,:fsallast)\n        δNp = i.p.δNp\n        N = i.p.N\n        dψV = i.fsallast\n        V = @view dψV[δNp .+ (1:N+1)]\n        Vmax = maximum(abs.(V))\n\n        if Vmax &gt;= 1e-3\n            terminate!(i)\n            return i.p.u\n        end\n    end\n    return i.p.u\nend```\nI set up the callback in the following way and sol:\n```    u = SavedValues(Float64, Array{Float64,1})\n    # Stopping criteria\n    stop = SavingCallback(savestop, u)\n\n    sol = solve(prob, Tsit5(); isoutofdomain=stepcheck, dt=year_seconds,\n                atol = 1e-5, rtol = 1e-3, save_everystep=true,\n                internalnorm=(x, _)-&gt;norm(x, Inf), callback=stop)```\nWhat is appears to be returned to me inside of `u[:]` is `i.p.u` at the final timestep over and over, when I know that it is varying within the ode solver.\nHave I not set the `SavingCallback` up correctly?\n</code></pre></div>",
        "id": 237556562,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620244954
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; @rveltz Very interesting! That's the example from the tutorial that @torkel.loman was looking at?</p>",
        "id": 237556986,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620245119
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; This is the paper I was saying has a nice set of simple ODE examples with bifurcation diagrams that arise in modeling signaling pathways: <a href=\"https://www.sciencedirect.com/science/article/abs/pii/S0955067403000176\">https://www.sciencedirect.com/science/article/abs/pii/S0955067403000176</a></p>",
        "id": 237557049,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620245154
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; I think I had been trying to reproduce fig 1e or 1f.</p>",
        "id": 237557143,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620245189
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; I'm not sure though if it includes the example @torkel.loman looked at; he may have a reference for that one.</p>",
        "id": 237557288,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620245272
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; thanks you</p>",
        "id": 237558061,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620245594
    },
    {
        "content": "<p>[gitter] &lt;zornsllama&gt; does the package include efficient solvers for conditionally linear ODEs? (i.e. ODE where the ith component of the vector field is linear in x_i for all i) I am seeing split linear systems in the documentation, but not conditionally linear</p>",
        "id": 237598763,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620270631
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; I just run the tutorial <a href=\"https://diffeqflux.sciml.ai/dev/examples/optimization_ode/\">https://diffeqflux.sciml.ai/dev/examples/optimization_ode/</a> without changing anything. I am getting error <code>MethodError: no method matching getproperty(::NamedTuple{(:p, :saveat), Tuple{Vector{Float64}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}}, ::Int64)</code> from using <code>DiffEqFlux.sciml_train</code> .</p>",
        "id": 237600728,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620272413
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; anyone has met the same issue?</p>",
        "id": 237600875,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620272603
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I think <code>sciml_train</code> is soon to be (or already has been) deprecated. You can try <code>Flux.train!</code> or just write your own training loop.</p>",
        "id": 237615795,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620285424
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; For GalacticOptim</p>",
        "id": 237618653,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620286931
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; But it shouldn't error</p>",
        "id": 237618675,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620286948
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Is this on v1.6?</p>",
        "id": 237618684,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620286957
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; The example is actually a different model I have been working on. It is not published (yet, hopefully soon, it is the one I described at the SIAM conference). I chose it because it both had a Fold and a Hopf bifurcation, so I figured it would be a good example.</p>",
        "id": 237633237,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620295124
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; It's a bit related to the \"Positive and negative feedback: oscillators\" in that paper. It is basically a very simple such system, but with a time delay on negative feedback.</p>",
        "id": 237633398,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620295206
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; My initial ambition was to try and include how to plot periodic orbits in the same example. However, when I tried to figure out how to actually do that it seemed non-trivial enough that I decided to avoid that.</p>",
        "id": 237659340,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620308449
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; Yeah, this is on v1.6</p>",
        "id": 237670013,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620312426
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; BTW, sysbio people might want to check out #sciml-sysbio</p>",
        "id": 237683782,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620316793
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Hey folks is <code>BandedMatrices.jl</code> still the best for sparse linear algebra, or is <code>SparseArrays</code> better? I remember @chrisrackauckas had mentioned BandedMatrices a while ago, but was not which package has the best implementations for matrix multiplication, etc. Also, which package like works well with the rest of Julia.</p>",
        "id": 237816713,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620391803
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Sparse is just too general</p>",
        "id": 237816793,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620391833
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; if you have a matrix which falls into a special structure, use the structure</p>",
        "id": 237816806,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620391842
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; only go to sparse when no structure applies.</p>",
        "id": 237816816,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620391848
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Okay right. That makes sense. Yeah, most of what I will use is BandedMatrices. But there are times for Sparse, like for gene expression data or something.</p>",
        "id": 237819167,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620392882
    },
    {
        "content": "<p>[slack] &lt;shipengcheng1230&gt; Hey folks, does anyone know if there is a way to clear the solution during solving? I need to save the huge output to a file, currently I am relying on the FunctionCallingCallback and disable <code>save_everystep</code> so not to blow my memory. I am wondering if anyone has a better idea. Thanks!</p>",
        "id": 237835108,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620399014
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>FunctionCallingCallback</code> and saving to disk can be a good solution</p>",
        "id": 237835176,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620399046
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; mmaping the output array</p>",
        "id": 237835186,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620399050
    },
    {
        "content": "<p>[slack] &lt;shipengcheng1230&gt; Thanks Chris. So in my current approach, I cache the solution somewhere else, then save them once the cache is full. During saving, I resize the HDF5 dataset and append the cached solution. I am not sure if there is a more automatic way. The Mmap seems to cumbersome if I need to save multi-fields solutions.</p>",
        "id": 237836523,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620399550
    },
    {
        "content": "<p>[slack] &lt;darsnack&gt; Surprisingly, this is my first time working with any SciML package. I have two simple questions. First, I want to step the integrator by 0.1ms (don’t care if it takes multiple finer steps). Then I adjust some weight values in my parameter p. Rinse and repeat. So, is this the correct approach? Second, in my in-place update, I compute an intermediate value at time t that I want to use to update my p. What’s the idiomatic way of passing this info out of the in-place update?</p>",
        "id": 237853285,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620405693
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; For the first question, you can use <code>init(prob,...)</code> to get an integrator and then do <code>step!(integrator, dt)</code> . As for modifying <code>p</code> , I think you are free to do this after <code>step!</code>  but it's generally recommended to do it in a callback so that the integrator expects the discontinuity. As for your intermediate value, this is unfortunately not so easy in the <code>ODEProblem</code> interface at the moment. You can try using <code>SavingCallback</code> or <code>SimulationLogs.jl</code> . You could also make your function a callable struct and store it in a field.</p>",
        "id": 237855708,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620406669
    },
    {
        "content": "<p>[slack] &lt;darsnack&gt; Perfect thanks</p>",
        "id": 237856945,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620407112
    },
    {
        "content": "<p>[slack] &lt;darsnack&gt; Seems like I could also store the intermediate values in <code>p</code> (if <code>p</code> is a tuple/struct)</p>",
        "id": 237858200,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620407590
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Yes, you could. Though this might be a bit tricky if you need to save them for every timestep.</p>",
        "id": 237859966,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620408228
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I think for your case, I would actually recommend a combination of the callable struct and <code>SavingCallback</code> . You can cache the value in the struct and then retrieve/save it with <code>SavingCallback</code> . Then you can get the results from the <code>SavedValues</code> after each <code>step!</code> .</p>",
        "id": 237860263,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620408345
    },
    {
        "content": "<p>[slack] &lt;darsnack&gt; Thanks, I ended up with something like that. I only need the values at the current time step not a history, so I did a callable struct + <code>PeriodicCallback</code> that runs every <code>deltat</code> which is the frequency at which I wish to update my parameters.</p>",
        "id": 237867563,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620411336
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; ```Hello Projects!</p>\n<p>NumFOCUS is pleased to invite proposals for our 2nd round of Small Development Grants for 2021! </p>\n<p>Apply Here: <a href=\"https://numfocus.typeform.com/to/mbtH7w\">https://numfocus.typeform.com/to/mbtH7w</a> </p>\n<p>Timeline:</p>\n<p>Deadline for Proposal Submission: June 4, 2021</p>\n<p>Projects will be Notified: July 15, 2021 (or sooner)</p>\n<p>Available Funding:</p>\n<p>Up to $5,000 per proposal</p>\n<p>$70,319 total funding available (some funds rolled over from round 1)</p>\n<p>Program information and application instructions can be found here: <a href=\"https://numfocus.org/programs/small-development-grants\">https://numfocus.org/programs/small-development-grants</a></p>\n<p>Please feel free to reach out if you have any questions.```<br>\n[3:57 PM] Any SciML(/-adjacent) devs who want to submit for this under SciML, let me know.</p>",
        "id": 237881643,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620417446
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Do you have any small projects in mind that you'd like to see get done? There are some specific modeling challenges in my domain that could benefit from more support in SciML. If I were to receive this grant, I could probably suspend my PhD contract temporarily to work on it.</p>",
        "id": 237882843,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620417932
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; So I noticed that apparently using <code>DiffCache</code> + <code>get_tmp</code> appears to be an order of magnitude slower than just allocating a new array of <code>Dual</code>s with <code>similar</code>.... but I don't understand why? I thought the whole point of <code>DiffCache</code> was to allow efficient in-place updates while still being <code>ForwardDiff</code>  compatible. MWE below.</p>",
        "id": 237883268,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620418146
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; ```using DifferentialEquations<br>\nusing LinearAlgebra<br>\nusing BenchmarkTools</p>\n<p>const nknots = 100<br>\nconst h = 1.0/(nknots+1)<br>\nx = range(0, step=h, length=nknots)<br>\nu0 = sin.(π*x)</p>\n<p>@inline function f1(du,u,p,t)<br>\n  du .= zero(eltype(u))<br>\n  u₃ = @view u[3:end]<br>\n  u₂ = @view u[2:end-1]<br>\n  u₁ = @view u[1:end-2]<br>\n  k = DiffEqBase.get_tmp(p[1], u)<br>\n  k = @view k[2:end-1]<br>\n  @. du[2:end-1] = k<em>((u₃ - 2</em>u₂ + u₁)/(h^2.0))<br>\n  nothing<br>\nend</p>\n<p>@inline function f2(du,u,p,t)<br>\n  du .= zero(eltype(u))<br>\n  u₃ = @view u[3:end]<br>\n  u₂ = @view u[2:end-1]<br>\n  u₁ = @view u[1:end-2]<br>\n  k = copyto!(similar(u), p[1].du)<br>\n  k = @view k[2:end-1]<br>\n  @. du[2:end-1] = k<em>((u₃ - 2</em>u₂ + u₁)/(h^2.0))<br>\n  nothing<br>\nend</p>\n<p>p = (DiffEqBase.dualcache(0.5.*ones(size(u0)), Val{10}),)<br>\nprob1 = ODEProblem(f1, u0, (0.0,1.0), p)<br>\n@benchmark solve($prob1, Rodas4P(chunk_size=10), saveat=0.1)</p>\n<h1>BenchmarkTools.Trial:</h1>\n<h1>memory estimate:  24.78 MiB</h1>\n<h1>allocs estimate:  656986</h1>\n<h1>--------------</h1>\n<h1>minimum time:     4.339 s (0.00% GC)</h1>\n<h1>median time:      4.525 s (0.00% GC)</h1>\n<h1>mean time:        4.525 s (0.00% GC)</h1>\n<h1>maximum time:     4.711 s (0.00% GC)</h1>\n<h1>--------------</h1>\n<h1>samples:          2</h1>\n<h1>evals/sample:     1</h1>\n<p>prob2 = ODEProblem(f2, u0, (0.0,1.0), p)<br>\n@benchmark solve($prob2, Rodas4P(chunk_size=10), saveat=0.1)</p>\n<h1>BenchmarkTools.Trial:</h1>\n<h1>memory estimate:  2.00 MiB</h1>\n<h1>allocs estimate:  3790</h1>\n<h1>--------------</h1>\n<h1>minimum time:     3.877 ms (0.00% GC)</h1>\n<h1>median time:      8.656 ms (0.00% GC)</h1>\n<h1>mean time:        9.710 ms (1.57% GC)</h1>\n<h1>maximum time:     39.028 ms (0.00% GC)</h1>\n<h1>--------------</h1>\n<h1>samples:          515</h1>\n<h1>evals/sample:     1```</h1>",
        "id": 237883280,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620418154
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; performance enhancements, new / fixing benchmarks, more MTK or DiffEqOperators work, etc.</p>",
        "id": 237883834,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620418453
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; there's a lot it can be.</p>",
        "id": 237883838,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620418456
    },
    {
        "content": "<p>[slack] &lt;Anthony Polloreno&gt; If I have questions about picking out a solver from OrdinaryDiffEq for use with QuantumOptics, should I ask here, or in #helpdesk?</p>",
        "id": 237884655,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620418856
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Here.</p>",
        "id": 237884796,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620418930
    },
    {
        "content": "<p>[slack] &lt;Anthony Polloreno&gt; Thanks.</p>",
        "id": 237884807,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620418936
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah this is a good spot</p>",
        "id": 237885256,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620419178
    },
    {
        "content": "<p>[slack] &lt;Anthony Polloreno&gt; I'm currently using <a href=\"https://github.com/search?q=QuantumOptics.jl&amp;type=Repositories\">QuantumOptics.jl</a> to solve the Schrodinger Equation for a time-dependent two level system, so it's not a particularly big system. The default solver used is DP5, reltol~1E-6, abstol~1E-8.</p>\n<p>The basic problem I seem to be having is that my evolution time is ~ .25E-2, and the Hamiltonian has frequency components at integer multiples of 2π180E3, up to 40*2π180E3. My current suspicion is that the range of time scales in my problem is causing errors in the solver, but I'm not familiar enough with solving differentials equations to know what kind of tolerances to set, and if this is stiff or not.</p>\n<p>My knee-jerk reaction was to use one of the julia solvers that supports big floats, hoping that any kind of accuracy issues would be taken care of, but I've had issues getting them to work with complex numbers.</p>\n<p>Is this something that can be solved by picking a different solver intelligently, or setting the parameters of the solver differently?</p>",
        "id": 237885791,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620419445
    },
    {
        "content": "<p>[slack] &lt;Anthony Polloreno&gt; Another factor could be the kinds of scales being considered - the Hamiltonian is something like U*cos(\\omega * t + amp<em>f(t)), where U is 2π10E3, and amp</em>f(t) is at most ~.1. \\omega is the aforementioned frequency.</p>",
        "id": 237886083,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620419580
    },
    {
        "content": "<p>[slack] &lt;Anthony Polloreno&gt; A simpler question - can someone explain why DP8 would give me a less accurate solution than DP5?</p>",
        "id": 237970847,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620493832
    },
    {
        "content": "<p>[slack] &lt;Anthony Polloreno&gt; What I'm finding, in fact, is that DP5 (the default in <a href=\"https://github.com/search?q=QuantumOptics.jl&amp;type=Repositories\">QuantumOptics.jl</a>) is the only solver that gives me the answer I expect, while others either say \"Instability detected\" or give me what I think is the wrong answer.</p>",
        "id": 237971696,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620494670
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Same tolerance?</p>",
        "id": 237974887,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620497894
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; We should add a line search and other things into OrdinaryDiffEq. It's a good idea.</p>",
        "id": 237977054,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620500220
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; In fact, that would be a great idea for the NumFOCUS funding.</p>",
        "id": 237977069,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620500232
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; did you ever get help?</p>",
        "id": 237977095,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620500276
    },
    {
        "content": "<p>[slack] &lt;Anthony Polloreno&gt; Yep!</p>",
        "id": 238003655,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620529955
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; What kind of equation?</p>",
        "id": 238003837,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620530174
    },
    {
        "content": "<p>[slack] &lt;Anthony Polloreno&gt; I'm solving the Schrodinger equation, I think the Hamiltonian I'm considering might make it stiff. My friend pointed out to me I should just approximate the evolution by e^{-iH(t)\\delta} and see how that behaves.</p>",
        "id": 238004272,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620530708
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah, PDEs like that can have a level of stiffness that makes the stepping stability-bound instead of error-bound</p>",
        "id": 238004381,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620530847
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; When that's the case, higher order is not effective since you just have more <code>f</code> evaluations but no larger steps</p>",
        "id": 238004393,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620530865
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Did you try doing stuff with sparsity detection etc.</p>",
        "id": 238004437,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620530890
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; or did you try methods like ROCK2 or ROCK4?</p>",
        "id": 238004445,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620530897
    },
    {
        "content": "<p>[slack] &lt;Anthony Polloreno&gt; No, I'm very new to using numerical solvers. I'm not familiar with sparsity detection. Are ROCK2 and ROCK4 other options in OrdinaryDiffEq?</p>",
        "id": 238004573,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620531051
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes</p>",
        "id": 238006402,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620533263
    },
    {
        "content": "<p>[slack] &lt;Anthony Polloreno&gt; Great - thanks for the help @chrisrackauckas!</p>",
        "id": 238007071,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620534021
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; FWIW, I am also working with PDEs and I have also observed the phenomenon that often lower order solvers produce more accurate solutions. I have found <code>ROCK2</code> to often be a good choice, though in some cases I am still forced to use forward Euler. Fortunately, since Julia is fast, forward Euler with small-ish time steps is often quite competitive performance-wise.</p>",
        "id": 238038442,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620569407
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah that's a stability bound property</p>",
        "id": 238038499,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620569510
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Yeah and it's all due to these stupid freeze curves in representing phase change. They have really nasty discontinuities and derivatives that make it a nightmare for Newton methods.</p>",
        "id": 238038811,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620569882
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; With the simpler representations of phase change, implicit methods (taking into account sparsity) are by far the fastest.</p>",
        "id": 238038867,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620569923
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I have yet to try ROCK2 with a custom CFL adaptive timestepping scheme, which I suspect might be better than the default one in <code>OrdinaryDiffEq</code> , at least for PDEs.</p>",
        "id": 238038896,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620569986
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Hey folks, I was wondering if there is a way to obtain the ensemble summary statistics from an ensemble simulation, like the mean and variance at each point in the simulation. I can plot the confidence intervals around the average, but I am not finding the variance info in the resulting summary variable. Here is some simple code to show what I mean.</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    du[1] += rand([-1, 1])\nend\n\nfunction prob_func(prob,i,repeat)\n    remake(prob, u0=prob.u0)\nend\n\ntspan = (0,20)\nu0 = [0.0]\nparams = [0.0]\n\ndisc_prob = DiscreteProblem(random_walk!, u0, tspan, params)\nensemble_prob = EnsembleProblem(disc_prob,prob_func=prob_func)\nsim = solve(ensemble_prob,trajectories=5)\nsumm = EnsembleSummary(sim,0.0:1.0:20.0)\nplot(summ;idxs=1)```\nSo the `summ` variable will plot the output nicely with a dark line for the mean and then corresponding confidence intervals. But I could not find the variance or standard deviation, etc., in the actual `summ` variable or array? Any suggestions.\n</code></pre></div>",
        "id": 238046923,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620578816
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Note: I delibrately kept the <code>prob_func</code> simple and the parameters repeat because this simulation is stochastic. So given a single parameter, I want to see the range of possible outcomes. That was just in case anyone is wondering <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>.</p>",
        "id": 238047003,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620578887
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; @Brian Groenke forward-euler? Isn't forward euler accurate to only O(h). Is it that the more adaptive time-stepping or implicit structure of other solvers is missing the really fine timescales that a very finely discretized forward euler is catching?</p>",
        "id": 238047421,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620579447
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; No, it's the computational expense of <code>f</code> evaluations coupled with the difficulty of maintaining stability in the phase change region. This means it takes a while for Newton iterations to converge and for multi-stage/adaptive methods to settle on the right timestep. Thus, forward Euler with small time steps can end up being just as fast exactly because of its simplicity.</p>",
        "id": 238047648,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620579693
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Hyperbolic PDE?</p>",
        "id": 238050872,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620583301
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; ROCK2 or an SSP method is probably good</p>",
        "id": 238050879,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620583316
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; You probably want ssp</p>",
        "id": 238050881,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620583322
    },
    {
        "content": "<p>[slack] &lt;darsnack&gt; Is calling <code>init</code> again the right thing when I want to completely disable a callback?</p>",
        "id": 238062663,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620595258
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Just make its condition always false.</p>",
        "id": 238062694,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620595278
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; flip a parameter or some internal cache.</p>",
        "id": 238062698,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620595286
    },
    {
        "content": "<p>[slack] &lt;darsnack&gt; Cool thanks</p>",
        "id": 238062907,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620595506
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Ahh, I figured it out. So if <code>summ = EnsembleSummary(args)</code>. Then within the <code>summ</code> object there are elements like <code>summ.qlow</code> and <code>summ.qhigh</code> that contain the lower and upper error bounds for the onfidence intervals. The values correspond to the <code>quantiles=[0.025, 0.975]</code> option when creating the <code>EnsembleSummary</code>.</p>",
        "id": 238064811,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620597589
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; There's also all of the functions <a href=\"https://diffeq.sciml.ai/stable/features/ensemble/#Summary-Statistics\">https://diffeq.sciml.ai/stable/features/ensemble/#Summary-Statistics</a></p>",
        "id": 238091594,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620627065
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Heat equation is parabolic. Though Richard's equation (which is sometimes coupled with the heat equation for water drainage) is quasi-hyperbolic.</p>",
        "id": 238101748,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620633936
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; What is the recommended method for backpropagating through large PDEs? It seems like <code>InterpolatingAdjoint</code> and <code>QuadratureAdjoint</code> are quite slow, even for just one parameter (yes, I know ForwardDiff is better for &lt;100 parameters). Is this because of the large computational graph generated by <code>ReverseDiff</code> (i.e. array of tracked value vs tracked array)?</p>",
        "id": 238104967,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620635502
    },
    {
        "content": "<p>[slack] &lt;Simon Welker&gt; What could be allocating O(steps) many times in a solve of an <code>SDEProblem{true}</code> with both f and g being entirely nonallocating? I'm running</p>\n<div class=\"codehilite\" data-code-language=\"problem\"><pre><span></span><code>@btime solve(problem, EulerHeun(), dt=1e-5, dense=false, unstable_check=always_false)```\nand getting a solution with `t` and `u` each having 3002 elements. `@btime` reports 9063 allocations. I would've expected there to be much fewer allocations—I mean the solver probably isn't allocating once for each output vector element. What am I missing?\n</code></pre></div>",
        "id": 238106205,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620636220
    },
    {
        "content": "<p>[slack] &lt;Simon Welker&gt; <code>example_params</code> contains a reference to a somewhat large matrix, but how I'm using it is also nonallocating</p>",
        "id": 238106564,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620636413
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Well the system seems to have a canard explosion, meaning a periodic orbit that grows in a vanishingly small parameter interval. These are quite hard to compute  but BK is able to capture it. If you are interested, contact me and Ill give you the code, or open an issue</p>",
        "id": 238116055,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620641458
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; which VJP?</p>",
        "id": 238117672,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620642404
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes, ReverseDiff probably isn't the right VJP, but it depends on how how you implemented the RHS</p>",
        "id": 238117697,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620642424
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; The RNG</p>",
        "id": 238117717,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620642438
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I think I just used the default, which is <code>ReverseDiffVJP</code> , right? I think I have to use that because my RHS is implemented as in-place. Spatial derivatives are computed with MOL.</p>\n<p>Also, I noticed that the gradients computed via <code>ReverseDiff</code> do not match those computed via <code>ForwardDiff</code> . Do you have any idea why this might be the case? Or why that could happen?</p>",
        "id": 238118206,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620642740
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it would probably be much better to make it compatible with ZygoteVJP</p>",
        "id": 238119090,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620643210
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; If you decrease the tolerance, do they converge?</p>",
        "id": 238119102,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620643218
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; &gt;  However, when I tried to figure out how to actually do that it seemed non-trivial enough that I decided to avoid that.<br>\nI am interested in your experience if I can improve the API</p>",
        "id": 238119272,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620643320
    },
    {
        "content": "<p>[slack] &lt;Simon Welker&gt; Hmm, pretending it's an ODEProblem reduces it but I'm still getting 3038 allocations -- something else too?</p>",
        "id": 238128045,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620647988
    },
    {
        "content": "<p>[slack] &lt;Simon Welker&gt; Are there nonallocating RNGs I could swap in (reusing a single state array)?</p>",
        "id": 238128328,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620648095
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Oh very nice. I must have missed this section of the docs. Yeah, I had a model written in python and I wrote my own quantile function. So I was comparing those results to the julia code with the Diffeq quantile function, but I was seeing some differences in the distributions which I have to go figure out. Thanks again @chrisrackauckas for pointing me in the right direction.</p>",
        "id": 238130788,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620649287
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; @Brian Groenke haha, I get it. So the extra machinery of the adaptive method is just telling you that you need a very fine mesh anyway <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>. Except that the adaptive method had to do the <code>f</code> evaluations and the nonlinear solve, versus just doing the <code>f</code> evaluations for Euler.</p>",
        "id": 238131284,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620649530
    },
    {
        "content": "<p>[slack] &lt;darsnack&gt; I don’t think it completely avoids all allocations but there is <code>Random.rand!</code></p>",
        "id": 238141037,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620653097
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; @Brian Groenke this is an interesting question though. I wonder what @chrisrackauckas thinks about situations like this. Say I have a problem where there is a long stretch of well-behaved low frequency dynamics--the place where Euler could work or larger time-steps could work--punctuated by periods of complicated dynamics where adaptive or implicit methods are more necessary. An adaptive or implicit method would still do a lot of unnecessary nonlinear solves or function evals during the entire well-behaved range, BUT it would do well on the complicated section. In other words, is there an adaptive method over adaptive methods--which would choose whether to use a simpler method during some sections and then a more sophisticated solver during other sections of a problem? I can imagine a number of ways to implement something like this, so it must have been done already. But I confess I don't know enough about the state of the art solvers.</p>",
        "id": 238141382,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620653250
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you're saving every step</p>",
        "id": 238141670,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620653383
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that has to allocate.</p>",
        "id": 238141681,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620653386
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Yes, this actually already exists in <code>DifferentialEquations.jl</code> , see: <a href=\"https://diffeq.sciml.ai/dev/solvers/ode_solve/#Pre-Built-Stiffness-Detecting-and-Auto-Switching-Algorithms\">https://diffeq.sciml.ai/dev/solvers/ode_solve/#Pre-Built-Stiffness-Detecting-and-Auto-Switching-Algorithms</a></p>\n<p>I think @chrisrackauckas has an entire paper about it. Unfortunately, in my problem, there is always somewhere in the discretized spatial domain where phase change is occurring. So at least one of the discretized ODEs is always stiff. I would need an algorithm that auto-switches over the spatial domain rather than the temporal domain.</p>",
        "id": 238145016,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620654635
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; That would be a \"horizontal switching\" with an IMEX method</p>",
        "id": 238147422,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620655524
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I have an idea for how to do that, but not enough numerical analysis students.</p>",
        "id": 238147443,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620655534
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; It would be a big technical advancement for permafrost modeling, I think... could be a good NumFOCUS grant proposal..?</p>",
        "id": 238147762,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620655655
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I'm not a numerical analysis expert, though.</p>",
        "id": 238147801,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620655668
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; no, it would be an NSF proposal to fund a student for 2-3 years to do it correctly.</p>",
        "id": 238147841,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620655683
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; ah, ok. fair enough.</p>",
        "id": 238147901,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620655692
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; There are a number of institutions here in Europe that might be interested in funding such a project. I could ask around, if you want.</p>",
        "id": 238148257,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620655830
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; &gt; it would probably be much better to make it compatible with ZygoteVJP<br>\nThat's easier said than done... I designed the whole thing around having in-place updates, and for good reason. It's a somewhat large PDE and it's really expensive to allocate 10 or more new 200+ element vectors at every time step.</p>\n<blockquote>\n<p>If you decrease the tolerance, do they converge?<br>\nNo, I just tried running it on a much shorter time period, first run with default tolerances, second run with <code>1e-8</code> for abstol and reltol. The gradients barely changed for both <code>ReverseDiff</code> and <code>ForwardDiff</code> , and there is a <code>2e8</code> difference between the two gradient values for this parameter.</p>\n</blockquote>\n<p>That is a smaller difference than with the longer time period, but still quite large.</p>",
        "id": 238150073,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620656571
    },
    {
        "content": "<p>[slack] &lt;Simon Welker&gt; in principle saving every step could also allocate a large matrix once and write into that, in particular if all entries in my saved <code>u</code> have the same (bits)type. can I hook into the saving process to potentially do this? I found <code>SavingCallback</code> , but it seems to me that how <code>SavedValues</code> is defined prevents me from doing something like this</p>",
        "id": 238150997,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620656917
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Oh, I'm not worried about getting funding</p>",
        "id": 238151056,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620656946
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's more about getting capable students to help actually do it</p>",
        "id": 238151084,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620656955
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I think we've gotten something like 16 grants in the last year or something crazy at this point, so funding isn't the issue. Students who are ready to do the work are hard to come by</p>",
        "id": 238151203,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620656994
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I see.</p>",
        "id": 238151394,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657040
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; no, you can only save as many time points as you allocate</p>",
        "id": 238151546,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657098
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; if you save every step, you have to allocate every step</p>",
        "id": 238151561,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657104
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; if you overwrite the same piece of memory, you might as well have not saved since the values won't exist at the end.</p>",
        "id": 238151595,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657120
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Did you change to <code>ReverseDiffVJP(true)</code>?</p>",
        "id": 238151672,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657137
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Yes</p>",
        "id": 238151685,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657142
    },
    {
        "content": "<p>[slack] &lt;Simon Welker&gt; sorry, I meant a (steps, size(u)...) sized matrix -- after each step i write into the next row</p>",
        "id": 238151732,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657161
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; okay, if the graph compilation is done then it should be pretty good (sans the graph compile time)</p>",
        "id": 238151811,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657187
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Also, with a different formulation of my problem (integrating temperature instead of energy), I get instability with ReverseDiff but not with ForwardDiff. I'm guessing it's running into instability in the backward pass, right?</p>",
        "id": 238151846,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657197
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yes, that's less allocations but it's not necessarily any faster.</p>",
        "id": 238151864,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657210
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Allocating a huge chunk of memory is slower and slows down superlinearly</p>",
        "id": 238151900,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657224
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh for 4 SDEs, yeah that could help</p>",
        "id": 238152004,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657253
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; in that case, if you just use StaticArrays it's equivalent</p>",
        "id": 238152039,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657264
    },
    {
        "content": "<p>[slack] &lt;Simon Welker&gt; that definitely makes sense, I just wanted to try it out for my particular problem</p>",
        "id": 238152092,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657281
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah so just use StaticArrays</p>",
        "id": 238152128,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657296
    },
    {
        "content": "<p>[slack] &lt;Simon Welker&gt; use StaticArrays where in particular? as the type of my <code>u0</code>?</p>",
        "id": 238152131,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657297
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; &gt;  okay, if the graph compilation is done then it should be pretty good (sans the graph compile time)<br>\nYes, with tape compilation it's not so slow, but still I don't understand why the gradients don't match. There's no theoretical reason why that should be the case, afaik.</p>",
        "id": 238152132,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657297
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes as <code>u0</code></p>",
        "id": 238152142,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657301
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; since Vector{StaticArray} is equivalent to a Matrix</p>",
        "id": 238152167,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657309
    },
    {
        "content": "<p>[slack] &lt;Simon Welker&gt; TIL <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 238152213,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657321
    },
    {
        "content": "<p>[slack] &lt;Simon Welker&gt; will do, thanks a lot!</p>",
        "id": 238152219,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657322
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; are there branches in your rhs?</p>",
        "id": 238152237,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657328
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; np</p>",
        "id": 238152254,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657333
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I don't think so....? There's <code>IfElse</code> uses.</p>",
        "id": 238152290,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657352
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah they are bitwise the same because static arrays store inline, so you can <code>reinterpret</code> and change the representation between them without changing the memory. So if you push static arrays into a <code>sizehint!</code> ed vector of staticarrays then it's the same as just filling a matrix.</p>",
        "id": 238152378,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657376
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; for piecewise functions</p>",
        "id": 238152382,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657377
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yeah that would do it</p>",
        "id": 238152436,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657393
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; ReverseDiff won't recognize IfElse</p>",
        "id": 238152447,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657401
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I think that would kill it</p>",
        "id": 238152457,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657404
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; we need MTK-side VJPs <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 238152471,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657409
    },
    {
        "content": "<p>[slack] &lt;Simon Welker&gt; and DiffEq's implementation for saving does the <code>sizehint!</code>ing for me?</p>",
        "id": 238152484,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657418
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it has a sizehint in there, yes./</p>",
        "id": 238152528,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657434
    },
    {
        "content": "<p>[slack] &lt;Simon Welker&gt; cool <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 238152535,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657441
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Julia also naturally does 2^n growing so that it's amortized O(1)</p>",
        "id": 238152563,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657454
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; oh</p>",
        "id": 238152674,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657484
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; so I should just stick to forward diff, then</p>",
        "id": 238152738,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657510
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>IfElse</code> is a branch, MTK has special handling for it, ReverseDiff does not.</p>",
        "id": 238152745,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657512
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I mean, that's fine for now</p>",
        "id": 238152756,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657518
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; oh I need to check if <code>modelingtoolkitize</code> works now, I dumped <code>DEDataArray</code> so maybe...</p>",
        "id": 238152848,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657557
    },
    {
        "content": "<p>[slack] &lt;Simon Welker&gt; either I did something wrong or <code>DiffEqNoiseProcess</code> doesn't like StaticArrays:</p>\n<div class=\"codehilite\" data-code-language=\"error\"><pre><span></span><code>Stacktrace:\n  [1] setindex!(a::SVector{4, Float64}, value::Float64, i::Int64)\n    @ StaticArrays ~/.julia/packages/StaticArrays/WCSXd/src/indexing.jl:3\n  [2] macro expansion\n    @ ~/.julia/packages/StaticArrays/WCSXd/src/arraymath.jl:105 [inlined]\n  [3] _fill!\n    @ ~/.julia/packages/StaticArrays/WCSXd/src/arraymath.jl:100 [inlined]\n  [4] fill!\n    @ ~/.julia/packages/StaticArrays/WCSXd/src/arraymath.jl:99 [inlined]\n  [5] setup_next_step!\n    @ ~/.julia/packages/DiffEqNoiseProcess/5nMSA/src/noise_interfaces/noise_process_interface.jl:62 [inlined]\n  [6] setup_next_step!\n    @ ~/.julia/packages/StochasticDiffEq/qg3yM/src/integrators/integrator_utils.jl:2 [inlined]\n  [7] __init(_prob::SciMLBase.SDEProblem{SVector{4, Float64}, Tuple{Float64, Float64}, true, Tuple{Main.CMInject.var\"#1#2\"{Float64, Main.CMInject.RegularGrid{2, 3, Float64, LinearAlgebra.Adjoint{Float64, Matrix{Float64}}}, Vector{Float64}}, Int64, Float64, Float64, Float64, Float64}, Nothing, SciMLBase.SDEFunction{true, typeof(Main.CMInject.stokesdirect!), typeof(Main.CMInject.ahmadidirect!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, typeof(Main.CMInject.ahmadidirect!), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Nothing}, alg::StochasticDiffEq.EulerHeun, timeseries_init::Vector{Any}, ts_init::Vector{Any}, ks_init::Type, recompile::Type{Val{true}}; saveat::Tuple{}, tstops::Tuple{}, d_discontinuities::Tuple{}, save_idxs::Nothing, save_everystep::Bool, save_noise::Bool, save_on::Bool, save_start::Bool, save_end::Nothing, callback::Nothing, dense::Bool, calck::Bool, dt::Float64, adaptive::Bool, gamma::Int64, abstol::Nothing, reltol::Nothing, qmax::Int64, qmin::Int64, qoldinit::Int64, fullnormalize::Bool, failfactor::Int64, beta2::Int64, beta1::Int64, delta::Rational{Int64}, maxiters::Int64, dtmax::Float64, dtmin::Float64, internalnorm::typeof(DiffEqBase.ODE_DEFAULT_NORM), isoutofdomain::typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), unstable_check::Main.CMInject.var\"#14#15\", verbose::Bool, force_dtmin::Bool, timeseries_errors::Bool, dense_errors::Bool, advance_to_tstop::Bool, stop_at_next_tstop::Bool, initialize_save::Bool, progress::Bool, progress_steps::Int64, progress_name::String, progress_message::typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), userdata::Nothing, initialize_integrator::Bool, seed::UInt64, alias_u0::Bool, alias_jumps::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n    @ StochasticDiffEq ~/.julia/packages/StochasticDiffEq/qg3yM/src/solve.jl:571\n  [8] #__solve#100\n    @ ~/.julia/packages/StochasticDiffEq/qg3yM/src/solve.jl:6 [inlined]\n  [9] #solve_call#56\n    @ ~/.julia/packages/DiffEqBase/GmecW/src/solve.jl:61 [inlined]\n [10] #solve_up#58\n    @ ~/.julia/packages/DiffEqBase/GmecW/src/solve.jl:82 [inlined]\n [11] #solve#57\n    @ ~/.julia/packages/DiffEqBase/GmecW/src/solve.jl:70 [inlined]\n [12] example_solve()\n    @ Main.CMInject ~/Documents/CMInject/src/CMInject.jl:200\n [13] top-level scope```\n</code></pre></div>",
        "id": 238154085,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657943
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Nope... <code>modelingtoolkitize</code>  still doesn't work with <code>ComponentArray</code> .</p>",
        "id": 238154141,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657960
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you can't use setindex with static arrays</p>",
        "id": 238154191,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657966
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah, never worked on that one</p>",
        "id": 238154265,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657992
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; open an issue?</p>",
        "id": 238154273,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657994
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that would be good to fix.</p>",
        "id": 238154278,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620657997
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; on ComponentArrays?</p>",
        "id": 238154289,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620658001
    },
    {
        "content": "<p>[slack] &lt;Simon Welker&gt; I didn't, at least not explicitly -- <code>DiffEqNoiseProcess</code> seems to want to <code>setindex!</code>  in <code>setup_next_step!</code></p>",
        "id": 238154352,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620658029
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; <a href=\"https://github.com/jonniedie/ComponentArrays.jl/issues/16\">https://github.com/jonniedie/ComponentArrays.jl/issues/16</a></p>",
        "id": 238154365,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620658033
    },
    {
        "content": "<p>[slack] &lt;Simon Welker&gt; I just swapped out my <code>u0</code> by a equivalent SVector</p>",
        "id": 238154468,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620658059
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I think we need integration on the MTK side</p>",
        "id": 238154469,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620658060
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Ok, I'll make an MTK issue.</p>",
        "id": 238154490,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620658073
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @frankschae do we have tests on this?</p>",
        "id": 238154495,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620658074
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Is there a reason why ODESystem uses the Vector type specifically and not something more generic?</p>",
        "id": 238154794,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620658170
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It doesn't need to use something more generic because it's generating the code</p>",
        "id": 238154935,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620658212
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; so it uses something that is compatible with most linear algebra routines.</p>",
        "id": 238154973,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620658224
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>modelingtoolkitize</code> could be made more generic though</p>",
        "id": 238155024,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620658240
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; <a href=\"https://github.com/SciML/ModelingToolkit.jl/issues/1009\">https://github.com/SciML/ModelingToolkit.jl/issues/1009</a></p>",
        "id": 238156368,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620658736
    },
    {
        "content": "<p>[slack] &lt;frankschae&gt; @Simon Welker Did you rewrite <code>f</code> and <code>g</code> to the oop form? I guess we could have some more tests.. There is <a href=\"https://github.com/SciML/StochasticDiffEq.jl/blob/fec328e1bff42dd2faea226a2a7e4fc910756b9b/test/static_array_tests.jl#L23\">https://github.com/SciML/StochasticDiffEq.jl/blob/fec328e1bff42dd2faea226a2a7e4fc910756b9b/test/static_array_tests.jl#L23</a>. Maybe actually @isaacsas knows better (There was this issue <a href=\"https://github.com/SciML/StochasticDiffEq.jl/issues/365\">https://github.com/SciML/StochasticDiffEq.jl/issues/365</a> with a fix merged on static arrays in DiffEqNoiseProcess).</p>",
        "id": 238170930,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620663895
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; No idea on that error. There was still something funny going on though since there seemed (to me) to be too many allocations even with that fix (though it helped a lot). Somewhere regular arrays were being allocated each step I think even with StaticArrays.</p>",
        "id": 238171812,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620664249
    },
    {
        "content": "<p>[slack] &lt;Simon Welker&gt; @frankschae no I haven't rewritten it as oop, should I? I can do that tomorrow if it's useful for testing purposes. But doing that will overall make for the same number of allocations, just in another part of the program, right?</p>",
        "id": 238178414,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620666884
    },
    {
        "content": "<p>[slack] &lt;frankschae&gt; If you use it as in your code above, I think StochasticDiffEq will default to<br>\n<code>WienerProcess!(..)</code><br>\nas the noise process, which uses then inplace functions. Do I get it then correctly that you'd like to use static arrays for the noise but normal arrays for the states?</p>",
        "id": 238180459,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620667673
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the other thing is that, StochasticDiffEq had a regression show up in the latest benchmarks and this might be an indicator of that.</p>",
        "id": 238180628,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620667726
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Oh I see, so this kind of issue is the real deal. It is nice to see the places where there is work to be done <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>. Thanks for the extended technical discussion @Brian Groenke and @chrisrackauckas. I can see the challenge of trying to adjust the solver to stiffness in both the time and spatial domains. I hope you find someone good who can work on it.</p>",
        "id": 238181409,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620668016
    },
    {
        "content": "<p>[slack] &lt;Simon Welker&gt; @frankschae My overall goal is just avoiding allocations wherever I can (and wherever it's useful). There's no particular need for me to use static arrays for noise (=return values of <code>g</code>?) while using normal arrays for the states (=return values of <code>f</code>?). I'm currently just trying to use static arrays as <code>u0</code> so the solution matrix can be preallocated (so I'd save the nsteps allocations, replacing them by one larger allocation).</p>",
        "id": 238181684,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620668128
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; are the allocations effecting the time here?</p>",
        "id": 238181786,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620668167
    },
    {
        "content": "<p>[slack] &lt;Simon Welker&gt; hmm, I'm not sure. I'd assume so esp. since I want to run this as a large ensemble simulation (10k+). Is there a way for me to tell, without running code for a fully nonallocating version?</p>",
        "id": 238182208,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620668356
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Profile it</p>",
        "id": 238182240,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620668374
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://www.youtube.com/watch?v=h-xVBD2Pk9o\">https://www.youtube.com/watch?v=h-xVBD2Pk9o</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"h-xVBD2Pk9o\" href=\"https://www.youtube.com/watch?v=h-xVBD2Pk9o\"><img src=\"https://uploads.zulipusercontent.net/877631e616d0b155646250e76c2f127ca93c6feb/68747470733a2f2f692e7974696d672e636f6d2f76692f682d7856424432506b396f2f64656661756c742e6a7067\"></a></div>",
        "id": 238182303,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620668395
    },
    {
        "content": "<p>[slack] &lt;Simon Welker&gt; cheers, I'll try that soon. I was so far only looking at <code>@btime</code></p>",
        "id": 238182430,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620668432
    },
    {
        "content": "<p>[slack] &lt;Simon Welker&gt; I guess even if it isn't worth it for my problem, generally allowing for this preallocation (e.g. via SArrays) could be useful for other problems?</p>",
        "id": 238182578,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620668493
    },
    {
        "content": "<p>[slack] &lt;Simon Welker&gt; (ah it's from 18337 -- I'm only on lecture 7 so far :D)</p>",
        "id": 238182782,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620668577
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you can pre-allocate by passing in more arguments, but it's undocumented because I want to change and improve that interface.</p>",
        "id": 238184721,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620669324
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; LabelledArrays and ComponentArrays have some performance regressions for some of my test problems after the DiffEqBC-&gt;FastBroadcast switch. Writing a method for <code>FastBroadcast.use_fast_broadcast</code> fixes it, though. Is this something I should be opting into for ComponentArrays? Or is this going to be handled on the DifferentialEquations side?</p>",
        "id": 238193108,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620672611
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @yingbo_ma @elrodc how do we recover the opt-ins that were in</p>",
        "id": 238197935,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620674651
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; DiffEqBase?</p>",
        "id": 238197946,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620674656
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/SciML/DiffEqBase.jl/commit/d11657f5811d434d1fb20f08c2b083f7e51f820c#diff-c0d74f111e38c6e79d0993cdb7e1de8f3831fe04af63e9c62b57d043cf858274L14-L19\">https://github.com/SciML/DiffEqBase.jl/commit/d11657f5811d434d1fb20f08c2b083f7e51f820c#diff-c0d74f111e38c6e79d0993cdb7e1de8f3831fe04af63e9c62b57d043cf858274L14-L19</a></p>",
        "id": 238198058,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620674719
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and ComponentArrays had one</p>",
        "id": 238198065,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620674724
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; <code>use_fast_broadcast</code> is not safe, so setting it to true by the developer manually would be good.</p>",
        "id": 238198086,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620674734
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; I don’t think we should do opt-in</p>",
        "id": 238198096,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620674744
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what about relying on the fast_scalar_indexing trait?</p>",
        "id": 238198213,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620674812
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; ```julia&gt; a = rand(5); b = @views a[1:2:end];</p>\n<p>julia&gt; ArrayInterface.fast_scalar_indexing(b)<br>\ntrue```</p>",
        "id": 238199329,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620675355
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Not really.</p>",
        "id": 238199385,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620675365
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Also, we don’t know if the broadcast has fast scalar index</p>",
        "id": 238199497,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620675424
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; I am not sure if there’s a good proxy for <code>use_fast_broadcast</code> . This decision should be done by the developer of the package.</p>",
        "id": 238199760,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620675544
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Also, broadcast is very customizable, and FastBroadcast is very rigid. We should not just override custom broadcasting behavior in <code>@..</code></p>",
        "id": 238200106,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620675718
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; I think <code>@..</code> on <code>b</code> should be fine, even if it's not a <code>fast_scalar_indexing</code>?</p>",
        "id": 238202623,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620676840
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; I agree though that we don't want to override custom broadcasting behavior though. If someone went through the trouble of customizing it for <code>SparseArrays</code> or <code>StaticArrays</code>, odds are we should stick with their implementation.</p>",
        "id": 238202754,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620676899
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; Is there a standard or easy way to store and extract the times (or timestep indices) when callbacks get triggered, and have this available in the resulting <code>ODESolution</code>?</p>",
        "id": 238261917,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620717274
    },
    {
        "content": "<p>[slack] &lt;Lütfullah Tomak&gt; What is <code>integ.uprev2</code> stands for in integrators? When I use Dual numbers, I want mostly partials with event boundaries are regarded but sometimes I need nondirectional partials at the event location too. Can I assume <code>integ.uprev2</code> is the state without nondirectional partials? My quick check says it looks like but I want to confirm.</p>",
        "id": 238280692,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620727130
    },
    {
        "content": "<p>[slack] &lt;Lütfullah Tomak&gt; I cannot see anywhere they are stored. You can add an empty vector to parameters, then each time you fall into an <code>affect!</code> push the time of the event to this vector.</p>",
        "id": 238282209,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620727928
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It's a second timepoint back used in some extrapolation schemes</p>",
        "id": 238283904,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620728854
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It matches the type of u</p>",
        "id": 238283914,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620728862
    },
    {
        "content": "<p>[slack] &lt;iv.borissov&gt; Hi, @chrisrackauckas. Could you have a look at the issue, when you have time <a href=\"https://github.com/SciML/DiffEqCallbacks.jl/issues/30#issuecomment-828788228\">https://github.com/SciML/DiffEqCallbacks.jl/issues/30#issuecomment-828788228</a> The topic is old and I know there is no general solution for SavingCallback+Event , but maybe you can figure out what is the issue with the proposed workaround</p>",
        "id": 238284309,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620729072
    },
    {
        "content": "<p>[slack] &lt;Lütfullah Tomak&gt; Thanks @chrisrackauckas. I have seen it wrong, it is not what I want.</p>",
        "id": 238286896,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620730509
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; Yeah that's one way, thanks. I feel like there should be something built in for this though. I ended up just tracking the time index in <code>affect!</code> by updating my <code>integrator.u</code> (which is a <code>DEDataVector</code> tracking some other data as well, so essentially <code>integrator.u.event_trigger_idx = length(integrator.sol.t)</code> ) and just taking the unique values in the resulting <code>[u.event_trigger_idx for u in solution]</code>.</p>",
        "id": 238296527,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620735505
    },
    {
        "content": "<p>[slack] &lt;atiyo ghosh&gt; Are there any Julia packages of choice for differential equation solutions via spectral methods? <a href=\"https://github.com/SciML/DiffEqApproxFun.jl\">https://github.com/SciML/DiffEqApproxFun.jl</a> is no longer in active development. I was looking at <a href=\"https://github.com/DedalusProject/dedalus\">https://github.com/DedalusProject/dedalus</a> in Python land and thinking that something similar in Julia would be awesome.</p>",
        "id": 238327136,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620746890
    },
    {
        "content": "<p>[slack] &lt;Lütfullah Tomak&gt; How the continuous callback conditions is stored? I have a callback set with some continuous callbacks but their condition functions differ in returning value type. Does this cause type unstability or hurt performance?</p>",
        "id": 238327276,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620746947
    },
    {
        "content": "<p>[slack] &lt;atiyo ghosh&gt; Actually ApproxFun seems pretty well-featured.</p>",
        "id": 238333508,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620748808
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; That would be cool, never actually heard of canard explosions, but if you have the code for it and that model I'd love to check it out. Tried to figure out what they were, and had a look at this one: <a href=\"http://www.scholarpedia.org/article/Canards\">http://www.scholarpedia.org/article/Canards</a> Is that a good summary of the phenomena (or do you have some other reference you'd recommend)?</p>\n<p>Concerning the API. I think the probably is that it is quite heavy, especially for someone who is not very familiar with this kind of stuff. Generally I often have this problem with the BifurcationKit docs (I guess one problem is that this is inherently not that simple, and that it is a powerful package with rather large capabilities). Things sometimes gets rather overwhelming, e.g. following <a href=\"https://rveltz.github.io/BifurcationKit.jl/dev/tutorials3/#Brusselator-1d-(automatic)-1\">https://rveltz.github.io/BifurcationKit.jl/dev/tutorials3/#Brusselator-1d-(automatic)-1</a> to get some help with periodic orbits, there's a lot of stuff there! Initially I was just looking for something very simple (going from a system function+jacobian and a parameter range, to a plot of the bifurcation points and the periodic orbits). But looking through that tutorial, I'm not even really sure what all the plots mean, and what their output are (in this case I'm more interested in the non-spatial case, which probably is a bit different).</p>\n<p>I wouldn't be to worried, the package is awesome, and all of the information is there. It is just that in cases like this, it was just easier not to go ahead and make the periodic orbits, rather than trying to tackle the documentation (but if you wanted to expand the tutorials, some very simple examples of e.g. bifurcation diagrams for simple models, would be useful).</p>",
        "id": 238337273,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620750157
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; ApproxFun is well-featured and you can just use it with DiffEq  without the connection package now.</p>",
        "id": 238365574,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620760003
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://benchmarks.sciml.ai/html/MOLPDE/burgers_spectral_wpd.html\">https://benchmarks.sciml.ai/html/MOLPDE/burgers_spectral_wpd.html</a></p>",
        "id": 238365638,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620760029
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it won't store it, that should be fine.</p>",
        "id": 238365684,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620760050
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I have a customized Newton's method implementation that I made to resolve the temperature/enthalpy conservation law for freezing curves... and I had to add a backtracking line search to make it work (have to avoid jumping over the discontinuity), so I figured the same principle could/should be applied to an implicit integrator.</p>",
        "id": 238373944,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620763593
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it could/should</p>",
        "id": 238374012,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620763618
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I was just talking to @yingbo_ma about <a href=\"https://github.com/SciML/OrdinaryDiffEq.jl/issues/1399\">https://github.com/SciML/OrdinaryDiffEq.jl/issues/1399</a> the other day./</p>",
        "id": 238374044,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620763642
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Is there a way to access the integrator from a <code>ManifoldProjection</code> callback? Could be useful to have access to <code>f</code> if it's a callable struct with relevant fields... but then again I guess <code>g</code> could also be a callable struct.</p>",
        "id": 238393220,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620773345
    },
    {
        "content": "<p>[slack] &lt;wilwxk&gt; Can someone explain me what is happening here ?<br>\nI know that <code>@btime</code> is better for benchmark but <code>@time</code> is expressing better the real time. It gives the same results always, is this something related to how ModelingToolkit works or I'm missing something more fundamental ?: <a href=\"https://files.slack.com/files-pri/T68168MUP-F021MUSQVUK/download/screenshot_20210512_010609.png\">https://files.slack.com/files-pri/T68168MUP-F021MUSQVUK/download/screenshot_20210512_010609.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F021MUSQVUK/download/screenshot_20210512_010609.png\"><img src=\"https://uploads.zulipusercontent.net/5ce4b3c21818a10a103281f119dd830e24265904/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d463032314d55535156554b2f646f776e6c6f61642f73637265656e73686f745f32303231303531325f3031303630392e706e67\"></a></div>",
        "id": 238418632,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620792582
    },
    {
        "content": "<p>[slack] &lt;wilwxk&gt; <a href=\"https://files.slack.com/files-pri/T68168MUP-F022BGRSUJC/download/screenshot_20210512_010537.png\">https://files.slack.com/files-pri/T68168MUP-F022BGRSUJC/download/screenshot_20210512_010537.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F022BGRSUJC/download/screenshot_20210512_010537.png\"><img src=\"https://uploads.zulipusercontent.net/c4814ab0d50d3de54e811c3d81b6fa176690dd50/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d4630323242475253554a432f646f776e6c6f61642f73637265656e73686f745f32303231303531325f3031303533372e706e67\"></a></div>",
        "id": 238418633,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620792582
    },
    {
        "content": "<p>[slack] &lt;wilwxk&gt; Can someone explain me what is happening here ?<br>\nI know that <code>@btime</code> is better for benchmark but <code>@time</code> is expressing better the real time. It gives the same results always, is this something related to how ModelingToolkit works or am I missing something more fundamental ?</p>",
        "id": 238418680,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620792609
    },
    {
        "content": "<p>[slack] &lt;wilwxk&gt; Can someone explain me what is happening here ?<br>\nI know that <code>@btime</code> is better for benchmark but <code>@time</code> is expressing better the real time. It gives the similar results even after second run, is this something related to how ModelingToolkit works or am I missing something more fundamental ?</p>",
        "id": 238418736,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620792690
    },
    {
        "content": "<p>[slack] &lt;wilwxk&gt; Can someone explain me what is happening here ?<br>\nI know that <code>@btime</code> is better for benchmark but <code>@time</code> is expressing better the real time. It gives the similar results even after second run. Is this something related to how ModelingToolkit works or am I missing something more fundamental ?</p>",
        "id": 238418750,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620792718
    },
    {
        "content": "<p>[slack] &lt;wilwxk&gt; Can someone explain me what is happening here ?<br>\nI know that <code>@btime</code> is better for benchmark but <code>@time</code> is expressing better the real time. It gives similar results even after second run. Is this something related to how ModelingToolkit works or am I missing something more fundamental ?</p>",
        "id": 238418807,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620792756
    },
    {
        "content": "<p>[slack] &lt;wilwxk&gt; I know that <code>@btime</code> is better for benchmark but <code>@time</code> is expressing better the real time. It gives similar results even after second run.<br>\nWhy <code>solve</code> takes a lot of time when I declare the same ODESystem again ? Shoudnt it be compiled and fine after the first run ? Is this something related to how ModelingToolkit works or am I missing something more fundamental ?</p>",
        "id": 238419027,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620792990
    },
    {
        "content": "<p>[slack] &lt;wilwxk&gt; I know that <code>@btime</code> is better for benchmark but <code>@time</code> is expressing better the real time. It gives similar results even after second run.<br>\nWhy <code>solve</code> takes more time with a newly declared problem than a already solved problem if they are exactly the same ? Shoudnt it be compiled and fine after the first run ? Is this something related to how ModelingToolkit works or am I missing something more fundamental ?</p>",
        "id": 238419132,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620793121
    },
    {
        "content": "<p>[slack] &lt;wilwxk&gt; I know that <code>@btime</code> is better for benchmark but <code>@time</code> is expressing better the real time. It gives similar results even after second run.<br>\nWhy <code>solve</code> takes more time with a newly declared problem than a already solved problem if they are exactly the same ? Shoudnt it be compiled and fine after the first run ? Is this related to how ModelingToolkit works or am I missing something more fundamental ?</p>",
        "id": 238419230,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620793245
    },
    {
        "content": "<p>[slack] &lt;mason.protter&gt; Given that we have no idea what the code is that you're running, anything anyone can say would be a shot-in-the-dark guess</p>",
        "id": 238421941,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620795965
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I'm not 100% sure, but I think ModelingToolkit does some stuff under the hood to convert the ODESystem into an ODEFunction. I wouldn't be surprised if it has to create runtime generated functions, which would be invalidated and recompiled on each construction of ODEProblem. Have you tried using <code>remake</code> instead?</p>",
        "id": 238429905,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620802736
    },
    {
        "content": "<p>[slack] &lt;Pieter Gunnink&gt; When using <code>ModellingToolkit.jl</code> , is there a way for a solver algorithm to know about the ordering of the variables? I have a custom solver step that I need to inject, which needs to know which variable is which. To be more precise, I have a (N,3) problem, with 3 cartesian components and I want to use a normalized Euler-Heun step, such that the norm of the individual vectors is 1. This cannot be implemented with a Callback, because I need to normalize also the half-step inside the Euler-Heun algorithm. I have <code>modellingtoolkit.jl</code> make a 3N problem, which works well, but in order to normalize I need to be sure that the ordering does not get switched around (or know the ordering). Is the ordering available inside <code>perform_step!(integrator, cache)</code>?</p>",
        "id": 238435120,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620805942
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; The section Canard Cycles and their Explosion of <a href=\"http://www.scholarpedia.org/article/Canards\">http://www.scholarpedia.org/article/Canards</a> is a good start.</p>\n<blockquote>\n<p>but if you wanted to expand the tutorials, some very simple examples of e.g. bifurcation diagrams for simple models, would be useful<br>\nI added a section for ODE in the tutorials. The issue is that ODE requires parameters different from PDE. So I guess it would be simpler if I had a BifODEProblem and a BifPDEProblem and dispatch on those.</p>\n</blockquote>\n<p>The real question is if you think this is too overwhelming :<a href=\"https://rveltz.github.io/BifurcationKit.jl/dev/tutorialsODE/#Branch-of-periodic-orbits-with-finite-differences-1\">https://rveltz.github.io/BifurcationKit.jl/dev/tutorialsODE/#Branch-of-periodic-orbits-with-finite-differences-1</a></p>",
        "id": 238441322,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620809224
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Code for canard explosion:<br>\n<a href=\"https://gist.github.com/rveltz/15f09eab9a325b069a3239be0713e803\">https://gist.github.com/rveltz/15f09eab9a325b069a3239be0713e803</a></p>\n<p>You have to zoom a lot to see the explosion</p>\n<p>Note that this is a crude computation. For canard explosion, you need an adaptive algo. Plus the period grows very quickly which is bad for backward euler. You could use a shooting to get better results (I guess).</p>",
        "id": 238442197,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620809695
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; There must be a tiny parameter in your model</p>",
        "id": 238445012,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620811244
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; MTK is building new functions. You don't want to recompile each time.</p>",
        "id": 238450928,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620814682
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Use the varmap_to_vars</p>",
        "id": 238451019,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620814730
    },
    {
        "content": "<p>[slack] &lt;wilwxk&gt; &lt;@U8D9768Q6&gt; Im testing the &lt;<a href=\"https://github.com/SciML/ModelingToolkit.jl|second\">https://github.com/SciML/ModelingToolkit.jl|second</a> example&gt;  in the readme of modelingtoolkit.<br>\n&lt;@U01H36BUDJB&gt; I tested with <code>remake</code> , I could create the problem but the solve failed. Is there any detailed tutorial there ?<br>\nSo, its creating the differential equation system from the model again ? If I extract the function with <code>generate_function(odesys)</code> should it work faster ?: <a href=\"https://files.slack.com/files-pri/T68168MUP-F021KUML44V/download/screenshot_20210512_084903.png\">https://files.slack.com/files-pri/T68168MUP-F021KUML44V/download/screenshot_20210512_084903.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F021KUML44V/download/screenshot_20210512_084903.png\"><img src=\"https://uploads.zulipusercontent.net/2dc2723bf2ddef15dda28a4c1833b51c371f4ca8/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d463032314b554d4c3434562f646f776e6c6f61642f73637265656e73686f745f32303231303531325f3038343930332e706e67\"></a></div>",
        "id": 238461243,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620820589
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I don't get your question</p>",
        "id": 238463025,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620821524
    },
    {
        "content": "<p>[slack] &lt;wilwxk&gt; I just didn't understand the part of MKT building new functions,  you are talking about the function <code>f(u0, p, t)</code> needed to create any generic new OdeProblem or you are talking about some internal functions ?<br>\nAnd to make it faster, is <code>remake</code> the best solution if I only want to change parameters and initial state and run it again ?</p>",
        "id": 238464708,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620822433
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yes, when you build a new <code>ODEProblem</code> from MTK it creates a new function. You want to just do that once, and then just <code>remake</code> with new parameters.</p>",
        "id": 238464792,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620822480
    },
    {
        "content": "<p>[slack] &lt;wilwxk&gt; Got it, just one more question, when I save <code>f = eval(generate_function(odesys)[2])</code> and use it with ODEProblem repeatedly, is it creating a new raw   <code>f(u0, p, t)</code> and bypassing the MTK build time ?</p>",
        "id": 238466455,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620823296
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that would bypass it</p>",
        "id": 238466497,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620823318
    },
    {
        "content": "<p>[slack] &lt;Pieter Gunnink&gt; Thanks, I see it now. When is the ordering determined actually? When you run <code>ODEProblem()</code>  or before?</p>",
        "id": 238476823,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620827481
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; for a linear system <code>du = A*u</code> is the condition number of A a \"measure\" of the stiffness of the system?</p>",
        "id": 238476895,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620827514
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes</p>",
        "id": 238477016,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620827546
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; See <a href=\"https://www.youtube.com/watch?v=FENK1SDvPiA\">https://www.youtube.com/watch?v=FENK1SDvPiA</a> for a much more precise discussion of the property.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"FENK1SDvPiA\" href=\"https://www.youtube.com/watch?v=FENK1SDvPiA\"><img src=\"https://uploads.zulipusercontent.net/dee8b5ed058ded8ac71037117402d73e64482942/68747470733a2f2f692e7974696d672e636f6d2f76692f46454e4b315344765069412f64656661756c742e6a7067\"></a></div>",
        "id": 238477059,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620827567
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It's determined before, by the ordering of the symbolic <code>states(sys)</code> vector.</p>",
        "id": 238477108,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620827588
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; awesome, thanks!</p>",
        "id": 238477324,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620827672
    },
    {
        "content": "<p>[slack] &lt;Pieter Gunnink&gt; I see, thanks!</p>",
        "id": 238477983,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620827932
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; That link is better yes, overlooked it. Yes, the PDE things might have some to do with it, I've never really worked much with PDE, so usually get out of my depth very quickly there.</p>\n<p>Thanks for teh Canard code, its great. I get a <code>AssertionError: The provided index does not refer to a Hopf Point</code> for the last thing (<code>br_po, utrap = cotninuation(...</code>). It is after I switch the third argument from <code>3</code> to <code>2</code>, I will have a look to see if I can figure it out.</p>\n<p>Also, what do you mean with there being a tiny paraemter in the model? Sounds like useful information!</p>",
        "id": 238491867,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620832819
    },
    {
        "content": "<p>[slack] &lt;JeremyB&gt; Hey ! I started using DifferentialsEquations recently and I have some small questions : I am trying to solve a simple ODE (a ball in a particular potential) but the potential I need to use is given to me as a .npy file. My workaround has been for now to interpolate the given array and compute the gradient in the derivative function.</p>\n<div class=\"codehilite\" data-code-language=\"const\"><pre><span></span><code>const tend = 1e-5\nconst tstep = 5e-8\n\ntrap = npzread(\"somefile.npy\")\nx = npzread(\"somefile2.npy\")\nz = npzread(\"somefile3.npy\")\n\n# linear interpolation\ninterpolated_potential = LinearInterpolation((x, z), trap,extrapolation_bc=0)\n\nfunction evolve(dz,z,p,t)\n    p₁, p₂, q₁, q₂ = z[1], z[2], z[3], z[4]\n\n    dp₁,dp₂ = -Interpolations.gradient(interpolated_potential,q₁,q₂)\n    dq₁ = p₁\n    dq₂ = p₂\n    dz .= [dp₁, dp₂, dq₁, dq₂]\n    return nothing\nend\n\nprobl_func = ODEFunction(evolve,syms=[:vx,:vy,:x,:y])\n\nfunction condition(u,t,integrator)\n    u[3]&gt;=x[end] || u[3]&lt;=x[1] || u[4]&gt;=z[end] || u[4]&lt;=z[1]\nend\n\nfunction affect!(integrator)\n    terminate!(integrator)\nend\n\ncb = DiscreteCallback(condition,affect!)\n\nu₀ = [randvelocity()...,randpos()...]\nprobl = ODEProblem(probl_func, u₀, (tstart, tend))\nsol = solve(probl, Vern9(),dt=tstep, abstol=1e-6, reltol=1e-6,adaptive=false,callback = cb)```\nHowever I run in some issues: When/If the ball is leaving the interpolated region, it throws an error. I tried to catch it with the callback, but for some reason, for some initial conditions it still crashes. Also I got a lot of allocations from the call to gradient in the derivative function it seems...\nIs there a better way to deal with this problem ?\n</code></pre></div>",
        "id": 238614944,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620909210
    },
    {
        "content": "<p>[slack] &lt;contradict&gt; You might try <code>isoutofdomain</code> <a href=\"https://diffeq.sciml.ai/stable/basics/common_solver_opts/#Miscellaneous\">https://diffeq.sciml.ai/stable/basics/common_solver_opts/#Miscellaneous</a> to prevent escape.</p>",
        "id": 238643662,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620922544
    },
    {
        "content": "<p>[slack] &lt;contradict&gt; What error do you get when it does escape?</p>",
        "id": 238644283,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620922880
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; When using <code>EnsembleProblem</code> with <code>EnsemebleThreads</code>, it works fine simulating my specific problem up to <del>100 trajectories (on 4 threads), but if I push that further to for example </del>1000 trajectories, it is much, much slower (as in, much more than an order of magnitude slower that I'd expect to see in the worst case). I assume this is an issue of memory management (I think solving my problems are allocating a fair bit of memory). Has anyone seen this kind of behaviour, or know what I could do to resolve it with the least amount of effort? Should I maybe look into multi-processing instead of multi-threaded?</p>",
        "id": 238702447,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620953420
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; the mistake is because br.bifpoint[2] is not a Hopf point</p>",
        "id": 238725380,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620974561
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; &gt;  Also, what do you mean with there being a tiny paraemter in the model?<br>\nThat’s my feeling from the simulation. However sometimes, this is burried in. the ODE. and requires specific investigation</p>",
        "id": 238725517,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620974684
    },
    {
        "content": "<p>[slack] &lt;Simon Welker&gt; I just had this happen as well -- to me it looks like I ran out of physical memory going from 1k to 10k trajectories, so my system was constantly swapping. I got around it by using <code>dense=false</code>, which saved enough memory for it to work for me</p>",
        "id": 238743037,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620986103
    },
    {
        "content": "<p>[slack] &lt;Simon Welker&gt; not sure if it's the same cause for you -- just something to try</p>",
        "id": 238743087,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620986134
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; Thanks @Simon Welker, I think you're right about the cause (although unfortunately in my case I need to keep the dense interpolation). <span aria-label=\"disappointed\" class=\"emoji emoji-1f61e\" role=\"img\" title=\"disappointed\">:disappointed:</span></p>",
        "id": 238753015,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620992280
    },
    {
        "content": "<p>[slack] &lt;Simon Welker&gt; if you're reducing the data after the ensemble simulation, maybe solving this in batches could help</p>",
        "id": 238753430,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620992463
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes, use <code>batch_size</code> and <code>reduction</code> in effective ways to keep the memory down.</p>",
        "id": 238765326,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1620998539
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; Hi. I am having trouble using <code>LsqFit.curve_fit</code> with and <code>ODEProblem</code>.</p>\n<p>Here is MWE:</p>\n<div class=\"codehilite\" data-code-language=\"#\"><pre><span></span><code>k = 0.5\nx₀_data = [0.0:0.1:1.0...]\nx_data = x₀_data * exp(k)\n\n# Models\n\nmodel_exp(x₀, β) = x₀ * exp(β[1] * 1.0)\n\nfunction model_ode(x₀, β)\n    function dudt!(du, u, p, t)\n        du[1] = p[1] * u[1]\n    end\n    tspan = (0.0, 1.0)\n    prob = ODEProblem(dudt!, [x₀], tspan, β)\n    sol = solve(prob)\n    return sol(1.0)[1]\nend\n\n# Ajuste model_exp\nfit_exp = curve_fit(model_exp, x₀_data, x_data, [0.0])\nfit_exp.param\n\n# Ajuste model_ode\nfit_ode = curve_fit(model_ode, x₀_data, x_data, [0.0])\nfit_ode.param```\nThe fit with `model_exp`works just fine, but the second fit, with `model_ode`, gives me the error\n\n```MethodError: no method matching zero(::Type{Vector{Float64}})\nClosest candidates are:\n  zero(::Union{Type{P}, P}) where P&lt;:Dates.Period at /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.6/Dates/src/periods.jl:53\n  zero(::AbstractAlgebra.MatrixElem{T} where T) at /Users/rrosa/.julia/packages/AbstractAlgebra/6JkeN/src/generic/Matrix.jl:232\n  zero(::AbstractAlgebra.MatrixElem{T} where T, ::AbstractAlgebra.Ring) at /Users/rrosa/.julia/packages/AbstractAlgebra/6JkeN/src/generic/Matrix.jl:232\n  ...```\n</code></pre></div>",
        "id": 238780363,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621004437
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; LsqFit is generally pretty bad... just use Optim instead <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 238780704,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621004554
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; But see how it's implemented in DiffEqParamEstim</p>",
        "id": 238780713,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621004561
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; Great, thanks! I will try with Optim!</p>",
        "id": 238780886,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621004633
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Did the UDE paper get published yet? And/or where is it in review?</p>",
        "id": 238781737,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621004964
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I have been sitting on the revisions for months because other papers have been getting written. Thanks for the reminder <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 238790104,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621008523
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; Ok, I got both working, <code>Optim</code>  and <code>LsqFit</code>. I had to broadcast with <code>curve_fit((x₀, β) -&gt; model_ode.(x₀, β), x₀_data, x_data, [0.0])</code>  to make it work. Thanks again!</p>",
        "id": 238790268,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621008595
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; More fundamental, what _is_ a \"tiny parameter\". From your statement, it seems like it is a term with a specific meaning (more than what is in the word). I've never heard the expression though, so if there's something to it it would be useful to know! (especially if my model contains one of these...)</p>",
        "id": 238817410,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621020578
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @yingbo_ma @isaacsas @SebastianM-C I added a help portion in the new benchmarks for how to see the artifacts in the PR:</p>\n<p><a href=\"https://github.com/SciML/SciMLBenchmarks.jl#inspecting-benchmark-results\">https://github.com/SciML/SciMLBenchmarks.jl#inspecting-benchmark-results</a></p>",
        "id": 238891533,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621079025
    },
    {
        "content": "<p>[slack] &lt;SebastianM-C&gt; @chrisrackauckas Are there any tutorials / resources for using buildkite with julia like you have in SciMLBenchmarks or was it a custom made thing?</p>",
        "id": 238891974,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621079459
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It was a custom made thing</p>",
        "id": 238891989,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621079483
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Though I want to get it packaged up and used on SciMLTutorials, TuringTutorials, FluxBench, etc.</p>",
        "id": 238892004,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621079506
    },
    {
        "content": "<p>General diffeq question: what'd be the best way in Julia to solve the diffusion equation in 2 or more dimensions? <br>\n<em>a la</em> <a href=\"https://upload.wikimedia.org/wikipedia/commons/0/01/Heat.gif\">https://upload.wikimedia.org/wikipedia/commons/0/01/Heat.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"https://upload.wikimedia.org/wikipedia/commons/0/01/Heat.gif\"><img src=\"https://uploads.zulipusercontent.net/6c3e9e520508bb9efc596f82c3d47a75e8b317f8/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f302f30312f486561742e676966\"></a></div>",
        "id": 238910301,
        "sender_full_name": "Brenhin Keller",
        "timestamp": 1621097238
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Right now probably <a href=\"https://www.stochasticlifestyle.com/solving-systems-stochastic-pdes-using-gpus-julia/\">https://www.stochasticlifestyle.com/solving-systems-stochastic-pdes-using-gpus-julia/</a></p>",
        "id": 238910460,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621097397
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; with some of the sparsity handling details in <a href=\"https://diffeq.sciml.ai/stable/tutorials/advanced_ode_example/#Automatic-Sparsity-Detection\">https://diffeq.sciml.ai/stable/tutorials/advanced_ode_example/#Automatic-Sparsity-Detection</a></p>",
        "id": 238910519,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621097417
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; all of those examples are reaction-diffusion equations.</p>",
        "id": 238910540,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621097432
    },
    {
        "content": "<p>[slack] &lt;cbkeller&gt; Cool, thanks!</p>",
        "id": 238910691,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621097622
    },
    {
        "content": "<p>[slack] &lt;ashton.bradley&gt; is there a new issue with Robin b.c.? The example errors:  <a href=\"https://github.com/SciML/DiffEqOperators.jl/issues/396\">https://github.com/SciML/DiffEqOperators.jl/issues/396</a></p>",
        "id": 238966031,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621160059
    },
    {
        "content": "<p>[slack] &lt;Mattias Fält&gt; Has anyone worked on tracking discontinuities per state in <a href=\"https://github.com/search?q=DelayDiffEq.jl&amp;type=Repositories\">DelayDiffEq.jl</a> ? I'm thinking for the purpose where only some of the equations are neutral. It could maybe also make it possible to stimulate and track for example impulses</p>",
        "id": 238979131,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621172001
    },
    {
        "content": "<p>[slack] &lt;devmotion&gt; Not that I know of. A DDE is either declared as neutral or not, there's no distinction between different states.</p>",
        "id": 238979501,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621172389
    },
    {
        "content": "<p>[slack] &lt;devmotion&gt; I don't know how common it is that the system is so decoupled that discontinuities solely affect a subset of states and don't propgagate to other states.</p>",
        "id": 238979677,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621172490
    },
    {
        "content": "<p>[slack] &lt;devmotion&gt; If you can decompose the system I guess you might be able to solve the decoupled systems independently?</p>",
        "id": 238979779,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621172603
    },
    {
        "content": "<p>[slack] &lt;Mattias Fält&gt; We have a usecase in <a href=\"https://github.com/search?q=ControlSystems.jl&amp;type=Repositories\">ControlSystems.jl</a> where we simulate a linear system with internal delays as an interconnection of a linear system and pure delay terms. In that case it's not too common that the delayed signal is fed back into itself</p>",
        "id": 238979834,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621172647
    },
    {
        "content": "<p>[slack] &lt;Mattias Fält&gt; I.e something like (where we have to do some trickery to get into DelayDiffEq)<br>\nx(t)' = -x(t) + d1(t-t1)<br>\nd1(t) = x(t) + d2(t-t2)<br>\nd2(t) = -x(t) + u(t)<br>\nWhere u is something with a discontinuity at t=0.</p>",
        "id": 238980309,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621173147
    },
    {
        "content": "<p>[slack] &lt;Mattias Fält&gt; The realizations are usually such that the states are smooth after a while, and I assume that would speed up the solvers</p>",
        "id": 238980523,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621173382
    },
    {
        "content": "<p>[slack] &lt;devmotion&gt; Hmm I'm a bit confused, there doesn't seem to be a derivative with a delay term so it's not a neutral DDE?</p>",
        "id": 238986411,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621178723
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; In the easy case, it is just a parameter much smaller than the others, see “_slow-fast systems”_</p>",
        "id": 238986634,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621178995
    },
    {
        "content": "<p>[slack] &lt;Mattias Fält&gt; Thy will be implemented as<br>\nx'(t) = -x(t) + D1'(t-t1)<br>\nD1'(t) = x(t) + D2'(t-t2)<br>\nD2'(t) = -x(t) + u(t)<br>\nTo avoid using a DAE solver</p>",
        "id": 238986636,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621178995
    },
    {
        "content": "<p>[slack] &lt;Mattias Fält&gt; That seems to be the only way to get a reasonable solution from the current functionality in <a href=\"https://github.com/search?q=DelayDiffEq.jl&amp;type=Repositories\">DelayDiffEq.jl</a> as far as I know</p>",
        "id": 238986808,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621179146
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; Got it, found some references for that. Thanks <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 238989532,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621181764
    },
    {
        "content": "<p>[slack] &lt;devmotion&gt; You can reformulate DADDEs with a mass matrix and specify the mass matrix in DelayDiffEq: <a href=\"https://diffeq.sciml.ai/stable/solvers/dde_solve/\">https://diffeq.sciml.ai/stable/solvers/dde_solve/</a></p>",
        "id": 238991244,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621183448
    },
    {
        "content": "<p>[slack] &lt;devmotion&gt; I guess this would be the most straightforward approach here?</p>",
        "id": 238991271,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621183487
    },
    {
        "content": "<p>[slack] &lt;Mattias Fält&gt; Yeah, but then you are extremely limited in the solvers you can use. I think only one of the Euler methods worked</p>",
        "id": 238991284,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621183509
    },
    {
        "content": "<p>[slack] &lt;devmotion&gt; This seems surprising. Have you tried <code>MethodOfSteps</code> with the recommended methods for DAE problems (<a href=\"https://diffeq.sciml.ai/stable/solvers/dae_solve/#OrdinaryDiffEq.jl-(Mass-Matrix)\">https://diffeq.sciml.ai/stable/solvers/dae_solve/#OrdinaryDiffEq.jl-(Mass-Matrix)</a>)?</p>",
        "id": 238991864,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621184163
    },
    {
        "content": "<p>[slack] &lt;devmotion&gt; In general, one should be able to use every ODE solver that accepts the mass matrix form with DelayDiffEq. But I haven't worked with DADDEs myself, so I can't give any recommendation for one of the solvers based on my experience.</p>",
        "id": 238992000,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621184302
    },
    {
        "content": "<p>[slack] &lt;devmotion&gt; For ODEs e.g. Rosenbrock23, Rodas5, and RadauIIA are recommended (<a href=\"https://diffeq.sciml.ai/stable/solvers/dae_solve/#Recommended-Methods\">https://diffeq.sciml.ai/stable/solvers/dae_solve/#Recommended-Methods</a>).</p>",
        "id": 238992132,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621184423
    },
    {
        "content": "<p>[slack] &lt;Mattias Fält&gt; I definetely tried DADAE and i think i was only able to use either explicit or implicit euler</p>",
        "id": 238994316,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621186658
    },
    {
        "content": "<p>[slack] &lt;Mattias Fält&gt; That's why we settled on the neutral formulation</p>",
        "id": 238994540,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621186873
    },
    {
        "content": "<p>[slack] &lt;JeremyB&gt; Thanks very much for you suggestions ! I'm getting a:<br>\n<code>ERROR: LoadError: MethodError: no method matching getfirst(::Int64)</code></p>",
        "id": 239054673,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621241991
    },
    {
        "content": "<p>[slack] &lt;JeremyB&gt; As far as I understand the isoutofdomain, it will only reject the timestep but it will not terminate the integration, am I right ?</p>",
        "id": 239054894,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621242079
    },
    {
        "content": "<p>[slack] &lt;Simon Welker&gt; <code>isoutofdomain</code> afaik only rejects the step and is used mainly for adaptive algs to automatically reduce <code>dt</code> before trying again(?). for terminating you might want to look into callbacks and using the integrator interface there, there's a <code>terminate!</code> method. you could also try passing a custom <code>unstable_check</code> but that seems like misuse and throws <del>an error</del> a warning.</p>",
        "id": 239063256,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621246172
    },
    {
        "content": "<p>[slack] &lt;Simon Welker&gt; your error looks like something fairly unrelated -- seems like at some point you have an Int64 where a tuple or array(?) should be; which <code>getfirst</code> is that?</p>",
        "id": 239063514,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621246321
    },
    {
        "content": "<p>[slack] &lt;JeremyB&gt; Yes I think that's what I tried but for some reason it seems it  is not working... Discrete callbacks are called after each integrator step right ? So if my ball leaves the interpolated region during one step, the error should only be thrown in the next step, thus using the callack should work ?</p>",
        "id": 239063592,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621246343
    },
    {
        "content": "<p>[slack] &lt;JeremyB&gt; I thought the errror was coming form my 'evolve' function. When the ball leaves the region, it cannot getfirst on the Interpolation result and assign the dp1 and dp2 values. Am I getting confused and doing some silly mistake ?</p>",
        "id": 239063662,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621246405
    },
    {
        "content": "<p>[slack] &lt;Simon Welker&gt; instead of letting <code>Interpolations.gradient</code> throw an error you could return NaNs in that case, which should trigger the default unstable_check</p>",
        "id": 239063979,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621246572
    },
    {
        "content": "<p>[slack] &lt;Simon Welker&gt; i'm not sure about the exact semantics of when <code>terminate!</code>ing happens (after current timesteps completes or before) in discrete callbacks, i guess you could try that out with some simple logging experiment</p>",
        "id": 239064059,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621246629
    },
    {
        "content": "<p>[slack] &lt;JeremyB&gt; I'll look into it in more details ! You would advise to add a check in the 'evolve' function then, when I'm calling the gradient ?</p>",
        "id": 239064190,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621246693
    },
    {
        "content": "<p>[slack] &lt;Simon Welker&gt; if the error being thrown is killing performance or usability for you, i think yes, you should add a check in <code>evolve</code> and handle the termination manually yourself by appropriate callbacks</p>",
        "id": 239064293,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621246766
    },
    {
        "content": "<p>[slack] &lt;JeremyB&gt; Ok thanks for the help! I'll have a look then. Calling gradient inside the evolve function also causes a lot of memory allocations so I will maybe try to find another workaround to solve this physical problem.</p>",
        "id": 239064474,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621246857
    },
    {
        "content": "<p>[slack] &lt;Simon Welker&gt; yeah <code>.gradient</code> allocates a vector to return each time you call it i think. sadly there are no non-allocating in-place versions in <code>Interpolations.jl</code> (there's <code>gradient!</code> but it's implemented in terms of <code>gradient</code>)</p>",
        "id": 239067218,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621248438
    },
    {
        "content": "<p>[slack] &lt;Simon Welker&gt; you could try out if you can implement your own <code>gradient!</code> based on <code>Interpolations.jl</code>'s source code, and maybe PR that back :)</p>",
        "id": 239067329,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621248490
    },
    {
        "content": "<p>[slack] &lt;JeremyB&gt; I'll see if I can find time to work on that ! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 239067409,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621248545
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; is there a way to throw error if a warning is given in solve? like whether its \"increase maxiters\" or dt &lt;= dtmin, etc</p>",
        "id": 239194845,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621310400
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; the search on diffeq page not so good for finding this</p>",
        "id": 239194905,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621310418
    },
    {
        "content": "<p>[slack] &lt;devmotion&gt; I assume the best would be to check the return code of the solution. This is also commonly done in inference (e.g., in DiffEqBayes) to discard parameter choices for which no complete solution could be computed.</p>",
        "id": 239208936,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621322493
    },
    {
        "content": "<p>[slack] &lt;Pieter Gunnink&gt; In <a href=\"https://github.com/search?q=ModellingToolkit.jl&amp;type=Repositories\">ModellingToolkit.jl</a>, can I connect multiple systems via the derivatives? I.e. I have two systems with <code>D(y) ~ y</code> and I want to couple them, such that the total system becomes <code>D(y1) ~ y1 + a y2, D(y2) ~ y2 + a y1</code>.</p>",
        "id": 239245174,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621341479
    },
    {
        "content": "<p>[slack] &lt;Pieter Gunnink&gt; The way I can think of is just building up the RHS of the equations manually, but I would like to make use of the automated tracking of variables and parameters that composing offers</p>",
        "id": 239245331,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621341545
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes, you can write any connection equation you need.</p>",
        "id": 239246119,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621341899
    },
    {
        "content": "<p>[slack] &lt;Pieter Gunnink&gt; Ah I completely misunderstood how the introductory tutorial works, reading <a href=\"https://mtk.sciml.ai/stable/basics/Composition/\">https://mtk.sciml.ai/stable/basics/Composition/</a> makes it more clear now. Thanks!</p>",
        "id": 239249918,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621343252
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; yes but im mainly looking for early exiting, so that i don't have to wait till the end of a long-running junk solve</p>",
        "id": 239251631,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621343896
    },
    {
        "content": "<p>[slack] &lt;devmotion&gt; Just use a discrete callback and check the return code in every step?</p>",
        "id": 239253125,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621344417
    },
    {
        "content": "<p>[slack] &lt;devmotion&gt; I.e., basically manually apply the check in <a href=\"https://github.com/SciML/OrdinaryDiffEq.jl/blob/41f39e4d44ea7271d683c4f6142775b9204130b6/src/solve.jl#L453-L455\">https://github.com/SciML/OrdinaryDiffEq.jl/blob/41f39e4d44ea7271d683c4f6142775b9204130b6/src/solve.jl#L453-L455</a> in every step</p>",
        "id": 239253186,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621344442
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; thanks that sounds good</p>",
        "id": 239253417,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621344541
    },
    {
        "content": "<p>[slack] &lt;bhvieira&gt; I'm trying to incorporate <code>Unitful</code>+<code>ComponentArrays</code> into a system of equations (Pinsky-Rinzel's, not that it's important), but as you can guess I hit a wall. There's some type mismatching happening in the temp array, but I can't seem to overcome it. The problem is in component <code>du.C</code> , since <code>C</code>  was unitless, something trips on this. Though, if you exclude <code>A</code>, <code>C</code> being unitless isn't a problem anymore and things work. So probably it's an interaction between DiffEq+CompArrays+Unitful. Any help?</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>u0 = ComponentVector(A = -60.0u\"V\", C = 0e0);\n\nfunction myprob!(du,u,p,t)\n    A,  C = u\n    du.A = 0u\"V*Hz\"\n    du.C = 0u\"Hz\"\n    return nothing\nend\n\ntspan = (0.0u\"ms\",2.0u\"ms\");\nΔt = 0.05u\"ms\";\nprob = ODEProblem(myprob!, u0, tspan);\nsol = solve(prob, Euler(), dt = Δt)```\n</code></pre></div>",
        "id": 239265563,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621349026
    },
    {
        "content": "<p>[slack] &lt;bhvieira&gt; &gt; #sol = solve(prob, Euler(), dt = Δt)</p>\n<blockquote>\n<p>ERROR: MethodError: no method matching OrdinaryDiffEq.EulerCache(::ComponentVector{Quantity{Float64,D,U} where U where D}, ::ComponentVector{Quantity{Float64,D,U} where U where D}, ::ComponentVector{Number}, ::ComponentVector{Quantity{Float64,D,U} where U where D}, ::ComponentVector{Quantity{Float64,D,U} where U where D})<br>\nClosest candidates are:<br>\n  OrdinaryDiffEq.EulerCache(::var\"<a href=\"https://github.com/JuliaLang/julia/issues/516\">#516</a>#uType\", ::var\"<a href=\"https://github.com/JuliaLang/julia/issues/516\">#516</a>#uType\", ::var\"<a href=\"https://github.com/JuliaLang/julia/issues/516\">#516</a>#uType\", ::var\"<a href=\"https://github.com/JuliaLang/julia/issues/517\">#517</a>#rateType\", ::var\"<a href=\"https://github.com/JuliaLang/julia/issues/517\">#517</a>#rateType\") where {var\"<a href=\"https://github.com/JuliaLang/julia/issues/516\">#516</a>#uType\", var\"<a href=\"https://github.com/JuliaLang/julia/issues/517\">#517</a>#rateType\"} at C:\\Users\\bhebl\\.julia\\packages\\OrdinaryDiffEq\\la32G\\src\\caches\\low_order_rk_caches.jl:2<br>\nStacktrace:<br>\n [1] alg_cache(::Euler, ::ComponentVector{Quantity{Float64,D,U} where U where D}, ::ComponentVector{Quantity{Float64,D,U} where U where D}, ::Type{T} where T, ::Type{T} where T, ::Type{T} where T, ::ComponentVector{Quantity{Float64,D,U} where U where D}, ::ComponentVector{Quantity{Float64,D,U} where U where D}, ::ODEFunction{true,typeof(myprob!),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,typeof(SciMLBase.DEFAULT_OBSERVED),Nothing}, ::Quantity{Float64,�,Unitful.FreeUnits{(ms,),�,nothing}}, ::Quantity{Float64,�,Unitful.FreeUnits{(ms,),�,nothing}}, ::ComponentVector{Number}, ::SciMLBase.NullParameters, ::Bool, ::Val{true}) at C:\\Users\\bhebl\\.julia\\packages\\OrdinaryDiffEq\\la32G\\src\\caches\\low_order_rk_caches.jl:26<br>\n [2] __init(::ODEProblem{ComponentVector{Quantity{Float64,D,U} where U where D},Tuple{Quantity{Float64,�,Unitful.FreeUnits{(ms,),�,nothing}},Quantity{Float64,�,Unitful.FreeUnits{(ms,),�,nothing}}},true,SciMLBase.NullParameters,ODEFunction{true,typeof(myprob!),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,typeof(SciMLBase.DEFAULT_OBSERVED),Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},SciMLBase.StandardODEProblem}, ::Euler, ::Tuple{}, ::Tuple{}, ::Tuple{}, ::Type{Val{true}}; saveat::Tuple{}, tstops::Tuple{}, d_discontinuities::Tuple{}, save_idxs::Nothing, save_everystep::Bool, save_on::Bool, save_start::Bool, save_end::Nothing, callback::Nothing, dense::Bool, calck::Bool, dt::Quantity{Float64,�,Unitful.FreeUnits{(ms,),�,nothing}}, dtmin::Nothing, dtmax::Quantity{Float64,�,Unitful.FreeUnits{(ms,),�,nothing}}, force_dtmin::Bool, adaptive::Bool, gamma::Int64, abstol::Nothing, reltol::Nothing, qmin::Int64, qmax::Int64, qsteady_min::Int64, qsteady_max::Int64, qoldinit::Int64, fullnormalize::Bool, failfactor::Int64, beta1::Nothing, beta2::Nothing, maxiters::Int64, internalnorm::typeof(DiffEqBase.ODE_DEFAULT_NORM), internalopnorm::typeof(LinearAlgebra.opnorm), isoutofdomain::typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), unstable_check::typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), verbose::Bool, timeseries_errors::Bool, dense_errors::Bool, advance_to_tstop::Bool, stop_at_next_tstop::Bool, initialize_save::Bool, progress::Bool, progress_steps::Int64, <br>\nprogress_name::String, progress_message::typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), userdata::Nothing, allow_extrapolation::Bool, initialize_integrator::Bool, alias_u0::Bool, alias_du0::Bool, initializealg::OrdinaryDiffEq.DefaultInit, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at C:\\Users\\bhebl\\.julia\\packages\\OrdinaryDiffEq\\la32G\\src\\solve.jl:293<br>\n [3] __solve(::ODEProblem{ComponentVector{Quantity{Float64,D,U} where U where D},Tuple{Quantity{Float64,�,Unitful.FreeUnits{(ms,),�,nothing}},Quantity{Float64,�,Unitful.FreeUnits{(ms,),�,nothing}}},true,SciMLBase.NullParameters,ODEFunction{true,typeof(myprob!),LinearAlgebra.UniformScaling{Bool},Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,Nothing,typeof(SciMLBase.DEFAULT_OBSERVED),Nothing},Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}},SciMLBase.StandardODEProblem}, ::Euler; kwargs::Base.Iterators.Pairs{Symbol,Quantity{Float64,�,Unitful.FreeUnits{(ms,),�,nothing}},Tuple{Symbol},NamedTuple{(:dt,),Tuple{Quantity{Float64,�,Unitful.FreeUnits{(ms,),�,nothing}}}}}) at C:\\Users\\bhebl\\.julia\\packages\\OrdinaryDiffEq\\la32G\\src\\solve.jl:4<br>\n [4] #solve_call#56 at C:\\Users\\bhebl\\.julia\\packages\\DiffEqBase\\qntkj\\src\\solve.jl:61 [inlined]<br>\n [5] #solve_up#58 at C:\\Users\\bhebl\\.julia\\packages\\DiffEqBase\\qntkj\\src\\solve.jl:82 [inlined]<br>\n [6] #solve#57 at C:\\Users\\bhebl\\.julia\\packages\\DiffEqBase\\qntkj\\src\\solve.jl:70 [inlined]<br>\n [7] top-level scope at REPL[148]:1</p>\n</blockquote>",
        "id": 239265726,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621349074
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Units in time spans don't work. And in general, units in a component array also won't work, especially if you use more than one unit in the same array. Even if you get it to work, it will be horribly slow because it will be type unstable.</p>",
        "id": 239265931,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621349154
    },
    {
        "content": "<p>[slack] &lt;bhvieira&gt; Units in time spans do work though, I do it all the time (it's a small set of equations, performance isn't an issue, not more than checking mismatching units haha)</p>",
        "id": 239267244,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621349611
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes the type instability is going to be a problem here</p>",
        "id": 239267317,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621349642
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; That's interesting, last time I tried it, unitful time spans failed because of some hardcoded constants somewhere in DiffEqBase. But anyhow, I also tried going down this path not so long ago and gave up on it. It's not really worth the headache. As long as you write your step function generically, you can always just use unitful types in your tests, which would accomplish the goal of checking physical coherence. Trying to use units in the solver though is just not going to be fun.</p>",
        "id": 239267889,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621349829
    },
    {
        "content": "<p>[slack] &lt;bhvieira&gt; This works, horribly, but it does (by making <code>C</code>  unitful)</p>\n<blockquote>\n<p>u0 = ComponentVector(A = -60.0u\"V\", C = 0e0u\"Hz * s\");</p>\n<p>function myprob!(du,u,p,t)<br>\n    A,  C = u<br>\n    du.A = 0u\"V*Hz\"<br>\n    du.C = 0u\"Hz\"<br>\n    return nothing<br>\nend</p>\n<p>tspan = (0.0u\"ms\",2.0u\"ms\");<br>\nΔt = 0.05u\"ms\";<br>\nprob = ODEProblem(myprob!, u0, tspan);<br>\nsol = solve(prob, Euler(), dt = Δt)</p>\n</blockquote>",
        "id": 239268508,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621350050
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; yes but now your <code>u</code> is type unstable.</p>",
        "id": 239270264,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621350581
    },
    {
        "content": "<p>[slack] &lt;bhvieira&gt; @Brian Groenke I'll follow your advice though regarding the step function parametrization, I hadn't looked at it from that angle before</p>",
        "id": 239272265,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621351267
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; If you explicitly annotate the ComponentArray with a union eltype of your different units, it helps with the speed (as long as you don’t have too many different unit types). So like <code>ComponentVector{Union{typeof(1.0u”V”), typeof(1.0u”Hz*s”)}}(…</code> . This is a common enough issue that I should probably put an example somewhere.</p>",
        "id": 239276041,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621352634
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; Also, if you do it this way, I think you should be able to have C be a plain unitless number by having  <code>Union{typeof(1.0u”V”), Float64}</code></p>",
        "id": 239277058,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621353012
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 239278073,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621353366
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; @Jonnie to the rescue again :D</p>",
        "id": 239278112,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621353382
    },
    {
        "content": "<p>[slack] &lt;bhvieira&gt; Thanks for the tips @Jonnie! Unfortunately, <code>ComponentVector{Union{typeof(1.0u\"mV\"), Float64}}(A = -60u\"mV\", C = 0.0)</code> doesn't work, but that's not a problem for me. BTW thank you very much for you work on <code>ComponentArrays</code>!</p>",
        "id": 239286702,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621356390
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; a comment: doing <code>step!(integ, dt, true)</code> will step the integrator for _exactly_ <code>dt</code>, assuming that the integrator is adaptive and can change its timestep.</p>",
        "id": 239418298,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621429046
    },
    {
        "content": "<p>[slack] &lt;wilwxk&gt; how can I use <code>remake</code> to unset the field dtmax to default/nothing ?</p>",
        "id": 239442168,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621437239
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes, problems can hold arbitrary args.</p>",
        "id": 239443063,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621437534
    },
    {
        "content": "<p>[slack] &lt;wilwxk&gt; I mean, how can I set it ? because dtmax seems to be package-dependent.</p>",
        "id": 239446909,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621438610
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>dtmax = nothing</code> should be a standard \"use the default\" IIRC</p>",
        "id": 239447006,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621438643
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; otherwise this might be something we should fix.</p>",
        "id": 239447027,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621438650
    },
    {
        "content": "<p>[slack] &lt;wilwxk&gt; yeah, dtmax=nothing is not working: <a href=\"https://files.slack.com/files-pri/T68168MUP-F0227FQLAR4/download/screenshot_20210519_132940.png\">https://files.slack.com/files-pri/T68168MUP-F0227FQLAR4/download/screenshot_20210519_132940.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F0227FQLAR4/download/screenshot_20210519_132940.png\"><img src=\"https://uploads.zulipusercontent.net/5d053a26511c17c3a7c9ca0f7c476b44250ff2e2/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d463032323746514c4152342f646f776e6c6f61642f73637265656e73686f745f32303231303531395f3133323934302e706e67\"></a></div>",
        "id": 239455600,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621441795
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; expand that more: which solver/</p>",
        "id": 239456045,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621441945
    },
    {
        "content": "<p>[slack] &lt;wilwxk&gt; <code>tacktrace:\n  [1] __init(prob::ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, SciMLBase.NullParameters, ODEFunction{true, typeof(lorenz!), UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Base.Iterators.Pairs{Symbol, Nothing, Tuple{Symbol}, NamedTuple{(:dtmax,), Tuple{Nothing}}}, SciMLBase.StandardODEProblem}, alg::CompositeAlgorithm{Tuple{Tsit5, Rosenbrock23{0, false, DefaultLinSolve, DataType}}, AutoSwitch{Tsit5, Rosenbrock23{0, false, DefaultLinSolve, DataType}, Rational{Int64}, Int64}}, timeseries_init::Tuple{}, ts_init::Tuple{}, ks_init::Tuple{}, recompile::Type{Val{true}}; saveat::Tuple{}, tstops::Tuple{}, d_discontinuities::Tuple{}, save_idxs::Nothing, save_everystep::Bool, save_on::Bool, save_start::Bool, save_end::Nothing, callback::Nothing, dense::Bool, calck::Bool, dt::Float64, dtmin::Nothing, dtmax::Nothing, force_dtmin::Bool, adaptive::Bool, gamma::Rational{Int64}, abstol::Nothing, reltol::Nothing, qmin::Rational{Int64}, qmax::Int64, qsteady_min::Int64, qsteady_max::Int64, qoldinit::Rational{Int64}, fullnormalize::Bool, failfactor::Int64, beta1::Nothing, beta2::Nothing, maxiters::Int64, internalnorm::typeof(DiffEqBase.ODE_DEFAULT_NORM), internalopnorm::typeof(opnorm), isoutofdomain::typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), unstable_check::typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), verbose::Bool, timeseries_errors::Bool, dense_errors::Bool, advance_to_tstop::Bool, stop_at_next_tstop::Bool, initialize_save::Bool, progress::Bool, progress_steps::Int64, progress_name::String, progress_message::typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), userdata::Nothing, allow_extrapolation::Bool, initialize_integrator::Bool, alias_u0::Bool, alias_du0::Bool, initializealg::OrdinaryDiffEq.DefaultInit, kwargs::Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol, Symbol}, NamedTuple{(:default_set, :second_time), Tuple{Bool, Bool}}})\n    @ OrdinaryDiffEq ~/.julia/packages/OrdinaryDiffEq/coWkg/src/solve.jl:178\n  [2] __solve(::ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, SciMLBase.NullParameters, ODEFunction{true, typeof(lorenz!), UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Base.Iterators.Pairs{Symbol, Nothing, Tuple{Symbol}, NamedTuple{(:dtmax,), Tuple{Nothing}}}, SciMLBase.StandardODEProblem}, ::CompositeAlgorithm{Tuple{Tsit5, Rosenbrock23{0, false, DefaultLinSolve, DataType}}, AutoSwitch{Tsit5, Rosenbrock23{0, false, DefaultLinSolve, DataType}, Rational{Int64}, Int64}}; kwargs::Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:default_set, :second_time, :dtmax), Tuple{Bool, Bool, Nothing}}})\n    @ OrdinaryDiffEq ~/.julia/packages/OrdinaryDiffEq/coWkg/src/solve.jl:4\n  [3] __solve(::ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, SciMLBase.NullParameters, ODEFunction{true, typeof(lorenz!), UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Base.Iterators.Pairs{Symbol, Nothing, Tuple{Symbol}, NamedTuple{(:dtmax,), Tuple{Nothing}}}, SciMLBase.StandardODEProblem}, ::Nothing; default_set::Bool, kwargs::Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:second_time, :dtmax), Tuple{Bool, Nothing}}})\n    @ DifferentialEquations ~/.julia/packages/DifferentialEquations/HSWeG/src/default_solve.jl:7\n  [4] #__solve#71\n    @ ~/.julia/packages/DiffEqBase/U3Zj7/src/solve.jl:282 [inlined]\n  [5] #solve_call#56\n    @ ~/.julia/packages/DiffEqBase/U3Zj7/src/solve.jl:61 [inlined]\n  [6] solve_call\n    @ ~/.julia/packages/DiffEqBase/U3Zj7/src/solve.jl:48 [inlined]\n  [7] #solve_up#58\n    @ ~/.julia/packages/DiffEqBase/U3Zj7/src/solve.jl:85 [inlined]\n  [8] solve_up\n    @ ~/.julia/packages/DiffEqBase/U3Zj7/src/solve.jl:75 [inlined]\n  [9] #solve#57\n    @ ~/.julia/packages/DiffEqBase/U3Zj7/src/solve.jl:70 [inlined]\n [10] solve(::ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, SciMLBase.NullParameters, ODEFunction{true, typeof(lorenz!), UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Base.Iterators.Pairs{Symbol, Nothing, Tuple{Symbol}, NamedTuple{(:dtmax,), Tuple{Nothing}}}, SciMLBase.StandardODEProblem})\n    @ DiffEqBase ~/.julia/packages/DiffEqBase/U3Zj7/src/solve.jl:68\n [11] top-level scope\n    @ In[115]:10\n [12] eval\n    @ ./boot.jl:360 [inlined]\n [13] include_string(mapexpr::typeof(REPL.softscope), mod::Module, code::String, filename::String)\n    @ Base ./loading.jl:1094</code></p>",
        "id": 239456415,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621442072
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh</p>",
        "id": 239456696,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621442179
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; well, the hack would be to match the default <a href=\"https://github.com/SciML/OrdinaryDiffEq.jl/blob/master/src/solve.jl#L28\">https://github.com/SciML/OrdinaryDiffEq.jl/blob/master/src/solve.jl#L28</a></p>",
        "id": 239456714,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621442185
    },
    {
        "content": "<p>[slack] &lt;wilwxk&gt; makes sense, thank you</p>",
        "id": 239457969,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621442697
    },
    {
        "content": "<p>[slack] &lt;wilwxk&gt; btw, if this is the default, isnt it better to change the docs accordingly ?</p>",
        "id": 239458251,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621442802
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/SciML/Sundials.jl/blob/master/src/common_interface/solve.jl#L101\">https://github.com/SciML/Sundials.jl/blob/master/src/common_interface/solve.jl#L101</a></p>",
        "id": 239458402,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621442859
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Sundials wants <code>0.0</code> for the default</p>",
        "id": 239458406,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621442864
    },
    {
        "content": "<p>[slack] &lt;ArbitRandomUser&gt; if i want to evaluate some callback at every integrator step i just give <code>condition() = true</code>  right ?<br>\ni have an ODE system simulating Hamiltonian mechanics , System is a number of  mass's connected by springs , the masses can also interact with each other with a lennard-jones potential , but to keep them tractable i'm using a sweep and prune collision detection to decide  which interaction terms will appear in the Hamiltonian . The sweep and prune will have to be called every integration time step</p>",
        "id": 239578199,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621512056
    },
    {
        "content": "<p>[slack] &lt;ArbitRandomUser&gt; any other leads in simulating such systems  in julia would  be nice <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 239578270,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621512094
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yes, just make <code>condition(u,t,integrator) = true</code> in a DiscreteCallback</p>",
        "id": 239578311,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621512121
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; You might want to look at how <a href=\"https://github.com/search?q=NBodySimulator.jl&amp;type=Repositories\">NBodySimulator.jl</a> does it.</p>",
        "id": 239578357,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621512131
    },
    {
        "content": "<p>[slack] &lt;ArbitRandomUser&gt; is there a way to specify additional arguments to <code>affect!</code> for the callback ?</p>",
        "id": 239591961,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621517705
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; like?</p>",
        "id": 239592229,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621517805
    },
    {
        "content": "<p>[slack] &lt;ArbitRandomUser&gt; my system is a struct which has a bunch of parameters</p>",
        "id": 239592338,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621517856
    },
    {
        "content": "<p>[slack] &lt;ArbitRandomUser&gt; i need to pass those parameters to affect! too right ?</p>",
        "id": 239592368,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621517870
    },
    {
        "content": "<p>[slack] &lt;ArbitRandomUser&gt; i mean its a requirement , i will need it because affect! is going to change the parameters in the struct which causes my hamiltonian to change</p>",
        "id": 239592594,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621517954
    },
    {
        "content": "<p>[slack] &lt;ArbitRandomUser&gt; maybe callback isnt the way to do it !? because what i want to do at every time step is not change the ODE variables at all , i just need to look at the ODE variables and change some parameters</p>",
        "id": 239593088,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621518139
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>integrator.f</code></p>",
        "id": 239594580,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621518711
    },
    {
        "content": "<p>[slack] &lt;ArbitRandomUser&gt; im sorry i dont quite understand.<br>\nthis is the function im passing to ODEproblem<br>\n<code>function evolve!(dvars,vars,sys,t)</code><br>\ninside evolve there are loops with statements<br>\nlike <code>dvars[j,i] = dh_dp(j,i,vars,sys)</code><br>\nwhich define my problem , so <code>dh_dp</code> depends on some fields of sys<br>\nmy ODEproblem call is ...<br>\n<code>prob=ODEProblem(evolve!,sys.vars,tspan,sys)</code></p>",
        "id": 239596922,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621519529
    },
    {
        "content": "<p>[slack] &lt;ArbitRandomUser&gt; now what i would like to do is in affect! , look at <code>vars</code> and change <code>sys.collisions</code></p>",
        "id": 239597080,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621519578
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>integrator.u</code></p>",
        "id": 239597895,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621519884
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>integrator.f</code></p>",
        "id": 239597903,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621519888
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>integrator.p</code></p>",
        "id": 239597908,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621519892
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; they are all already there passed into the <code>affect!</code> through the integrator.</p>",
        "id": 239597932,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621519904
    },
    {
        "content": "<p>[slack] &lt;ArbitRandomUser&gt; oh alright</p>",
        "id": 239598208,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621519998
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; @chrisrackauckas Makie v0.13 just released, should we consider investing sometime to write a few recipes for Makie, or do you think it’s still too early.</p>",
        "id": 239675826,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621554104
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; can recipes have kwargs @yingbo_ma</p>",
        "id": 239676101,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621554318
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; yes please. we need a high quality 2 and 3d vector field animator badly</p>",
        "id": 239676192,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621554368
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; that would make everything look so professional</p>",
        "id": 239676199,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621554377
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; i dont know makie but id be down to help</p>",
        "id": 239676213,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621554396
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Arg, <a href=\"https://makie.juliaplots.org/stable/recipes.html#Full-recipes-with-the-@recipe-macro\">https://makie.juliaplots.org/stable/recipes.html#Full-recipes-with-the-@recipe-macro</a></p>",
        "id": 239676602,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621554722
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Doesn’t seem like it can</p>",
        "id": 239676639,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621554725
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Maybe? Lemme try an example</p>",
        "id": 239676832,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621554900
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Yep, it supports it. @chrisrackauckas</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>struct Solution{T,U}\n    ts::T\n    us::U\nend\n\n@recipe(SolutionPlot) do scene\n    Theme(\n          ccc = :red,\n          shift = 0\n         )\nend\n\nfunction Makie.plot!(sp::SolutionPlot{&lt;:Tuple{&lt;:Solution}})\n    sol = sp[1]\n    ts, us = sol[].ts, sol[].us\n    lines!(sp, ts, us .+ sp.shift[], color=sp.ccc[])\n    sp\nend\n\nsol = Solution(1:10, rand(10))\nsolutionplot(sol; shift=100, ccc=:darkblue)```\n</code></pre></div>",
        "id": 239679535,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621556961
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; <a href=\"https://files.slack.com/files-pri/T68168MUP-F022LVA7A0K/download/makie_sol.png\">https://files.slack.com/files-pri/T68168MUP-F022LVA7A0K/download/makie_sol.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F022LVA7A0K/download/makie_sol.png\"><img src=\"https://uploads.zulipusercontent.net/79450ac5007c4f7a8fdadca7fefbcf188365f61c/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d463032324c56413741304b2f646f776e6c6f61642f6d616b69655f736f6c2e706e67\"></a></div>",
        "id": 239679558,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621556982
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I'm ready for a fully new implementation of the recipe then, which uses the new indexing primitives</p>",
        "id": 239679565,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621556993
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I feel like a new implementation wouldn't be too hard to write</p>",
        "id": 239679570,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621556999
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <img alt=\":makie:\" class=\"emoji\" src=\"https://uploads.zulipusercontent.net/f991fcbfe825eb8b43d79bf96e2d7e141c3f6351/68747470733a2f2f7a756c69702d617661746172732e73332e616d617a6f6e6177732e636f6d2f373137382f656d6f6a692f696d616765732f31353131382e676966\" title=\"makie\"> is king.</p>",
        "id": 239679624,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621557010
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Long live <img alt=\":makie:\" class=\"emoji\" src=\"https://uploads.zulipusercontent.net/f991fcbfe825eb8b43d79bf96e2d7e141c3f6351/68747470733a2f2f7a756c69702d617661746172732e73332e616d617a6f6e6177732e636f6d2f373137382f656d6f6a692f696d616765732f31353131382e676966\" title=\"makie\"></p>",
        "id": 239679630,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621557019
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; It took me 30 mins to understand what the docs is saying <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 239679655,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621557034
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; wait</p>",
        "id": 239679691,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621557065
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; is it possible to add the <code>vars</code> kwarg to that?</p>",
        "id": 239679706,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621557072
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It seems like that needed to match Theme kwargs?</p>",
        "id": 239679712,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621557080
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and I think it needs to be to <code>convert_arguments</code> , i.e. a type-recipe</p>",
        "id": 239679743,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621557109
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; It seems like that Makie doesn’t have monolithic <code>plot</code> , but encourages people to define their own plotting function like the <code>solutionplot</code> above</p>",
        "id": 239679747,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621557111
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; how does one change that to a scatter plot for example?</p>",
        "id": 239679799,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621557133
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; No idea. Time to read more docs</p>",
        "id": 239679902,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621557205
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; I couldn’t quite figure out how to inherit the specialization in the <code>lines</code> recipe to <code>scatter</code></p>",
        "id": 239681745,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621558721
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; <code>AbstractPlotting.convert_arguments(P::AbstractPlotting.PlotFunc, sol::Solution) = convert_arguments(P, sol.ts, http://sol.us)</code><br>\nWorks, but it loses all the specialization on <code>Solution</code></p>",
        "id": 239681787,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621558765
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; anyone use torchdiffeq? i heard its faster than <a href=\"https://github.com/search?q=DE.jl&amp;type=Repositories\">DE.jl</a>. i hear it also has better adjoints. im thinking of switching back</p>",
        "id": 239688132,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621564331
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; wut</p>",
        "id": 239688313,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621564491
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; <a href=\"https://gist.github.com/ChrisRackauckas/cc6ac746e2dfd285c28e0584a2bfd320\">https://gist.github.com/ChrisRackauckas/cc6ac746e2dfd285c28e0584a2bfd320</a></p>",
        "id": 239688362,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621564529
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; The dopri5 in torchdiffeq is not even correct in the sense that the adaptivity is not using a PI controller</p>",
        "id": 239688436,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621564589
    },
    {
        "content": "<p>[slack] &lt;ashton.bradley&gt; when adding a drift term to this heat equation example <a href=\"http://diffeqoperators.sciml.ai/dev/symbolic_tutorials/mol_heat/\">http://diffeqoperators.sciml.ai/dev/symbolic_tutorials/mol_heat/</a></p>\n<p>I get an error</p>\n<div class=\"codehilite\" data-code-language=\"error\"><pre><span></span><code>Stacktrace:\n [1] check_consistency(s::SystemStructure)\n   @ ModelingToolkit.StructuralTransformations ~/.julia/packages/ModelingToolkit/Mo4gw/src/structural_transformation/utils.jl:59```\nI just change equations of motion to\n`eq  = Dt(u(t,x)) ~ Dxx(u(t,x)) + Dx(u(t,x))`\nIs this a known problem?\n</code></pre></div>",
        "id": 239690071,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621566313
    },
    {
        "content": "<p>[slack] &lt;ashton.bradley&gt; In fact it seems that any first order derivatives in x throw an unbalanced error</p>",
        "id": 239690632,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621566917
    },
    {
        "content": "<p>[slack] &lt;ashton.bradley&gt; is there a workaround?</p>",
        "id": 239690645,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621566927
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; open an issue</p>",
        "id": 239690892,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621567186
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I believe upwinding was added</p>",
        "id": 239690901,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621567195
    },
    {
        "content": "<p>[slack] &lt;ashton.bradley&gt; upwind_order=2 throws a different error (not enough points). Issue:<br>\n<a href=\"https://github.com/SciML/DiffEqOperators.jl/issues/399\">https://github.com/SciML/DiffEqOperators.jl/issues/399</a></p>",
        "id": 239691489,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621567771
    },
    {
        "content": "<p>[slack] &lt;ashton.bradley&gt; should I be able to work around with upwind_order somehow?</p>",
        "id": 239691586,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621567862
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; 1 should be fine</p>",
        "id": 239692474,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621568838
    },
    {
        "content": "<p>[slack] &lt;ashton.bradley&gt; it errors...</p>",
        "id": 239693505,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621569892
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it needed a tag</p>",
        "id": 239694114,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621570463
    },
    {
        "content": "<p>[slack] &lt;vaibhavdixit02&gt; Have you had a chance to look at how we are doing plotting now in Pumas? I think it might be good for us to take inspiration from that. Since the primary use cases are similar, either interactivity or publication quality so a combination of PlotlyJS and Cairomakie based plots depending on what the user wants. Might end up being more work than you intended though <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 239696050,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621572416
    },
    {
        "content": "<p>[slack] &lt;devmotion&gt; @yingbo_ma You can check the implementation in AbstractGPsMakie and ReliabilityDiagrams, I did my best to follow the docs and it seems to work <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span>The major annoyance, I would say, is that you don't have access to the keyword arguments in <code>convert_arguments</code></p>",
        "id": 239708319,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621582326
    },
    {
        "content": "<p>[slack] &lt;ashton.bradley&gt; I wasn't sure if you mean this is fixed? It still errors on stable with or without upwind. should I be on master?</p>",
        "id": 239727829,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621592569
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; update?</p>",
        "id": 239728715,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621593058
    },
    {
        "content": "<p>[slack] &lt;ashton.bradley&gt; I did, still error</p>",
        "id": 239733354,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621595731
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; same error?</p>",
        "id": 239736076,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621597287
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; does the test on it pass for you?</p>",
        "id": 239736094,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621597304
    },
    {
        "content": "<p>[slack] &lt;Tino Sulzer&gt; isn’t upwinding still WIP? <a href=\"https://github.com/SciML/DiffEqOperators.jl/pull/375\">https://github.com/SciML/DiffEqOperators.jl/pull/375</a></p>",
        "id": 239760885,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621607749
    },
    {
        "content": "<p>[slack] &lt;dawbarton&gt; I'm trying to construct a collocation system in MTK (ODESystem -&gt; NonlinearSystem similar to rungekutta_discretize with ControlSystems) and I've seen mention of a BlockNonlinearSystem which indicates the blocking in the system; does it actually exist? I can't seem to find it in the source other than a mention in one of the Markdown files</p>",
        "id": 239764226,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621609097
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oops</p>",
        "id": 239764305,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621609129
    },
    {
        "content": "<p>[gitter] &lt;superckl&gt; Can I ask a question about DiffEqOperators here? I've got a problem where I need to enforce two separate BCs on a fourth-order derivative, say that the first and third derivatives vanish at the boundaries. However, I can only seem to apply one of these BCs. Perhaps I'm missing something, because I would have to compose a Nuemann0BC with a GeneralBC which doesn't seem possible. Is there a method I'm missing to apply two different BCs to a derivative operator?</p>",
        "id": 239805687,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621627319
    },
    {
        "content": "<p>[gitter] &lt;superckl&gt; I feel I'm missing something because this entire derivative operator - boundary condition system in DiffEqOperators only seems to allow for two boundary conditions (one at the left and one at the right) which isn't sufficient for high-order equations</p>",
        "id": 239806492,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621627694
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; (On slack now) Anyway to handle multiple BCs like this without writing my own ghost point logic?</p>",
        "id": 239818548,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621634678
    },
    {
        "content": "<p>[slack] &lt;tinosulzer&gt; something like this? <a href=\"https://github.com/SciML/DiffEqOperators.jl/blob/master/test/MOL/MOL_1D_HigherOrder.jl\">https://github.com/SciML/DiffEqOperators.jl/blob/master/test/MOL/MOL_1D_HigherOrder.jl</a></p>",
        "id": 239820572,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621635981
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; Yes, but I was hoping to avoid automatic discretization, I will need finer control in the future (e.g., I might use a psuedospectral disc. in another direction)</p>",
        "id": 239820836,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621636188
    },
    {
        "content": "<p>[slack] &lt;tinosulzer&gt; then I don’t know sorry</p>",
        "id": 239821257,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621636446
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; all right well, for now then, is there a way to specify periodicity as a bc in the automatic MOL?</p>",
        "id": 239821685,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621636797
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; None of the examples shown include a behavioral BC like that</p>",
        "id": 239821803,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621636888
    },
    {
        "content": "<p>[slack] &lt;tinosulzer&gt; not yet no</p>",
        "id": 239822062,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621637081
    },
    {
        "content": "<p>[slack] &lt;tinosulzer&gt; shouldn’t be too hard once we agree on a UI</p>",
        "id": 239822104,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621637107
    },
    {
        "content": "<p>[slack] &lt;tinosulzer&gt; but I don’t know anything about periodic BCs</p>",
        "id": 239822140,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621637140
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; ahh, all right then -- my own BC and derivative logic it is then. At least DiffEqOperators can do the stencils for me</p>",
        "id": 239822302,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621637247
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; I'll keep an eye on the development of this automatic MOL, it's definitely intriguing</p>",
        "id": 239822329,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621637269
    },
    {
        "content": "<p>[slack] &lt;tinosulzer&gt; would be great to have a pseudospectral method in the automatic MOL at some point!</p>",
        "id": 239822869,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621637647
    },
    {
        "content": "<p>[gitter] &lt;detrin&gt; Hello, do you plan adding solver for integrodifferential equations in near future? I am solving following equation and I used an advice here (<a href=\"https://github.com/SciML/DifferentialEquations.jl/issues/383\">https://github.com/SciML/DifferentialEquations.jl/issues/383</a>)  and implemented it here (<a href=\"https://github.com/detrin/OpenQuantumSystems.jl/blob/master/src/master.jl\">https://github.com/detrin/OpenQuantumSystems.jl/blob/master/src/master.jl</a>)</p>",
        "id": 240029440,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621850051
    },
    {
        "content": "<p>[gitter] &lt;detrin&gt; <a href=\"https://files.gitter.im/57bf79b040f3a6eec0615ecf/BHee/image.png\">![image.png](https://files.gitter.im/57bf79b040f3a6eec0615ecf/BHee/thumb/image.png)</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.gitter.im/57bf79b040f3a6eec0615ecf/BHee/image.png\" title=\"![image.png](https://files.gitter.im/57bf79b040f3a6eec0615ecf/BHee/thumb/image.png)\"><img src=\"https://uploads.zulipusercontent.net/c725525dde95ec68e9387a3bb69d10552ce76e51/68747470733a2f2f66696c65732e6769747465722e696d2f3537626637396230343066336136656563303631356563662f424865652f696d6167652e706e67\"></a></div>",
        "id": 240029451,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621850055
    },
    {
        "content": "<p>[gitter] &lt;detrin&gt; *boundaries from 0 to t</p>",
        "id": 240029527,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621850112
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @detrin yes, it's coming to <a href=\"https://github.com/search?q=NeuralPDE.jl&amp;type=Repositories\">NeuralPDE.jl</a> soon, and in fact is one of the funded summer GSoC projects.</p>",
        "id": 240029533,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621850115
    },
    {
        "content": "<p>[gitter] &lt;detrin&gt; Superb, do you also consider implementation without machine learning method?</p>",
        "id": 240029684,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621850211
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; considering, but not going to happen over the summer</p>",
        "id": 240030199,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621850515
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it just doesn't make all that much sense. The ML methods are pretty good on this exact type of problem</p>",
        "id": 240030248,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621850532
    },
    {
        "content": "<p>[gitter] &lt;detrin&gt; I understand. ML methods are useful when it comes to speed, but I am not allowed to build theory or any kind of approximation that is tested against ML methods. It has to be tested against exact methods even if it is stupidly slow.</p>",
        "id": 240030594,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621850743
    },
    {
        "content": "<p>[gitter] &lt;detrin&gt; Focus of <a href=\"https://github.com/search?q=OpenQuantumSystems.jl&amp;type=Repositories\">OpenQuantumSystems.jl</a> are for now quantum systems found in photosynthesis. I think people in different fields, share similar need for exact methods</p>",
        "id": 240030724,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621850816
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; our ML-based method has strict error bounding.</p>",
        "id": 240030957,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621850969
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Global error too</p>",
        "id": 240030965,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621850978
    },
    {
        "content": "<p>[slack] &lt;atiyo ghosh&gt; Do you have a reference for how the error bounding works? I wasn’t aware of the existence of this kind of thing for ML differential equation solutions---would love to know more.</p>",
        "id": 240031720,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621851505
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; not yet, let me write it. Gosh <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 240033151,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621852511
    },
    {
        "content": "<p>[gitter] &lt;detrin&gt; Anyway, in case there will be any future implementation I am highly interested</p>",
        "id": 240033821,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621852962
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah we'll keep digging in this space</p>",
        "id": 240034271,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621853258
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the neural network approach is a good entryway though.</p>",
        "id": 240034275,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621853265
    },
    {
        "content": "<p>[slack] &lt;atiyo ghosh&gt; Looking forward to that one!</p>",
        "id": 240041550,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621857820
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Latest SciML blog post: <a href=\"https://sciml.ai/news/2021/05/24/QNDF/\">https://sciml.ai/news/2021/05/24/QNDF/</a></p>",
        "id": 240045272,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621860071
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; @yingbo_ma What do you think about making <code>check_eqs_u0</code> give a warning instead of an error if the number of equations is less than the number of states? Let me know your thoughts -- I'll add a PR for whichever (warning or kwarg) you think makes more sense so we can get ReactionNetworkImporters updated today.</p>",
        "id": 240057463,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621866001
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; I think it should error, but the check can be disabled.</p>",
        "id": 240057558,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621866032
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; is that at construction time?</p>",
        "id": 240059164,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621866716
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Right now <code>ODEProblem</code> errors out from a check if the number of equations does not equal the number of states. This causes issues with some Bionetgen files which have states that have no equation (so the state is constant in time), it will also cause issues with hybrid systems (ODEs + Jumps, where you may not use ODEs for all states).</p>",
        "id": 240061218,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621867674
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; (This is in ModelingToolkit)</p>",
        "id": 240061281,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621867692
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; There’s must be a check because the built function is often marked by <code>@inbounds</code> . If the u0 length is wrong, then bad things will happen</p>",
        "id": 240063296,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621868647
    },
    {
        "content": "<p>[slack] &lt;PiotrSokol&gt; weird q (asking in case anyone knows off the top of their head): is <code>d_discontinuities</code> (or <code>tstops</code>) propagated to <code>ODEAdjointProblem</code>?<br>\nReason I’m asking is I have a inhomogeneous system with piecewise constant driving term, which makes the adjoint unstable. I figured that if I put either <code>d_discontinuities</code> or <code>tstops</code> at the points where the derivative of the input is not defined, I can get the adjoint solver to treat these point as new initial values.</p>",
        "id": 240130342,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621902732
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I think it is? That's a good thing to test.</p>",
        "id": 240132378,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621904983
    },
    {
        "content": "<p>[slack] &lt;jon.norberg935&gt; Hi all, I am defining a system as</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    @variables t u[1:N](t) Y(t) ū[1:N](t) q[1:N](t) w̃[1:N](t)\n    @parameters z[1:N]\n    @derivatives D^1~t\n\n    D = Differential(t)\n\n    #generate the equations\n    eqns=[D(u[i]) ~ Y*u[i]* w̃[i] + z[i]*q[i] * ū[i]*u[i] for i in 1:N]\n    push!(eqns,D(Y)~ (1-Y)*Y-sum(u)*Y)\n\n    #generate the ODE\n    ODESystem(\n        eqns;\n        name=name\n        )\nend```\nI then use (not sure if this is right)\n```@named A=x(3)```\nMy question is how to make the x0 and p for initial conditions and parameters. I tried for the initial conditions:\n```x0=[u=&gt;zeros(3), Y=1.0, q=&gt;zeros(3), ū=ones(3), w̃=rand(3)]```\nas well as\n```x0=[A.u=&gt;zeros(3), A.Y=1.0, A.q=&gt;zeros(3), A.ū=ones(3), A:w̃=rand(3)]```\nbut that does not work (ERROR: LoadError: ArgumentError: Variable u does not exist). Trying to find an example in the docs/test but no luck so far. any hint appreciated. Thanks\n</code></pre></div>",
        "id": 240172807,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621941927
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you'll need to do <code>A.u[1] = ...</code> etc.</p>",
        "id": 240173308,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621942252
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @yingbo_ma and @shashi are actually working on this right now.</p>",
        "id": 240173319,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621942260
    },
    {
        "content": "<p>[slack] &lt;jon.norberg935&gt; so<br>\n<code>x0=[[A.u[i]=0.0 for i in 1:N], [A.q[i]=0.0 for i in 1:N], etc...]</code></p>",
        "id": 240173495,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621942365
    },
    {
        "content": "<p>[slack] &lt;jon.norberg935&gt; I still get ERROR: ArgumentError: Variable u does not exist</p>",
        "id": 240173712,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621942501
    },
    {
        "content": "<p>[slack] &lt;jon.norberg935&gt; <code>julia&gt; states(A)\n10-element Vector{Term{Real, Nothing}}:\n u₁(t)\n u₂(t)\n u₃(t)\n Y(t)\n ū₁(t)\n w̃₁(t)\n w̃₂(t)\n ū₂(t)\n ū₃(t)\n w̃₃(t)</code></p>",
        "id": 240174666,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621943092
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; I'm seeing issues with <code>DiffEqBase &gt;= 6.61.0</code> with the new <code>FastBroadcast</code> . I cannot work out why, but my <code>Documenter</code> builds now seem to hang, timing out after the 6 hour CI time limit. If I roll back to <code>DiffEqBase == 6.60.1</code> (keeping all other packages at the same version, except now there is no <code>FastBroadcast</code>), the documentation step completes as normal (in ~15 minutes). Any ideas what could be going wrong? <span aria-label=\"oh no\" class=\"emoji emoji-1f615\" role=\"img\" title=\"oh no\">:oh_no:</span> @elrodc (sorry for the ping but might be of interest to you) It seems to hang on I believe the first page that tries to do some automatic differentiation on an ODEProblem (using <code>ForwardDiff</code>), and which uses a lot of ContinuousCallbacks (with a fairly significant memory penalty), though I'm not sure whether these are relevant.</p>",
        "id": 240175438,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621943557
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; Passing doc build (see \"Build and deploy\"): <a href=\"https://github.com/dpad/OrbitalTrajectories.jl/runs/2664506633?check_suite_focus=true\">https://github.com/dpad/OrbitalTrajectories.jl/runs/2664506633?check_suite_focus=true</a></p>",
        "id": 240175630,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621943701
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; Build that seems to have hung on the page I mentioned above (the only difference here is I upgraded to <code>DiffEqBase == 6.61.0</code> which also added <code>FastBroadcast == 0.1.8</code>):<br>\n<a href=\"https://github.com/dpad/OrbitalTrajectories.jl/runs/2664693639?check_suite_focus=true\">https://github.com/dpad/OrbitalTrajectories.jl/runs/2664693639?check_suite_focus=true</a></p>",
        "id": 240175716,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621943754
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes, you want to directly grab u_1</p>",
        "id": 240177700,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621944986
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yeah this is a @elrodc or @yingbo_ma thing.</p>",
        "id": 240177727,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621945014
    },
    {
        "content": "<p>[slack] &lt;dawbarton&gt; Where is the work on this happening? Is it in <a href=\"https://github.com/search?q=Symbolics.jl&amp;type=Repositories\">Symbolics.jl</a>? I was hoping to understand the direction of travel for vector-valued variables</p>",
        "id": 240183947,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621947998
    },
    {
        "content": "<p>[slack] &lt;jon.norberg935&gt; not getting it to work, tried something like:</p>\n<div class=\"codehilite\" data-code-language=\"x0\"><pre><span></span><code>sys.u₂=&gt;0.0\nsys.u₃=&gt;0.0\nsys.Y=&gt;1.0\nsys.ū₁=&gt;0.3\nsys.ū₂=&gt;0.3\nsys.ū₃=&gt;0.3\nsys.w̃₁=&gt;0.1\nsys.w̃₂=&gt;0.2\nsys.w̃₃=&gt;0.3]```\nbut it says ArgumentError: Term{Real, Nothing}[u₁(t), u₂(t), u₃(t), Y(t), ū₁(t), w̃₁(t), w̃₂(t), ū₂(t), ū₃(t), w̃₃(t)] are missing from the variable map. @yingbo_ma or @shashi if you have any suggestions I'd be grateful. don't want to bug Chris for this one 🙂\n</code></pre></div>",
        "id": 240184780,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621948379
    },
    {
        "content": "<p>[slack] &lt;I Mas&gt; Hi, I have measured data two outputs as a function of 2D position:  Zx=f(x,y), Zy=g(x,y). I would like to fit a model to it. From physics I know that the functions have to fulfill following relationship: dZx/dy = dZy/dx. Is there an approach which tries to minimize the error to the measurements and fulfilling the constraints. (for linear functions this would be constrained least squares). Are neural networks the way choose here?</p>",
        "id": 240184829,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621948408
    },
    {
        "content": "<p>[slack] &lt;jon.norberg935&gt; Summarised question:</p>\n<p>when doing <code>@variables a[1:N](t) b[1:N](t)</code></p>\n<p>how do I best set the initial conditions?</p>",
        "id": 240185551,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621948741
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>@variables a[1:N](t) b[1:N](t)</code> and then <code>a[i] =&gt; ...</code></p>",
        "id": 240186660,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621949239
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I'll get the update from Shashi later today <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 240186696,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621949257
    },
    {
        "content": "<p>[slack] &lt;Emir Hadzic&gt; are g(x,y) and f(x,y) known?</p>",
        "id": 240196039,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621952994
    },
    {
        "content": "<p>[slack] &lt;I Mas&gt; no</p>",
        "id": 240196278,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621953091
    },
    {
        "content": "<p>[slack] &lt;Emir Hadzic&gt; is there any dZy/dx or dZx/dy known?</p>",
        "id": 240196934,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621953367
    },
    {
        "content": "<p>[slack] &lt;I Mas&gt; no. just samples of Zx and Zy are taken</p>",
        "id": 240197025,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621953408
    },
    {
        "content": "<p>[slack] &lt;Emir Hadzic&gt; well you probably want some form of machine learning then since it'll just be a black box that will throw out something after you throw something in. If you want to constrain the function with dZx/dy = dZy/dx you'll just have to include it into your loss function with you data. So if you do say SSE for loss<br>\n<code>resid1 = dZy/dx - dZx/dy</code><br>\nthen<br>\n<code>resid2 = data - model_prediction</code><br>\nthen<br>\n<code>return resid1 + resid2</code></p>",
        "id": 240207841,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621957575
    },
    {
        "content": "<p>[gitter] &lt;spraharsh&gt; is there any way to pass in an explicit jacobian through diffeqpy? I tried doing something of this sort</p>\n<p><code>odefunc = de.ODEFunction(get_negative_grad, get_jacobian)</code> trying a naive translation from the julia docs, but I couldn't find anything in the diffeq docs</p>",
        "id": 240209290,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621958066
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>odefunc = de.ODEFunction(f,jac=jacfun)</code> @spraharsh</p>",
        "id": 240218272,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621961864
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; where the format of the Jacobian function is defined in the docs.</p>",
        "id": 240218302,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621961876
    },
    {
        "content": "<p>[slack] &lt;shashi&gt; Ok i should write up docs even though it may take a while to get it working fully</p>",
        "id": 240220068,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621962720
    },
    {
        "content": "<p>[slack] &lt;shashi&gt; See the PR on <a href=\"https://github.com/search?q=Symbolics.jl&amp;type=Repositories\">Symbolics.jl</a> that’s the main one.</p>",
        "id": 240220140,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621962739
    },
    {
        "content": "<p>[slack] &lt;shashi&gt; <a href=\"https://github.com/JuliaSymbolics/Symbolics.jl/pull/197\">https://github.com/JuliaSymbolics/Symbolics.jl/pull/197</a></p>",
        "id": 240220221,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621962777
    },
    {
        "content": "<p>[slack] &lt;jpowers4&gt; I am curious if anyone knows how I can improve the speed of my differential equation:</p>\n<div class=\"codehilite\" data-code-language=\"S\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"nf\">sensor_location</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"n\">Float64</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">::</span><span class=\"n\">Float64</span><span class=\"p\">,</span> α<span class=\"o\">::</span><span class=\"n\">Float64</span><span class=\"p\">,</span> <span class=\"n\">lx</span><span class=\"o\">::</span><span class=\"n\">Float64</span><span class=\"p\">,</span> <span class=\"n\">ly</span><span class=\"o\">::</span><span class=\"n\">Float64</span><span class=\"p\">)</span>\n    <span class=\"n\">return</span> <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"nf\">R</span><span class=\"p\">(</span>α<span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">[</span><span class=\"n\">lx</span><span class=\"p\">,</span> <span class=\"n\">ly</span><span class=\"p\">]</span>\n<span class=\"n\">end</span>\n\n<span class=\"n\">function</span> <span class=\"nf\">sensor_value</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"o\">::</span><span class=\"n\">Vector</span><span class=\"p\">{</span><span class=\"n\">Float64</span><span class=\"p\">},</span> <span class=\"n\">lx</span><span class=\"o\">::</span><span class=\"n\">Float64</span><span class=\"p\">,</span> <span class=\"n\">ly</span><span class=\"o\">::</span><span class=\"n\">Float64</span><span class=\"p\">)</span>\n    <span class=\"n\">return</span> <span class=\"m\">1.0</span> <span class=\"o\">/</span> <span class=\"nf\">norm</span><span class=\"p\">(</span><span class=\"nf\">sensor_location</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">[</span><span class=\"m\">1</span><span class=\"p\">],</span> <span class=\"n\">u</span><span class=\"p\">[</span><span class=\"m\">2</span><span class=\"p\">],</span> <span class=\"n\">u</span><span class=\"p\">[</span><span class=\"m\">3</span><span class=\"p\">],</span> <span class=\"n\">lx</span><span class=\"p\">,</span> <span class=\"n\">ly</span><span class=\"p\">))</span><span class=\"o\">^</span><span class=\"m\">2</span>\n<span class=\"n\">end</span>\n\n<span class=\"n\">sv1</span> <span class=\"o\">=</span> <span class=\"nf\">zeros</span><span class=\"p\">(</span><span class=\"m\">5001</span><span class=\"p\">);</span> <span class=\"n\">sv2</span> <span class=\"o\">=</span> <span class=\"nf\">zeros</span><span class=\"p\">(</span><span class=\"m\">5001</span><span class=\"p\">);</span> <span class=\"n\">istep</span> <span class=\"o\">=</span> <span class=\"m\">1</span><span class=\"p\">;</span>\n<span class=\"n\">function</span> <span class=\"n\">robot_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">du</span><span class=\"o\">::</span><span class=\"n\">Vector</span><span class=\"p\">{</span><span class=\"n\">Float64</span><span class=\"p\">},</span> <span class=\"n\">u</span><span class=\"o\">::</span><span class=\"n\">Vector</span><span class=\"p\">{</span><span class=\"n\">Float64</span><span class=\"p\">},</span> <span class=\"n\">p</span><span class=\"o\">::</span><span class=\"n\">Tuple</span><span class=\"p\">{</span><span class=\"n\">Tuple</span><span class=\"p\">{</span><span class=\"n\">Float64</span><span class=\"p\">,</span><span class=\"n\">Float64</span><span class=\"p\">},</span><span class=\"n\">Tuple</span><span class=\"p\">{</span><span class=\"n\">Float64</span><span class=\"p\">,</span><span class=\"n\">Float64</span><span class=\"p\">},</span><span class=\"n\">Dense</span><span class=\"p\">{</span><span class=\"nf\">typeof</span><span class=\"p\">(</span><span class=\"n\">identity</span><span class=\"p\">),</span><span class=\"n\">Array</span><span class=\"p\">{</span><span class=\"n\">Float64</span><span class=\"p\">,</span><span class=\"m\">2</span><span class=\"p\">},</span><span class=\"n\">Array</span><span class=\"p\">{</span><span class=\"n\">Float64</span><span class=\"p\">,</span><span class=\"m\">1</span><span class=\"p\">}}},</span> <span class=\"n\">t</span><span class=\"o\">::</span><span class=\"n\">Float64</span><span class=\"p\">)</span>\n    <span class=\"n\">global</span> <span class=\"n\">sv1</span><span class=\"p\">,</span> <span class=\"n\">sv2</span><span class=\"p\">,</span> <span class=\"n\">istep</span>\n    <span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"nf\">sensor_value</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"m\">1</span><span class=\"p\">]</span><span class=\"kc\">...</span><span class=\"p\">);</span> <span class=\"n\">s2</span> <span class=\"o\">=</span> <span class=\"nf\">sensor_value</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"m\">2</span><span class=\"p\">]</span><span class=\"kc\">...</span><span class=\"p\">);</span>\n    <span class=\"n\">sv1</span><span class=\"p\">[</span><span class=\"n\">istep</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">s1</span><span class=\"p\">;</span> <span class=\"n\">sv2</span><span class=\"p\">[</span><span class=\"n\">istep</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">s2</span><span class=\"p\">;</span> <span class=\"n\">istep</span> <span class=\"o\">+=</span> <span class=\"m\">1</span><span class=\"p\">;</span>\n    <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"m\">3</span><span class=\"p\">]([</span><span class=\"n\">s1</span><span class=\"p\">,</span> <span class=\"n\">s2</span><span class=\"p\">])</span>\n    <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"m\">2</span>\n    <span class=\"n\">du</span><span class=\"p\">[</span><span class=\"m\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"o\">*</span><span class=\"nf\">cos</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">[</span><span class=\"m\">3</span><span class=\"p\">])</span>\n    <span class=\"n\">du</span><span class=\"p\">[</span><span class=\"m\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"o\">*</span><span class=\"nf\">sin</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">[</span><span class=\"m\">3</span><span class=\"p\">])</span>\n    <span class=\"n\">du</span><span class=\"p\">[</span><span class=\"m\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">diff</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">)[</span><span class=\"m\">1</span><span class=\"p\">]</span>\n<span class=\"n\">end</span>\n\n<span class=\"n\">function</span> <span class=\"nf\">evaluate</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"o\">::</span><span class=\"n\">Int</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"o\">::</span><span class=\"n\">Tuple</span><span class=\"p\">{</span><span class=\"n\">Tuple</span><span class=\"p\">{</span><span class=\"n\">Float64</span><span class=\"p\">,</span><span class=\"n\">Float64</span><span class=\"p\">},</span><span class=\"n\">Tuple</span><span class=\"p\">{</span><span class=\"n\">Float64</span><span class=\"p\">,</span><span class=\"n\">Float64</span><span class=\"p\">},</span><span class=\"n\">Dense</span><span class=\"p\">{</span><span class=\"nf\">typeof</span><span class=\"p\">(</span><span class=\"n\">identity</span><span class=\"p\">),</span><span class=\"n\">Array</span><span class=\"p\">{</span><span class=\"n\">Float64</span><span class=\"p\">,</span><span class=\"m\">2</span><span class=\"p\">},</span><span class=\"n\">Array</span><span class=\"p\">{</span><span class=\"n\">Float64</span><span class=\"p\">,</span><span class=\"m\">1</span><span class=\"p\">}}})</span>\n    <span class=\"n\">global</span> <span class=\"n\">sv1</span><span class=\"p\">,</span> <span class=\"n\">sv2</span><span class=\"p\">,</span> <span class=\"n\">istep</span>\n    <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"m\">4.0</span><span class=\"o\">/</span><span class=\"nf\">sqrt</span><span class=\"p\">(</span><span class=\"m\">2.0</span><span class=\"p\">)</span>\n    <span class=\"n\">u0</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"n\">len</span><span class=\"p\">,</span> <span class=\"n\">len</span><span class=\"p\">,</span> <span class=\"m\">0.0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">len</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">len</span><span class=\"p\">,</span> <span class=\"m\">0.0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">len</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">len</span><span class=\"p\">,</span> <span class=\"m\">0.0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">len</span><span class=\"p\">,</span> <span class=\"n\">len</span><span class=\"p\">,</span> <span class=\"m\">0.0</span><span class=\"p\">]]</span>\n    <span class=\"n\">tspan</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"m\">0.0</span><span class=\"p\">,</span> <span class=\"m\">500.0</span><span class=\"p\">)</span>\n    <span class=\"n\">sv1</span> <span class=\"o\">=</span> <span class=\"nf\">zeros</span><span class=\"p\">(</span><span class=\"m\">5001</span><span class=\"p\">);</span> <span class=\"n\">sv2</span> <span class=\"o\">=</span> <span class=\"nf\">zeros</span><span class=\"p\">(</span><span class=\"m\">5001</span><span class=\"p\">);</span> <span class=\"n\">istep</span> <span class=\"o\">=</span> <span class=\"m\">1</span><span class=\"p\">;</span>\n    <span class=\"n\">prob</span> <span class=\"o\">=</span> <span class=\"nf\">ODEProblem</span><span class=\"p\">(</span><span class=\"n\">robot_eq</span><span class=\"o\">!</span><span class=\"p\">,</span><span class=\"n\">u0</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">],</span><span class=\"n\">tspan</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">)</span>\n    <span class=\"n\">sol</span> <span class=\"o\">=</span> <span class=\"nf\">solve</span><span class=\"p\">(</span><span class=\"n\">prob</span><span class=\"p\">,</span> <span class=\"nf\">Euler</span><span class=\"p\">(),</span> <span class=\"n\">dt</span><span class=\"o\">=</span><span class=\"m\">0.1</span><span class=\"p\">)</span>\n    <span class=\"n\">return</span> <span class=\"n\">sol.u</span><span class=\"p\">,</span> <span class=\"n\">sv1</span><span class=\"p\">,</span> <span class=\"n\">sv2</span>\n<span class=\"n\">end``</span>`\n<span class=\"n\">This</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">simulation</span> <span class=\"n\">of</span> <span class=\"n\">something</span> <span class=\"n\">like</span> <span class=\"n\">a</span> <span class=\"n\">roomba</span> <span class=\"n\">if</span> <span class=\"n\">you</span> <span class=\"n\">are</span> <span class=\"n\">curious</span> <span class=\"n\">and</span> <span class=\"n\">it</span> <span class=\"n\">has</span> <span class=\"n\">two</span> <span class=\"n\">light</span> <span class=\"n\">sensors.</span> <span class=\"n\">The</span> <span class=\"n\">thing</span> <span class=\"n\">that</span> <span class=\"n\">makes</span> <span class=\"n\">this</span> <span class=\"n\">so</span> <span class=\"n\">slow</span> <span class=\"n\">is</span> <span class=\"n\">saving</span> <span class=\"n\">the</span> <span class=\"n\">sensor</span> <span class=\"n\">values</span> <span class=\"n\">into</span> <span class=\"n\">the</span> <span class=\"n\">vectors</span> <span class=\"n\">sv1</span> <span class=\"n\">and</span> <span class=\"n\">sv2</span><span class=\"p\">,</span> <span class=\"n\">if</span> <span class=\"n\">I</span> <span class=\"n\">don</span>’<span class=\"n\">t</span> <span class=\"n\">save</span> <span class=\"nf\">those </span><span class=\"p\">(</span><span class=\"n\">which</span> <span class=\"n\">I</span> <span class=\"n\">need</span> <span class=\"n\">to</span> <span class=\"n\">for</span> <span class=\"n\">later</span> <span class=\"n\">analysis</span><span class=\"p\">)</span> <span class=\"n\">then</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">blazing</span> <span class=\"n\">fast.</span> <span class=\"n\">Any</span> <span class=\"n\">ideas</span> <span class=\"n\">about</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">keep</span> <span class=\"n\">track</span> <span class=\"n\">of</span> <span class=\"n\">those</span> <span class=\"n\">values</span> <span class=\"n\">over</span> <span class=\"n\">time</span> <span class=\"n\">without</span> <span class=\"n\">losing</span> <span class=\"n\">to</span> <span class=\"n\">much</span> <span class=\"n\">performance</span><span class=\"o\">?</span>\n</code></pre></div>",
        "id": 240243925,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621973640
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; sv1, sv2 being globals makes things slow. Can you pack them into parameters instead? Also, using StaticArrays in <code>sensor_location</code> may provide further speedup (once the global thing is fixed)</p>",
        "id": 240248275,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621975849
    },
    {
        "content": "<p>[slack] &lt;SebastianM-C&gt; You can also use <a href=\"https://github.com/search?q=Rotations.jl&amp;type=Repositories\">Rotations.jl</a> for the rotation</p>",
        "id": 240248548,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621975987
    },
    {
        "content": "<p>[slack] &lt;jpowers4&gt; So like this….? it seems pretty ugly not that makes it a bad thing always</p>\n<div class=\"codehilite\" data-code-language=\"S\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"nf\">sensor_location</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> α<span class=\"p\">,</span> <span class=\"n\">lx</span><span class=\"p\">,</span> <span class=\"n\">ly</span><span class=\"p\">)</span>\n    <span class=\"n\">return</span> <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"nf\">R</span><span class=\"p\">(</span>α<span class=\"p\">)</span><span class=\"o\">*</span><span class=\"p\">[</span><span class=\"n\">lx</span><span class=\"p\">,</span> <span class=\"n\">ly</span><span class=\"p\">]</span>\n<span class=\"n\">end</span>\n\n<span class=\"n\">function</span> <span class=\"nf\">sensor_value</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"o\">::</span><span class=\"n\">Vector</span><span class=\"p\">{</span><span class=\"n\">Float64</span><span class=\"p\">},</span> <span class=\"n\">lx</span><span class=\"o\">::</span><span class=\"n\">Float64</span><span class=\"p\">,</span> <span class=\"n\">ly</span><span class=\"o\">::</span><span class=\"n\">Float64</span><span class=\"p\">)</span>\n    <span class=\"n\">return</span> <span class=\"m\">1.0</span> <span class=\"o\">/</span> <span class=\"nf\">norm</span><span class=\"p\">(</span><span class=\"nf\">sensor_location</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">[</span><span class=\"m\">1</span><span class=\"p\">],</span> <span class=\"n\">u</span><span class=\"p\">[</span><span class=\"m\">2</span><span class=\"p\">],</span> <span class=\"n\">u</span><span class=\"p\">[</span><span class=\"m\">3</span><span class=\"p\">],</span> <span class=\"n\">lx</span><span class=\"p\">,</span> <span class=\"n\">ly</span><span class=\"p\">))</span><span class=\"o\">^</span><span class=\"m\">2</span>\n<span class=\"n\">end</span>\n\n<span class=\"n\">function</span> <span class=\"n\">robot_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">du</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"n\">s1</span> <span class=\"o\">=</span> <span class=\"nf\">sensor_value</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"m\">1</span><span class=\"p\">]</span><span class=\"kc\">...</span><span class=\"p\">);</span> <span class=\"n\">s2</span> <span class=\"o\">=</span> <span class=\"nf\">sensor_value</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"m\">2</span><span class=\"p\">]</span><span class=\"kc\">...</span><span class=\"p\">);</span>\n    <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"m\">4</span><span class=\"p\">][</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"m\">6</span><span class=\"p\">][</span><span class=\"m\">1</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">s1</span><span class=\"p\">;</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"m\">5</span><span class=\"p\">][</span><span class=\"n\">p</span><span class=\"p\">[</span><span class=\"m\">6</span><span class=\"p\">][</span><span class=\"m\">1</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">s2</span><span class=\"p\">;</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"m\">6</span><span class=\"p\">][</span><span class=\"m\">1</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"m\">1</span><span class=\"p\">;</span>\n    <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"m\">3</span><span class=\"p\">]([</span><span class=\"n\">s1</span><span class=\"p\">,</span> <span class=\"n\">s2</span><span class=\"p\">])</span>\n    <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"nf\">sum</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"m\">2</span>\n    <span class=\"n\">du</span><span class=\"p\">[</span><span class=\"m\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"o\">*</span><span class=\"nf\">cos</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">[</span><span class=\"m\">3</span><span class=\"p\">])</span>\n    <span class=\"n\">du</span><span class=\"p\">[</span><span class=\"m\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"o\">*</span><span class=\"nf\">sin</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">[</span><span class=\"m\">3</span><span class=\"p\">])</span>\n    <span class=\"n\">du</span><span class=\"p\">[</span><span class=\"m\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nf\">diff</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">)[</span><span class=\"m\">1</span><span class=\"p\">]</span>\n<span class=\"n\">end</span>\n\n<span class=\"n\">function</span> <span class=\"nf\">evaluate</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"p\">,</span> _<span class=\"n\">p</span><span class=\"p\">)</span>\n    <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"m\">4.0</span><span class=\"o\">/</span><span class=\"nf\">sqrt</span><span class=\"p\">(</span><span class=\"m\">2.0</span><span class=\"p\">)</span>\n    <span class=\"n\">u0</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"n\">len</span><span class=\"p\">,</span> <span class=\"n\">len</span><span class=\"p\">,</span> <span class=\"m\">0.0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">len</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">len</span><span class=\"p\">,</span> <span class=\"m\">0.0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">len</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">len</span><span class=\"p\">,</span> <span class=\"m\">0.0</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">len</span><span class=\"p\">,</span> <span class=\"n\">len</span><span class=\"p\">,</span> <span class=\"m\">0.0</span><span class=\"p\">]]</span>\n    <span class=\"n\">tspan</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"m\">0.0</span><span class=\"p\">,</span> <span class=\"m\">500.0</span><span class=\"p\">)</span>\n    <span class=\"n\">sv1</span> <span class=\"o\">=</span> <span class=\"nf\">zeros</span><span class=\"p\">(</span><span class=\"m\">5001</span><span class=\"p\">);</span> <span class=\"n\">sv2</span> <span class=\"o\">=</span> <span class=\"nf\">zeros</span><span class=\"p\">(</span><span class=\"m\">5001</span><span class=\"p\">);</span> <span class=\"n\">istep</span> <span class=\"o\">=</span> <span class=\"m\">1</span><span class=\"p\">;</span>\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"p\">(</span>_<span class=\"n\">p...</span><span class=\"p\">,</span><span class=\"n\">sv1</span><span class=\"p\">,</span><span class=\"n\">sv2</span><span class=\"p\">,[</span><span class=\"n\">istep</span><span class=\"p\">])</span>\n    <span class=\"n\">prob</span> <span class=\"o\">=</span> <span class=\"nf\">ODEProblem</span><span class=\"p\">(</span><span class=\"n\">robot_eq</span><span class=\"o\">!</span><span class=\"p\">,</span><span class=\"n\">u0</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">],</span><span class=\"n\">tspan</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">)</span>\n    <span class=\"n\">sol</span> <span class=\"o\">=</span> <span class=\"nf\">solve</span><span class=\"p\">(</span><span class=\"n\">prob</span><span class=\"p\">,</span> <span class=\"nf\">Euler</span><span class=\"p\">(),</span> <span class=\"n\">dt</span><span class=\"o\">=</span><span class=\"m\">0.1</span><span class=\"p\">)</span>\n    <span class=\"n\">return</span> <span class=\"n\">sol.u</span><span class=\"p\">,</span> <span class=\"n\">sv1</span><span class=\"p\">,</span> <span class=\"n\">sv2</span>\n<span class=\"n\">end``</span>`\n</code></pre></div>",
        "id": 240248713,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621976080
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; Yeah, something like that. To make it a bit cleaner and separate things, you could make <code>p</code> a named tuple and use <a href=\"https://github.com/search?q=UnPack.jl&amp;type=Repositories\">UnPack.jl</a>, e.g.,</p>\n<div class=\"codehilite\" data-code-language=\"p_with_s1_s2\"><pre><span></span><code>...\n@unpack p = p_with_s1_s2\n@unpack s1,s2 = p_with_s1_s2```\n</code></pre></div>",
        "id": 240248987,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621976231
    },
    {
        "content": "<p>[slack] &lt;devmotion&gt; I just checked the mass matrix support in DelayDiffEq with a DDAE formulation of an SIR model. This revealed a bug (ArrayInterface was not imported) which is fixed by <a href=\"https://github.com/SciML/DelayDiffEq.jl/pull/217\">https://github.com/SciML/DelayDiffEq.jl/pull/217</a>. For the example Rosenbrock23 and Rodas4 seemed to work quite well but I only tried these recommended solvers and a random selection from the docs (<a href=\"https://diffeq.sciml.ai/stable/solvers/dae_solve/#OrdinaryDiffEq.jl-(Mass-Matrix)\">https://diffeq.sciml.ai/stable/solvers/dae_solve/#OrdinaryDiffEq.jl-(Mass-Matrix)</a>), so maybe some other algorithm works even better.</p>",
        "id": 240259911,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621982900
    },
    {
        "content": "<p>[gitter] &lt;spraharsh&gt; is there anyway to get the values from solver.destats, not just print the statistics</p>",
        "id": 240265907,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621988041
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; look at <code>fieldnames</code></p>",
        "id": 240266441,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621988612
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; they are all in there</p>",
        "id": 240266448,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621988615
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; I am not sure I understand it. You don’t need <code>sv1</code> and <code>sv2</code>for the evolution, right, just for post-processing. You only need <code>s1</code> and <code>s2</code>, which do not depend on the history. Can’t you simply compute them afterwards with <code>sv1 = sensor_value.(sol.u, p[1]…)</code> and similarly for <code>sv2</code>?</p>",
        "id": 240266462,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621988629
    },
    {
        "content": "<p>[slack] &lt;vaibhavdixit02&gt; ```julia&gt; function loss(p)<br>\n         tmp_prob = remake(prob, p=p)<br>\n         tmp_sol = solve(tmp_prob,Tsit5(),saveat=0.1)<br>\n         if size(tmp_sol) == size(dataset)<br>\n           return sum(abs2,Array(tmp_sol) - dataset)<br>\n         else<br>\n           return Inf<br>\n         end<br>\n       end<br>\nloss (generic function with 1 method)</p>\n<p>julia&gt; Zygote.gradient(loss, [26.225759667446752, 7.198938864583702, 12.190040521384217, 0.5404173818868215])<br>\n┌ Warning: Interrupted. Larger maxiters is needed.<br>\n└ @ SciMLBase ~/.julia/packages/SciMLBase/9EjAY/src/integrator_interface.jl:331<br>\n┌ Warning: Instability detected. Aborting<br>\n└ @ SciMLBase ~/.julia/packages/SciMLBase/9EjAY/src/integrator_interface.jl:351<br>\n([0.0, 0.0, 0.0, 0.0],)</p>\n<p>julia&gt; function loss(p)<br>\n         tmp_prob = remake(prob, p=p)<br>\n         tmp_sol = solve(tmp_prob,Tsit5(),saveat=0.1)<br>\n         if tmp_sol.retcode == :Success<br>\n           return sum(abs2,Array(tmp_sol) - dataset)<br>\n         else<br>\n           return Inf<br>\n         end<br>\n       end<br>\nloss (generic function with 1 method)</p>\n<p>julia&gt; Zygote.gradient(loss, [26.225759667446752, 7.198938864583702, 12.190040521384217, 0.5404173818868215])<br>\n┌ Warning: Interrupted. Larger maxiters is needed.<br>\n└ @ SciMLBase ~/.julia/packages/SciMLBase/9EjAY/src/integrator_interface.jl:331<br>\n(nothing,)```</p>",
        "id": 240273087,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621996086
    },
    {
        "content": "<p>[slack] &lt;vaibhavdixit02&gt; This is similar to <a href=\"https://github.com/FluxML/Zygote.jl/issues/802\">https://github.com/FluxML/Zygote.jl/issues/802</a>, the <code>retcode</code> check makes Zygote return <code>nothing</code>, suggestions for how this can be handled?</p>",
        "id": 240273126,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1621996162
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; That’s pretty exotic. Shouldn’t it be a Documenter issue?</p>",
        "id": 240283439,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622010056
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; As far as I can tell Documenter is just calling @eval within an IO capture</p>",
        "id": 240283632,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622010279
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; Running:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">┌</span> <span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"n\">Inactive</span> <span class=\"n\">precompile</span> <span class=\"n\">statement</span>\n<span class=\"n\">└</span>   <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">RecipesBase</span><span class=\"o\">.</span><span class=\"kt\">apply_recipe</span><span class=\"p\">),</span> <span class=\"kt\">AbstractDict</span><span class=\"p\">{</span><span class=\"kt\">Symbol</span><span class=\"p\">,</span> <span class=\"kt\">Any</span><span class=\"p\">},</span> <span class=\"kt\">AbstractMatrix</span><span class=\"p\">}</span>\n<span class=\"n\">┌</span> <span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"n\">Inactive</span> <span class=\"n\">precompile</span> <span class=\"n\">statement</span>\n<span class=\"n\">└</span>   <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">RecipesPipeline</span><span class=\"o\">.</span><span class=\"kt\">_apply_type_recipe</span><span class=\"p\">),</span> <span class=\"kt\">Any</span><span class=\"p\">,</span> <span class=\"kt\">AbstractArray</span><span class=\"p\">,</span> <span class=\"kt\">Any</span><span class=\"p\">}</span>\n<span class=\"n\">┌</span> <span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"n\">Inactive</span> <span class=\"n\">precompile</span> <span class=\"n\">statement</span>\n<span class=\"n\">└</span>   <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">RecipesPipeline</span><span class=\"o\">.</span><span class=\"kt\">_apply_type_recipe</span><span class=\"p\">),</span> <span class=\"kt\">Any</span><span class=\"p\">,</span> <span class=\"kt\">RecipesPipeline</span><span class=\"o\">.</span><span class=\"kt\">Surface</span><span class=\"p\">,</span> <span class=\"kt\">Any</span><span class=\"p\">}</span>\n<span class=\"n\">┌</span> <span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"n\">Inactive</span> <span class=\"n\">precompile</span> <span class=\"n\">statement</span>\n<span class=\"n\">└</span>   <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"kt\">Plots</span><span class=\"o\">.</span><span class=\"kt\">GridLayout</span><span class=\"p\">},</span> <span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Vararg</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}}</span>\n<span class=\"n\">┌</span> <span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"n\">Inactive</span> <span class=\"n\">precompile</span> <span class=\"n\">statement</span>\n<span class=\"n\">└</span>   <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">RecipesBase</span><span class=\"o\">.</span><span class=\"kt\">apply_recipe</span><span class=\"p\">),</span> <span class=\"kt\">AbstractDict</span><span class=\"p\">{</span><span class=\"kt\">Symbol</span><span class=\"p\">,</span> <span class=\"kt\">Any</span><span class=\"p\">},</span> <span class=\"kt\">AbstractVector</span><span class=\"p\">{</span><span class=\"kt\">Plots</span><span class=\"o\">.</span><span class=\"kt\">OHLC</span><span class=\"p\">}}</span>\n<span class=\"n\">┌</span> <span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"n\">Inactive</span> <span class=\"n\">precompile</span> <span class=\"n\">statement</span>\n<span class=\"n\">└</span>   <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">RecipesBase</span><span class=\"o\">.</span><span class=\"kt\">plot</span><span class=\"p\">),</span> <span class=\"kt\">Any</span><span class=\"p\">,</span> <span class=\"kt\">Any</span><span class=\"p\">,</span> <span class=\"kt\">Vararg</span><span class=\"p\">{</span><span class=\"kt\">Any</span><span class=\"p\">}}</span>\n<span class=\"n\">┌</span> <span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"n\">Inactive</span> <span class=\"n\">precompile</span> <span class=\"n\">statement</span>\n<span class=\"n\">└</span>   <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">RecipesBase</span><span class=\"o\">.</span><span class=\"kt\">plot</span><span class=\"p\">),</span> <span class=\"kt\">Any</span><span class=\"p\">}</span>\n<span class=\"n\">┌</span> <span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"n\">Inactive</span> <span class=\"n\">precompile</span> <span class=\"n\">statement</span>\n<span class=\"n\">└</span>   <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">Plots</span><span class=\"o\">.</span><span class=\"kt\">yaxis!</span><span class=\"p\">),</span> <span class=\"kt\">Any</span><span class=\"p\">,</span> <span class=\"kt\">Any</span><span class=\"p\">}</span>\n<span class=\"n\">┌</span> <span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"n\">Inactive</span> <span class=\"n\">precompile</span> <span class=\"n\">statement</span>\n<span class=\"n\">└</span>   <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Plots</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"##text#138\"</span><span class=\"p\">,</span> <span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">Pairs</span><span class=\"p\">{</span><span class=\"kt\">Union</span><span class=\"p\">{},</span> <span class=\"kt\">Union</span><span class=\"p\">{},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{},</span> <span class=\"kt\">NamedTuple</span><span class=\"p\">{(),</span> <span class=\"kt\">Tuple</span><span class=\"p\">{}}},</span> <span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">Plots</span><span class=\"o\">.</span><span class=\"kt\">text</span><span class=\"p\">),</span> <span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Vararg</span><span class=\"p\">{</span><span class=\"kt\">Any</span><span class=\"p\">}}</span>\n<span class=\"n\">┌</span> <span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"n\">Inactive</span> <span class=\"n\">precompile</span> <span class=\"n\">statement</span>\n<span class=\"n\">└</span>   <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Plots</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"##text#138\"</span><span class=\"p\">,</span> <span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">Pairs</span><span class=\"p\">{</span><span class=\"kt\">Union</span><span class=\"p\">{},</span> <span class=\"kt\">Union</span><span class=\"p\">{},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{},</span> <span class=\"kt\">NamedTuple</span><span class=\"p\">{(),</span> <span class=\"kt\">Tuple</span><span class=\"p\">{}}},</span> <span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">Plots</span><span class=\"o\">.</span><span class=\"kt\">text</span><span class=\"p\">),</span> <span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"kt\">Symbol</span><span class=\"p\">,</span> <span class=\"kt\">Vararg</span><span class=\"p\">{</span><span class=\"kt\">Any</span><span class=\"p\">}}</span>\n<span class=\"n\">Downloading</span> <span class=\"n\">NAIF</span> <span class=\"n\">kernel</span><span class=\"o\">:</span> <span class=\"n\">pck00010</span><span class=\"o\">.</span><span class=\"n\">tpc100</span><span class=\"o\">%|</span><span class=\"n\">█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████</span><span class=\"o\">|</span> <span class=\"n\">Time</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">00</span><span class=\"o\">:</span><span class=\"mi\">02</span>\n<span class=\"n\">Downloading</span> <span class=\"n\">NAIF</span> <span class=\"n\">kernel</span><span class=\"o\">:</span> <span class=\"n\">pck00010</span><span class=\"o\">.</span><span class=\"n\">tpc100</span><span class=\"o\">%|</span><span class=\"n\">█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████</span><span class=\"o\">|</span> <span class=\"n\">Time</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">00</span><span class=\"o\">:</span><span class=\"mi\">02</span>\n<span class=\"n\">Downloading</span> <span class=\"n\">NAIF</span> <span class=\"n\">kernel</span><span class=\"o\">:</span> <span class=\"n\">pck00010</span><span class=\"o\">.</span><span class=\"n\">tpc100</span><span class=\"o\">%|</span><span class=\"n\">█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████</span><span class=\"o\">|</span> <span class=\"n\">Time</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">00</span><span class=\"o\">:</span><span class=\"mi\">02</span>\n<span class=\"n\">Downloading</span> <span class=\"n\">NAIF</span> <span class=\"n\">kernel</span><span class=\"o\">:</span> <span class=\"n\">pck00010</span><span class=\"o\">.</span><span class=\"n\">tpc100</span><span class=\"o\">%|</span><span class=\"n\">█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████</span><span class=\"o\">|</span> <span class=\"n\">Time</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">00</span><span class=\"o\">:</span><span class=\"mi\">02</span>\n<span class=\"n\">Downloading</span> <span class=\"n\">NAIF</span> <span class=\"n\">kernel</span><span class=\"o\">:</span> <span class=\"n\">de430</span><span class=\"o\">.</span><span class=\"n\">bsp100</span><span class=\"o\">%|</span><span class=\"n\">████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████</span><span class=\"o\">|</span> <span class=\"n\">Time</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">00</span><span class=\"o\">:</span><span class=\"mi\">18</span>\n<span class=\"n\">Downloading</span> <span class=\"n\">NAIF</span> <span class=\"n\">kernel</span><span class=\"o\">:</span> <span class=\"n\">de430</span><span class=\"o\">.</span><span class=\"n\">bsp100</span><span class=\"o\">%|</span><span class=\"n\">████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████</span><span class=\"o\">|</span> <span class=\"n\">Time</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">00</span><span class=\"o\">:</span><span class=\"mi\">18</span>\n<span class=\"n\">Downloading</span> <span class=\"n\">NAIF</span> <span class=\"n\">kernel</span><span class=\"o\">:</span> <span class=\"n\">de430</span><span class=\"o\">.</span><span class=\"n\">bsp100</span><span class=\"o\">%|</span><span class=\"n\">████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████</span><span class=\"o\">|</span> <span class=\"n\">Time</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">00</span><span class=\"o\">:</span><span class=\"mi\">18</span>\n<span class=\"n\">Downloading</span> <span class=\"n\">NAIF</span> <span class=\"n\">kernel</span><span class=\"o\">:</span> <span class=\"n\">de430</span><span class=\"o\">.</span><span class=\"n\">bsp100</span><span class=\"o\">%|</span><span class=\"n\">████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████</span><span class=\"o\">|</span> <span class=\"n\">Time</span><span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">00</span><span class=\"o\">:</span><span class=\"mi\">18</span>\n<span class=\"p\">[</span> <span class=\"n\">Info</span><span class=\"o\">:</span> <span class=\"n\">SetupBuildDirectory</span><span class=\"o\">:</span> <span class=\"n\">setting</span> <span class=\"n\">up</span> <span class=\"n\">build</span> <span class=\"n\">directory</span><span class=\"o\">.</span>\n<span class=\"p\">[</span> <span class=\"n\">Info</span><span class=\"o\">:</span> <span class=\"n\">Doctest</span><span class=\"o\">:</span> <span class=\"n\">running</span> <span class=\"n\">doctests</span><span class=\"o\">.</span>\n<span class=\"p\">[</span> <span class=\"n\">Info</span><span class=\"o\">:</span> <span class=\"n\">ExpandTemplates</span><span class=\"o\">:</span> <span class=\"n\">expanding</span> <span class=\"n\">markdown</span> <span class=\"n\">templates</span><span class=\"o\">.</span>\n<span class=\"n\">read</span><span class=\"o\">:</span> <span class=\"n\">Connection</span> <span class=\"n\">reset</span> <span class=\"n\">by</span> <span class=\"n\">peer</span>\n<span class=\"n\">send</span><span class=\"o\">:</span> <span class=\"n\">Broken</span> <span class=\"n\">pipe</span>\n<span class=\"n\">read</span><span class=\"o\">:</span> <span class=\"n\">Connection</span> <span class=\"n\">reset</span> <span class=\"n\">by</span> <span class=\"n\">peer</span>\n<span class=\"n\">send</span><span class=\"o\">:</span> <span class=\"n\">Broken</span> <span class=\"sa\">pipe</span><span class=\"sb\">```</span>\n</code></pre></div>",
        "id": 240293449,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622018257
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; seems to have hung at this point.</p>",
        "id": 240293465,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622018274
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; I don't know much about documenter or how it works. Killing it didn't give me a stacktrace, so I don't really know how to look into this, or why FastBroadcast would be related.</p>",
        "id": 240293562,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622018349
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; I think you've done it correctly</p>",
        "id": 240293596,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622018387
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; you should be seeing some debug outputs</p>",
        "id": 240293615,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622018401
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; which commit were you testing?</p>",
        "id": 240293680,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622018428
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; if you set the environment variable JULIA_DEBUG=Documenter it should give you debug outputs on that</p>",
        "id": 240293697,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622018445
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; if it matches my CI run, it should hang on \"┌ Debug: Running ExpanderPipeline on tutorials/QSOFamilies.md\"</p>",
        "id": 240293713,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622018462
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; I'm testing master</p>",
        "id": 240293845,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622018550
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; Should that be able to reproduce the problem?</p>",
        "id": 240293856,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622018559
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; I think so, yes</p>",
        "id": 240293867,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622018566
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; master was passing earlier, but if I try running some of those commits in CI again they are now failing, which implies a change in the environment (since it gets some more up to date dependencies)</p>",
        "id": 240293919,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622018613
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; What is it trying to connect to/why?</p>",
        "id": 240294046,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622018695
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; Not sure I understand the question?</p>",
        "id": 240294080,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622018719
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; \"Connection reset by peer\" \"send: Broken pipe\"</p>",
        "id": 240294100,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622018740
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; windows flash on my screen and disappear at around the same time.</p>",
        "id": 240294114,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622018751
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; I believe those are plotting stuff</p>",
        "id": 240294118,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622018757
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; It shouldn't be connecting to anything other than the artifacts it downloads (which you saw the progress bars above)</p>",
        "id": 240294178,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622018777
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; FWIW, I can run all the code in QSOFamilies.md with</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code>      <span class=\"n\">Status</span> <span class=\"sb\">`~/.julia/dev/OrbitalTrajectories/docs/Project.toml`</span>\n  <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"n\">b5f629d</span><span class=\"p\">]</span> <span class=\"n\">DiffEqBase</span> <span class=\"n\">v6</span><span class=\"mf\">.62.2</span>\n  <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"n\">c46a032</span><span class=\"p\">]</span> <span class=\"n\">DifferentialEquations</span> <span class=\"n\">v6</span><span class=\"mf\">.17.1</span><span class=\"sb\">```</span>\n</code></pre></div>",
        "id": 240295946,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622019910
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; Was this through Documenter? I am wondering if it's an issue of the way Documenter runs the code through @eval and captures IO?</p>",
        "id": 240295997,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622019960
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; I'm setting up a CI run now to use the versions you've listed above.</p>",
        "id": 240296195,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622020059
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; Running here: <a href=\"https://github.com/dpad/OrbitalTrajectories.jl/runs/2673530329?check_suite_focus=true\">https://github.com/dpad/OrbitalTrajectories.jl/runs/2673530329?check_suite_focus=true</a><br>\nIf it works fine it should be finished in &lt;30 mins</p>",
        "id": 240296605,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622020301
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; So @elrodc it definitely seems to still be stuck on the QSOFamilies.md part of the Documenter build</p>",
        "id": 240301820,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622023544
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; I will downgrade again to DiffEqBase 6.60.1 and run it again as a sanity check</p>",
        "id": 240301912,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622023585
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; I think you should file an issue with <a href=\"https://github.com/search?q=Documenter.jl&amp;type=Repositories\">Documenter.jl</a></p>",
        "id": 240302949,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622024186
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; I guess, but I don't really understand what could be going on. The build passed again with DiffEqBase 6.60.1, so it definitely feels like some funky interaction with the 6.61 changes :/</p>",
        "id": 240305320,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622025747
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; Any ideas on whether there could be issues with using @eval? Other than that I'm not sure, but thanks for trying to look into it! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 240307228,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622027062
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; I don't see how/why <code>@eval</code> would be an issue.<br>\nBecause I don't know anything about how <a href=\"https://github.com/search?q=Documenter.jl&amp;type=Repositories\">Documenter.jl</a> works, it's hard for me to speculate how or what it may be doing that is interacting poorly with the DiffEq code that does run fine on its own when Documenter is not involved.</p>",
        "id": 240310474,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622029099
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; <a href=\"https://github.com/JuliaDocs/Documenter.jl/issues/1584\">https://github.com/JuliaDocs/Documenter.jl/issues/1584</a><br>\n@elrodc @yingbo_ma</p>",
        "id": 240318551,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622033375
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; @yingbo_ma The documentation page that Documenter hangs on uses some automatic differentiation with ForwardDiff (which isn't used in the pages that Documenter manages to build before this one). Could there be an issue due to the new FastBroadcast perhaps?</p>",
        "id": 240319303,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622033735
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; I have no idea how FastBroadcast can make Documenter hang. That’s a bit absurd.</p>",
        "id": 240329293,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622037823
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; Yeah, me neither <span aria-label=\"oh no\" class=\"emoji emoji-1f615\" role=\"img\" title=\"oh no\">:oh_no:</span> I really have no clue what could be causing this but it definitely seems to be reproducible with the DiffEqBase version.</p>",
        "id": 240337902,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622041114
    },
    {
        "content": "<p>[slack] &lt;Dan Padilha&gt; For now I'm going to have to pin my DiffEqBase at 6.60.1 if I want to keep the same documentation building <span aria-label=\"oh no\" class=\"emoji emoji-1f615\" role=\"img\" title=\"oh no\">:oh_no:</span></p>",
        "id": 240338100,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622041174
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Sorry about the inconvenience. I just have no idea.</p>",
        "id": 240338246,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622041207
    },
    {
        "content": "<p>[slack] &lt;Emir Hadzic&gt; i'm going to assume that this is something that can't really be worked around: <a href=\"https://files.slack.com/files-pri/T68168MUP-F023UA12SGG/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F023UA12SGG/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F023UA12SGG/download/image.png\"><img src=\"https://uploads.zulipusercontent.net/6df3e372763003a49d61b7be4e5b879468702b58/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303233554131325347472f646f776e6c6f61642f696d6167652e706e67\"></a></div>",
        "id": 240350879,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622045952
    },
    {
        "content": "<p>[slack] &lt;vaibhavdixit02&gt; I don't think anyone will be able to help just by looking at that image, would be good to give a working example to run and reproduce for answering</p>",
        "id": 240358713,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622049260
    },
    {
        "content": "<p>[gitter] &lt;spraharsh&gt; I noticed that <code>integrator = de.init(prob, solver_type, rtol = reltol, atol = abstol)</code>instead of <code>integrator = de.init(prob, solver_type, reltol = reltol, abstol = abstol)</code> doesn't raise an error in diffeqpy, and instead runs smoothly with default <code>reltol</code> and <code>abstol</code>, is that a bug? I missed that for a while</p>",
        "id": 240367043,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622052879
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>atol</code> and <code>rtol</code> aren't arguments</p>",
        "id": 240367537,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622053110
    },
    {
        "content": "<p>[gitter] &lt;spraharsh&gt; yes, I was confused since it didn't raise an error</p>",
        "id": 240368451,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622053467
    },
    {
        "content": "<p>[gitter] &lt;spraharsh&gt; ( I had code running with that bug till I figured out my tolerances weren't taking effect)</p>",
        "id": 240368702,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622053574
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; Hi, is there a more up to date article about Solving PDEs in Julia with a similar spirit as this one?: <a href=\"https://nextjournal.com/sosiris-de/pde-2018\">https://nextjournal.com/sosiris-de/pde-2018</a></p>\n<p>I would like to direct some undergraduate students to a good overview like this.</p>",
        "id": 240400209,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622068364
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; no, I plan to make a new one after the summer where we have all of the new tools done.</p>",
        "id": 240400849,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622068796
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It most likely can be?</p>",
        "id": 240406548,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622073821
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what is your actual problem? There's no context but it sounds like you need a solver that can solve singular mass matrices, i.e. DAEs, which is described in the docs.</p>",
        "id": 240406607,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622073851
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://diffeq.sciml.ai/stable/solvers/dae_solve/\">https://diffeq.sciml.ai/stable/solvers/dae_solve/</a></p>",
        "id": 240406619,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622073864
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; Great! Thanks!  That is a good plan indeed. I plan to contribute at some point, when I get more Julia mileage.</p>",
        "id": 240412046,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622080045
    },
    {
        "content": "<p>[gitter] &lt;jianqixi_gitlab&gt; Hi All, I am Jianqi, one of the beginners for the diffeq</p>",
        "id": 240540616,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622154933
    },
    {
        "content": "<p>[gitter] &lt;jianqixi_gitlab&gt; <a href=\"https://files.gitter.im/57bf79b040f3a6eec0615ecf/QT1E/image.png\">![image.png](https://files.gitter.im/57bf79b040f3a6eec0615ecf/QT1E/thumb/image.png)</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.gitter.im/57bf79b040f3a6eec0615ecf/QT1E/image.png\" title=\"![image.png](https://files.gitter.im/57bf79b040f3a6eec0615ecf/QT1E/thumb/image.png)\"><img src=\"https://uploads.zulipusercontent.net/74c56f250d66acb856613428c3ef0280addd352f/68747470733a2f2f66696c65732e6769747465722e696d2f3537626637396230343066336136656563303631356563662f515431452f696d6167652e706e67\"></a></div>",
        "id": 240540719,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622154986
    },
    {
        "content": "<p>[gitter] &lt;jianqixi_gitlab&gt; I have one quick question about the how to solve the warning when running the CVODE code:</p>",
        "id": 240540724,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622154989
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; Jianqixi do you understand what the warning is saying?</p>",
        "id": 240542247,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622156298
    },
    {
        "content": "<p>[gitter] &lt;jianqixi_gitlab&gt; The warning suggests the difference between T0 and h is too large so that the code will ignore the h. I thought it may be related to the solve of the equation, in cases that the root dramatically change too much</p>",
        "id": 240547100,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622160213
    },
    {
        "content": "<p>[gitter] &lt;jianqixi_gitlab&gt; but I am not really sure how to solve this issue</p>",
        "id": 240547118,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622160231
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @jianqixi_gitlab no, it suggests that your ODE is unstable.</p>",
        "id": 240547404,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622160460
    },
    {
        "content": "<p>[gitter] &lt;jianqixi_gitlab&gt; I see</p>",
        "id": 240547650,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622160648
    },
    {
        "content": "<p>[gitter] &lt;jianqixi_gitlab&gt; I am wondering how could I solve this issue? is it ok by reducing the timestep? But for my cases, I have used 1e-9 s as the timestep, it still has the same issue</p>",
        "id": 240547780,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622160799
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; The problem is that the CVODE reduces and reduces the step size until the floating point number of the step size is so small that it can't be added to the current time due finite precision of floating point.</p>",
        "id": 240548482,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622161450
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; There are a few things you can try:</p>\n<ul>\n<li>check your correctness of the ODE</li>\n<li>use a different integrator to solve the problem</li>\n<li>use a number type with more precision in a solver that supports it.</li>\n</ul>",
        "id": 240548610,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622161576
    },
    {
        "content": "<p>[gitter] &lt;jianqixi_gitlab&gt; Thank you for your suggestions</p>",
        "id": 240548653,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622161631
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; (stiff, not stiff, implicit, explicit, higher order lower order)</p>",
        "id": 240548676,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622161674
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; Does the solution look sensible in all components?</p>",
        "id": 240548736,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622161715
    },
    {
        "content": "<p>[gitter] &lt;jianqixi_gitlab&gt; yes, it seems like if I changed the atol, the value would be changed. For example, my initial value is defined as 1E-50, and if used the atol as 1E-30, even some negative value could appear, and I have to reduce atol to at least 1E-50 so that the output value looks normal</p>",
        "id": 240548838,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622161848
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; Insert swear word. Those are insanely small numbers.</p>",
        "id": 240549130,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622162154
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; In general for things not to run into problems you shouldn't use values smaller than eps(Type) roughly speaking</p>",
        "id": 240549244,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622162255
    },
    {
        "content": "<p>[gitter] &lt;jianqixi_gitlab&gt; I see, I will try to use a large value for test</p>",
        "id": 240549412,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622162414
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; To resolve this problem you could consider scaling the problem if possible. This is normally a thing you don't have to do on computers because Float64 is generous but you are dozens of orders of magnitude to small for this type.</p>",
        "id": 240549415,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622162417
    },
    {
        "content": "<p>[gitter] &lt;jianqixi_gitlab&gt; Yes, I think this is a good point</p>",
        "id": 240549446,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622162481
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; Rescaling ODEs was common when you had to use analog computers (with values between 0 and 5v for all components) but in your case (if what you are doing is what you want) digging in the treasure box of old techniques might be necessary.</p>",
        "id": 240549515,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622162543
    },
    {
        "content": "<p>[gitter] &lt;jianqixi_gitlab&gt; thank you for your suggestions</p>",
        "id": 240549533,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622162588
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; If you need an relative accuracy (after rescaling) of more that 16 digits of precision you should look into different datatypes</p>",
        "id": 240549657,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622162758
    },
    {
        "content": "<p>[gitter] &lt;jianqixi_gitlab&gt; I see, thank you, I didn't realize this is the issue before</p>",
        "id": 240549721,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622162810
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; If really need that precision you should go with Rational{BigInt} but it will be slow and CVODE can't be used.</p>",
        "id": 240549754,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622162865
    },
    {
        "content": "<p>[gitter] &lt;jianqixi_gitlab&gt; thank you</p>",
        "id": 240549853,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622162981
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; I'm having much fun with your problem description as i never have seen floats this abused. If one is not aware that can easily happen so don't feel bad. I'm glad i could diagnose your problem and you were so forthcoming with your numbers.</p>",
        "id": 240549991,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622163102
    },
    {
        "content": "<p>[gitter] &lt;jianqixi_gitlab&gt; Thank you so much for your comments and suggestions on my problems, it is very useful, and I didn't think about the precision is one issue. Thank you!</p>",
        "id": 240550315,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622163426
    },
    {
        "content": "<p>[slack] &lt;Steffen&gt; Question about contributing to DiffEq: I remember seeing documentation somewhere that one could use to implement a new solver within the framework, but I can't seem to find it anymore. There is a link to <strong>Developer Documentation</strong> on here (<a href=\"https://github.com/SciML/DifferentialEquations.jl\">https://github.com/SciML/DifferentialEquations.jl</a>), but the link seems dead. Could anyone tell me the new link?</p>",
        "id": 240583534,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622195674
    },
    {
        "content": "<p>[slack] &lt;ignace-computing&gt; Do you mean this here?<br>\n<a href=\"https://devdocs.sciml.ai/dev/contributing/adding_algorithms/\">https://devdocs.sciml.ai/dev/contributing/adding_algorithms/</a></p>",
        "id": 240583773,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622195831
    },
    {
        "content": "<p>[slack] &lt;Steffen&gt; yes, I think that is exactly it, thank you</p>",
        "id": 240584337,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622196156
    },
    {
        "content": "<p>[slack] &lt;Pieter Gunnink&gt; There used to be an API page in the Docs (see e.g. <a href=\"https://diffeq.sciml.ai/v6.8/apis/diffeqbase/overview/\">https://diffeq.sciml.ai/v6.8/apis/diffeqbase/overview/</a>) but it is no longer there in the Stable version. Did it move somewhere or is it just no longer generated?</p>",
        "id": 240800820,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622446264
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it was essentially broken so it was removed. Someone would have to put more time into it for it to come ack</p>",
        "id": 240819985,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622459406
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; I’m unable to precompile <code>DiffEqOperators</code>, even after trying several things. I have removed the package and installed it again, I have removed everything in <code>.julia/compiled/v1.6/</code> restarted the Julia session and tried again. Nothing seems to work. All the packages are successfully precompiled except that one. Any ideas on what I should do next? Thanks in advance!</p>\n<p>I get the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"p\">[</span> <span class=\"n\">Info</span><span class=\"o\">:</span> <span class=\"n\">Precompiling</span> <span class=\"n\">VSCodeServer</span> <span class=\"p\">[</span><span class=\"mf\">9f5989</span><span class=\"n\">ce</span><span class=\"o\">-</span><span class=\"mi\">84</span><span class=\"n\">fe</span><span class=\"o\">-</span><span class=\"mi\">42</span><span class=\"n\">d4</span><span class=\"o\">-</span><span class=\"mi\">91</span><span class=\"n\">ec</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"n\">a7a8d53ed0f</span><span class=\"p\">]</span>\n  <span class=\"n\">Activating</span> <span class=\"n\">environment</span> <span class=\"n\">at</span> <span class=\"o\">~/</span><span class=\"n\">Desktop</span><span class=\"o\">/</span><span class=\"n\">Jordi</span><span class=\"o\">/</span><span class=\"n\">Julia</span><span class=\"o\">/</span><span class=\"n\">odinn_toy_model</span><span class=\"o\">/</span><span class=\"n\">Project</span><span class=\"o\">.</span><span class=\"n\">toml</span>\n  <span class=\"n\">Progress</span> <span class=\"p\">[</span><span class=\"o\">========================================&gt;</span><span class=\"p\">]</span>  <span class=\"mi\">355</span><span class=\"o\">/</span><span class=\"mi\">355</span>\n  <span class=\"n\">✗</span> <span class=\"n\">DiffEqOperators</span>\n<span class=\"mi\">354</span> <span class=\"n\">dependencies</span> <span class=\"n\">successfully</span> <span class=\"n\">precompiled</span> <span class=\"k\">in</span> <span class=\"mi\">262</span> <span class=\"n\">seconds</span> <span class=\"p\">(</span><span class=\"mi\">4</span> <span class=\"n\">already</span> <span class=\"n\">precompiled</span><span class=\"p\">)</span>\n<span class=\"mi\">1</span> <span class=\"n\">dependency</span> <span class=\"n\">errored</span>\n<span class=\"p\">[</span> <span class=\"n\">Info</span><span class=\"o\">:</span> <span class=\"n\">Precompiling</span> <span class=\"n\">DiffEqOperators</span> <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"n\">fdde737</span><span class=\"o\">-</span><span class=\"mi\">9</span><span class=\"n\">c7f</span><span class=\"o\">-</span><span class=\"mi\">55</span><span class=\"n\">bf</span><span class=\"o\">-</span><span class=\"n\">ade8</span><span class=\"o\">-</span><span class=\"mi\">46</span><span class=\"n\">b3f136cc48</span><span class=\"p\">]</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">LoadError</span><span class=\"o\">:</span> <span class=\"kt\">LoadError</span><span class=\"o\">:</span> <span class=\"kt\">LoadError</span><span class=\"o\">:</span> <span class=\"n\">Unsupported</span> <span class=\"kt\">Expr</span> <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"o\">$</span> <span class=\"n\">found</span> <span class=\"k\">in</span> <span class=\"n\">pattern</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n  <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">error</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">::</span><span class=\"kt\">String</span><span class=\"p\">)</span>\n    <span class=\"err\">@</span> <span class=\"n\">Base</span> <span class=\"o\">./</span><span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">33</span>\n  <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"n\">makepattern</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"o\">::</span><span class=\"kt\">Expr</span><span class=\"p\">,</span> <span class=\"n\">keys</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Symbol</span><span class=\"p\">})</span>\n    <span class=\"err\">@</span> <span class=\"n\">SymbolicUtils</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">SymbolicUtils</span><span class=\"o\">/</span><span class=\"n\">aNxjZ</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">rule</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">73</span>\n  <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">SymbolicUtils</span><span class=\"o\">.</span><span class=\"sa\">var</span><span class=\"s\">\"#78#79\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Symbol</span><span class=\"p\">}})(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Expr</span><span class=\"p\">)</span>\n    <span class=\"err\">@</span> <span class=\"n\">SymbolicUtils</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">SymbolicUtils</span><span class=\"o\">/</span><span class=\"n\">aNxjZ</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">rule</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">70</span>\n  <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"n\">iterate</span>\n    <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">generator</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">47</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n  <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"n\">_collect</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Any</span><span class=\"p\">},</span> <span class=\"n\">itr</span><span class=\"o\">::</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">Generator</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Any</span><span class=\"p\">},</span> <span class=\"kt\">SymbolicUtils</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#78#79\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Symbol</span><span class=\"p\">}}},</span> <span class=\"c\">#unused#::Base.EltypeUnknown, isz::Base.HasShape{1})</span>\n    <span class=\"err\">@</span> <span class=\"n\">Base</span> <span class=\"o\">./</span><span class=\"n\">array</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">691</span>\n  <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]</span> <span class=\"n\">collect_similar</span>\n    <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">array</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">606</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n  <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]</span> <span class=\"n\">map</span>\n    <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">abstractarray</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">2294</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n  <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]</span> <span class=\"n\">makepattern</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"o\">::</span><span class=\"kt\">Expr</span><span class=\"p\">,</span> <span class=\"n\">keys</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Symbol</span><span class=\"p\">})</span>\n    <span class=\"err\">@</span> <span class=\"n\">SymbolicUtils</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">SymbolicUtils</span><span class=\"o\">/</span><span class=\"n\">aNxjZ</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">rule</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">70</span>\n  <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]</span> <span class=\"sa\">var</span><span class=\"s\">\"@rule\"</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">::</span><span class=\"kt\">LineNumberNode</span><span class=\"p\">,</span> <span class=\"k\">module</span><span class=\"o\">::</span><span class=\"kt\">Module</span><span class=\"p\">,</span> <span class=\"n\">expr</span><span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">)</span>\n    <span class=\"err\">@</span> <span class=\"n\">SymbolicUtils</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">SymbolicUtils</span><span class=\"o\">/</span><span class=\"n\">aNxjZ</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">rule</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">266</span>\n <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">]</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"n\">mod</span><span class=\"o\">::</span><span class=\"kt\">Module</span><span class=\"p\">,</span> <span class=\"n\">_path</span><span class=\"o\">::</span><span class=\"kt\">String</span><span class=\"p\">)</span>\n    <span class=\"err\">@</span> <span class=\"n\">Base</span> <span class=\"o\">./</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">386</span>\n <span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">]</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">String</span><span class=\"p\">)</span>\n    <span class=\"err\">@</span> <span class=\"n\">DiffEqOperators</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">DiffEqOperators</span><span class=\"o\">/</span><span class=\"n\">DMNmH</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">DiffEqOperators</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n <span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n    <span class=\"err\">@</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">DiffEqOperators</span><span class=\"o\">/</span><span class=\"n\">DMNmH</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">DiffEqOperators</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">52</span>\n <span class=\"p\">[</span><span class=\"mi\">13</span><span class=\"p\">]</span> <span class=\"n\">include</span>\n    <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">386</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">14</span><span class=\"p\">]</span> <span class=\"n\">include_package_for_output</span><span class=\"p\">(</span><span class=\"n\">pkg</span><span class=\"o\">::</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"n\">PkgId</span><span class=\"p\">,</span> <span class=\"n\">input</span><span class=\"o\">::</span><span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"n\">depot_path</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">String</span><span class=\"p\">},</span> <span class=\"n\">dl_load_path</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">String</span><span class=\"p\">},</span> <span class=\"n\">load_path</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">String</span><span class=\"p\">},</span> <span class=\"n\">concrete_deps</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Pair</span><span class=\"p\">{</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">PkgId</span><span class=\"p\">,</span> <span class=\"kt\">UInt64</span><span class=\"p\">}},</span> <span class=\"n\">source</span><span class=\"o\">::</span><span class=\"kt\">String</span><span class=\"p\">)</span>\n    <span class=\"err\">@</span> <span class=\"n\">Base</span> <span class=\"o\">./</span><span class=\"n\">loading</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">1213</span>\n <span class=\"p\">[</span><span class=\"mi\">15</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n    <span class=\"err\">@</span> <span class=\"n\">none</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n <span class=\"p\">[</span><span class=\"mi\">16</span><span class=\"p\">]</span> <span class=\"n\">eval</span>\n    <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">boot</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">360</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">17</span><span class=\"p\">]</span> <span class=\"n\">eval</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">Expr</span><span class=\"p\">)</span>\n    <span class=\"err\">@</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">MainInclude</span> <span class=\"o\">./</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">446</span>\n <span class=\"p\">[</span><span class=\"mi\">18</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n    <span class=\"err\">@</span> <span class=\"n\">none</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n<span class=\"k\">in</span> <span class=\"n\">expression</span> <span class=\"n\">starting</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">Bolib001</span><span class=\"o\">/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">DiffEqOperators</span><span class=\"o\">/</span><span class=\"n\">DMNmH</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">MOLFiniteDifference</span><span class=\"o\">/</span><span class=\"n\">MOL_discretization</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">193</span>\n<span class=\"k\">in</span> <span class=\"n\">expression</span> <span class=\"n\">starting</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">Bolib001</span><span class=\"o\">/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">DiffEqOperators</span><span class=\"o\">/</span><span class=\"n\">DMNmH</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">MOLFiniteDifference</span><span class=\"o\">/</span><span class=\"n\">MOL_discretization</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">18</span>\n<span class=\"k\">in</span> <span class=\"n\">expression</span> <span class=\"n\">starting</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">Bolib001</span><span class=\"o\">/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">DiffEqOperators</span><span class=\"o\">/</span><span class=\"n\">DMNmH</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">DiffEqOperators</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">LoadError</span><span class=\"o\">:</span> <span class=\"kt\">LoadError</span><span class=\"o\">:</span> <span class=\"n\">Failed</span> <span class=\"n\">to</span> <span class=\"n\">precompile</span> <span class=\"n\">DiffEqOperators</span> <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"n\">fdde737</span><span class=\"o\">-</span><span class=\"mi\">9</span><span class=\"n\">c7f</span><span class=\"o\">-</span><span class=\"mi\">55</span><span class=\"n\">bf</span><span class=\"o\">-</span><span class=\"n\">ade8</span><span class=\"o\">-</span><span class=\"mi\">46</span><span class=\"n\">b3f136cc48</span><span class=\"p\">]</span> <span class=\"n\">to</span> <span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">Bolib001</span><span class=\"o\">/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">compiled</span><span class=\"o\">/</span><span class=\"n\">v1</span><span class=\"mf\">.6</span><span class=\"o\">/</span><span class=\"n\">DiffEqOperators</span><span class=\"o\">/</span><span class=\"n\">jl_iSxykO</span><span class=\"o\">.</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">error</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">::</span><span class=\"kt\">String</span><span class=\"p\">)</span>\n   <span class=\"err\">@</span> <span class=\"n\">Base</span> <span class=\"o\">./</span><span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">33</span>\n <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"n\">compilecache</span><span class=\"p\">(</span><span class=\"n\">pkg</span><span class=\"o\">::</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"n\">PkgId</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">::</span><span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"n\">internal_stderr</span><span class=\"o\">::</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"n\">TTY</span><span class=\"p\">,</span> <span class=\"n\">internal_stdout</span><span class=\"o\">::</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"n\">TTY</span><span class=\"p\">)</span>\n   <span class=\"err\">@</span> <span class=\"n\">Base</span> <span class=\"o\">./</span><span class=\"n\">loading</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">1360</span>\n <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"n\">compilecache</span><span class=\"p\">(</span><span class=\"n\">pkg</span><span class=\"o\">::</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"n\">PkgId</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">::</span><span class=\"kt\">String</span><span class=\"p\">)</span>\n   <span class=\"err\">@</span> <span class=\"n\">Base</span> <span class=\"o\">./</span><span class=\"n\">loading</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">1306</span>\n <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"n\">_require</span><span class=\"p\">(</span><span class=\"n\">pkg</span><span class=\"o\">::</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"n\">PkgId</span><span class=\"p\">)</span>\n   <span class=\"err\">@</span> <span class=\"n\">Base</span> <span class=\"o\">./</span><span class=\"n\">loading</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">1021</span>\n <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"n\">require</span><span class=\"p\">(</span><span class=\"n\">uuidkey</span><span class=\"o\">::</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"n\">PkgId</span><span class=\"p\">)</span>\n   <span class=\"err\">@</span> <span class=\"n\">Base</span> <span class=\"o\">./</span><span class=\"n\">loading</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">914</span>\n <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]</span> <span class=\"n\">require</span><span class=\"p\">(</span><span class=\"n\">into</span><span class=\"o\">::</span><span class=\"kt\">Module</span><span class=\"p\">,</span> <span class=\"n\">mod</span><span class=\"o\">::</span><span class=\"kt\">Symbol</span><span class=\"p\">)</span>\n   <span class=\"err\">@</span> <span class=\"n\">Base</span> <span class=\"o\">./</span><span class=\"n\">loading</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">901</span>\n <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"o\">::</span><span class=\"kt\">String</span><span class=\"p\">)</span>\n   <span class=\"err\">@</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">MainInclude</span> <span class=\"o\">./</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">444</span>\n <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n   <span class=\"err\">@</span> <span class=\"o\">~/</span><span class=\"n\">Desktop</span><span class=\"o\">/</span><span class=\"n\">Jordi</span><span class=\"o\">/</span><span class=\"n\">Julia</span><span class=\"o\">/</span><span class=\"n\">odinn_toy_model</span><span class=\"o\">/</span><span class=\"n\">scripts</span><span class=\"o\">/</span><span class=\"n\">ice_dynamics</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">41</span>\n<span class=\"k\">in</span> <span class=\"n\">expression</span> <span class=\"n\">starting</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">Bolib001</span><span class=\"o\">/</span><span class=\"n\">Desktop</span><span class=\"o\">/</span><span class=\"n\">Jordi</span><span class=\"o\">/</span><span class=\"n\">Julia</span><span class=\"o\">/</span><span class=\"n\">odinn_toy_model</span><span class=\"o\">/</span><span class=\"n\">scripts</span><span class=\"o\">/</span><span class=\"n\">helpers</span><span class=\"o\">/</span><span class=\"n\">iceflow</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">9</span>\n<span class=\"k\">in</span> <span class=\"n\">expression</span> <span class=\"n\">starting</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">Bolib001</span><span class=\"o\">/</span><span class=\"n\">Desktop</span><span class=\"o\">/</span><span class=\"n\">Jordi</span><span class=\"o\">/</span><span class=\"n\">Julia</span><span class=\"o\">/</span><span class=\"n\">odinn_toy_model</span><span class=\"o\">/</span><span class=\"n\">scripts</span><span class=\"o\">/</span><span class=\"n\">ice_dynamics</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">41</span><span class=\"sb\">```</span>\n</code></pre></div>",
        "id": 240822777,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622461319
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Are you using the latest SymbolicUtils @Jordi Bolibar?</p>",
        "id": 240825281,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622462873
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; I’m using v0.9.4</p>",
        "id": 240825639,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622463109
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah that would do it.</p>",
        "id": 240825784,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622463199
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; Any ideas on what might the issue be? <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 240825994,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622463346
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>]up SymbolicUtils</code></p>",
        "id": 240826013,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622463356
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; I had already done this, I thought this was the latest version:</p>\n<p><code>``Updating registry at </code>~/.julia/registries/General<code>\n┌ Warning: could not download https://pkg.julialang.org/registries\n└ @ Pkg.Types /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.6/Pkg/src/Types.jl:976\n  No Changes to </code>~/Desktop/Jordi/Julia/odinn_toy_model/Project.toml<code>\n  No Changes to </code>~/Desktop/Jordi/Julia/odinn_toy_model/Manifest.toml`<br>\nPrecompiling project...<br>\n  Progress [========================================&gt;]  59/59<br>\n  ? JuliaInterpreter<br>\n  ? DataStructures<br>\n  ? Parameters<br>\n  ? MathOptInterface<br>\n  ? LoweredCodeUtils<br>\n  ? Debugger<br>\n  ? GPUCompiler<br>\n  ? LightGraphs<br>\n  ? QuadGK<br>\n  ? SortingAlgorithms<br>\n  ? SymbolicUtils<br>\n  ? LineSearches<br>\n  ? DiffEqBase<br>\n  ? Revise<br>\n  ? OSQP<br>\n  ? StatsBase<br>\n  ? CUDA<br>\n  ? NLsolve<br>\n  ? VertexSafeGraphs<br>\n  ? DensityRatioEstimation<br>\n  ? LatinHypercubeSampling<br>\n  ? UnicodePlots<br>\n  ? Distributions<br>\n  ? Meshes<br>\n  ? Plots<br>\n  ? Optim<br>\n  ? ParallelStencil<br>\n  ? Flux<br>\n  Progress [========================================&gt;]  59/59<br>\n  ? JuliaInterpreter<br>\n  ? DataStructures<br>\n  ? Parameters<br>\n  ? MathOptInterface<br>\n  ? LoweredCodeUtils<br>\n  ? Debugger<br>\n  ? GPUCompiler<br>\n  ? LightGraphs<br>\n  ? QuadGK<br>\n  ? SortingAlgorithms<br>\n  ? SymbolicUtils<br>\n  ? LineSearches<br>\n  ? DiffEqBase<br>\n  ? Revise<br>\n  ? OSQP<br>\n  ? StatsBase<br>\n  ? CUDA<br>\n  ? NLsolve<br>\n  ? VertexSafeGraphs<br>\n  ? DensityRatioEstimation<br>\n  ? LatinHypercubeSampling<br>\n  ? UnicodePlots<br>\n  ? Distributions<br>\n  ? Meshes<br>\n  ? Plots<br>\n  ? Optim<br>\n  ? ParallelStencil<br>\n  ? Flux<br>\n  ? Sundials<br>\n  ? DiffEqJump<br>\n  ? Symbolics<br>\n  ? DistributionsAD<br>\n  ? KernelDensity<br>\n  ? QuasiMonteCarlo<br>\n  ? AverageShiftedHistograms<br>\n  ? ProximalOperators<br>\n  ? BoundaryValueDiffEq<br>\n  ? SparseDiffTools<br>\n  ? DataInterpolations<br>\n  ? DiffEqNoiseProcess<br>\n  ? GlobalSensitivity<br>\n  ? GeoStatsBase<br>\n  ? OrdinaryDiffEq<br>\n  ? ModelingToolkit<br>\n  ? GeoArrays<br>\n  ? DiffEqFinancial<br>\n  ? DelayDiffEq<br>\n  ? DiffEqCallbacks<br>\n  ? StochasticDiffEq<br>\n  ? ParameterizedFunctions<br>\n  ? GalacticOptim<br>\n  ? DataDrivenDiffEq<br>\n  ? DiffEqPhysics<br>\n  ? SteadyStateDiffEq<br>\n  ? MultiScaleArrays<br>\n  ? DiffEqSensitivity<br>\n  ? DiffEqFlux<br>\n  ? DifferentialEquations</p>\n<p>(odinn_toy_model) pkg&gt; status SymbolicUtils<br>\n      Status <code>~/Desktop/Jordi/Julia/odinn_toy_model/Project.toml</code><br>\n  [d1185830] SymbolicUtils v0.9.4</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code>\n</code></pre></div>",
        "id": 240826754,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622463775
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>]add SymbolicUtils@0.11</code></p>",
        "id": 240826796,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622463806
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Force it</p>",
        "id": 240826799,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622463808
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; find the offending old package.</p>",
        "id": 240826806,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622463812
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; Great, that did it. Thanks again Chris!</p>",
        "id": 240828563,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622464785
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what moved back?</p>",
        "id": 240828580,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622464795
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; <code>↓FastGaussQuadrature v0.4.7 ⇒ v0.4.5</code><br>\n<code>↓ ReferenceFrameRotations v0.5.7 ⇒ v0.5.6</code><br>\n<code>↓ StaticArrays v1.2.1 ⇒ v0.12.5</code></p>",
        "id": 240828701,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622464854
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/JuliaSpace/ReferenceFrameRotations.jl/pull/15\">https://github.com/JuliaSpace/ReferenceFrameRotations.jl/pull/15</a></p>",
        "id": 240828883,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622464939
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/JuliaApproximation/FastGaussQuadrature.jl/pull/101\">https://github.com/JuliaApproximation/FastGaussQuadrature.jl/pull/101</a></p>",
        "id": 240828909,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622464948
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Those two packages are your issue.</p>",
        "id": 240828916,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622464952
    },
    {
        "content": "<p>[slack] &lt;termi-official&gt; I need some help understanding the theory behind some implementation details. I am currently looking at the adaptive implicit euler (<a href=\"https://github.com/SciML/OrdinaryDiffEq.jl/blob/b563fcce03ee83d354c957a8a9c4f71bb85a56c1/src/perform_step/sdirk_perform_step.jl#L120-L134\">https://github.com/SciML/OrdinaryDiffEq.jl/blob/b563fcce03ee83d354c957a8a9c4f71bb85a56c1/src/perform_step/sdirk_perform_step.jl#L120-L134</a>), or to be more specific on the error estimator. Which of Shampine's papers is mentioned in the first line?<br>\nI ask because I am struggling with three details.</p>\n<ol>\n<li>When I bound the LTE for an implicit euler under the assumption that f (i.e. RHS) is smooth, then I end up with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>e</mi><mi mathvariant=\"normal\">∣</mi><mo>≤</mo><mfrac><mrow><mi mathvariant=\"normal\">Δ</mi><msup><mi>t</mi><mn>2</mn></msup></mrow><mrow><mn>2</mn><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi mathvariant=\"normal\">Δ</mi><mi>t</mi><mi>K</mi><mo stretchy=\"false\">)</mo></mrow></mfrac><mi>m</mi><mi>a</mi><msub><mi>x</mi><mrow><mover accent=\"true\"><mi>t</mi><mo>~</mo></mover><mo>∈</mo><mo stretchy=\"false\">[</mo><msub><mi>t</mi><mi>n</mi></msub><mo separator=\"true\">,</mo><msub><mi>t</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><mo stretchy=\"false\">]</mo></mrow></msub><mo stretchy=\"false\">{</mo><msup><mi>f</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">(</mo><mi>u</mi><mo stretchy=\"false\">(</mo><mover accent=\"true\"><mi>t</mi><mo>~</mo></mover><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mover accent=\"true\"><mi>t</mi><mo>~</mo></mover><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\"> |e| \\leq \\frac{\\Delta t^2}{2(1-\\Delta t K)}max_{\\tilde{t} \\in [t_n, t_{n+1}]}\\{f&#x27;(u(\\tilde{t}), \\tilde{t}\\} </annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\">e</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.53792em;vertical-align:-0.52em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01792em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">1</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">Δ</span><span class=\"mord mathnormal mtight\">t</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">K</span><span class=\"mclose mtight\">)</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">Δ</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">t</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913142857142857em;\"><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.52em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord mathnormal\">ma</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.34480000000000005em;\"><span style=\"top:-2.448442em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord accent mtight\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8519399999999999em;\"><span style=\"top:-2.7em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"mord mathnormal mtight\">t</span></span><span style=\"top:-3.23408em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"accent-body\" style=\"left:-0.16666em;\"><span class=\"mord mtight\">~</span></span></span></span></span></span></span><span class=\"mrel mtight\">∈</span><span class=\"mopen mtight\">[</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16454285714285719em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">t</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3173142857142857em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.20252142857142857em;\"><span></span></span></span></span></span></span><span class=\"mclose mtight\">]</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.42655799999999994em;\"><span></span></span></span></span></span></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">u</span><span class=\"mopen\">(</span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8519399999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\">t</span></span><span style=\"top:-3.53408em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.16666em;\"><span class=\"mord\">~</span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8519399999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\">t</span></span><span style=\"top:-3.53408em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.16666em;\"><span class=\"mord\">~</span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span>, where K is the Lipschitz-constant.</li>\n<li>Where does the factor \"7/12\" come from?</li>\n<li>How do we know that the 2nd DD overestimates the LTE?<br>\nEDIT: I am also happy with hints towards literature which answers these questions, as I have no formal math background.</li>\n</ol>",
        "id": 240832258,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622466948
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; IIRC these details are (very quickly) mentioned in Shampine, L. F. and M. E. Hosea, “Analysis and Implementation of TR-BDF2</p>",
        "id": 240834235,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622468065
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; Is solving the initial value problem of small non-stiff ODEs fully solved or are there still open problems?</p>",
        "id": 240834451,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622468215
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; some of it was then pulled from an old SPICE manual IIRC</p>",
        "id": 240834536,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622468267
    },
    {
        "content": "<p>[slack] &lt;termi-official&gt; Thanks for the pointers! I will start there. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 240834759,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622468381
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; Thanks Chris!</p>",
        "id": 240834861,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622468412
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; there are open problems</p>",
        "id": 240834904,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622468440
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; OK, now that I managed to make it work, I have a follow-up issue:</p>\n<p>Following the documentation, I’m doing:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">Δ²</span> <span class=\"o\">=</span> <span class=\"kt\">CenteredDifference</span><span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">}(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Δx</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"n\">H</span><span class=\"p\">))</span> <span class=\"sb\">```</span>\n<span class=\"sb\">but I’m getting:</span>\n<span class=\"sb\">```</span><span class=\"sa\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">InexactError</span><span class=\"o\">:</span> <span class=\"kt\">Int64</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n  <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"kt\">Int64</span>\n    <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">float</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">723</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n  <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"n\">convert</span>\n    <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">number</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">7</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n  <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"n\">setindex!</span>\n    <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">array</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">841</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n  <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"n\">calculate_weights</span><span class=\"p\">(</span><span class=\"n\">order</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"n\">x0</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">::</span><span class=\"kt\">UnitRange</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">})</span>\n    <span class=\"err\">@</span> <span class=\"n\">DiffEqOperators</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">DiffEqOperators</span><span class=\"o\">/</span><span class=\"mi\">6</span><span class=\"n\">CWxd</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">derivative_operators</span><span class=\"o\">/</span><span class=\"n\">fornberg</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">44</span>\n  <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"kt\">CenteredDifference</span><span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">}(</span><span class=\"n\">derivative_order</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"n\">approximation_order</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"n\">dx</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"n\">len</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"n\">coeff_func</span><span class=\"o\">::</span><span class=\"kt\">Nothing</span><span class=\"p\">)</span>\n    <span class=\"err\">@</span> <span class=\"n\">DiffEqOperators</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">DiffEqOperators</span><span class=\"o\">/</span><span class=\"mi\">6</span><span class=\"n\">CWxd</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">derivative_operators</span><span class=\"o\">/</span><span class=\"n\">derivative_operator</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">81</span>\n  <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]</span> <span class=\"kt\">CenteredDifference</span><span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">}(</span><span class=\"n\">derivative_order</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"n\">approximation_order</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"n\">dx</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"n\">len</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">)</span>\n    <span class=\"err\">@</span> <span class=\"n\">DiffEqOperators</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">DiffEqOperators</span><span class=\"o\">/</span><span class=\"mi\">6</span><span class=\"n\">CWxd</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">derivative_operators</span><span class=\"o\">/</span><span class=\"n\">derivative_operator</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">68</span>\n  <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n    <span class=\"err\">@</span> <span class=\"n\">none</span><span class=\"o\">:</span><span class=\"mi\">1</span>\n  <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]</span> <span class=\"n\">eval</span>\n    <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">boot</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">360</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n  <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]</span> <span class=\"n\">interpret</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"o\">::</span><span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"n\">mod</span><span class=\"o\">::</span><span class=\"kt\">Module</span><span class=\"p\">,</span> <span class=\"n\">locals</span><span class=\"o\">::</span><span class=\"kt\">Dict</span><span class=\"p\">{</span><span class=\"kt\">Symbol</span><span class=\"p\">,</span> <span class=\"kt\">Any</span><span class=\"p\">})</span>\n    <span class=\"err\">@</span> <span class=\"n\">Infiltrator</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">Infiltrator</span><span class=\"o\">/</span><span class=\"n\">njsHN</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">Infiltrator</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">234</span>\n <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Infiltrator</span><span class=\"o\">.</span><span class=\"sa\">var</span><span class=\"s\">\"#8#11\"</span><span class=\"p\">{</span><span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Module</span><span class=\"p\">,</span> <span class=\"kt\">Dict</span><span class=\"p\">{</span><span class=\"kt\">Symbol</span><span class=\"p\">,</span> <span class=\"kt\">Any</span><span class=\"p\">},</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">StackTraces</span><span class=\"o\">.</span><span class=\"kt\">StackFrame</span><span class=\"p\">},</span> <span class=\"kt\">REPL</span><span class=\"o\">.</span><span class=\"kt\">LineEditREPL</span><span class=\"p\">,</span> <span class=\"kt\">Bool</span><span class=\"p\">,</span> <span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">TTY</span><span class=\"p\">})(</span><span class=\"n\">s</span><span class=\"o\">::</span><span class=\"kt\">REPL</span><span class=\"o\">.</span><span class=\"n\">LineEdit</span><span class=\"o\">.</span><span class=\"n\">MIState</span><span class=\"p\">,</span> <span class=\"n\">buf</span><span class=\"o\">::</span><span class=\"kt\">IOBuffer</span><span class=\"p\">,</span> <span class=\"n\">ok</span><span class=\"o\">::</span><span class=\"kt\">Bool</span><span class=\"p\">)</span>\n    <span class=\"err\">@</span> <span class=\"n\">Infiltrator</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">Infiltrator</span><span class=\"o\">/</span><span class=\"n\">njsHN</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">Infiltrator</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">192</span>\n <span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">]</span> <span class=\"c\">#invokelatest#2</span>\n    <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">essentials</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">708</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">]</span> <span class=\"n\">invokelatest</span>\n    <span class=\"err\">@</span> <span class=\"o\">./</span><span class=\"n\">essentials</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">706</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">13</span><span class=\"p\">]</span> <span class=\"n\">run_interface</span><span class=\"p\">(</span><span class=\"n\">terminal</span><span class=\"o\">::</span><span class=\"kt\">REPL</span><span class=\"o\">.</span><span class=\"n\">Terminals</span><span class=\"o\">.</span><span class=\"n\">TextTerminal</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"o\">::</span><span class=\"kt\">REPL</span><span class=\"o\">.</span><span class=\"n\">LineEdit</span><span class=\"o\">.</span><span class=\"n\">ModalInterface</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"o\">::</span><span class=\"kt\">REPL</span><span class=\"o\">.</span><span class=\"n\">LineEdit</span><span class=\"o\">.</span><span class=\"n\">MIState</span><span class=\"p\">)</span>\n    <span class=\"err\">@</span> <span class=\"n\">REPL</span><span class=\"o\">.</span><span class=\"n\">LineEdit</span> <span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">buildbot</span><span class=\"o\">/</span><span class=\"n\">worker</span><span class=\"o\">/</span><span class=\"n\">package_macos64</span><span class=\"o\">/</span><span class=\"n\">build</span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">stdlib</span><span class=\"o\">/</span><span class=\"n\">v1</span><span class=\"mf\">.6</span><span class=\"o\">/</span><span class=\"n\">REPL</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">LineEdit</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">2441</span>\n <span class=\"p\">[</span><span class=\"mi\">14</span><span class=\"p\">]</span> <span class=\"n\">run_interface</span>\n    <span class=\"err\">@</span> <span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">buildbot</span><span class=\"o\">/</span><span class=\"n\">worker</span><span class=\"o\">/</span><span class=\"n\">package_macos64</span><span class=\"o\">/</span><span class=\"n\">build</span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">stdlib</span><span class=\"o\">/</span><span class=\"n\">v1</span><span class=\"mf\">.6</span><span class=\"o\">/</span><span class=\"n\">REPL</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">LineEdit</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">2435</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">15</span><span class=\"p\">]</span> <span class=\"n\">debugprompt</span><span class=\"p\">(</span><span class=\"n\">mod</span><span class=\"o\">::</span><span class=\"kt\">Module</span><span class=\"p\">,</span> <span class=\"n\">locals</span><span class=\"o\">::</span><span class=\"kt\">Dict</span><span class=\"p\">{</span><span class=\"kt\">Symbol</span><span class=\"p\">,</span> <span class=\"kt\">Any</span><span class=\"p\">},</span> <span class=\"n\">trace</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">StackTraces</span><span class=\"o\">.</span><span class=\"kt\">StackFrame</span><span class=\"p\">},</span> <span class=\"n\">terminal</span><span class=\"o\">::</span><span class=\"kt\">REPL</span><span class=\"o\">.</span><span class=\"n\">Terminals</span><span class=\"o\">.</span><span class=\"n\">TTYTerminal</span><span class=\"p\">,</span> <span class=\"n\">repl</span><span class=\"o\">::</span><span class=\"kt\">REPL</span><span class=\"o\">.</span><span class=\"n\">LineEditREPL</span><span class=\"p\">,</span> <span class=\"n\">nostack</span><span class=\"o\">::</span><span class=\"kt\">Bool</span><span class=\"p\">;</span> <span class=\"n\">file</span><span class=\"o\">::</span><span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"n\">fileline</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">)</span>\n    <span class=\"err\">@</span> <span class=\"n\">Infiltrator</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">Infiltrator</span><span class=\"o\">/</span><span class=\"n\">njsHN</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">Infiltrator</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">216</span>\n <span class=\"p\">[</span><span class=\"mi\">16</span><span class=\"p\">]</span> <span class=\"k\">macro</span> <span class=\"n\">expansion</span>\n    <span class=\"err\">@</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">Zygote</span><span class=\"o\">/</span><span class=\"n\">i1R8y</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">interface2</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">17</span><span class=\"p\">]</span> <span class=\"n\">_pullback</span>\n    <span class=\"err\">@</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">Zygote</span><span class=\"o\">/</span><span class=\"n\">i1R8y</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">interface2</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">9</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">18</span><span class=\"p\">]</span> <span class=\"n\">_pullback</span>\n    <span class=\"err\">@</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">Infiltrator</span><span class=\"o\">/</span><span class=\"n\">njsHN</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">Infiltrator</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">138</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">19</span><span class=\"p\">]</span> <span class=\"n\">_pullback</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Zygote</span><span class=\"o\">.</span><span class=\"n\">Context</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Infiltrator</span><span class=\"o\">.</span><span class=\"sa\">var</span><span class=\"s\">\"#debugprompt##kw\"</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">NamedTuple</span><span class=\"p\">{(</span><span class=\"ss\">:file</span><span class=\"p\">,</span> <span class=\"ss\">:fileline</span><span class=\"p\">),</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">}},</span> <span class=\"o\">::</span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">Infiltrator</span><span class=\"o\">.</span><span class=\"n\">debugprompt</span><span class=\"p\">),</span> <span class=\"o\">::</span><span class=\"kt\">Module</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Dict</span><span class=\"p\">{</span><span class=\"kt\">Symbol</span><span class=\"p\">,</span> <span class=\"kt\">Any</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">StackTraces</span><span class=\"o\">.</span><span class=\"kt\">StackFrame</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">REPL</span><span class=\"o\">.</span><span class=\"n\">Terminals</span><span class=\"o\">.</span><span class=\"n\">TTYTerminal</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">REPL</span><span class=\"o\">.</span><span class=\"n\">LineEditREPL</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Bool</span><span class=\"p\">)</span>\n    <span class=\"err\">@</span> <span class=\"n\">Zygote</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">Zygote</span><span class=\"o\">/</span><span class=\"n\">i1R8y</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">interface2</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n <span class=\"p\">[</span><span class=\"mi\">20</span><span class=\"p\">]</span> <span class=\"n\">_pullback</span>\n    <span class=\"err\">@</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">Infiltrator</span><span class=\"o\">/</span><span class=\"n\">njsHN</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">Infiltrator</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">106</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">21</span><span class=\"p\">]</span> <span class=\"n\">_pullback</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Zygote</span><span class=\"o\">.</span><span class=\"n\">Context</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Infiltrator</span><span class=\"o\">.</span><span class=\"sa\">var</span><span class=\"s\">\"##start_prompt#1\"</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Bool</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">Infiltrator</span><span class=\"o\">.</span><span class=\"n\">start_prompt</span><span class=\"p\">),</span> <span class=\"o\">::</span><span class=\"kt\">Module</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Dict</span><span class=\"p\">{</span><span class=\"kt\">Symbol</span><span class=\"p\">,</span> <span class=\"kt\">Any</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Bool</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">)</span>\n    <span class=\"err\">@</span> <span class=\"n\">Zygote</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">Zygote</span><span class=\"o\">/</span><span class=\"n\">i1R8y</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">interface2</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n <span class=\"p\">[</span><span class=\"mi\">22</span><span class=\"p\">]</span> <span class=\"n\">_pullback</span>\n    <span class=\"err\">@</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">Infiltrator</span><span class=\"o\">/</span><span class=\"n\">njsHN</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">Infiltrator</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">86</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">23</span><span class=\"p\">]</span> <span class=\"n\">_pullback</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Zygote</span><span class=\"o\">.</span><span class=\"n\">Context</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">Infiltrator</span><span class=\"o\">.</span><span class=\"n\">start_prompt</span><span class=\"p\">),</span> <span class=\"o\">::</span><span class=\"kt\">Module</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Dict</span><span class=\"p\">{</span><span class=\"kt\">Symbol</span><span class=\"p\">,</span> <span class=\"kt\">Any</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Bool</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">)</span>\n    <span class=\"err\">@</span> <span class=\"n\">Zygote</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">Zygote</span><span class=\"o\">/</span><span class=\"n\">i1R8y</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">interface2</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n <span class=\"p\">[</span><span class=\"mi\">24</span><span class=\"p\">]</span> <span class=\"k\">macro</span> <span class=\"n\">expansion</span>\n    <span class=\"err\">@</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">Infiltrator</span><span class=\"o\">/</span><span class=\"n\">njsHN</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">Infiltrator</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">62</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">25</span><span class=\"p\">]</span> <span class=\"n\">_pullback</span>\n    <span class=\"err\">@</span> <span class=\"o\">~/</span><span class=\"n\">Desktop</span><span class=\"o\">/</span><span class=\"n\">Jordi</span><span class=\"o\">/</span><span class=\"n\">Julia</span><span class=\"o\">/</span><span class=\"n\">odinn_toy_model</span><span class=\"o\">/</span><span class=\"n\">scripts</span><span class=\"o\">/</span><span class=\"n\">helpers</span><span class=\"o\">/</span><span class=\"n\">iceflow</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">93</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">26</span><span class=\"p\">]</span> <span class=\"n\">_pullback</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Zygote</span><span class=\"o\">.</span><span class=\"n\">Context</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">iceflow!</span><span class=\"p\">),</span> <span class=\"o\">::</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Chain</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Dense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">identity</span><span class=\"p\">),</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}},</span> <span class=\"kt\">BatchNorm</span><span class=\"p\">{</span><span class=\"kt\">var</span><span class=\"s\">\"#leakyrelu#75\"</span><span class=\"p\">,</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"kt\">Dense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">identity</span><span class=\"p\">),</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}},</span> <span class=\"kt\">BatchNorm</span><span class=\"p\">{</span><span class=\"kt\">var</span><span class=\"s\">\"#leakyrelu#75\"</span><span class=\"p\">,</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"kt\">Dense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">relu</span><span class=\"p\">),</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}}},</span> <span class=\"o\">::</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Any</span><span class=\"p\">},</span> <span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Float64</span><span class=\"p\">)</span>\n    <span class=\"err\">@</span> <span class=\"n\">Zygote</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">Zygote</span><span class=\"o\">/</span><span class=\"n\">i1R8y</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">interface2</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n <span class=\"p\">[</span><span class=\"mi\">27</span><span class=\"p\">]</span> <span class=\"n\">_pullback</span>\n    <span class=\"err\">@</span> <span class=\"o\">~/</span><span class=\"n\">Desktop</span><span class=\"o\">/</span><span class=\"n\">Jordi</span><span class=\"o\">/</span><span class=\"n\">Julia</span><span class=\"o\">/</span><span class=\"n\">odinn_toy_model</span><span class=\"o\">/</span><span class=\"n\">scripts</span><span class=\"o\">/</span><span class=\"n\">helpers</span><span class=\"o\">/</span><span class=\"n\">iceflow</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">363</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">28</span><span class=\"p\">]</span> <span class=\"n\">_pullback</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Zygote</span><span class=\"o\">.</span><span class=\"n\">Context</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">loss</span><span class=\"p\">),</span> <span class=\"o\">::</span><span class=\"kt\">Dict</span><span class=\"p\">{</span><span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"kt\">N</span><span class=\"p\">}</span> <span class=\"kt\">where</span> <span class=\"kt\">N</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Any</span><span class=\"p\">},</span> <span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Float64</span><span class=\"p\">)</span>\n    <span class=\"err\">@</span> <span class=\"n\">Zygote</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">Zygote</span><span class=\"o\">/</span><span class=\"n\">i1R8y</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">interface2</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n <span class=\"p\">[</span><span class=\"mi\">29</span><span class=\"p\">]</span> <span class=\"n\">_pullback</span>\n    <span class=\"err\">@</span> <span class=\"o\">~/</span><span class=\"n\">Desktop</span><span class=\"o\">/</span><span class=\"n\">Jordi</span><span class=\"o\">/</span><span class=\"n\">Julia</span><span class=\"o\">/</span><span class=\"n\">odinn_toy_model</span><span class=\"o\">/</span><span class=\"n\">scripts</span><span class=\"o\">/</span><span class=\"n\">helpers</span><span class=\"o\">/</span><span class=\"n\">iceflow</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">401</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">30</span><span class=\"p\">]</span> <span class=\"n\">pullback</span>\n    <span class=\"err\">@</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">Zygote</span><span class=\"o\">/</span><span class=\"n\">i1R8y</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">interface</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">250</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">31</span><span class=\"p\">]</span> <span class=\"n\">hybrid_train!</span><span class=\"p\">(</span><span class=\"n\">loss</span><span class=\"o\">::</span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">loss</span><span class=\"p\">),</span> <span class=\"n\">ps_UA</span><span class=\"o\">::</span><span class=\"kt\">Params</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">::</span><span class=\"kt\">Dict</span><span class=\"p\">{</span><span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"kt\">N</span><span class=\"p\">}</span> <span class=\"kt\">where</span> <span class=\"kt\">N</span><span class=\"p\">},</span> <span class=\"n\">opt</span><span class=\"o\">::</span><span class=\"kt\">ADAM</span><span class=\"p\">,</span> <span class=\"n\">H</span><span class=\"o\">::</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"n\">p</span><span class=\"o\">::</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Any</span><span class=\"p\">},</span> <span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"n\">t</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"n\">t₁</span><span class=\"o\">::</span><span class=\"kt\">Float64</span><span class=\"p\">)</span>\n    <span class=\"err\">@</span> <span class=\"n\">Main</span> <span class=\"o\">~/</span><span class=\"n\">Desktop</span><span class=\"o\">/</span><span class=\"n\">Jordi</span><span class=\"o\">/</span><span class=\"n\">Julia</span><span class=\"o\">/</span><span class=\"n\">odinn_toy_model</span><span class=\"o\">/</span><span class=\"n\">scripts</span><span class=\"o\">/</span><span class=\"n\">helpers</span><span class=\"o\">/</span><span class=\"n\">iceflow</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">401</span>\n <span class=\"p\">[</span><span class=\"mi\">32</span><span class=\"p\">]</span> <span class=\"k\">macro</span> <span class=\"n\">expansion</span>\n    <span class=\"err\">@</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">Flux</span><span class=\"o\">/</span><span class=\"n\">goUGu</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">optimise</span><span class=\"o\">/</span><span class=\"n\">train</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">137</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">33</span><span class=\"p\">]</span> <span class=\"k\">macro</span> <span class=\"n\">expansion</span>\n    <span class=\"err\">@</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">Juno</span><span class=\"o\">/</span><span class=\"n\">n6wyj</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">progress</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">134</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">34</span><span class=\"p\">]</span> <span class=\"n\">iceflow_UDE!</span><span class=\"p\">(</span><span class=\"n\">H</span><span class=\"o\">::</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"n\">H_ref</span><span class=\"o\">::</span><span class=\"kt\">Dict</span><span class=\"p\">{</span><span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">}</span> <span class=\"kt\">where</span> <span class=\"kt\">T</span><span class=\"p\">},</span> <span class=\"n\">UA</span><span class=\"o\">::</span><span class=\"kt\">Chain</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Dense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">identity</span><span class=\"p\">),</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}},</span> <span class=\"kt\">BatchNorm</span><span class=\"p\">{</span><span class=\"kt\">var</span><span class=\"s\">\"#leakyrelu#75\"</span><span class=\"p\">,</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"kt\">Dense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">identity</span><span class=\"p\">),</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}},</span> <span class=\"kt\">BatchNorm</span><span class=\"p\">{</span><span class=\"kt\">var</span><span class=\"s\">\"#leakyrelu#75\"</span><span class=\"p\">,</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"kt\">Dense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">relu</span><span class=\"p\">),</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}}},</span> <span class=\"n\">hyparams</span><span class=\"o\">::</span><span class=\"kt\">Hyperparameters</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"o\">::</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"kt\">Array</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Any</span><span class=\"p\">},</span> <span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"n\">t</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"n\">t₁</span><span class=\"o\">::</span><span class=\"kt\">Float64</span><span class=\"p\">)</span>\n    <span class=\"err\">@</span> <span class=\"n\">Main</span> <span class=\"o\">~/</span><span class=\"n\">Desktop</span><span class=\"o\">/</span><span class=\"n\">Jordi</span><span class=\"o\">/</span><span class=\"n\">Julia</span><span class=\"o\">/</span><span class=\"n\">odinn_toy_model</span><span class=\"o\">/</span><span class=\"n\">scripts</span><span class=\"o\">/</span><span class=\"n\">helpers</span><span class=\"o\">/</span><span class=\"n\">iceflow</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">37</span>\n <span class=\"p\">[</span><span class=\"mi\">35</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n    <span class=\"err\">@</span> <span class=\"o\">~/</span><span class=\"n\">Desktop</span><span class=\"o\">/</span><span class=\"n\">Jordi</span><span class=\"o\">/</span><span class=\"n\">Julia</span><span class=\"o\">/</span><span class=\"n\">odinn_toy_model</span><span class=\"o\">/</span><span class=\"n\">scripts</span><span class=\"o\">/</span><span class=\"n\">ice_dynamics</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">134</span><span class=\"sb\">```</span>\n<span class=\"sb\">This should work, shouldn’t it?</span>\n</code></pre></div>",
        "id": 240838697,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622470653
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; No</p>",
        "id": 240838814,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622470707
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Delta x should be a float</p>",
        "id": 240838820,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622470710
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; Oh OK. It is the only input type which is not specified in the documentation:</p>\n<div class=\"codehilite\" data-code-language=\"centereddifference\"><pre><span></span><code>                      approximation_order::Int, dx,\n                      len::Int, coeff_func=nothing)```\n</code></pre></div>",
        "id": 240838931,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622470799
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; I’ve proposed a change in the documentation: <a href=\"https://github.com/SciML/DiffEqOperators.jl/pull/403\">https://github.com/SciML/DiffEqOperators.jl/pull/403</a></p>",
        "id": 240839556,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622471159
    },
    {
        "content": "<p>[gitter] &lt;jianqixi_gitlab&gt; Dear All, sorry for the bother again, I have another question about the flag = CVode(cvode_mem, tout, y0, &amp;t, CV_NORMAL); In the current code, I am trying to use CVode to solve the ODE, but there is no any output, and it seems like that my current code was struck in the solving ODE. And I used flag = CVode(cvode_mem, tout, y0, &amp;t, CV_ONE_STEP); it still has the same issue. I am wondering that what kind of problem it may have. Thank you for your suggestions.</p>",
        "id": 240845867,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622474695
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; CVODE doesn't output, it mutates.</p>",
        "id": 240845914,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622474726
    },
    {
        "content": "<p>[gitter] &lt;jianqixi_gitlab&gt; I am sorry for the misleading, I mean after CVODE, even when I add the cout, it still does not have the output</p>",
        "id": 240846050,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622474807
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; look at the direct tests for example</p>",
        "id": 240846075,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622474828
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; or just use the higher level API</p>",
        "id": 240846080,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622474834
    },
    {
        "content": "<p>[gitter] &lt;jianqixi_gitlab&gt; it seems like the code was struck in the CVODE</p>",
        "id": 240846116,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622474861
    },
    {
        "content": "<p>[gitter] &lt;jianqixi_gitlab&gt; thank you for your suggestions</p>",
        "id": 240846126,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622474866
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; if you use the higher level API does it get stuck in the same spot./</p>",
        "id": 240846176,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622474883
    },
    {
        "content": "<p>[gitter] &lt;jianqixi_gitlab&gt; I did not try it before</p>",
        "id": 240846284,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622474947
    },
    {
        "content": "<p>[gitter] &lt;jianqixi_gitlab&gt; I will try it now</p>",
        "id": 240846325,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622474972
    },
    {
        "content": "<p>[gitter] &lt;jianqixi_gitlab&gt; one stupid question, would you like to tell me what is the API mean? is it application programming interface? Do I need to translate my current C++ code to another one?</p>",
        "id": 240846532,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622475076
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes, API is programmer interface</p>",
        "id": 240846737,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622475214
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the high level one is dead simple</p>",
        "id": 240846759,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622475231
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>using Sundials\nfunction lorenz(du,u,p,t)\n du[1] = 10.0(u[2]-u[1])\n du[2] = u[1]*(28.0-u[3]) - u[2]\n du[3] = u[1]*u[2] - (8/3)*u[3]\nend\nu0 = [1.0;0.0;0.0]\ntspan = (0.0,100.0)\nprob = ODEProblem(lorenz,u0,tspan)\nsol = solve(prob,CVODE_Adams())\nusing Plots; plot(sol,vars=(1,2,3))</code></p>",
        "id": 240846760,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622475232
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it uses the lower level stuff inside of it.</p>",
        "id": 240846771,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622475240
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; You can use the direcct one, using the example from <a href=\"https://github.com/SciML/Sundials.jl/blob/master/test/cvodes_dns.jl\">https://github.com/SciML/Sundials.jl/blob/master/test/cvodes_dns.jl</a> if you want</p>",
        "id": 240846838,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622475265
    },
    {
        "content": "<p>[gitter] &lt;jianqixi_gitlab&gt; I see, thank you for your suggestiosn</p>",
        "id": 240846853,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622475281
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but I don't think I'll spend time debugging each use case of that since, well, the high level API does that correctly. But you can use the lower level pieces if you want.</p>",
        "id": 240846873,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622475292
    },
    {
        "content": "<p>[gitter] &lt;jianqixi_gitlab&gt;  thank you</p>",
        "id": 240846940,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622475338
    },
    {
        "content": "<p>[gitter] &lt;jianqixi_gitlab&gt; I am still wondering the reasons that the code is struck in the CVODE, is it because there are too many variables in the ODEs? since I have another version of code, it is one simple case, and the CVODE works very well</p>",
        "id": 240847113,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622475458
    },
    {
        "content": "<p>[gitter] &lt;jianqixi_gitlab&gt; but when I use it in the complex case, it seems like the CVODE run forever</p>",
        "id": 240847199,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622475492
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; how big of an ODE?</p>",
        "id": 240848925,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622476570
    },
    {
        "content": "<p>[gitter] &lt;jianqixi_gitlab&gt; it is like f(x1, ..., x9)</p>",
        "id": 240849153,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622476741
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it should only be a a 4 argument function?</p>",
        "id": 240849689,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622477082
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; OK, and yet another issue on this topic (I’m struggling quite a lot with the documentation). I’m trying to define the BC for a 2D problem. According to the documentation this should be possible:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">∂y</span> <span class=\"o\">=</span> <span class=\"kt\">CenteredDifference</span><span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">}(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">Δx</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">H</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n\n<span class=\"n\">Qx</span><span class=\"p\">,</span> <span class=\"n\">Qy</span> <span class=\"o\">=</span> <span class=\"n\">MultiDimBC</span><span class=\"p\">(</span><span class=\"n\">Dirichlet0BC</span><span class=\"p\">(</span><span class=\"kt\">Float32</span><span class=\"p\">),</span> <span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">H</span><span class=\"p\">))</span>\n\n<span class=\"n\">dHdx</span> <span class=\"o\">=</span> <span class=\"n\">∂x</span><span class=\"o\">*</span><span class=\"n\">H</span><span class=\"o\">*</span><span class=\"n\">Qx</span>\n<span class=\"n\">dHdy</span> <span class=\"o\">=</span> <span class=\"n\">∂y</span><span class=\"o\">*</span><span class=\"n\">H</span><span class=\"o\">*</span><span class=\"sa\">Qy</span><span class=\"sb\">```</span>\n<span class=\"sb\">But I get the following error:</span>\n<span class=\"sb\">```</span><span class=\"sa\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">MethodError</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">method</span> <span class=\"n\">matching</span> <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">MultiDimDirectionalBC</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"kt\">RobinBC</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}},</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">})</span>\n<span class=\"n\">Closest</span> <span class=\"n\">candidates</span> <span class=\"n\">are</span><span class=\"o\">:</span>\n  <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"n\">at</span> <span class=\"n\">operators</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">560</span>\n  <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">StridedMatrix</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">StridedVector</span><span class=\"p\">{</span><span class=\"kt\">S</span><span class=\"p\">})</span> <span class=\"k\">where</span> <span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"o\">&lt;:</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">ComplexF32</span><span class=\"p\">,</span> <span class=\"kt\">ComplexF64</span><span class=\"p\">},</span> <span class=\"kt\">S</span><span class=\"o\">&lt;:</span><span class=\"kt\">Real</span><span class=\"p\">}</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">buildbot</span><span class=\"o\">/</span><span class=\"n\">worker</span><span class=\"o\">/</span><span class=\"n\">package_macos64</span><span class=\"o\">/</span><span class=\"n\">build</span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">stdlib</span><span class=\"o\">/</span><span class=\"n\">v1</span><span class=\"mf\">.6</span><span class=\"o\">/</span><span class=\"n\">LinearAlgebra</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">matmul</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">44</span>\n  <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">StridedMatrix</span><span class=\"p\">{</span><span class=\"kt\">var</span><span class=\"s\">\"#s832\"</span><span class=\"p\">}</span> <span class=\"k\">where</span> <span class=\"kt\">var</span><span class=\"s\">\"#s832\"</span><span class=\"o\">&lt;:</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">StridedMatrix</span><span class=\"p\">{</span><span class=\"kt\">var</span><span class=\"s\">\"#s831\"</span><span class=\"p\">}</span> <span class=\"k\">where</span> <span class=\"kt\">var</span><span class=\"s\">\"#s831\"</span><span class=\"o\">&lt;:</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">ComplexF32</span><span class=\"p\">,</span> <span class=\"kt\">ComplexF64</span><span class=\"p\">})</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">buildbot</span><span class=\"o\">/</span><span class=\"n\">worker</span><span class=\"o\">/</span><span class=\"n\">package_macos64</span><span class=\"o\">/</span><span class=\"n\">build</span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">share</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">stdlib</span><span class=\"o\">/</span><span class=\"n\">v1</span><span class=\"mf\">.6</span><span class=\"o\">/</span><span class=\"n\">LinearAlgebra</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">matmul</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">158</span><span class=\"sb\">```</span>\n<span class=\"sb\">What is the correct way to declare BC for a 2D problem like this one? Thanks again!</span>\n</code></pre></div>",
        "id": 240850606,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622477731
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; For what I’ve seen this should be working now according to this? <a href=\"https://github.com/SciML/DiffEqOperators.jl/pull/170\">https://github.com/SciML/DiffEqOperators.jl/pull/170</a></p>",
        "id": 240851683,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622478521
    },
    {
        "content": "<p>[gitter] &lt;jianqixi_gitlab&gt; @GitterIRCbot I see your points, the basic format of the equation is like dx1/dt=(x1+ax2+bx3)*(x4+a'x5+b'x6)-(x7+a''x8+b''x9). I think it looks like normal for the cvode</p>",
        "id": 240852188,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622478878
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; I’ve added this here in order to follow up our discussion in discourse: <a href=\"https://discourse.julialang.org/t/workaround-to-mutating-arrays-is-not-supported-with-zygote-and-udes/61585/7\">https://discourse.julialang.org/t/workaround-to-mutating-arrays-is-not-supported-with-zygote-and-udes/61585/7</a></p>",
        "id": 240855302,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622481249
    },
    {
        "content": "<p>[gitter] &lt;spraharsh&gt; I noticed that using integrator.destats with CVODE_BDF is giving me <code>ERROR: LoadError: type CVODEIntegrator has no field destats</code></p>",
        "id": 240885537,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622510810
    },
    {
        "content": "<p>[gitter] &lt;spraharsh&gt; is there a way to get the function/jaobian evaluations/iterations from the solver itself?</p>",
        "id": 240885555,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622510848
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @spraharsh are you on Julia v1.6?</p>",
        "id": 240885608,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622510891
    },
    {
        "content": "<p>[gitter] &lt;spraharsh&gt; yup</p>",
        "id": 240885612,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622510897
    },
    {
        "content": "<p>[gitter] &lt;spraharsh&gt; Sundials v4.4.3</p>",
        "id": 240885703,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622511019
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; uhh</p>",
        "id": 240885724,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622511066
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>integrator.destats</code>?</p>",
        "id": 240885727,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622511070
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's there.</p>",
        "id": 240885729,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622511072
    },
    {
        "content": "<p>[gitter] &lt;spraharsh&gt; yup, works with QNDF, tried it with this file here <a href=\"https://github.com/spraharsh/basins.jl/blob/master/batch_minimum_assign.jl\">https://github.com/spraharsh/basins.jl/blob/master/batch_minimum_assign.jl</a> which worked with QNDF, but I'll write a smaller test piece, to check if there's something I'm doing wrong</p>",
        "id": 240885913,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622511355
    },
    {
        "content": "<p>[gitter] &lt;spraharsh&gt; I'm on Julia v1.6.1 and</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">using</span> <span class=\"n\">DifferentialEquations</span>\n<span class=\"k\">using</span> <span class=\"n\">Sundials</span>\n\n\n<span class=\"k\">function</span> <span class=\"n\">n_grad</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"n\">u</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">ode_func</span> <span class=\"o\">=</span> <span class=\"n\">ODEFunction</span><span class=\"p\">(</span><span class=\"n\">n_grad</span><span class=\"p\">)</span>\n<span class=\"n\">tspan</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">1.</span><span class=\"p\">)</span>\n<span class=\"n\">initial_point</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">1.</span> <span class=\"p\">]</span>\n<span class=\"n\">prob</span> <span class=\"o\">=</span> <span class=\"n\">ODEProblem</span><span class=\"p\">(</span><span class=\"n\">ode_func</span><span class=\"p\">,</span> <span class=\"n\">initial_point</span><span class=\"p\">,</span> <span class=\"n\">tspan</span><span class=\"p\">)</span>\n\n<span class=\"n\">integrator_cvode</span> <span class=\"o\">=</span> <span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">prob</span><span class=\"p\">,</span> <span class=\"n\">CVODE_BDF</span><span class=\"p\">(),</span> <span class=\"n\">reltol</span> <span class=\"o\">=</span> <span class=\"mf\">1e-4</span><span class=\"p\">,</span> <span class=\"n\">abstol</span> <span class=\"o\">=</span> <span class=\"mf\">1e-4</span><span class=\"p\">)</span>\n<span class=\"n\">integrator_qndf</span> <span class=\"o\">=</span> <span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">prob</span><span class=\"p\">,</span> <span class=\"n\">QNDF</span><span class=\"p\">(),</span> <span class=\"n\">reltol</span> <span class=\"o\">=</span> <span class=\"mf\">1e-4</span><span class=\"p\">,</span> <span class=\"n\">abstol</span> <span class=\"o\">=</span> <span class=\"mf\">1e-4</span><span class=\"p\">)</span>\n\n<span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">integrator_qndf</span><span class=\"o\">.</span><span class=\"n\">destats</span><span class=\"p\">)</span>\n<span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">integrator_cvode</span><span class=\"o\">.</span><span class=\"n\">destats</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 240886555,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622512190
    },
    {
        "content": "<p>[gitter] &lt;spraharsh&gt; gives me</p>",
        "id": 240886557,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622512193
    },
    {
        "content": "<p>[gitter] &lt;spraharsh&gt; ```<br>\nDiffEqBase.DEStats<br>\nNumber of function 1 evaluations:                  3<br>\nNumber of function 2 evaluations:                  0<br>\nNumber of W matrix evaluations:                    0<br>\nNumber of linear solves:                           0<br>\nNumber of Jacobians created:                       0<br>\nNumber of nonlinear solver iterations:             0<br>\nNumber of nonlinear solver convergence failures:   0<br>\nNumber of rootfind condition calls:                0<br>\nNumber of accepted steps:                          0<br>\nNumber of rejected steps:                          0<br>\nERROR: LoadError: type CVODEIntegrator has no field destats<br>\nStacktrace:<br>\n......</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code>\n</code></pre></div>",
        "id": 240886639,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622512258
    },
    {
        "content": "<p>[gitter] &lt;spraharsh&gt; with Sundials v4.4.3</p>",
        "id": 240886647,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622512275
    },
    {
        "content": "<p>[gitter] &lt;spraharsh&gt; and DifferentialEquations v6.17.0</p>",
        "id": 240886668,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622512310
    },
    {
        "content": "<p>[gitter] &lt;spraharsh&gt; the stack trace is </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">getproperty</span><span class=\"p\">(</span><span class=\"n\">integrator</span><span class=\"o\">::</span><span class=\"kt\">Sundials</span><span class=\"o\">.</span><span class=\"kt\">CVODEIntegrator</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">NullParameters</span><span class=\"p\">,</span> <span class=\"kt\">Sundials</span><span class=\"o\">.</span><span class=\"kt\">Handle</span><span class=\"p\">{</span><span class=\"kt\">Sundials</span><span class=\"o\">.</span><span class=\"kt\">CVODEMem</span><span class=\"p\">},</span> <span class=\"kt\">ODESolution</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">}},</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">ODEProblem</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">false</span><span class=\"p\">,</span> <span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">NullParameters</span><span class=\"p\">,</span> <span class=\"kt\">ODEFunction</span><span class=\"p\">{</span><span class=\"kt\">false</span><span class=\"p\">,</span> <span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">n_grad</span><span class=\"p\">),</span> <span class=\"kt\">LinearAlgebra</span><span class=\"o\">.</span><span class=\"kt\">UniformScaling</span><span class=\"p\">{</span><span class=\"kt\">Bool</span><span class=\"p\">},</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">DEFAULT_OBSERVED</span><span class=\"p\">),</span> <span class=\"kt\">Nothing</span><span class=\"p\">},</span> <span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">Iterators</span><span class=\"o\">.</span><span class=\"kt\">Pairs</span><span class=\"p\">{</span><span class=\"kt\">Union</span><span class=\"p\">{},</span> <span class=\"kt\">Union</span><span class=\"p\">{},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{},</span> <span class=\"kt\">NamedTuple</span><span class=\"p\">{(),</span> <span class=\"kt\">Tuple</span><span class=\"p\">{}}},</span> <span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">StandardODEProblem</span><span class=\"p\">},</span> <span class=\"kt\">CVODE_BDF</span><span class=\"p\">{</span><span class=\"ss\">:Newton</span><span class=\"p\">,</span> <span class=\"ss\">:Dense</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">},</span> <span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">HermiteInterpolation</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">}},</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqBase</span><span class=\"o\">.</span><span class=\"kt\">DEStats</span><span class=\"p\">},</span> <span class=\"kt\">CVODE_BDF</span><span class=\"p\">{</span><span class=\"ss\">:Newton</span><span class=\"p\">,</span> <span class=\"ss\">:Dense</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">},</span> <span class=\"kt\">Sundials</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#47#51\"</span><span class=\"p\">{</span><span class=\"kt\">ODEProblem</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">false</span><span class=\"p\">,</span> <span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">NullParameters</span><span class=\"p\">,</span> <span class=\"kt\">ODEFunction</span><span class=\"p\">{</span><span class=\"kt\">false</span><span class=\"p\">,</span> <span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">n_grad</span><span class=\"p\">),</span> <span class=\"kt\">LinearAlgebra</span><span class=\"o\">.</span><span class=\"kt\">UniformScaling</span><span class=\"p\">{</span><span class=\"kt\">Bool</span><span class=\"p\">},</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">DEFAULT_OBSERVED</span><span class=\"p\">),</span> <span class=\"kt\">Nothing</span><span class=\"p\">},</span> <span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">Iterators</span><span class=\"o\">.</span><span class=\"kt\">Pairs</span><span class=\"p\">{</span><span class=\"kt\">Union</span><span class=\"p\">{},</span> <span class=\"kt\">Union</span><span class=\"p\">{},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{},</span> <span class=\"kt\">NamedTuple</span><span class=\"p\">{(),</span> <span class=\"kt\">Tuple</span><span class=\"p\">{}}},</span> <span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">StandardODEProblem</span><span class=\"p\">}},</span> <span class=\"kt\">Sundials</span><span class=\"o\">.</span><span class=\"kt\">FunJac</span><span class=\"p\">{</span><span class=\"kt\">Sundials</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#47#51\"</span><span class=\"p\">{</span><span class=\"kt\">ODEProblem</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">false</span><span class=\"p\">,</span> <span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">NullParameters</span><span class=\"p\">,</span> <span class=\"kt\">ODEFunction</span><span class=\"p\">{</span><span class=\"kt\">false</span><span class=\"p\">,</span> <span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">n_grad</span><span class=\"p\">),</span> <span class=\"kt\">LinearAlgebra</span><span class=\"o\">.</span><span class=\"kt\">UniformScaling</span><span class=\"p\">{</span><span class=\"kt\">Bool</span><span class=\"p\">},</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">DEFAULT_OBSERVED</span><span class=\"p\">),</span> <span class=\"kt\">Nothing</span><span class=\"p\">},</span> <span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">Iterators</span><span class=\"o\">.</span><span class=\"kt\">Pairs</span><span class=\"p\">{</span><span class=\"kt\">Union</span><span class=\"p\">{},</span> <span class=\"kt\">Union</span><span class=\"p\">{},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{},</span> <span class=\"kt\">NamedTuple</span><span class=\"p\">{(),</span> <span class=\"kt\">Tuple</span><span class=\"p\">{}}},</span> <span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">StandardODEProblem</span><span class=\"p\">}},</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">NullParameters</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">},</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Sundials</span><span class=\"o\">.</span><span class=\"kt\">DEOptions</span><span class=\"p\">{</span><span class=\"kt\">DataStructures</span><span class=\"o\">.</span><span class=\"kt\">BinaryMinHeap</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">DataStructures</span><span class=\"o\">.</span><span class=\"kt\">BinaryMinHeap</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">CallbackSet</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{}},</span> <span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">DiffEqBase</span><span class=\"o\">.</span><span class=\"kt\">ODE_DEFAULT_PROG_MESSAGE</span><span class=\"p\">)},</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">Sundials</span><span class=\"o\">.</span><span class=\"kt\">LinSolHandle</span><span class=\"p\">{</span><span class=\"kt\">Sundials</span><span class=\"o\">.</span><span class=\"kt\">Dense</span><span class=\"p\">},</span> <span class=\"kt\">Sundials</span><span class=\"o\">.</span><span class=\"kt\">MatrixHandle</span><span class=\"p\">{</span><span class=\"kt\">Sundials</span><span class=\"o\">.</span><span class=\"kt\">DenseMatrix</span><span class=\"p\">},</span> <span class=\"kt\">Nothing</span><span class=\"p\">},</span> <span class=\"n\">sym</span><span class=\"o\">::</span><span class=\"kt\">Symbol</span><span class=\"p\">)</span>\n   <span class=\"err\">@</span> <span class=\"n\">Sundials</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">Sundials</span><span class=\"o\">/</span><span class=\"n\">vDmSJ</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">common_interface</span><span class=\"o\">/</span><span class=\"n\">integrator_utils</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">185</span>\n <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n   <span class=\"err\">@</span> <span class=\"o\">~/</span><span class=\"n\">Dropbox</span><span class=\"o\">/</span><span class=\"n\">research</span><span class=\"o\">/</span><span class=\"n\">bv</span><span class=\"o\">-</span><span class=\"n\">libraries</span><span class=\"o\">/</span><span class=\"n\">basins</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">/</span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">random_test</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">24</span>\n<span class=\"k\">in</span> <span class=\"n\">expression</span> <span class=\"n\">starting</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">praharsh</span><span class=\"o\">/</span><span class=\"n\">Dropbox</span><span class=\"o\">/</span><span class=\"n\">research</span><span class=\"o\">/</span><span class=\"n\">bv</span><span class=\"o\">-</span><span class=\"n\">libraries</span><span class=\"o\">/</span><span class=\"n\">basins</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">/</span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">random_test</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">24</span>\n</code></pre></div>",
        "id": 240886751,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622512393
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Use <code>integrator_cvode.sol.destats</code></p>",
        "id": 240890629,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622517588
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Just out of curiosity, has anyone ever heard of the complex-step differentiation method? How does it compare to forward-mode autodiff for ODEs?</p>",
        "id": 240910240,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622536404
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; It’s quite slow and don’t use it if you don’t absolutely need it.</p>",
        "id": 240919189,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622541486
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; And it's implemented in <a href=\"https://github.com/search?q=FiniteDiff.jl&amp;type=Repositories\">FiniteDiff.jl</a></p>",
        "id": 240927299,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622546777
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://mitmath.github.io/18337/lecture8/automatic_differentiation.html\">https://mitmath.github.io/18337/lecture8/automatic_differentiation.html</a></p>",
        "id": 240933459,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622550544
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://www.youtube.com/watch?v=zHPXGBiTM5A\">https://www.youtube.com/watch?v=zHPXGBiTM5A</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"zHPXGBiTM5A\" href=\"https://www.youtube.com/watch?v=zHPXGBiTM5A\"><img src=\"https://uploads.zulipusercontent.net/0a2eb40a05fb743c38f37caea31ca5b1e02ddfe1/68747470733a2f2f692e7974696d672e636f6d2f76692f7a485058474269544d35412f64656661756c742e6a7067\"></a></div>",
        "id": 240933465,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622550550
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Cool, thanks, Chris!</p>",
        "id": 240933869,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622550749
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; is it possible to get access to the integrator from the <code>StepsizeLimiter</code> callback? it seems to just pass <code>u,p,t</code>  into the function.</p>",
        "id": 240953118,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622558959
    },
    {
        "content": "<p>[gitter] &lt;spraharsh&gt; thanks, However I'm not able to get my <code>integrator_cvode.sol.destats</code> to register function calls, for example doing </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">func_eval</span> <span class=\"o\">=</span><span class=\"mi\">0</span>\n<span class=\"k\">function</span> <span class=\"n\">n_grad</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"k\">global</span> <span class=\"n\">func_eval</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"n\">u</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">ode_func</span> <span class=\"o\">=</span> <span class=\"n\">ODEFunction</span><span class=\"p\">(</span><span class=\"n\">n_grad</span><span class=\"p\">)</span>\n<span class=\"n\">tspan</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">1.</span><span class=\"p\">)</span>\n<span class=\"n\">initial_point</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">1.</span> <span class=\"p\">]</span>\n<span class=\"n\">prob</span> <span class=\"o\">=</span> <span class=\"n\">ODEProblem</span><span class=\"p\">(</span><span class=\"n\">ode_func</span><span class=\"p\">,</span> <span class=\"n\">initial_point</span><span class=\"p\">,</span> <span class=\"n\">tspan</span><span class=\"p\">)</span>\n<span class=\"n\">integrator_cvode</span> <span class=\"o\">=</span> <span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">prob</span><span class=\"p\">,</span> <span class=\"n\">CVODE_BDF</span><span class=\"p\">(),</span> <span class=\"n\">reltol</span> <span class=\"o\">=</span> <span class=\"mf\">1e-4</span><span class=\"p\">,</span> <span class=\"n\">abstol</span> <span class=\"o\">=</span> <span class=\"mf\">1e-4</span><span class=\"p\">)</span>\n\n<span class=\"n\">step!</span><span class=\"p\">(</span><span class=\"n\">integrator_cvode</span><span class=\"p\">)</span>\n<span class=\"n\">step!</span><span class=\"p\">(</span><span class=\"n\">integrator_cvode</span><span class=\"p\">)</span>\n<span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"function calls: \"</span><span class=\"p\">)</span>\n<span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">func_eval</span><span class=\"p\">)</span>\n\n<span class=\"n\">println</span><span class=\"p\">(</span><span class=\"n\">integrator_cvode</span><span class=\"o\">.</span><span class=\"n\">sol</span><span class=\"o\">.</span><span class=\"n\">destats</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 240978516,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622569569
    },
    {
        "content": "<p>[gitter] &lt;spraharsh&gt; is giving me </p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span> <span class=\"n\">calls</span><span class=\"o\">:</span> <span class=\"mi\">8</span>\n<span class=\"n\">DiffEqBase</span><span class=\"o\">.</span><span class=\"n\">DEStats</span>\n<span class=\"kt\">Number</span> <span class=\"n\">of</span> <span class=\"k\">function</span> <span class=\"mi\">1</span> <span class=\"n\">evaluations</span><span class=\"o\">:</span>                  <span class=\"mi\">0</span>\n<span class=\"kt\">Number</span> <span class=\"n\">of</span> <span class=\"k\">function</span> <span class=\"mi\">2</span> <span class=\"n\">evaluations</span><span class=\"o\">:</span>                  <span class=\"mi\">0</span>\n<span class=\"kt\">Number</span> <span class=\"n\">of</span> <span class=\"n\">W</span> <span class=\"n\">matrix</span> <span class=\"n\">evaluations</span><span class=\"o\">:</span>                    <span class=\"mi\">0</span>\n<span class=\"kt\">Number</span> <span class=\"n\">of</span> <span class=\"n\">linear</span> <span class=\"n\">solves</span><span class=\"o\">:</span>                           <span class=\"mi\">0</span>\n<span class=\"kt\">Number</span> <span class=\"n\">of</span> <span class=\"n\">Jacobians</span> <span class=\"n\">created</span><span class=\"o\">:</span>                       <span class=\"mi\">0</span>\n<span class=\"kt\">Number</span> <span class=\"n\">of</span> <span class=\"n\">nonlinear</span> <span class=\"n\">solver</span> <span class=\"n\">iterations</span><span class=\"o\">:</span>             <span class=\"mi\">0</span>\n<span class=\"kt\">Number</span> <span class=\"n\">of</span> <span class=\"n\">nonlinear</span> <span class=\"n\">solver</span> <span class=\"n\">convergence</span> <span class=\"n\">failures</span><span class=\"o\">:</span>   <span class=\"mi\">0</span>\n<span class=\"kt\">Number</span> <span class=\"n\">of</span> <span class=\"n\">rootfind</span> <span class=\"n\">condition</span> <span class=\"n\">calls</span><span class=\"o\">:</span>                <span class=\"mi\">0</span>\n<span class=\"kt\">Number</span> <span class=\"n\">of</span> <span class=\"n\">accepted</span> <span class=\"n\">steps</span><span class=\"o\">:</span>                          <span class=\"mi\">0</span>\n<span class=\"kt\">Number</span> <span class=\"n\">of</span> <span class=\"n\">rejected</span> <span class=\"n\">steps</span><span class=\"o\">:</span>                          <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 240978538,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622569582
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; CVODE_BDF lies a bit, I guess</p>",
        "id": 240981810,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622571049
    },
    {
        "content": "<p>[gitter] &lt;spraharsh&gt; hmm, that would be weird, I have checks in C without the julia interface that seemed to work. I guess I'll just use globals for now</p>",
        "id": 240986216,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622572973
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah I've noticed that before that Sundials sometimes returns stats like \"I've never solved a linear system\", <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 241063953,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622576058
    },
    {
        "content": "<p>[slack] &lt;Pieter Gunnink&gt; I am developing a new Algorithm for <code>StochasticDiffEq</code> and have created a cache with</p>\n<div class=\"codehilite\" data-code-language=\"import\"><pre><span></span><code>@cache struct CustomCache &lt;: StochasticDiffEqMutableCache\na::Float64\nend```\nBut the `@cache` macro is not working properly, I get a series of errors. If I instead copy-paste the entire macro into my own module it works as expected. Is there some trick I am missing here?\n</code></pre></div>",
        "id": 241153898,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622642898
    },
    {
        "content": "<p>[slack] &lt;Pieter Gunnink&gt; The full error is</p>\n<div class=\"codehilite\" data-code-language=\"error\"><pre><span></span><code>Stacktrace:\n  [1] getproperty(x::Symbol, f::Symbol)\n    @ Base .\\Base.jl:33\n  [2] var\"@cache\"(__source__::LineNumberNode, __module__::Module, expr::Any)\n    @ StochasticDiffEq ~\\.julia\\packages\\StochasticDiffEq\\qg3yM\\src\\misc_utils.jl:43\n  [3] eval\n    @ .\\boot.jl:360 [inlined]\n  [4] eval\n    @ .\\Base.jl:39 [inlined]\n  [5] repleval(m::Module, code::Expr, #unused#::String)\n    @ VSCodeServer ~\\.vscode\\extensions\\julialang.language-julia-1.2.1\\scripts\\packages\\VSCodeServer\\src\\repl.jl:139\n  [6] (::VSCodeServer.var\"#69#71\"{Module, Expr, REPL.LineEditREPL, REPL.LineEdit.Prompt})()\n    @ VSCodeServer ~\\.vscode\\extensions\\julialang.language-julia-1.2.1\\scripts\\packages\\VSCodeServer\\src\\repl.jl:105\n  [7] with_logstate(f::Function, logstate::Any)\n    @ Base.CoreLogging .\\logging.jl:491\n  [8] with_logger\n    @ .\\logging.jl:603 [inlined]\n  [9] (::VSCodeServer.var\"#68#70\"{Module, Expr, REPL.LineEditREPL, REPL.LineEdit.Prompt})()\n    @ VSCodeServer ~\\.vscode\\extensions\\julialang.language-julia-1.2.1\\scripts\\packages\\VSCodeServer\\src\\repl.jl:106\n [10] #invokelatest#2\n    @ .\\essentials.jl:708 [inlined]\n [11] invokelatest(::Any)\n    @ Base .\\essentials.jl:706\n [12] macro expansion\n    @ ~\\.vscode\\extensions\\julialang.language-julia-1.2.1\\scripts\\packages\\VSCodeServer\\src\\eval.jl:34 [inlined]\n [13] (::VSCodeServer.var\"#53#54\")()\n    @ VSCodeServer .\\task.jl:406\nin expression starting at REPL[9]:3```\n</code></pre></div>",
        "id": 241154249,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622643101
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It's missing most of the common cache values like <code>u</code> ?</p>",
        "id": 241155748,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622643760
    },
    {
        "content": "<p>[slack] &lt;Pieter Gunnink&gt; O this was just a toy example, but that should not matter right?</p>",
        "id": 241155829,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622643816
    },
    {
        "content": "<p>[slack] &lt;Pieter Gunnink&gt; I am also bit unclear as to what @cache does exactly? Is there a documentation somewhere?</p>",
        "id": 241155943,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622643865
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; No, it's internal</p>",
        "id": 241155995,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622643893
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it sets up the cache integrator functions so if someone does <code>resize!</code> etc. it all works</p>",
        "id": 241156022,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622643911
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but it makes some assumptions on the forms of the caches</p>",
        "id": 241156038,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622643919
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/SciML/OrdinaryDiffEq.jl/blob/master/src/misc_utils.jl#L20-L38\">https://github.com/SciML/OrdinaryDiffEq.jl/blob/master/src/misc_utils.jl#L20-L38</a></p>",
        "id": 241156072,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622643940
    },
    {
        "content": "<p>[slack] &lt;Pieter Gunnink&gt; I see</p>",
        "id": 241156337,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622644048
    },
    {
        "content": "<p>[slack] &lt;Pieter Gunnink&gt; Would I break a lot of things if I just don't use it? My algorithm is already really specific so not sure how much of the infrastructure I would need</p>",
        "id": 241156415,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622644082
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; for a first pass, drop it</p>",
        "id": 241156896,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622644260
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; then in PR review I can help you.</p>",
        "id": 241156924,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622644268
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It's kind of a good check for code conformity anyways, since I would ask to use <code>uType</code> , <code>rateType</code> , etc. anyways</p>",
        "id": 241156974,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622644288
    },
    {
        "content": "<p>[slack] &lt;Pieter Gunnink&gt; Okay, thanks a lot!</p>",
        "id": 241157174,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622644362
    },
    {
        "content": "<p>[slack] &lt;Pieter Gunnink&gt; Not sure if I will ever PR this though, it is really system specific (solving the Landau Liftshitz Gilbert equation if that means anything)</p>",
        "id": 241157261,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622644402
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh I see</p>",
        "id": 241157831,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622644632
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @yingbo_ma @elrodc @isaacsas new BCR is up: <a href=\"https://benchmarks.sciml.ai/html/Bio/BCR.html\">https://benchmarks.sciml.ai/html/Bio/BCR.html</a></p>",
        "id": 241159955,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622645457
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Take a look at QNDF <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 241159975,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622645464
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Looks good! What’s the issue with the expression too large errors?</p>",
        "id": 241163840,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622646929
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; (For the Jacobian cases.)</p>",
        "id": 241163868,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622646944
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Shashi and I are working on CSE. That should help.</p>",
        "id": 241163959,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622646965
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah, it'll be good to see the sparse matrix ones</p>",
        "id": 241164763,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622647296
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; CVODE KLU crashes with that size of sparse matrices though, so <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> that one is commented out.</p>",
        "id": 241164796,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622647316
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Is this the same thing on Discourse?</p>",
        "id": 241179668,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622653940
    },
    {
        "content": "<p>[slack] &lt;Ian McInerney&gt; I am interested in defining more problem types in ModelingToolkit for optimal control problems (such as constrained problems, LQR-cost, free end-time problems, etc.) and was thinking of the best way to structure this. I am thinking of actually making a new package <code>OptimalControlProblems</code> that would contain these problems and the associated machinery for them, and then the solvers I am using can pull in that package. I am leaning towards the separate package rather than upstreaming directly into MTK because I think there is a use-case for many different OCP types to define problems (since there are quite a few standard problem types that solvers work with). Is this generally the format extensions to MKT use, or do most upstream problem types into it? (This is more of an ecosystem structure question that @chrisrackauckas is probably best suited to answer than an ask for help).</p>",
        "id": 241180650,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622654404
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; i'm not exactly clear on usage for unstable_check<br>\n<code>unstable_check: Specifies a function unstable_check(dt,u,p,t) where, when it returns true, it will cause the solver to exit and throw a warning. Defaults to any(isnan,u), i.e. checking if any value is a NaN.</code><br>\ncan i just set <code>solve(prob;unstable_check=true)</code> and it will default to <code>any(isnan, u)</code> ?</p>",
        "id": 241317901,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622666976
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; unstable_check is a function.</p>",
        "id": 241319411,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622667714
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you declare the function that declares instability</p>",
        "id": 241319485,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622667735
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; can u type out an example using the default any(isnan, u)?</p>",
        "id": 241319635,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622667827
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>unstable_check = (dt,u,p,t) -&gt; any(isnan, u)</code></p>",
        "id": 241319715,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622667853
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; Yes, it's a follow up on the same problem.</p>",
        "id": 241320449,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622668301
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Hi,</p>\n<p>Can someone please point me to the pretty print of say ODEProblem? I did not find the <code>show</code>  method</p>",
        "id": 241366692,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622712426
    },
    {
        "content": "<p>[slack] &lt;devmotion&gt; <a href=\"https://github.com/SciML/SciMLBase.jl/blob/e44240ff63a0eae590ba25653ad1b164714585aa/src/problems/problem_utils.jl#L96-L104\">https://github.com/SciML/SciMLBase.jl/blob/e44240ff63a0eae590ba25653ad1b164714585aa/src/problems/problem_utils.jl#L96-L104</a></p>",
        "id": 241369605,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622714273
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; hey Diffeq, a question about <code>ComponentArrays</code>. Seems like I get into trouble if I define an array of one size in a ComponentArray and then want to change that to an array of a different size. Here is an example.</p>\n<div class=\"codehilite\" data-code-language=\"a\"><pre><span></span><code>a.arr = [1.0, 1.0, 1.0]```\nI get an error `ERROR: DimensionMismatch(\"tried to assign 3 elements to 5 destinations\")`\nThe error is understandable, but is there a way to change the length of the array, since it is a mutable variable? I don't always know the length of that array until the function is run, hence I set a default and then want to override it.\n</code></pre></div>",
        "id": 241422573,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622740593
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; I know the heaviest users of <code>ComponentArray</code> are the Diffeq folks, hence I posted this hear instead of the #arrays channel.</p>",
        "id": 241422647,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622740629
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @Jonnie would be your guy for this.</p>",
        "id": 241422671,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622740643
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I think it needs to set the size early?</p>",
        "id": 241422687,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622740654
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I am not sure.</p>",
        "id": 241422693,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622740656
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Yeah. otherwise is there a way to use <code>remake</code> or such. I am having to define a kludgy function around creating the array otherwise, and it is rather yucky and will cause confusion.</p>",
        "id": 241422862,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622740720
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; I don’t think resizing <code>a.arr</code> is doable. It’s a view into a contiguous block of memory</p>",
        "id": 241423635,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622741020
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; @yingbo_ma Ouch. Thanks Yingbo. Let's see what @Jonnie says. I had a mix of structs and ComponentArrays in my code and I was trying to convert over to just ComponentArrays. But then this issue caught me and some of the things I was doing with structs did not seem to work with ComponentArray.</p>",
        "id": 241424911,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622741522
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; One of the unfortunate issues with the design of ComponentArrays is that the layout of all of the structure (including inner component sizes) is encoded in the type domain and therefore pretty inflexible for things like this. Even if that weren’t the case, though, it would still have to add elements to the middle of a contiguous block of memory as @yingbo_ma noted. It’s an idea I’ve played with a few times, but was never able to solve to my satisfaction.</p>",
        "id": 241425441,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622741732
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; That is cool. No worries. I was using a Struct before with a default Float array as a component, and then I was overriding that array when I actually implemented the struct to run a model. I suppose now I will have to wrap this in a function call that passes the array size when building the ComponentArray.</p>",
        "id": 241426037,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622741991
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; It would be pretty cool to have this functionality because then ComponentArrays would have MultiScaleArray-like functionality where you could spawn components mid-simulation. I just haven’t been able to figure out a good way to do it</p>",
        "id": 241426108,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622742003
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; It is no biggie, but just changes the way the code is organized, since I was able to set the Struct as a default argument in a function before (I was using a Parameters struct with default values). But this is good to know.</p>",
        "id": 241426289,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622742082
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; With that said, would MultiScaleArrays be a good fit for what you’re doing? They are a lot more flexible for things like this because they don’t have to hold everything in a contiguous chunk of memory.</p>",
        "id": 241426421,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622742136
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Hmm, do MultiScaleArrays work well with the DiffEq and SciML ecosystem?</p>",
        "id": 241426474,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622742164
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; Yep! They’re even part of the SciML ecosystem.</p>",
        "id": 241426598,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622742228
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Okay cool. I will look them up. I was trying to consolidate around fewer libraries. So let me take a look at that one. Thanks for your help @Jonnie and for turning me on to that library.</p>",
        "id": 241426725,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622742280
    },
    {
        "content": "<p>[slack] &lt;Stanley&gt; Petty question, I have a PDE and I'm looking for the steady state of system. Any ideas how might go about it in julia?</p>",
        "id": 241437008,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622746867
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what kind of PDE? <a href=\"http://diffeqoperators.sciml.ai/dev/\">http://diffeqoperators.sciml.ai/dev/</a> possibly</p>",
        "id": 241441094,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622748810
    },
    {
        "content": "<p>[slack] &lt;Stanley&gt; More like multivariable advection-diffusive-reaction equation with strong non-linear dynamics</p>",
        "id": 241441582,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622749036
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah I'd just something like <a href=\"https://diffeq.sciml.ai/stable/tutorials/advanced_ode_example/#Automatic-Sparsity-Detection\">https://diffeq.sciml.ai/stable/tutorials/advanced_ode_example/#Automatic-Sparsity-Detection</a> (which is a reaction-diffusion with strong nonlinear dynamics)</p>",
        "id": 241441902,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622749176
    },
    {
        "content": "<p>[slack] &lt;Stanley&gt; Thanks @chrisrackauckas In that I will have to manually discretize the equation?</p>",
        "id": 241442343,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622749389
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; You can use DiffEqOperators to do that</p>",
        "id": 241442477,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622749461
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; thank you</p>",
        "id": 241442735,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622749579
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; oh that’s because I search DiffEqBase</p>",
        "id": 241442759,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622749597
    },
    {
        "content": "<p>[slack] &lt;Stanley&gt; In the tutorial for diffeqoperators where they specify the equation <code>eq  = Dt(u(t,x)) ~ Dxx(u(t,x))</code>  If I have a very long and complicated equation, any idea how it fit this interface?</p>",
        "id": 241443125,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622749771
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; For now, not with MOLFiniteDifference but the operators</p>",
        "id": 241447164,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622751612
    },
    {
        "content": "<p>[slack] &lt;Stanley&gt; Ok. I will try to see it.</p>",
        "id": 241450287,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622753212
    },
    {
        "content": "<p>[slack] &lt;ignace-computing&gt; Hi! Question about <code>BrownianBridge()</code> in the <a href=\"https://github.com/SciML/DiffEqNoiseProcess.jl\">https://github.com/SciML/DiffEqNoiseProcess.jl</a> package.<br>\nDo you have a reference to literature where the concept Brownian bridge is actually defined? Thanks!</p>",
        "id": 241462670,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622758132
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It's a very common concept: <a href=\"https://en.wikipedia.org/wiki/Brownian_bridge\">https://en.wikipedia.org/wiki/Brownian_bridge</a></p>",
        "id": 241464489,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622759249
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you'll find it in most stochastic analysis books</p>",
        "id": 241464497,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622759257
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Hi,</p>\n<p>I have a quick question. My package has <code>DiffEqBase</code> has a dependency but I get I am very late cataching. up. Would <code>SciMLBase</code>  be a drop in replacement?</p>",
        "id": 241493900,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622786078
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; What are you depending DiffEqBase for?</p>",
        "id": 241494214,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622786484
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; SciMLBase has the function and problem types</p>",
        "id": 241494254,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622786527
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; ```using DifferentialEquations, Plots<br>\nusing ModelingToolkit</p>\n<p>@parameters w A<br>\n@variables t x(t) f(t)<br>\n@derivatives D'~t</p>\n<p>test_model = ODESystem([f ~ A<em>cos(w</em>t), D(x) ~ f])</p>\n<h1>with out callback</h1>\n<p>prob = ODEProblem(structural_simplify(test_model), [x =&gt; 1.0], (0.0,100.0),[w =&gt; 1.0, A =&gt; 1.0])<br>\nsol = solve(prob)<br>\nplot(sol, vars=[x,f])</p>\n<h1>with callback controling parameter A</h1>\n<p>function make_cb(ts_in, index, value)<br>\n    ts = ts_in<br>\n    condition(u,t,integrator) = t in ts<br>\n    function affect!(integrator)<br>\n            if integrator.t == ts[1]<br>\n                integrator.p[index] = value<br>\n            elseif integrator.t == ts[2]<br>\n                integrator.p[index] = 0.0<br>\n            end<br>\n    end<br>\n    cb = DiscreteCallback(condition, affect!, save_positions=(true,true));<br>\n    return ts, cb<br>\nend</p>\n<p>ts, cb  = make_cb([50.0,80.0], 1, 2.0)<br>\nprob = ODEProblem(structural_simplify(test_model), [x =&gt; 1.0], (0.0,100.0),[w =&gt; 1.0, A =&gt; 0.0])<br>\nsol = solve(prob, callback=cb, tstops=ts)<br>\nplot(sol, vars=[x,f])<code>``\nI have a question of how to display the external force term correctly using </code>ModelingTookit`. It seems that without callback, the force term can be displayed correctly, but with callback the external force term will not be displayed correctly. Did I do something wrong in the code?</p>",
        "id": 241586200,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622836902
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; the force term(in red) should also be oscillating during t=50~80, but the plot shows flat.: <a href=\"https://files.slack.com/files-pri/T68168MUP-F023WG0ANJ2/download/screen_shot_2021-06-04_at_4.02.05_pm.png\">https://files.slack.com/files-pri/T68168MUP-F023WG0ANJ2/download/screen_shot_2021-06-04_at_4.02.05_pm.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F023WG0ANJ2/download/screen_shot_2021-06-04_at_4.02.05_pm.png\"><img src=\"https://uploads.zulipusercontent.net/399628474f333a86a0b8dd070573da004dc68a6b/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303233574730414e4a322f646f776e6c6f61642f73637265656e5f73686f745f323032312d30362d30345f61745f342e30322e30355f706d2e706e67\"></a></div>",
        "id": 241586359,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622836987
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; another question related to this is how can I specify  a time dependent oscillatory force term as a reaction rate parameter in <a href=\"https://github.com/search?q=Catalyst.jl&amp;type=Repositories\">Catalyst.jl</a>. Is there a simple way to do this?<br>\nfor example</p>\n<div class=\"codehilite\" data-code-language=\"model\"><pre><span></span><code>    (A*cos(w*t),1.0),              R ↔ NR\nend A w```\nsomething like this\n</code></pre></div>",
        "id": 241592600,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622840445
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; I think this should work for generating an ODE model from Catalyst. Is there a problem?</p>",
        "id": 241594039,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622841328
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; yeah, I think it is working now. Somehow my computer got stucked when I tried this minimum model. I thought I wrote something wrong.: <a href=\"https://files.slack.com/files-pri/T68168MUP-F023NSU6FD5/download/screen_shot_2021-06-04_at_6.10.28_pm.png\">https://files.slack.com/files-pri/T68168MUP-F023NSU6FD5/download/screen_shot_2021-06-04_at_6.10.28_pm.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F023NSU6FD5/download/screen_shot_2021-06-04_at_6.10.28_pm.png\"><img src=\"https://uploads.zulipusercontent.net/34e839d24847386c020fa9a83e236da1fc510534/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d463032334e5355364644352f646f776e6c6f61642f73637265656e5f73686f745f323032312d30362d30345f61745f362e31302e32385f706d2e706e67\"></a></div>",
        "id": 241599052,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622844650
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; but the Modelingtoolkit example with a callback function does not seems to plot the external force correctly(the flat red line as I showed should be an oscillating one). I am not sure why</p>",
        "id": 241599252,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622844817
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; @isaacsas It seems that when I run a system with 11 variables and 21 reactions, if I make one of the rate to be oscillating, it takes forever to solve. Do you have any suggestion?</p>",
        "id": 241609986,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622858265
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Is the timescale of oscillations very small compared to the timescale you want to solve over / is the system very stiff?</p>",
        "id": 241642744,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622908213
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; I just put <code>A*cos(w*t)</code>  as one of the forward rate, and tested with a fixed <code>w=1</code> , and turn on <code>A</code>  during some intermediate time. I think the oscillatory time scale is comparable in this case?</p>",
        "id": 241645537,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622912147
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; &lt;@UFTJ2UDEW&gt; here is my test code. With regular constant rate, everything works as normal. But with oscillating rate(with the second last parameter w in the p vector = 1.0), it will take forever to solve .: <a href=\"https://files.slack.com/files-pri/T68168MUP-F0241GKPLVB/download/test.jl\">https://files.slack.com/files-pri/T68168MUP-F0241GKPLVB/download/test.jl</a></p>",
        "id": 241647986,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622915563
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; is there a way to check available options for a given ODE solver method? For example, is there a way to check if a method is fixed timestep only?</p>",
        "id": 241699225,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622997010
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://diffeq.sciml.ai/stable/solvers/ode_solve/\">https://diffeq.sciml.ai/stable/solvers/ode_solve/</a></p>",
        "id": 241699240,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622997051
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; if anyone has some time to donate, it would be good to have these notes in docstrings as well</p>",
        "id": 241699260,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622997065
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; Yeah - I saw the docs, but was wondering if there was a way to query in Julia in case the docs missed something. I basically was looking for a list of kwargs that could go into solve for a given method.</p>\n<p>Makes sense for that info to be in the docstrings. Would it be ok to just copy and paste “Fixed timestep only” into the docstrings for the explicit RK schemes? If so, I can add that to the RK/SSPRK schemes listed.</p>",
        "id": 241699575,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622997593
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; Ah, I can just do “methodname &lt;: OrdinaryDiffEq.OrdinaryDiffEqAdaptiveAlgorithm” to query the fixed timestep option.</p>",
        "id": 241699915,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622998151
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; That probably has not much to do with fixed timestep</p>",
        "id": 241699980,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622998221
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; For example, QNDF/QBDF are only adaptive order/step size for all practical purposes.</p>",
        "id": 241700013,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622998308
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; But most adaptive solvers have a adaptive=false mode</p>",
        "id": 241700054,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622998337
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; he's talking about many SSP methods which do not have an adaptive mode</p>",
        "id": 241700173,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622998552
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Ah, I see</p>",
        "id": 241700217,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622998570
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; Yeah. I asked b/c I wanted to know if I could query whether a method is “fixed timestep only”, and then wondered if there was just a way to list solver options for a given method.</p>\n<p>For example, I was looking at the PR <a href=\"https://github.com/SciML/OrdinaryDiffEq.jl/pull/1293\">https://github.com/SciML/OrdinaryDiffEq.jl/pull/1293</a> where @ranocha introduces step/stage limiters for 2N-storage explicit RK methods. I don’t think that this functionality is in the docs yet. It’d be cool if there was a way to query for that (unless that functionality is not supposed to be public?)</p>",
        "id": 241700377,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622998822
    },
    {
        "content": "<p>[slack] &lt;ranocha&gt; Most SSP methods are not adaptive (except something like <code>SSPRK43()</code>). However, this doesn't mean that they can use only a fixed time step - they can't use simple error-based step size control, but you can use a callback to adapt the time step. Thus, a comment \"fixed time step only\" doesn't really seem to be appropriate for them, I think</p>",
        "id": 241700733,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622999310
    },
    {
        "content": "<p>[slack] &lt;ranocha&gt; Concerning stage/step limiters: The long-time plan discussed in <a href=\"https://github.com/SciML/OrdinaryDiffEq.jl/issues/1292\">https://github.com/SciML/OrdinaryDiffEq.jl/issues/1292</a> is to move them to the common interface. It would nevertheless be nice to mention the option already in the dosctrings of methods supporting it</p>",
        "id": 241700798,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622999410
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; Gotcha. Would this be OK to add to the docstrings of supporting methods?</p>\n<blockquote>\n<p>Like SSPRK methods, _MethodName_ also takes optional arguments <code>stage_limiter!, step_limiter!)</code>, where <code>stage_limiter!</code> and <code>step_limiter</code> are functions of the form <code>limiter!(u, f, p, t)</code>. <br>\nStage/step limiters don’t preserve the convex combination property with 2N methods, right?</p>\n</blockquote>",
        "id": 241701059,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1622999780
    },
    {
        "content": "<p>[slack] &lt;ranocha&gt; Sounds good to me - and yes</p>",
        "id": 241703111,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623002932
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; Great, I’ll add those later today.</p>",
        "id": 241703124,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623002961
    },
    {
        "content": "<p>[slack] &lt;Anas Abdelrehim&gt; I could chip at it slowly whenever I'm free if you can give me an idea of how you would want it done? Seems like there are a ton of notes on that page</p>",
        "id": 241705379,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623005670
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I would just copy paste a lot of it over.</p>",
        "id": 241705411,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623005711
    },
    {
        "content": "<p>[slack] &lt;Anas Abdelrehim&gt; I guess where I'm confused is what part of the notes goes under what doc string in the code?</p>",
        "id": 241705484,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623005776
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Each solver has a docstring. Right now those just have the references for the original paper on the method. It should probably copy over the information like \"order 2/3, non-adaptive, etc.\"</p>",
        "id": 241705508,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623005813
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; PR submitted. I also made a PR for the DiffEqDocs:<br>\n• Added SSPRK43 (SSPRK432 suggests to use it, but it’s missing)<br>\n• HSLDDRK64 is noted as deprecated in favor of SHLDDRK64, but the suggested methods are not listed on <a href=\"https://github.com/search?q=DiffEqDocs.jl&amp;type=Repositories\">DiffEqDocs.jl</a>.<br>\n• <code>limiter(u,f,t) -&gt; limiter(u,f,p,t)</code><br>\n• updated 2N methods to mention <code>limiter!</code></p>",
        "id": 241711242,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623014271
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; @chrisrackauckas Do you have any suggestion for simulating with oscillating kinetic rates?</p>",
        "id": 241718854,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623027101
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; currently, the simulation can not be solved at all (takes forever) with my test.jl code.</p>",
        "id": 241719300,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623027834
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what do you mean?</p>",
        "id": 241719625,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623028411
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; which solvers and tolerances were tried?</p>",
        "id": 241719669,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623028444
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; I have not tried to set those explicitly. Have you take a look at my test code?</p>",
        "id": 241721788,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623032088
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; no, try things first.</p>",
        "id": 241724300,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623035908
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Mainly the Problems, see <a href=\"https://github.com/rveltz/BifurcationKit.jl/blob/master/src/periodicorbit/Flow.jl\">https://github.com/rveltz/BifurcationKit.jl/blob/master/src/periodicorbit/Flow.jl</a></p>",
        "id": 241746829,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623056338
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; I guess my question boils down to what is the difference between <a href=\"https://github.com/SciML/DiffEqBase.jl\">https://github.com/SciML/DiffEqBase.jl</a> and SciMLBase?</p>",
        "id": 241746901,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623056383
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; @chrisrackauckas I have tried Tsits5, rosenbrock23, and vern9, and made reltol = 1e-5, abstol = 1e-5. The solver always gives me <code>Instability detected. Aborting</code> or <code>Interrupted. Larger maxiters is needed.</code></p>",
        "id": 241776375,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623072726
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; try low solver tolerances?</p>",
        "id": 241776465,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623072766
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://discourse.julialang.org/t/psa-how-to-help-yourself-debug-differential-equation-solving-issues/62489\">https://discourse.julialang.org/t/psa-how-to-help-yourself-debug-differential-equation-solving-issues/62489</a></p>",
        "id": 241776488,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623072782
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; ok, thanks. I thought 1e-5 is already very low</p>",
        "id": 241776728,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623072880
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; no, that's higher than the default abstol</p>",
        "id": 241776752,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623072889
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; just quickly tried <code>reltol = 1e-2, abstol = 1e-3</code>  for Tsits5 and rosenbrock23. Still same issues</p>",
        "id": 241776966,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623072984
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that's even higher.</p>",
        "id": 241777013,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623073005
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; did you read the post?</p>",
        "id": 241777062,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623073026
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; &gt; If you find yourself in differential equation solver trouble, the first thing to do is lower the tolerance. In many cases, decreasing the tolerance improves the stability, and so trying something like <code>abstol=1e-10,reltol=1e-10</code> can tell you if it’s a tolerance issue. If that’s not working, try switching to a more stable solver, something for stiff equations like <code>TRBDF2()</code>, <code>KenCarp4()</code>, or <code>QNDF()</code>.</p>",
        "id": 241777083,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623073033
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; I will read it now</p>",
        "id": 241777093,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623073038
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; oh sorry, I thought the opposite way. I will read the post thoroughly</p>",
        "id": 241777232,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623073090
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; thanks</p>",
        "id": 241777237,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623073093
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; @chrisrackauckas I see how the dual number formulation extends the complex-step approach, but it's not immediately obvious to me why complex-step would be slower for a function that is complex-analytic? Shouldn't they both require a similar number of FLOPs?</p>",
        "id": 241788039,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623077448
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I guess there would be a lot of wasted operations on the imaginary part.</p>",
        "id": 241788617,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623077661
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's not necessarily slower</p>",
        "id": 241790572,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623078377
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I don't see why that would be the case?</p>",
        "id": 241790590,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623078385
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Its downside is that it requires complex analytic. That's an issue.</p>",
        "id": 241790608,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623078395
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; does CVODE_BDF without a jacobian given, use autodiff?</p>",
        "id": 241803327,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623083390
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; no</p>",
        "id": 241803342,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623083397
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; through the julia interface (okay I see)</p>",
        "id": 241803407,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623083413
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it could be made to do that, but it doesn't</p>",
        "id": 241803431,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623083425
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it uses the internal Sundials routine unmodified for that.</p>",
        "id": 241803450,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623083431
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; From my limited tests, AD doesn’t have an advantage over finite diff in stiff ODE solving.</p>",
        "id": 241803523,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623083472
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; well, there were a few very stiff cases where it mattered a little bit</p>",
        "id": 241803578,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623083496
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but yeah, it's fairly minor</p>",
        "id": 241803588,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623083499
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you can look for the plots in the OrdinaryDiffEq PRs</p>",
        "id": 241803618,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623083516
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it matters more for Rosenbrock non-W than anything else (and that makes sense from the theory)</p>",
        "id": 241803709,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623083551
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; ah, yes</p>",
        "id": 241803732,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623083563
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Now I remember</p>",
        "id": 241803748,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623083569
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Most things didn't change by more than like 20% performance wise, but Rodas5 needed it.</p>",
        "id": 241803791,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623083588
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; I tried to compare solvers on my problem without autodiff jacobian calculations or giving exact jacobians, (I ended up getting CVODE_BDF outperforming the diffeq solvers including QNDF).<br>\nthe code is here &lt;<a href=\"https://github.com/spraharsh/basins.jl/blob/master/benchmarks.ipynb\">https://github.com/spraharsh/basins.jl/blob/master/benchmarks.ipynb</a>&gt;.<br>\nAre there any other parameters for diff-eq I should be aware of?: <a href=\"https://files.slack.com/files-pri/T68168MUP-F024MCDEYG1/download/no-autodiff.png\">https://files.slack.com/files-pri/T68168MUP-F024MCDEYG1/download/no-autodiff.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F024MCDEYG1/download/no-autodiff.png\"><img src=\"https://uploads.zulipusercontent.net/c27b89ebc90b5e3cf5b920d570a3b07bcc142430/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d463032344d4344455947312f646f776e6c6f61642f6e6f2d6175746f646966662e706e67\"></a></div>",
        "id": 241807586,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623085196
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; (I also technically have exact jacobians in C++, I wanted to make the repository self contained, but I can do tests including those). I'm trying to get end points of steepest descent trajectories, so the problem I want to solve is also just slightly different I guess</p>",
        "id": 241807945,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623085327
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Which version is this?</p>",
        "id": 241808840,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623085684
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; And did you try with autodiff off?</p>",
        "id": 241808871,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623085695
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; yes, (but I'm using autodiff to calculate my ode function)</p>",
        "id": 241809060,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623085785
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; julia 1.6.1</p>",
        "id": 241809087,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623085795
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; DifferentialEquations v6.17.0</p>",
        "id": 241809284,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623085862
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; which version of OrdinaryDiffEq?</p>",
        "id": 241811409,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623086814
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; This is a bit odd how it's all shifted by almost the same amount</p>",
        "id": 241811432,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623086827
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; is autodiff off the same shift?</p>",
        "id": 241811460,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623086839
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; OrdinaryDiffEq v5.56.0</p>",
        "id": 241811506,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623086857
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; very odd</p>",
        "id": 241811615,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623086901
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; what does autodiff being off the same shift mean?</p>",
        "id": 241811617,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623086904
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what about with setting BLAS.set_num_threads(1)?</p>",
        "id": 241811631,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623086910
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what's the plot look like for when it's all <code>QNDF(autodiff=false)</code> etc.?</p>",
        "id": 241811685,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623086935
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; I'm using</p>\n<div class=\"codehilite\" data-code-language=\"abstols\"><pre><span></span><code>reltols = 1.0 ./ 10.0 .^ (5:8);\nsetups = [\n          Dict(:alg=&gt;Rosenbrock23(autodiff=false)),\n          Dict(:alg=&gt;TRBDF2(autodiff=false)),\n          Dict(:alg=&gt;QNDF(autodiff=false)),\n          #Dict(:alg=&gt;rodas()),\n          Dict(:alg=&gt;CVODE_BDF()),\n          #Dict(:alg=&gt;Rodas4(autodiff=false)),\n          #Dict(:alg=&gt;Rodas5(autodiff=false)),\n          Dict(:alg=&gt;KenCarp4(autodiff=false)),\n          Dict(:alg=&gt;KenCarp47(autodiff=false)),\n          #Dict(:alg=&gt;RadauIIA5(autodiff=false)),\n          #Dict(:alg=&gt;lsoda()),\n          ]```\n</code></pre></div>",
        "id": 241811705,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623086952
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; I'll use BLAS.set_num_threads(1)</p>",
        "id": 241811753,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623086981
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; I ended up getting something similar, maybe it has to do with my problem (?). it's a relaxation problem, so in the end when the solution approaches the minimum, there's a lot of redundant steps maybe.: <a href=\"https://files.slack.com/files-pri/T68168MUP-F0249AW9NUT/download/no-autodiff_blas_1.png\">https://files.slack.com/files-pri/T68168MUP-F0249AW9NUT/download/no-autodiff_blas_1.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F0249AW9NUT/download/no-autodiff_blas_1.png\"><img src=\"https://uploads.zulipusercontent.net/790d7806db0d96cd3c2f014beec311274c5c1f33/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303234394157394e55542f646f776e6c6f61642f6e6f2d6175746f646966665f626c61735f312e706e67\"></a></div>",
        "id": 241817942,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623089595
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; I just want to double check once that everything matches once more by rerunning all my tests after using the same exact parameters as I used for this run, then I'll let you know if I see the same result</p>",
        "id": 241820948,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623090853
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; I just wanted to cross check whether the runs matched with the python/C++ functions I had elsewhere</p>",
        "id": 241831655,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623095765
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; are there any other tests I can write, to make the problem more clear?</p>",
        "id": 241831692,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623095789
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; can you share the benchmarking code/</p>",
        "id": 241831777,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623095834
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; <a href=\"https://github.com/spraharsh/basins.jl/blob/master/benchmarks.ipynb\">https://github.com/spraharsh/basins.jl/blob/master/benchmarks.ipynb</a> the ODE function is for a bunch of interacting particles but I can explain it more plainly in the notebook, will do that</p>",
        "id": 241832344,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623096087
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; the git repository itself is self contained</p>",
        "id": 241832369,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623096098
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; (except for julia libraries)</p>",
        "id": 241832386,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623096107
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It moved down a ton when the BLAS threads were turned down. What CPU do you have? @yingbo_ma @elrodc that seems indicative of a RecursiveFactorization/OpenBLAS tuning thing?</p>",
        "id": 241832779,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623096265
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; How many ODEs is this?</p>",
        "id": 241832781,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623096267
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Before drawing to conclusions. What’s <code>sol.destats</code> ?</p>",
        "id": 241832881,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623096318
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It got 5x faster by reducing BLAS threads so, that's something <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 241833106,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623096394
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; actually wait, by doubling them?</p>",
        "id": 241833171,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623096422
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh no, yes that's with changing it to 1.</p>",
        "id": 241833190,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623096433
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; this is 32 equations</p>",
        "id": 241833689,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623096653
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; shall I get sol.destats for a single run at the same tolerances ?</p>",
        "id": 241833754,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623096681
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; yes</p>",
        "id": 241833764,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623096688
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; Intel(R) Core(TM) i7-10750H CPU @ 2.60GHz (also I hadn't run the OMP.set_num_thread(2) for the runs in the notebook)</p>",
        "id": 241833976,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623096777
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; I don't see a speed difference between the first and second plots</p>",
        "id": 241834456,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623097009
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Rosenbrock23 move sa whole 5x</p>",
        "id": 241835352,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623097403
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; first vs last.</p>",
        "id": 241835366,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623097412
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Looks the same to me</p>",
        "id": 241835388,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623097427
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; one of them literally has it below 10^0.0, the other has it above?</p>",
        "id": 241835511,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623097486
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; How is that 5x?</p>",
        "id": 241835534,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623097496
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; 10^0.5 vs 10^0, I guess more like 3.5x, but still</p>",
        "id": 241835606,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623097533
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; I don’t see Rosenbrock hit 10^0.0 are we looking at the same plot?</p>",
        "id": 241835715,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623097569
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/spraharsh/basins.jl/blob/master/benchmarks.ipynb\">https://github.com/spraharsh/basins.jl/blob/master/benchmarks.ipynb</a></p>",
        "id": 241835759,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623097588
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I think one of us will just need to run it because the notebook is a bit messy and ran out of order.</p>",
        "id": 241835846,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623097627
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; <code>DiffEqBase.DEStats\nNumber of function 1 evaluations:                  146\nNumber of function 2 evaluations:                  0\nNumber of W matrix evaluations:                    16\nNumber of linear solves:                           0\nNumber of Jacobians created:                       3\nNumber of nonlinear solver iterations:             143\nNumber of nonlinear solver convergence failures:   0\nNumber of rootfind condition calls:                0\nNumber of accepted steps:                          115\nNumber of rejected steps:                          2</code></p>",
        "id": 241836129,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623097744
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; for CVODE</p>",
        "id": 241836151,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623097754
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Where’s <code>gradient_problem_function_all!</code> defined?</p>",
        "id": 241836186,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623097774
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; <code>DiffEqBase.DEStats\nNumber of function 1 evaluations:                  3532\nNumber of function 2 evaluations:                  0\nNumber of W matrix evaluations:                    98\nNumber of linear solves:                           198\nNumber of Jacobians created:                       98\nNumber of nonlinear solver iterations:             198\nNumber of nonlinear solver convergence failures:   0\nNumber of rootfind condition calls:                0\nNumber of accepted steps:                          97\nNumber of rejected steps:                          1</code></p>",
        "id": 241836214,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623097784
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; sorry was in a meeting</p>",
        "id": 241836243,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623097798
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh, it's OOP? <a href=\"https://github.com/spraharsh/basins.jl/blob/master/minimumassign/minimumassign.jl#L56-L64\">https://github.com/spraharsh/basins.jl/blob/master/minimumassign/minimumassign.jl#L56-L64</a></p>",
        "id": 241836356,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623097845
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; <a href=\"https://github.com/spraharsh/basins.jl/blob/56cde597581fc79320330f577c55a22dfb1d4ea3/minimumassign/minimumassign.jl#L47\">https://github.com/spraharsh/basins.jl/blob/56cde597581fc79320330f577c55a22dfb1d4ea3/minimumassign/minimumassign.jl#L47</a> sorry, I forgot to include it. I commited it now</p>",
        "id": 241836371,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623097854
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Change it to inplace and you should have a better time.</p>",
        "id": 241836561,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623097931
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Out-of-place (OOP) solvers are not really optimized, so write it in the in-place form.</p>",
        "id": 241837312,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623098277
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; I can change that, (this was a test piece, the original calculations we have in python/C++ does not reassign memory every evaluation)</p>",
        "id": 241837734,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623098497
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; however there seem to be more function evaluations though (not sure why), and that the Jacobian matrix calculations/linear solves are which end up being the rate limiting step for larger systems we want to study</p>",
        "id": 241838108,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623098684
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; because it's OOP</p>",
        "id": 241838129,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623098694
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Here’s the profile. Linear algebra time doesn’t even show up for QNDF: <a href=\"https://files.slack.com/files-pri/T68168MUP-F024ZH0TKFS/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F024ZH0TKFS/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F024ZH0TKFS/download/image.png\"><img src=\"https://uploads.zulipusercontent.net/8134ba1519c9f39ed53426e70689e2718a650677/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d463032345a4830544b46532f646f776e6c6f61642f696d6167652e706e67\"></a></div>",
        "id": 241838326,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623098801
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; I'll change it and rerun</p>",
        "id": 241838327,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623098804
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; this is nicer I think with in-place, though CVODE still does better. I can probably now check putting in a calculated function instead of using autodiff, and increasing system size changes things considerably. I'm aiming for (hopefully) ~1000 particles (2000 equations) which is where the linear solves take most of the time (at least for dense CVODE): <a href=\"https://files.slack.com/files-pri/T68168MUP-F024GA3FZJQ/download/no-autodiff_in_place.png\">https://files.slack.com/files-pri/T68168MUP-F024GA3FZJQ/download/no-autodiff_in_place.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F024GA3FZJQ/download/no-autodiff_in_place.png\"><img src=\"https://uploads.zulipusercontent.net/ca0ad01540a3b801a03d9b3b6d59f2abed73f4ee/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303234474133465a4a512f646f776e6c6f61642f6e6f2d6175746f646966665f696e5f706c6163652e706e67\"></a></div>",
        "id": 241852848,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623107383
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; are there any other things I need to keep in mind to make diffeq faster ? (Thanks!)</p>",
        "id": 241853228,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623107672
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; boost the BLAS threads again?</p>",
        "id": 241853445,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623107868
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; I didn't see much of a change: <a href=\"https://files.slack.com/files-pri/T68168MUP-F0243E3HTJA/download/no-autodiff_blas_4_in_place.png\">https://files.slack.com/files-pri/T68168MUP-F0243E3HTJA/download/no-autodiff_blas_4_in_place.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F0243E3HTJA/download/no-autodiff_blas_4_in_place.png\"><img src=\"https://uploads.zulipusercontent.net/afdbe7bd61940157cbc3146a1427bdf54315f428/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d4630323433453348544a412f646f776e6c6f61642f6e6f2d6175746f646966665f626c61735f345f696e5f706c6163652e706e67\"></a></div>",
        "id": 241855499,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623109601
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; <code>sol.destats</code> gives me</p>",
        "id": 241855515,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623109624
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; <code>DiffEqBase.DEStats\nNumber of function 1 evaluations:                  146\nNumber of function 2 evaluations:                  0\nNumber of W matrix evaluations:                    16\nNumber of linear solves:                           0\nNumber of Jacobians created:                       3\nNumber of nonlinear solver iterations:             143\nNumber of nonlinear solver convergence failures:   0\nNumber of rootfind condition calls:                0\nNumber of accepted steps:                          115\nNumber of rejected steps:                          2</code><br>\nfor CVODE at 10^-5 abstol and reltol</p>",
        "id": 241855538,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623109662
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; and for QNDF</p>\n<div class=\"codehilite\" data-code-language=\"diffeqbase.destats\"><pre><span></span><code>Number of function 1 evaluations:                  477\nNumber of function 2 evaluations:                  0\nNumber of W matrix evaluations:                    20\nNumber of linear solves:                           278\nNumber of Jacobians created:                       3\nNumber of nonlinear solver iterations:             258\nNumber of nonlinear solver convergence failures:   0\nNumber of rootfind condition calls:                0\nNumber of accepted steps:                          97\nNumber of rejected steps:                          1```\n</code></pre></div>",
        "id": 241855607,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623109699
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and what about Rodas5?</p>",
        "id": 241855930,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623109975
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; <code>DiffEqBase.DEStats\nNumber of function 1 evaluations:                  1763\nNumber of function 2 evaluations:                  0\nNumber of W matrix evaluations:                    40\nNumber of linear solves:                           320\nNumber of Jacobians created:                       40\nNumber of nonlinear solver iterations:             0\nNumber of nonlinear solver convergence failures:   0\nNumber of rootfind condition calls:                0\nNumber of accepted steps:                          39\nNumber of rejected steps:                          1</code></p>",
        "id": 241856343,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623110372
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; @chen.tianc I finally had a chance to try out your code today, but I'm getting an error that the number of states is different than the length of the initial condition vector.</p>",
        "id": 241949415,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623170615
    },
    {
        "content": "<p>[slack] &lt;Clement Lee&gt; Hi, can anyone explain how the integrator/cache work for in-place problems? I’m reading <a href=\"https://devdocs.sciml.ai/dev/contributing/adding_algorithms/#Self-Contained-Example-1\">https://devdocs.sciml.ai/dev/contributing/adding_algorithms/#Self-Contained-Example-1</a> (specifically, the function <code>@muladd function perform_step!(integrator,cache::RK_ALGCache,repeat_step=false)</code>), and I’m not sure how the function evaluation ever makes it to the integrator</p>\n<p>(for context, I’m trying to learn/write a new solver)</p>",
        "id": 241974416,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623181043
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it mutates <code>u</code></p>",
        "id": 241977392,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623182315
    },
    {
        "content": "<p>[slack] &lt;Clement Lee&gt; interesting, so the modification of <code>u</code> as a reference inside the function is enough to modify <code>integrator.u</code>?</p>",
        "id": 241979006,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623183041
    },
    {
        "content": "<p>[slack] &lt;Clement Lee&gt; maybe this is just because I’m new to julia but I assumed that just reassigns a new value to the local reference <code>u</code></p>",
        "id": 241979046,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623183059
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; @isaacsas oh, sorry for that. But the major problem is I accidentally made some rate to be negative. when I fix this, the code seems works normally. thanks</p>",
        "id": 241980672,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623183793
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Happy to hear you got it fixed!</p>",
        "id": 241980749,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623183838
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; in each of the perform steps there's <code>u = integrator.u</code> at the top (via <code>@unpack</code>)</p>",
        "id": 241983908,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623185324
    },
    {
        "content": "<p>[slack] &lt;Clement Lee&gt; ah, I think I may understand — so <code>u</code>  is then modified internally (instead of being replaced by a new array) because of the dot notation?</p>",
        "id": 241984758,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623185701
    },
    {
        "content": "<p>[slack] &lt;Clement Lee&gt; I’m also trying to get the link between setting <code>u</code> and other algorithms which set <code>fsallast</code>/<code>fsalfirst</code></p>",
        "id": 241984845,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623185733
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 241985170,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623185864
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; FSAL is about the derivative values, not the solution values</p>",
        "id": 241985437,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623185991
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; all of them set <code>u</code></p>",
        "id": 241985440,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623185995
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the FSAL is \"first same as last\", a property of some ODE solvers that you don't need to recompute the first <code>f</code></p>",
        "id": 241985515,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623186014
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but there are some special ways where it comes into play in even non-traditionally FSAL methods, and this is described in <a href=\"https://www.youtube.com/watch?v=dYbabdf90bI\">https://www.youtube.com/watch?v=dYbabdf90bI</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"dYbabdf90bI\" href=\"https://www.youtube.com/watch?v=dYbabdf90bI\"><img src=\"https://uploads.zulipusercontent.net/b08e6a509a04f00473a32eace0cca2368dba5140/68747470733a2f2f692e7974696d672e636f6d2f76692f64596261626466393062492f64656661756c742e6a7067\"></a></div>",
        "id": 241985556,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623186032
    },
    {
        "content": "<p>[slack] &lt;Clement Lee&gt; gotcha, this is starting to make a lot more sense <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 241985996,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623186240
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; @chrisrackauckas is the any reason why when using Rodas5(), <code>dx</code> changes type during the solution process?</p>\n<p>I added a @show at the beginning of the <code>f</code> function and it tries to change the type of the <code>dx</code> vector. I don’t event know how to debug this issue since it isn’t consistently happening for all simulations only in some cases. I am solving a stiff Mass Matrix model.</p>\n<div class=\"codehilite\" data-code-language=\"error\"><pre><span></span><code>Closest candidates are:\n  (::Type{T})(::Real, ::RoundingMode) where T&lt;:AbstractFloat at rounding.jl:200\n  (::Type{T})(::T) where T&lt;:Number at boot.jl:760\n  (::Type{T})(::AbstractChar) where T&lt;:Union{AbstractChar, Number} at char.jl:50```\n</code></pre></div>",
        "id": 242011102,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623205236
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; It's using <code>ForwardDiff</code> to generate the jacobian. You can use the finite-diff fallback by setting <code>autodiff=false</code> in <code>Rodas5</code> . I'm not sure why it's inconsistent, but perhaps the <code>Rodas5</code> solver does something clever with deciding when it needs to compute the Jacobian.</p>",
        "id": 242032198,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623227637
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; Yeah, it works with autodiff = false but I haven’t been able to figure out what to do to make it work well and why it doesn’t happen all the time.</p>",
        "id": 242072999,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623248430
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://diffeq.sciml.ai/stable/basics/faq/#I-get-Dual-number-errors-when-I-solve-my-ODE-with-Rosenbrock-or-SDIRK-methods\">https://diffeq.sciml.ai/stable/basics/faq/#I-get-Dual-number-errors-when-I-solve-my-ODE-with-Rosenbrock-or-SDIRK-methods</a></p>",
        "id": 242085949,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623253255
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; Thanks I found this earlier this morning, I will try to see what the best approach is</p>",
        "id": 242086072,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623253303
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; I realized we actually get the Jacobian twice</p>",
        "id": 242086163,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623253324
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; no, it's the tgrad.</p>",
        "id": 242086193,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623253333
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; Once for NLSolve and then in DiffEq</p>",
        "id": 242086196,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623253334
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; So we should be able to do something better</p>",
        "id": 242086238,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623253353
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; tgrad?</p>",
        "id": 242086266,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623253366
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; there's a time gradient that Rosenbrock methods need that others don't.</p>",
        "id": 242086356,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623253408
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that's what's doing it.</p>",
        "id": 242086367,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623253415
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; Ok, any pointers on how to fix it? Is it in OrdinaryDiffEq? Or our side</p>",
        "id": 242086482,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623253456
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; I can try to fix it in OrdinaryDiffEq also</p>",
        "id": 242086514,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623253472
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what do you mean fix?</p>",
        "id": 242091988,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623255551
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; The better question is, why does the type being <code>Dual</code> break your code? Can you make it more generic?</p>",
        "id": 242092527,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623255764
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; probably caches for mutation</p>",
        "id": 242092559,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623255778
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and that answers how</p>",
        "id": 242092580,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623255785
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the FAQ</p>",
        "id": 242092587,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623255789
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and the tgrad lack of definition answers why</p>",
        "id": 242092635,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623255814
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; If your equations are autonomous, just define a zero tgrad and you're good</p>",
        "id": 242092664,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623255828
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; @yingbo_ma or @Jonnie you guys might know the answer to this. I did an <code>EnsembleSummary()</code> for my model, and I used a ComponentArray as the input <code>u0</code>. So in the EnsembleSummary I get out a ComponentArray for each time step. Is there a good way to convert the EnsembleSummary to a regular array? For example, I have the<br>\n<code>d = EnsembleSummary(sim, ....)</code>. This will give me the results like <code>d.u.u</code> is a ComponentArray(a = 1.0, b = 4.0, ...). I want to convert that ComponentArray back to a regular array. Is there a good way to do that? I tried <code>collect(d.u.u)</code> and <code>Array(d.u.u)</code>, but neither worked.</p>",
        "id": 242093283,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623256075
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; I need to do it because when I take the data from the odesolver and try to use it in <code>Turing</code> to estimate the parameter, I have to set the distribution for each timestep, like <code>MvNormal(d.u.u[i], sigma)</code>. So this does not work as a component array.</p>",
        "id": 242093680,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623256219
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; Do you want the output as a matrix or vector of vectors? You can do <code>Array(d.u)</code> if you want a matrix and <code>collect.(d.u.u)</code> if you want a vector of vectors</p>",
        "id": 242095015,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623256815
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; Oh, never mind I read your second part. It looks like you want a <code>collect(d.u.u)</code></p>",
        "id": 242095154,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623256884
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; @Brian Groenke the vectors are already Vector{Real}, I am not sure why dx changes back and forth to Vector Float. According to the docs that @chrisrackauckas probably is because the x0 is a Vector{Float64}</p>",
        "id": 242095188,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623256902
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; You don't want to use Vector{Real}, ever</p>",
        "id": 242095307,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623256953
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that's a huge performance hit.</p>",
        "id": 242095317,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623256958
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; you are right about it being something odd with the model code since I just checked that enabling forwarddiff in NLsolve also causes a similar error</p>",
        "id": 242095322,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623256960
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; @Jonnie Oh this is helpful. Ohhhh right, so <code>collect.(d.u.u)</code>. I was not broadcasting. Darn. I tried just <code>collect(d.u.u)</code> and it did not work right.</p>",
        "id": 242095674,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623257109
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; @chrisrackauckas I am aware, I was just trying to figure out which Vector{Float64} where causing problems</p>",
        "id": 242095681,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623257110
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; haha, thanks for your help there. Now I can try that and see what new cryptic errors I can generate <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>.</p>",
        "id": 242095714,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623257130
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; I use some auxiliary vectors to make calculations in place and I am struggling with giving them the correct type specification</p>",
        "id": 242095837,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623257167
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; Since I have mostly used Sundials they were Floats and it worked</p>",
        "id": 242095890,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623257188
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; now with DiffEq solver my original design is breaking</p>",
        "id": 242095917,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623257203
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; But I’m actually kinda curious why a <code>ComponentArray</code> wouldn’t work in <code>MVNormal</code></p>",
        "id": 242095959,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623257219
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; It is a good question. It might have just been the indexing or something. I was probably doing something like <code>MvNormal(d.u.u[i], sigma)</code> when it probably should be like <code>MvNormal(d.u.u[:,i], sigma)</code> or something like that.</p>",
        "id": 242096191,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623257319
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; I can give it a try again. It is just a pain to debug in Turing because the errors are really hard to decipher and I can't seem to use breakpoints in the model either.</p>",
        "id": 242096273,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623257364
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; That is not a dig on the Turing folks, they are very helpful.</p>",
        "id": 242096437,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623257422
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; does time show up in your equations?</p>",
        "id": 242096798,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623257561
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; actually, how many equations do you have?</p>",
        "id": 242096823,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623257569
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; no, time doesn’t show up</p>",
        "id": 242097117,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623257687
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; at this point only 12 equations I am working with a small test system</p>",
        "id": 242097167,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623257712
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; then define the analytical solution <code>tgrad = (dT,u,p,t) = dT .= false</code></p>",
        "id": 242097232,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623257745
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; this just doing the development to support implicit and mass matrix specifications of the power systems problems so we can easily test solvers with larger systems</p>",
        "id": 242097315,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623257768
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; Ah, gotcha.</p>\n<p>Also, I tried a MvNormal with a ComponentArray and it looks like it works.</p>",
        "id": 242097346,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623257787
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Rosenbrock methods require this derivative that other solvers don't, and so if you've defined the Jacobian already and are confused, this is the the derivative function that's doing it. But it's zero if df/dt = 0, so just set it.</p>",
        "id": 242097426,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623257825
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; I understand now why <code>tgrad</code> is failing here… I am an idiot. The models that are failing have saturations implemented like this</p>\n<div class=\"codehilite\" data-code-language=\"x_g1_sat\"><pre><span></span><code>dx[2] = (1.0 / T3) * (x_g1_sat * (1 - T2 / T3) - x_g2) #dx_g2/dt```\n</code></pre></div>",
        "id": 242097656,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623257923
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that looks fine?</p>",
        "id": 242097803,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623257999
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; but it is thinking that the grad is dependent on t when infering <code>tgrad</code></p>",
        "id": 242097998,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623258068
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; I think that the saturation implementation is screwing up the Jacobian from autodiff</p>",
        "id": 242098370,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623258232
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Oh that is excellent. It probably was just the indexing then. Thanks for your help on that. That was definitely above and beyond <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>.</p>",
        "id": 242098725,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623258391
    },
    {
        "content": "<p>[slack] &lt;adammaclean&gt; I've a Catalyst question - the last example in the readme (SDE birth-death) defines an <code>SDEProblem</code> but doesn't give any definition of the noise model - what's happening here? Is there some white noise default?</p>",
        "id": 242104227,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623260872
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; Is there anyway to determine the <code>eltype</code> required for the x0 to avoid these type conversions?</p>",
        "id": 242106726,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623262030
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; If I have a function foo() that return my initial condition as a vector of floats and I want to use it to initialize my diffeq function. How can I determine the Vector type I need to return by foo?</p>",
        "id": 242107189,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623262235
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's the chemical langevin equation</p>",
        "id": 242111079,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623264071
    },
    {
        "content": "<p>[slack] &lt;adammaclean&gt; oh right ok. So how do you compose an <code>SDEProblem</code> from a reaction network and input the noise model? Any example in docs? I</p>",
        "id": 242113407,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623265137
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 242114531,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623265635
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; chemical langevin has a well-defined noise model</p>",
        "id": 242114617,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623265678
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I don't think we have a way to mix it with arbitrary noise equations right now? But that would be a good feature to add.</p>",
        "id": 242114674,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623265692
    },
    {
        "content": "<p>[slack] &lt;adammaclean&gt; yes I know, ahh so no feature yet? I just tried this in the hope it would work <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 242114750,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623265733
    },
    {
        "content": "<p>[slack] &lt;adammaclean&gt; ```using Catalyst </p>\n<p>rn = @reaction_network begin<br>\n    (k₁,k₂), E + S &lt;--&gt; C<br>\n    k₃, C --&gt; P + S<br>\n    end k₁ k₂ k₃ </p>\n<p>function g_rn(du,u,p,t)<br>\n    du[1] = 0.01<br>\n    du[2] = 0.01<br>\n    du[3] = 0.01<br>\n    du[4] = 0.01<br>\nend </p>\n<p>p = (0.2, 0.15, 0.5)<br>\nu₀ = [20., 5., 0., 0.]<br>\ntspan = (0., 50.)</p>\n<p>sp = SDEProblem(rn, g_rn, u₀, tspan, p)```</p>",
        "id": 242114848,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623265789
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; open an issue</p>",
        "id": 242116071,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623266315
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @torkel.loman had a hacky thing like this at one point.</p>",
        "id": 242116089,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623266322
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It's really not hard to add too.</p>",
        "id": 242116095,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623266327
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/SciML/ModelingToolkit.jl/blob/master/src/systems/reaction/reactionsystem.jl#L440-L484\">https://github.com/SciML/ModelingToolkit.jl/blob/master/src/systems/reaction/reactionsystem.jl#L440-L484</a></p>",
        "id": 242116267,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623266419
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; just an option for passing in your own <code>noiseeqs</code> is probably a better idea than having <code>noise_scaling</code> at all</p>",
        "id": 242116312,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623266445
    },
    {
        "content": "<p>[slack] &lt;adammaclean&gt; yes i'd prefer the general form best</p>",
        "id": 242116389,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623266485
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; @chrisrackauckas seems that a lot of the tooling to identify the Jacobian eltypes before the execution of the problems are used here <a href=\"https://github.com/JuliaDiff/SparseDiffTools.jl\">https://github.com/JuliaDiff/SparseDiffTools.jl</a>. I supposed that the code</p>\n<div class=\"codehilite\" data-code-language=\"p\"><pre><span></span><code>_t = Dual{typeof(ForwardDiff.Tag(f,eltype(vec(x))))}.(vec(x),first(p))\nt = ArrayInterface.restructure(x,_t)```\n</code></pre></div>",
        "id": 242135956,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623275581
    },
    {
        "content": "<p>[slack] &lt;Sean&gt; I'm trying to better understand the <code>RegularJump</code> jump type for jump problems (<a href=\"https://diffeq.sciml.ai/stable/types/jump_types/\">https://diffeq.sciml.ai/stable/types/jump_types/</a>).  Can someone help explain the specifics of what is going on in the sampling algorithm as mentioned in these two sentences?<br>\n<code>These kinds of jumps only change values of the dependent variable (u) and thus can be treated in an inexact manner. Other jumps, such as those which change the size of u, require exact handling which is also known as time-adaptive jumping. </code><br>\nDoes this mean that <code>RegularJump</code> is using some kind of thinning/rejection algorithm to sample jump times? Does time-adaptive jumping mean that for those jumps the next jump times are either drawn exactly from the rng or solved for by advancing the cumulative intensity functions?</p>",
        "id": 242136104,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623275658
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; ?</p>",
        "id": 242136598,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623275940
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; think tau leaping</p>",
        "id": 242136639,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623275977
    },
    {
        "content": "<p>[slack] &lt;Sean&gt; so <code>RegularJump</code> events always occur at a lattice of time points hit by some tau leaping algorithm?</p>",
        "id": 242136828,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623276062
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; I realized that my issue comes from auxiliary arrays I use to make in place calculations</p>",
        "id": 242136853,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623276077
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; those are specified as Array{Float64}.</p>",
        "id": 242136882,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623276097
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; Also, I realized we are calculating the Jacobian multiple times for the different steps. One for the NLsolve initial condition finding and another one for the local stability analysis and a third one in the DiffEq solve</p>",
        "id": 242136992,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623276152
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; so If I can generate the Jacobian once and then just re-use it it solves many of the problems. But the auxiliary arrays need to be properly typed</p>",
        "id": 242137055,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623276186
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; they need to be something compatible with<br>\n<code>typeof(voltage_r[1]) = ForwardDiff.Dual{ForwardDiff.Tag{var\"#19#20\", Float64}, Float64, 10}</code></p>",
        "id": 242137099,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623276217
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes, that's all in the FAQ I linked</p>",
        "id": 242137135,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623276240
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; yes and that works</p>",
        "id": 242137183,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623276251
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; but more generally, it seems I can use <a href=\"https://github.com/search?q=SparseDiffTools.jl&amp;type=Repositories\">SparseDiffTools.jl</a> once</p>",
        "id": 242137209,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623276270
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; and then pass the sparse jacobian all over</p>",
        "id": 242137214,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623276277
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; in the different stages</p>",
        "id": 242137224,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623276287
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; and re-use it</p>",
        "id": 242137227,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623276292
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes, in Levy process literature it's the regular stepping approach to jump diffusions, hence the name</p>",
        "id": 242137279,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623276329
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; so this lets you accumulate the jumps into a Poisson process and add it as a callback to an ODE solve</p>",
        "id": 242137302,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623276344
    },
    {
        "content": "<p>[slack] &lt;Sean&gt; oh! okay thanks. makes perfect sense now.</p>",
        "id": 242137316,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623276357
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; @<em>Adam MacLean</em> Having something like that would be neat, I just don't think anyone has really needed it, so it hasn't been done. In the meantime, would something like this:<br>\n<code>sp = SDEProblem(ODEFunction(convert(ODESystem,rn)), g_rn, u₀, tspan, p)</code><br>\nmaybe work?</p>",
        "id": 242140630,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623278826
    },
    {
        "content": "<p>[slack] &lt;mschauer&gt; How does it work that we “dispatch” on the number of arguments of an anonymous function?</p>",
        "id": 242141057,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623279196
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; secrets <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 242141950,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623279852
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/SciML/SciMLBase.jl/blob/master/src/utils.jl#L13\">https://github.com/SciML/SciMLBase.jl/blob/master/src/utils.jl#L13</a></p>",
        "id": 242141984,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623279882
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/SciML/SciMLBase.jl/blob/master/src/utils.jl#L41-L43\">https://github.com/SciML/SciMLBase.jl/blob/master/src/utils.jl#L41-L43</a></p>",
        "id": 242141996,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623279890
    },
    {
        "content": "<p>[slack] &lt;adammaclean&gt; @torkel.loman that's exactly what I was after! it works!  <span aria-label=\"rocket\" class=\"emoji emoji-1f680\" role=\"img\" title=\"rocket\">:rocket:</span></p>",
        "id": 242143335,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623281130
    },
    {
        "content": "<p>[slack] &lt;adammaclean&gt; makes sense that you need to pass an ode system f to play nice g, just didn't know how to get that</p>",
        "id": 242143449,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623281221
    },
    {
        "content": "<p>[slack] &lt;SebastianM-C&gt; &lt;@U69BL50BF&gt; Hi, I noticed something strange in regards to the N-body benchmarks that I've been trying to fix. It looks like the Energy error for the high order symplectic solvers (KahanLi8 and SofSpa10) is much higher than expected. The benchmarks have been running for almost 3 days now on my workstation and I hope I'll have the html weaved file soon. In the meantime, the first 3 plots have their svgs generated and in the screenshot above I've shown the difference between the new (left) and old (right): <a href=\"https://files.slack.com/files-pri/T68168MUP-F025BCSDYKS/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F025BCSDYKS/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F025BCSDYKS/download/image.png\"><img src=\"https://uploads.zulipusercontent.net/8c5e3aa62e975b194e87a19e7042f9f0fffcaab9/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d4630323542435344594b532f646f776e6c6f61642f696d6167652e706e67\"></a></div>",
        "id": 242190709,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623324132
    },
    {
        "content": "<p>[slack] &lt;SebastianM-C&gt; I don't know why the solver name is always prefixed with OrdinaryDiffEq, but maybe I can find a way to manually edit the svgs to recover the full image</p>",
        "id": 242190853,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623324221
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that is peculiar.</p>",
        "id": 242195207,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623326807
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's because of how it's auto-generated.</p>",
        "id": 242195228,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623326818
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you can directly specify the labels to fix it.</p>",
        "id": 242195250,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623326829
    },
    {
        "content": "<p>[slack] &lt;SebastianM-C&gt; Yeah, I thought that if the module is imported, than it will print without the prefix, but it would be better so directly specify</p>",
        "id": 242195599,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623327031
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; So it seems that, despite support being added recently to DiffEqOperators for non-linear diffusion and multivariate MOL, the following system still fails with <code>MOLDiscretizationStrategy</code> :</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code>    <span class=\"nd\">@variables</span> <span class=\"n\">T</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">)</span> <span class=\"n\">k</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">)</span>\n    <span class=\"n\">Dz</span> <span class=\"o\">=</span> <span class=\"n\">Differential</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span>\n    <span class=\"n\">Dt</span> <span class=\"o\">=</span> <span class=\"n\">Differential</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"n\">eqs</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">Dt</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span> <span class=\"o\">~</span> <span class=\"n\">Dz</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">Dz</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"n\">z</span><span class=\"p\">)))</span>\n    <span class=\"p\">]</span>\n    <span class=\"c\"># Space and time domains</span>\n    <span class=\"n\">domains</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">t</span> <span class=\"o\">∈</span> <span class=\"n\">IntervalDomain</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"mi\">24</span><span class=\"o\">*</span><span class=\"mf\">3600.0</span><span class=\"p\">),</span>\n               <span class=\"n\">z</span> <span class=\"o\">∈</span> <span class=\"n\">IntervalDomain</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"mf\">1000.0</span><span class=\"p\">)]</span>\n    <span class=\"n\">bcs</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">T</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"o\">~</span> <span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"nb\">π</span><span class=\"o\">*</span><span class=\"n\">z</span><span class=\"p\">),</span>\n        <span class=\"n\">T</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"mf\">0.0</span><span class=\"p\">)</span> <span class=\"o\">~</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span>\n        <span class=\"n\">T</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"mf\">1000.0</span><span class=\"p\">)</span> <span class=\"o\">~</span> <span class=\"mf\">10.2</span><span class=\"p\">,</span>\n        <span class=\"n\">k</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"o\">~</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"mf\">0.5</span><span class=\"o\">*</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">pdesys</span> <span class=\"o\">=</span> <span class=\"n\">PDESystem</span><span class=\"p\">(</span><span class=\"n\">eqs</span><span class=\"p\">,</span> <span class=\"n\">bcs</span><span class=\"p\">,</span> <span class=\"n\">domains</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"n\">z</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"n\">k</span><span class=\"p\">])</span>\n    <span class=\"n\">discretization</span> <span class=\"o\">=</span> <span class=\"n\">MOLFiniteDifference</span><span class=\"p\">([</span><span class=\"n\">z</span><span class=\"o\">=&gt;</span><span class=\"n\">dz</span><span class=\"p\">],</span><span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"n\">discretize</span><span class=\"p\">(</span><span class=\"n\">pdesys</span><span class=\"p\">,</span> <span class=\"n\">discretization</span><span class=\"p\">)</span><span class=\"sb\">```</span>\n<span class=\"sb\">fails with error:</span>\n<span class=\"sb\">```</span><span class=\"sa\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">MethodError</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">method</span> <span class=\"n\">matching</span> <span class=\"n\">operation</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Sym</span><span class=\"p\">{</span><span class=\"kt\">SymbolicUtils</span><span class=\"o\">.</span><span class=\"kt\">FnType</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">,</span> <span class=\"kt\">Real</span><span class=\"p\">},</span> <span class=\"kt\">Nothing</span><span class=\"p\">})</span><span class=\"sb\">```</span>\n<span class=\"sb\">Am I just doing it wrong?</span>\n</code></pre></div>",
        "id": 242205293,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623331694
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; hmm, open an issue.</p>",
        "id": 242208666,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623332894
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Found the problem: <code>PDESystem(eqs, bcs, domains, [t,z], [T,k])</code> needs to be <code>PDESystem(eqs, bcs, domains, [t,z], [T(t,z),k(t,z)])</code></p>",
        "id": 242212216,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623334169
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; More informative errors would be nice <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 242212267,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623334184
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah...</p>",
        "id": 242212871,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623334404
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Open an issue for that. It should be easy to catch.</p>",
        "id": 242212888,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623334413
    },
    {
        "content": "<p>[slack] &lt;Simen Husøy&gt; I am simulating a PDE with methods of lines method and want to gain some speed. What is the first and most easy trick to make the ODE solver use more of the cores? Are there any initial settings for making the ODE solver etc. use more of the cores?</p>",
        "id": 242256453,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623352629
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; stimpack.</p>",
        "id": 242258413,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623353486
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Share some code, what have you tried? What solvers have you tested?</p>",
        "id": 242258458,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623353508
    },
    {
        "content": "<p>[slack] &lt;Simen Husøy&gt; So, currently I'm using the <code>ORK256()</code> solver since it says it's specifically designed for wave equations. I am using some own custom DerivativeOperators, but they are almost the same as the <code>CenteredDifference</code> ones with slightly different stencils. Seems like it uses most time in the pullback functions I have written Zygote, so what I wondered is whether there is a flag or something that limits how many cores it uses now, or if the next step is to find performance heavy parts of the code and start to parelalize.</p>",
        "id": 242259783,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623354154
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Are you sure <code>ORK256</code> is optimal for that discretization? Did you try a few others and see?</p>",
        "id": 242259842,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623354195
    },
    {
        "content": "<p>[slack] &lt;Simen Husøy&gt; Have tried some, <code>ORK256</code> is the one that runned fastest out of this list: <code>Tsit5(), TRBDF2(), Rosenbrock23(), AutoTsit5(Rosenbrock23()), Midpoint(), Vern7(), KenCarp4(), ORK256(), ParsaniKetchesonDeconinck3S32()</code></p>",
        "id": 242264281,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623356136
    },
    {
        "content": "<p>[slack] &lt;Simen Husøy&gt; Can try some more</p>",
        "id": 242264288,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623356142
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; alright</p>",
        "id": 242265197,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623356579
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that's holding error constant?</p>",
        "id": 242265214,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623356585
    },
    {
        "content": "<p>[slack] &lt;Simen Husøy&gt; Have tried some different combinations with the different solvers, but yes for the most part. Got it running one simulation under 1sec, the closest of the others are around 10sec</p>",
        "id": 242266615,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623357162
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; Hi, @chrisrackauckas I made a MWE of the patter I am trying to get to work and having troubles with the duals numbers. Please keep in mind that this is a simplified code for a non-sensical model but exemplifies the case.</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>using DiffEqBase: get_tmp, dualcache\n\nstruct inputs\n    mem::Vector{Float64}\nend\n\ntest_inputs = inputs(zeros(2))\n\nfunction system(du, u, p, t)\n    du[1] = component1(u, p)\n    du[2] = component2(u, p)\n    du[3] = component3(u, p)\n    nothing\nend\n\nfunction component1(u, p)\n    p.mem[1] = u[1]\n    return -0.1*u[1]\nend\n\nfunction component2(u, p)\n    p.mem[2] = -0.8*u[2]\n    return -0.4*u[2]\nend\n\nfunction component3(u, p)\n    return sum(p.mem .* [-0.1, 0.2]) + 0.02*u[3]\nend\n\nprob_mm = ODEProblem(system, [0.5, 0.5, 0.5], (0.0, 1e5), test_inputs)\nsol_ode = solve(prob_mm, Rodas5(), reltol = 1e-8, abstol = 1e-8)```\nFollowing the the FAQ link, I tried to do this:\n\n```function system(du, u, p, t)\n    p_ = DiffEqBase.get_tmp(p)[1]\n    du[1] = component1(u, p_)\n    du[2] = component2(u, p_)\n    du[3] = component3(u, p_)\n    nothing\nend\n\nfunction component1(u, p)\n    p.mem[1] = u[1]\n    return -0.1*u[1]\nend\n\nfunction component2(u, p)\n    p.mem[2] = -0.8*u[2]\n    return -0.4*u[2]\nend\n\nfunction component3(u, p)\n    return sum(p.mem .* [-0.1, 0.2]) + 0.02*u[3]\nend\nchunk_size = 5\nprob_mm = ODEProblem(system, [0.5, 0.5, 0.5], (0.0, 1e5), DiffEqBase.dualcache([test_inputs], Val{chunk_size}))\nsol_ode = solve(prob_mm, Rodas5(chunk_size=chunk_size), reltol = 1e-8, abstol = 1e-8)```\nBut it requires being able to get a `zero(inputs)`\n</code></pre></div>",
        "id": 242289429,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623372769
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; Also, keep in mind that the inputs object in reality has several vectors to perform in place calculations which I didn’t exemplified directly here but the effect is the same. So, I understand why this is happening. I am trying to understand how should I design my <code>inputs</code> object to prevent the dual number issue.</p>",
        "id": 242289532,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623372885
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; I get</p>\n<div class=\"codehilite\" data-code-language=\"error\"><pre><span></span><code>Closest candidates are:\n  (::Type{T})(::Real, ::RoundingMode) where T&lt;:AbstractFloat at rounding.jl:200\n  (::Type{T})(::T) where T&lt;:Number at boot.jl:760\n  (::Type{T})(::AbstractChar) where T&lt;:Union{AbstractChar, Number} at char.jl:50\n  ...```\n</code></pre></div>",
        "id": 242289972,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623373357
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; and <code>autodiff = false</code> does work</p>",
        "id": 242290006,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623373437
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>DiffEqBase.get_tmp(p, u)</code> is what the FAQ says</p>",
        "id": 242291126,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623374730
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; That’s the second example,</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    p_ = DiffEqBase.get_tmp(p)[1]\n    du[1] = component1(u, p_)\n    du[2] = component2(u, p_)\n    du[3] = component3(u, p_)\n    nothing\nend\nfunction component1(u, p)\n    p.mem[1] = u[1]\n    return -0.1*u[1]\nend\nfunction component2(u, p)\n    p.mem[2] = -0.8*u[2]\n    return -0.4*u[2]\nend\nfunction component3(u, p)\n    return sum(p.mem .* [-0.1, 0.2]) + 0.02*u[3]\nend\nchunk_size = 5\nprob_mm = ODEProblem(system, [0.5, 0.5, 0.5], (0.0, 1e5), DiffEqBase.dualcache([test_inputs], Val{chunk_size}))\nsol_ode = solve(prob_mm, Rodas5(chunk_size=chunk_size), reltol = 1e-8, abstol = 1e-8)```\nwhere I get this error\n```ERROR: LoadError: MethodError: no method matching zero(::Type{inputs})\nClosest candidates are:\n  zero(::Union{Type{P}, P}) where P&lt;:Dates.Period at /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.6/Dates/src/periods.jl:53\n  zero(::AbstractAlgebra.MatrixElem{T} where T) at /Users/jdlara/.julia/packages/AbstractAlgebra/2tNNk/src/generic/Matrix.jl:228\n  zero(::AbstractAlgebra.MatrixElem{T} where T, ::AbstractAlgebra.Ring) at /Users/jdlara/.julia/packages/AbstractAlgebra/2tNNk/src/generic/Matrix.jl:228\n  ...\nStacktrace:\n [1] zero\n   @ ~/.julia/packages/ForwardDiff/QOqCN/src/dual.jl:303 [inlined]\n [2] zeros(#unused#::Type{ForwardDiff.Dual{nothing, inputs, 5}}, dims::Tuple{Int64})\n   @ Base ./array.jl:504\n [3] zeros(#unused#::Type{ForwardDiff.Dual{nothing, inputs, 5}}, dims::Int64)\n   @ Base ./array.jl:499\n [4] DiffEqBase.DiffCache(u::Vector{inputs}, siz::Tuple{Int64}, #unused#::Type{Val{5}})\n   @ DiffEqBase ~/.julia/packages/DiffEqBase/lULzQ/src/init.jl:78\n [5] dualcache(u::Vector{inputs}, N::Type)\n   @ DiffEqBase ~/.julia/packages/DiffEqBase/lULzQ/src/init.jl:82\n [6] top-level scope\n   @ ~/.julia/dev/PowerSimulationsDynamics/_dev.jl:223\nin expression starting at /Users/jdlara/.julia/dev/PowerSimulationsDynamics/_dev.jl:223```\n</code></pre></div>",
        "id": 242293691,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623377676
    },
    {
        "content": "<p>[slack] &lt;Sean&gt; hi all, I have a question about the use of DiscreteCallback with pure jump problems, in the tests (<a href=\"https://github.com/SciML/DiffEqJump.jl/blob/29b3f0818dd74126aa93275cc9e4b0657dbf2bcd/test/sir_model.jl#L22\">https://github.com/SciML/DiffEqJump.jl/blob/29b3f0818dd74126aa93275cc9e4b0657dbf2bcd/test/sir_model.jl#L22</a>), after the state is modified, the function <code>reset_aggregated_jumps!(integrator)</code> is called. I can't find this one in the documentation; is it required to call if a callback adjusts state of a jump problem? what is it doing? Thanks!</p>",
        "id": 242409482,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623449129
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; If any state that some jump rate depends on changes in the callback, then the solver needs to recalculate/reinitialize the jump rates using the new state. <code>reset_aggregated_jumps!</code> reinitializes the solver to have the correct updated jump rates and internal state. If you leave it out your next jump and jump time will use the state from before the callback was called.</p>",
        "id": 242414722,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623453900
    },
    {
        "content": "<p>[slack] &lt;Sean&gt; Cool. that’s a really nice interface to let people choose whether they need the rates to be recalculated or not.</p>",
        "id": 242417846,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623458046
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; If you are using some of the more sophisticated methods like RSSACR, DirectCR, NRM or such, it can be quite expensive to regenerate all the data structures and jump rates. So you definitely only want to have to do that if necessary.</p>",
        "id": 242419656,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623460945
    },
    {
        "content": "<p>[slack] &lt;Sean&gt; oh ok, so its doing substantially more than just recalculating hazards. good to know.</p>",
        "id": 242420036,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623461513
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Depends on the method. If you are using Direct it shouldn’t be an issue, but for the methods that handle many independent jumps by exploiting sparsity there are complicated data structures that need to get rebuilt.</p>",
        "id": 242421323,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623463795
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; We could probably make that code more efficient by allowing users to indicate what state variables changed in some way, but it hasn’t been an issue anyone has encountered in practice.</p>",
        "id": 242421383,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623463874
    },
    {
        "content": "<p>[slack] &lt;Sean&gt; yeah, I'm not building dependency graphs or anything. I just need the callbacks to implement deterministically timed events.</p>",
        "id": 242421458,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623464030
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; Is there any work going on on the julia Nonlinear solver used by diffeq at this point ? from what I'm seeing from the data above it looks like the difference comes from the number of steps taken by the Nonlinear solver.<br>\n I've also noticed that performance becomes far worse in terms of function evaluations if I replace the CVODE internal nonlinear solver with the one from PETSc<br>\nI can write a note on how the cvode nonlinear solver works if necessary since I've tinkered with it.<br>\nI'm planning on diving in there. is that a good idea?</p>",
        "id": 242423578,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623467588
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; ( I did the petsc replacement in C code, not through the julia interface)</p>",
        "id": 242423592,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623467633
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; also I think these results may be generalizable to calculating steepest descent trajectories of other potentials (I tried to compare by counting function evaluations for something simple like getting the steepest descent trajectory for a harmonic oscillator potential and the rosenbrock function). I can benchmark some more general examples if you'd like</p>",
        "id": 242423978,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623468191
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; <a href=\"https://github.com/SciML/OrdinaryDiffEq.jl/blob/master/src/nlsolve/nlsolve.jl#L40-L59\">https://github.com/SciML/OrdinaryDiffEq.jl/blob/master/src/nlsolve/nlsolve.jl#L40-L59</a> You can play with the divergence/convergence criteria for you model. Stiff solver’s Newton iteration is highly specialized, and you have to make various assumptions and engineering trade offs.</p>",
        "id": 242424425,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623468771
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; It’s not clear to me if the nonlinear solver is the root of the performance problem. You need to profile the solves, and check if the order selection algorithm is not picking the wrong order. High order BDF is A(alpha) stable, meaning it cannot handle complex eigenvalues with high imagine part well. It could be the case that your problem tricks QNDF to use higher order BDFs while it shouldn’t, causing the solver to be forced to take small time steps.</p>",
        "id": 242424629,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623469138
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; One way to improve this is to only bump the order when the error estimate is monotonically decreasing wrt the order. That’s the heuristic used by ode15i and DASSL</p>",
        "id": 242424705,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623469233
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; @Junpeng is the student that will work on multistep solvers this summer.</p>",
        "id": 242424813,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623469280
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; thanks! my jacobians are symmetric so there shouldn't be complex eigenvalues, but I'll check</p>",
        "id": 242424859,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623469338
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Ah, cool. Is it positive definite?</p>",
        "id": 242424870,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623469372
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; nope, but near a minima, it should be have negative eigenvalues/zeroes</p>",
        "id": 242424882,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623469435
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Probably <code>bunchkaufman</code> is far more efficient than LU</p>",
        "id": 242424927,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623469490
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; It does half of the work</p>",
        "id": 242424932,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623469498
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Albeit, I don’t know if OpenBLAS has a fast Bunch-Kaufman factorization</p>",
        "id": 242424951,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623469540
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; and sparse, the larger it gets</p>",
        "id": 242424995,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623469574
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; One easy way of taking advantage of the sparsity is to provide the sparsity pattern to the ODEFunction</p>",
        "id": 242425074,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623469775
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Then the solver will use Jacobian coloring to compute the Jacobian matrix</p>",
        "id": 242425116,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623469806
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; That will decrease the number of function evaluations</p>",
        "id": 242425121,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623469824
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; You could also use the LDLt factorization for symmetric sparse matrices</p>",
        "id": 242425149,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623469911
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; hmm the problem is my zeroes might keep switching as my system evolves, (but should stay fairly constant near the minima)</p>",
        "id": 242425202,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623470014
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Cannot you take the union of the sparsity pattern?</p>",
        "id": 242425203,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623470040
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; I also have a generic question, does using a sparse solver increase the number of function evaluations for ODE solvers in general?</p>",
        "id": 242425246,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623470065
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; I'll check, haven't played around with it as much</p>",
        "id": 242425251,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623470101
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Direct linear solvers have no effect on the number of function evaluations if you don’t count the fact that small numerical drafts on the order of machine epsilon may vary the number of steps taken</p>",
        "id": 242425326,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623470249
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; hmm, so there would not be a dependence on stiffness ? I'm wondering whether a stiffer problem would mean smaller steps for a less stable (Edit: linear) solver</p>",
        "id": 242425514,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623470592
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; BDF is unconditionally stable for all negative real eigvals</p>",
        "id": 242425556,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623470679
    },
    {
        "content": "<p>[slack] &lt;Praharsh Suryadevara&gt; Thanks (I was wondering whether something was going wrong when using KLU was messing up my performance with CVODE, I'm probably doing something wrong there)</p>",
        "id": 242425613,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623470795
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Up to order 2</p>",
        "id": 242444626,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623496602
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @yingbo_ma has been playing with it</p>",
        "id": 242444726,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623496691
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Just a general writeup of the CVODE one would be a waste of time since we know how that works</p>",
        "id": 242444736,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623496718
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Whatever the difference on your problem is is deeper or more subtle</p>",
        "id": 242444738,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623496736
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Try tweaking some of the heuristics though</p>",
        "id": 242444744,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623496748
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Up to order 6</p>",
        "id": 242444808,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623496848
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; I mean negative real eigvals, not eigvals with negative real parts</p>",
        "id": 242444836,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623496907
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Oh okay, yes</p>",
        "id": 242444971,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623497060
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Was there a code we had for looking into this?</p>",
        "id": 242448217,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623501263
    },
    {
        "content": "<p>[slack] &lt;Kiran Shila&gt; Hey everyone! I've got an interesting problem to solve, and would really appreciate a few pointers on how to do so in Julia. I've got an equation of the form <code>T''*(K(T) + K'(T)) = 0</code> where <code>T</code> is some function of <code>x</code> that I'm trying to solve for and <code>K</code> is a non-linear, but differentiable function I have written in Julia. This is a BVP where I know the value of <code>T</code> at <code>x=0</code> and <code>x=L</code>.</p>",
        "id": 242530674,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623618376
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Represent K(T) in some form (spline, neural network) and use differentiable programming over the BVP solvers/</p>",
        "id": 242530849,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623618669
    },
    {
        "content": "<p>[slack] &lt;Kiran Shila&gt; Do callbacks not work with MIRK4? I need to enforce positivity (solving a thermal problem) and setting <code>callback=PositiveDomain()</code> doesn't seem to work</p>",
        "id": 242537758,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623628699
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; callbacks will not work with MIRK4. It's fully implicit. It should throw an error on that?</p>",
        "id": 242537958,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623628937
    },
    {
        "content": "<p>[slack] &lt;Kiran Shila&gt; Doesn't seem to</p>",
        "id": 242537981,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623628976
    },
    {
        "content": "<p>[slack] &lt;Kiran Shila&gt; As in, if I adjust my problem to not have domain issues and run<br>\n<code>sol = solve(bvp, MIRK4(); dt=dL, callback=PositiveDomain())</code></p>",
        "id": 242538002,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623629042
    },
    {
        "content": "<p>[slack] &lt;Kiran Shila&gt; it gives an answer</p>",
        "id": 242538043,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623629052
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; okay, open an issue on that.</p>",
        "id": 242539302,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623630723
    },
    {
        "content": "<p>[slack] &lt;Kiran Shila&gt; Done</p>",
        "id": 242539729,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623631453
    },
    {
        "content": "<p>[slack] &lt;Kiran Shila&gt; These BVP solvers should \"just work\" with Unitful, yes?</p>",
        "id": 242618511,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623685900
    },
    {
        "content": "<p>[slack] &lt;Kiran Shila&gt; Ah it seems not. The problem I am trying to solve has an independent variable of space, not time, so I'm setting dt to some value in <code>mm</code> , however line 27 in solve.jl in <a href=\"https://github.com/SciML/BoundaryValueDiffEq.jl\">https://github.com/SciML/BoundaryValueDiffEq.jl</a> compares to a float, throwing an error.</p>",
        "id": 242622967,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623687537
    },
    {
        "content": "<p>[slack] &lt;Kiran Shila&gt; Is this a bug or should dt be always unitless?</p>",
        "id": 242623067,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623687574
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; No, probably now</p>",
        "id": 242624083,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623688083
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you can set it up via <code>reinterpret</code>s though</p>",
        "id": 242624098,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623688085
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I think that should get patched into <a href=\"https://github.com/search?q=Unitful.jl&amp;type=Repositories\">Unitful.jl</a> though</p>",
        "id": 242624150,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623688091
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Yeah, I planned to do it, but I haven’t got around to do it</p>",
        "id": 242624186,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623688111
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; It’s a lot of work, and I am not sure if it’s worth the effort.</p>",
        "id": 242624242,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623688147
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; If all the array elements have the same type, then it’s trivial to just compute units yourself</p>",
        "id": 242624294,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623688182
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Otherwise, the performance is gonna suck anyway</p>",
        "id": 242624331,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623688200
    },
    {
        "content": "<p>[slack] &lt;Kiran Shila&gt; So do you recommend just stripping units at the solver interface?</p>",
        "id": 242629598,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623690523
    },
    {
        "content": "<p>[slack] &lt;Kiran Shila&gt; As in, I'm wrapping setting up the problem and solution in a function - set it up properly and then ustrip before handing it to <code>TwoPointBVProblem</code></p>",
        "id": 242629916,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623690675
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Yeah, that’s better than trying to fix a ton of things just to make units propagate.</p>",
        "id": 242630332,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623690853
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; It might be an unpopular opinion, but I think it’s a waste of time to do that.</p>",
        "id": 242630381,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623690878
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Hey folks, I was looking in the MTK repo to see where all of the PDE goodness was kept, just to understand the code. Is there a specific branch to look at? I know there is a lot of work on finite differences, etc. Just wanted to start running through test cases etc. to familiarize myself with the code.</p>",
        "id": 242756032,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623772735
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Most of the relevant examples and code is actually in <code>DiffEqOperators</code> .</p>",
        "id": 242772794,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623779573
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; So <code>modelingtoolkitize</code> seems to _almost_ work on my code, but it's choking on some if-statements in runtime-generated functions (analytical derivatives from <code>Symbolics.jl</code> ). Is there a way around this? Like maybe a way to get <code>Symbolics.jl</code> to spit out <code>IfElse</code> instead of if-blocks?</p>",
        "id": 242773409,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623779852
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Ahh okay, thanks @Brian Groenke. I did not realize all of that work was happening under that repo.</p>",
        "id": 242799048,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623790807
    },
    {
        "content": "<p>[slack] &lt;PhilipVinc&gt; Is there some literature about solving SDE, where I cannot access the drift and diffusion terms separately?<br>\nI have a black box to which i feed the current state/configuration, and it gives the deterministic derivative + noise (which I can control but not eliminate).<br>\nI'd like to integrate the dynamics and even use adaptive timestepping if possible</p>",
        "id": 243030251,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623941772
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @PhilipVinc what you're probably looking for is a random ordinary differential equation?</p>",
        "id": 243030384,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623941835
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; There's no general adaptive time stepping methods for that kind of equation yet though <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> . Fun field.</p>",
        "id": 243030436,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623941850
    },
    {
        "content": "<p>[slack] &lt;PhilipVinc&gt; Are there some results? Any review/method/something i can read?</p>",
        "id": 243030491,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623941873
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Kloeden's book is probably the one good source on the topic.</p>",
        "id": 243030686,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623941942
    },
    {
        "content": "<p>[slack] &lt;PhilipVinc&gt; Kloden Platen's ?</p>",
        "id": 243030772,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623941974
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://link.springer.com/book/10.1007/978-981-10-6265-0\">https://link.springer.com/book/10.1007/978-981-10-6265-0</a></p>",
        "id": 243030776,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623941976
    },
    {
        "content": "<p>[slack] &lt;PhilipVinc&gt; Thanks</p>",
        "id": 243030804,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623941989
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; We could make Ito-driven RODEs adaptive with our current infrastructure, but we'd need to work out some Ito-driven RODE RKs of higher order with embedded estimates, so there's a whole research project in there to be done.</p>",
        "id": 243031032,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623942058
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I would love to get a student interested in this.</p>",
        "id": 243031072,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623942070
    },
    {
        "content": "<p>[slack] &lt;PhilipVinc&gt; I am extremely interested for this because of applications to Quantum Physics</p>",
        "id": 243031241,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623942123
    },
    {
        "content": "<p>[slack] &lt;PhilipVinc&gt; I could get a CS/Phys junior PhD on the subject in september</p>",
        "id": 243031313,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623942145
    },
    {
        "content": "<p>[slack] &lt;PhilipVinc&gt; @chrisrackauckas I suppose that if the RODE can be written as a DAE (Mass Matrix form) like M(x(t),t) dx(t)/dt = F(x(t), t), where M and F are random variables, this wouldn't help much, right?</p>",
        "id": 243032478,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623942563
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; In theory.</p>",
        "id": 243032507,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623942577
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I don't think anyone has proven that the implicit Euler RODE method converges on such an equation.</p>",
        "id": 243032632,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623942608
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I would be surprised if it didn't, but I don't think the proof is there.</p>",
        "id": 243032675,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623942621
    },
    {
        "content": "<p>[slack] &lt;PhilipVinc&gt; I mean, this is essentially a RODE so I'd expect it to converge<br>\n<code>dx(t)/dt = M(x(t),t, W(t))^-1 F(x(t),t, W(t))</code></p>",
        "id": 243033118,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623942766
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yeah, I would too</p>",
        "id": 243033617,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623942943
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but someone needs to prove it</p>",
        "id": 243033625,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623942947
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I think it's like, if the Holder continuity alpha&gt;0, and F is bounded, etc.</p>",
        "id": 243033734,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623942971
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I think it needs some bounds to converge, similar to the DAE results on SDAEs.</p>",
        "id": 243033776,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623942985
    },
    {
        "content": "<p>[slack] &lt;PhilipVinc&gt; &gt; We could make Ito-driven RODEs adaptive with our current infrastructure, but we'd need to work out some Ito-driven RODE RKs of higher order with embedded estimates, so there's a whole research project in there to be done.<br>\nHow much work would that be? What background one would need?</p>",
        "id": 243034433,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623943241
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I don't think it's too hard. It's probably a two year thing if someone hasn't done work in RKs before. One year if someone has done some numerical analysis of RKs and such. Digging into RODE taylor expansions will be a trip. Working out what to do with iterated integrals, or handling a special case, or convergence, would be the difficulty.</p>",
        "id": 243034651,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623943322
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Actually now that I say that, it's probably a 2 year deal to get something completed for use with theoretical backing.</p>",
        "id": 243034771,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623943356
    },
    {
        "content": "<p>[slack] &lt;PhilipVinc&gt; I was going through Platen's book. I'm not sure, though, that this is applicable to my problems.<br>\nThe Taylor schemes he derives all require to know the form of your noise in order to compute some stochastic integrals, but in my case I cannot really derive an analytical expression of the noise term.<br>\nMy RODE is more like a black box because internally it samples an RBM/NN and its fisher matrix.</p>",
        "id": 243049547,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623949100
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; hmm</p>",
        "id": 243049745,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623949179
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I don't think you can do any RODE expansions without some assumption of noise form.</p>",
        "id": 243049781,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623949189
    },
    {
        "content": "<p>[slack] &lt;PhilipVinc&gt; I could derive, with several approximations, an expression for the noise, but that would be specific to the current parameters of the NN, the functional form of the NN itself, and the hamiltonian itself.<br>\nIt wouldn't generalise easily</p>",
        "id": 243050158,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623949323
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I think you need an estimator for the 2alpha scheme in order to get an error estimator for adaptivity.</p>",
        "id": 243050396,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623949417
    },
    {
        "content": "<p>[slack] &lt;PhilipVinc&gt; I know the noise is Markovian. I could get away with assuming it's a diagonal noise <code>dn</code>  a bit like here<br>\n<code>dx(t)/dt = (S(x(t),t) + dn_1)^-1 * (F(x(t),t) +dn_2)</code></p>",
        "id": 243051423,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623949850
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; hmm</p>",
        "id": 243051751,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623950015
    },
    {
        "content": "<p>[slack] &lt;PhilipVinc&gt; But the expression is going to be ugly.</p>",
        "id": 243052634,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623950452
    },
    {
        "content": "<p>[slack] &lt;Penn Jenks&gt; Found this paper very interesting:<br>\n<a href=\"https://arxiv.org/abs/2105.15183\">https://arxiv.org/abs/2105.15183</a><br>\nThinking this might be more efficient than the adjoint sensitivity method for neural ODEs?</p>",
        "id": 243073730,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623959183
    },
    {
        "content": "<p>[slack] &lt;Penn Jenks&gt; (Or just ODEs)</p>",
        "id": 243074030,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623959306
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; (a) it's not a stable method as described there, (b) it's the same as Steven Johnson's old notes (<a href=\"https://math.mit.edu/~stevenj/18.336/adjoint.pdf\">https://math.mit.edu/~stevenj/18.336/adjoint.pdf</a> 3), (c) versions of it are implemented as the adjoint for SteadyStateProblem, (d) it only applies to steady state systems.</p>",
        "id": 243074922,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623959699
    },
    {
        "content": "<p>[slack] &lt;Penn Jenks&gt; just what I was looking for ^^</p>",
        "id": 243076100,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623960184
    },
    {
        "content": "<p>[slack] &lt;Penn Jenks&gt; makes sense -- Steady state problems are essentially fixed point iterations?</p>",
        "id": 243076508,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623960346
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's an ODE solve to steady state, but <code>u' = f(u)</code> to steady state means <code>u'=0</code> so it's equivalent to solving <code>f(u) = 0</code></p>",
        "id": 243076609,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623960382
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the dynamical interpretation allows a lot more methods though, like pseudotransient methods and such.</p>",
        "id": 243076657,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623960405
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; though the same adjoint applies to the SciML NonlinearProblem, which we need to document and publicize a bit <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 243076687,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623960424
    },
    {
        "content": "<p>[slack] &lt;ilyaorson&gt; Is there a version of the adjoint of an ODE when seen as converged picard iterations? (probably super inefficient approach)</p>",
        "id": 243089136,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623966267
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Only for steady states as Picard on the integral</p>",
        "id": 243091394,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623967651
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; MTK just defines the interface which is consumed by downstream libraries.</p>",
        "id": 243106814,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623979339
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; @chrisrackauckas I understand now. That makes sense. I was just looking at the code to understand the flow, etc.</p>",
        "id": 243109635,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1623982523
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Exhilarating: <a href=\"https://github.com/SciML/DiffEqBase.jl/pull/672\">https://github.com/SciML/DiffEqBase.jl/pull/672</a></p>",
        "id": 243152778,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624019191
    },
    {
        "content": "<p>[gitter] &lt;dynamic-queries&gt; <a href=\"https://github.com/SciML/ModelingToolkit.jl/issues/58\">https://github.com/SciML/ModelingToolkit.jl/issues/58</a> <br>\nI would like to contribute to the affixed issue.<br>\n@ChrisRackauckas  Do you have a specific starting point in mind?</p>",
        "id": 243381759,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624282175
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @dynamic-queries Hey, this one will be a bit involved.</p>",
        "id": 243382594,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624282559
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I think as a first method, a that starts by using <code>islinear</code> to prove linearity and does linear model order reduction might be a good start.</p>",
        "id": 243382676,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624282583
    },
    {
        "content": "<p>[gitter] &lt;dynamic-queries&gt; &gt; [slack] &lt;chrisrackauckas&gt; I think as a first method, a that starts by using <code>islinear</code> to prove linearity and does linear model order reduction might be a good start.</p>\n<p>Great! I'll get started!</p>",
        "id": 243386950,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624284350
    },
    {
        "content": "<p>[slack] &lt;Ilia&gt; btw, @chrisrackauckas there is an open-source sympy (python, not julia) model reduction package: <a href=\"https://github.com/pogudingleb/CLUE\">https://github.com/pogudingleb/CLUE</a></p>",
        "id": 243393579,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624286992
    },
    {
        "content": "<p>[slack] &lt;Ilia&gt; with a link to the paper: <a href=\"https://arxiv.org/abs/2004.11961\">https://arxiv.org/abs/2004.11961</a></p>",
        "id": 243393644,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624287008
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that's a good one to keep in mind, thanks.</p>",
        "id": 243394283,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624287249
    },
    {
        "content": "<p>[slack] &lt;bhvieira&gt; I'm dealing with a very steep solution (neuronal firing, not that exceptional, it's for coursework). As you can see in the figure, the solution is very steep prior to the spiking. There, I get a stability warning and solve halts. I've tried Euler, RK4, Tsit5, and a few others, to no avail. I guess the problem might be due to a callback that resets u (this is a LIF model), but anyone have other pointers? Thanks!: <a href=\"https://files.slack.com/files-pri/T68168MUP-F025R59ESNP/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F025R59ESNP/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F025R59ESNP/download/image.png\"><img src=\"https://uploads.zulipusercontent.net/0d91c26476c065fe54672f0c6b510419a636b7bf/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d4630323552353945534e502f646f776e6c6f61642f696d6167652e706e67\"></a></div>",
        "id": 243440527,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624308419
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; i think stiff problems you cant really use explicit methods which i think all the ones you listed are</p>",
        "id": 243440886,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624308590
    },
    {
        "content": "<p>[slack] &lt;bhvieira&gt; I didn't expect this one to be stiff, but it makes sense. I'll give DifferentialEquations site a read, thanks for the pointer @anandj</p>",
        "id": 243441204,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624308722
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; <a href=\"https://diffeq.sciml.ai/stable/solvers/ode_solve/#Stiff-Problems\">https://diffeq.sciml.ai/stable/solvers/ode_solve/#Stiff-Problems</a> rosenbrock maybe</p>",
        "id": 243441260,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624308735
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah this is one of the canonical indicators of stiffness.</p>",
        "id": 243442269,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624309231
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; or model error</p>",
        "id": 243442289,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624309244
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://discourse.julialang.org/t/psa-how-to-help-yourself-debug-differential-equation-solving-issues/62489\">https://discourse.julialang.org/t/psa-how-to-help-yourself-debug-differential-equation-solving-issues/62489</a></p>",
        "id": 243442316,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624309262
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; You can use explicit methods for some stiff problems, if you set dt small enough. I use Euler frequently for a stiff PDE problem.</p>",
        "id": 243443988,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624310120
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; PDEs generally aren't stiff.</p>",
        "id": 243444006,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624310134
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I'd put them in that \"semi-stiff category\"</p>",
        "id": 243444015,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624310140
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; because explicit methods can actually work. There's many methods where that's not true for any <code>dt</code> due to Float64 accuracy.</p>",
        "id": 243444085,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624310164
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Well... I guess \"stiffness\" is a bit subjective, but yeah I see your point.</p>",
        "id": 243444219,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624310276
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; If a ROCK method works on it, it's semi-stiff by my definition.</p>",
        "id": 243444290,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624310302
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Then the problem I work on is semi-stiff by that definition. But Euler is still sometimes faster than ROCK <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 243444371,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624310347
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; for the same accuracy?</p>",
        "id": 243444403,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624310364
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://benchmarks.sciml.ai/html/MOLPDE/Filament.html\">https://benchmarks.sciml.ai/html/MOLPDE/Filament.html</a> is a good example of how methods look in this regime BTW</p>",
        "id": 243444437,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624310388
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Oh no, definitely not. ROCK is more accurate.</p>",
        "id": 243444444,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624310390
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah I always measure speed in terms of work-precsion: speed to hit the same accuracy.</p>",
        "id": 243444528,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624310414
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; There's a saturating behavior explicit RKs get on this kind of problem.</p>",
        "id": 243444599,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624310432
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; The problem is the default adaptive algorithm, I think. I've been meaning to add a CFL stepsize limiter for a while. I think that + ROCK would be much better.</p>",
        "id": 243444801,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624310478
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I agree. Did you see Ranchoa's controller changes?</p>",
        "id": 243444863,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624310510
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I did not.</p>",
        "id": 243444872,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624310516
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://diffeq.sciml.ai/stable/basics/common_solver_opts/#advanced_adaptive_stepsize_control\">https://diffeq.sciml.ai/stable/basics/common_solver_opts/#advanced_adaptive_stepsize_control</a></p>",
        "id": 243444933,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624310533
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; `controller</p>",
        "id": 243444934,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624310535
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://diffeq.sciml.ai/stable/extras/timestepping/#OrdinaryDiffEq.PIDController\">https://diffeq.sciml.ai/stable/extras/timestepping/#OrdinaryDiffEq.PIDController</a></p>",
        "id": 243444941,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624310539
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; PIDController has stepsize limiters built in and you can modify it via a function to your problem.</p>",
        "id": 243444963,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624310554
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; this can be applied to any method</p>",
        "id": 243444993,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624310573
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; he used it for his recent SSP method paper</p>",
        "id": 243445022,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624310588
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I kind of think that ROCK4 needs to be using this by default somehow</p>",
        "id": 243445041,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624310602
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Hmm. I'm not familiar with the theory behind this. I'll have to dig in a bit.</p>",
        "id": 243445184,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624310674
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://arxiv.org/abs/2104.06836\">https://arxiv.org/abs/2104.06836</a></p>",
        "id": 243445247,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624310709
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Also I've generally found ROCK2 to be more efficient for the same error than ROCK4 for my PDE. Not sure if that's expected or not.</p>",
        "id": 243445375,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624310765
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; That's true in the benchmark I pointed to above</p>",
        "id": 243445427,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624310796
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I'm not sure how general that is, we need more benchmarks in this regime.</p>",
        "id": 243445450,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624310807
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; <code>f</code> calls are expensive so the extra stages probably aren't helping.</p>",
        "id": 243445462,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624310813
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I'm doing a non-linear solve at every step <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 243445487,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624310827
    },
    {
        "content": "<p>[slack] &lt;bhvieira&gt; On that same problem, I noticed that whenever a Callback (or an impulse function included through parameters) hits its onset conditions I get an instability. This did not happen in simpler, linear, PDEs, but it's affecting two non-linear PDEs I'm exploring right now (the AdEx - Adaptative Exponential and the Izhikevich model) (That thread got a bit long, that's why I'm continuing here)</p>",
        "id": 243460593,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624322291
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; You don't have any violations from the PsA?</p>",
        "id": 243473844,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624339992
    },
    {
        "content": "<p>[slack] &lt;Steffen Plunder&gt; Hi, I would like to contribute to <a href=\"https://github.com/search?q=ModelingToolkit.jl&amp;type=Repositories\">ModelingToolkit.jl</a>. In the future, my goal would be to be able to solve problems with inequality constraints.<br>\nIs there an issue/task remotely related to that where I could work on? I'm also happy to start with simple stuff like documentation/tests.</p>",
        "id": 243509196,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624365607
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @Steffen Plunder inequality constraints in... ? Optimization?</p>",
        "id": 243509484,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624365725
    },
    {
        "content": "<p>[slack] &lt;Steffen Plunder&gt; Sorry, in ODE/DAEs. (Like cells/particles colliding)</p>",
        "id": 243509539,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624365755
    },
    {
        "content": "<p>[slack] &lt;Steffen Plunder&gt; (but yeah, that often needs needs Optimization underneath)</p>",
        "id": 243509562,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624365771
    },
    {
        "content": "<p>[slack] &lt;Steffen Plunder&gt; but I'm open to work on anything (preferably ODE or Nonlinear Optimisation related). I'm more looking for an entry point into being able to commit something to ModelingToolkit.</p>",
        "id": 243509796,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624365885
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @Steffen Plunder <a href=\"https://github.com/SciML/ModelingToolkit.jl/issues/141\">https://github.com/SciML/ModelingToolkit.jl/issues/141</a> is probably a good place to start for that</p>",
        "id": 243510300,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624366123
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; solvers which impose inequality constraints are rare or essentially non-existent (I know of one... and it's odd...)</p>",
        "id": 243510329,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624366142
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but using function transformations is a good way to impose them</p>",
        "id": 243510348,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624366154
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; For example, you can do a transformation like <code>x -&gt; log(x)</code></p>",
        "id": 243510360,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624366167
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and then replace the equation with <code>d log(x) / dt ~ ...</code></p>",
        "id": 243510380,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624366177
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and now the solution is to take <code>exp(u[i])</code> , which is then guaranteed to be positive</p>",
        "id": 243510482,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624366220
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and with MTK, you can also insert <code>x ~ exp(logx)</code> as an observation equation so that <code>sol[x]</code> is \"what you want\" by default.</p>",
        "id": 243510537,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624366253
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; So being able to do these kinds of transformations automatically would be really nice.</p>",
        "id": 243510565,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624366266
    },
    {
        "content": "<p>[slack] &lt;Steffen Plunder&gt; Cool, yes, I read the technique in <a href=\"https://www.springer.com/gp/book/9783319200583\">https://www.springer.com/gp/book/9783319200583</a></p>",
        "id": 243510578,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624366271
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah biomodels do this all of the time</p>",
        "id": 243510605,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624366287
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but, I hope no one has to do it by hand because it's nasty <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 243510620,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624366297
    },
    {
        "content": "<p>[slack] &lt;Steffen Plunder&gt; Thanks for the hint, that sounds perfect for me to start with</p>",
        "id": 243510626,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624366299
    },
    {
        "content": "<p>[slack] &lt;Steffen Plunder&gt; I will try to do a PR and ask in the issue if I get stuck! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 243510722,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624366346
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes, WIP PRs are a great way to get help</p>",
        "id": 243510735,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624366357
    },
    {
        "content": "<p>[slack] &lt;Steffen Plunder&gt; yes, thanks a lot for the fast reply!</p>",
        "id": 243510769,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624366374
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; no problem</p>",
        "id": 243510785,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624366388
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; also note, for fun, you can do this generally to SDE systems through Ito's formula</p>",
        "id": 243510804,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624366402
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://en.wikipedia.org/wiki/Geometric_Brownian_motion\">https://en.wikipedia.org/wiki/Geometric_Brownian_motion</a></p>",
        "id": 243510806,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624366403
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://en.wikipedia.org/wiki/It%C3%B4%27s_lemma\">https://en.wikipedia.org/wiki/It%C3%B4%27s_lemma</a></p>",
        "id": 243510815,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624366415
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; so if you want to go all of the way, that could be fun. But the ODE general transformation method is Ito's lemma where g=0</p>",
        "id": 243510859,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624366439
    },
    {
        "content": "<p>[slack] &lt;Steffen Plunder&gt; cool, good to keep it in mind. I like the mindset of solving things in general <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 243511273,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624366601
    },
    {
        "content": "<p>[slack] &lt;Steffen Plunder&gt; Yes, I feel the same while my PhD. I think it's fair to say that there are solvers. But they are usually a combination of ODE solver + solver for constrained nonlinear (non-smooth) optimisation.</p>\n<p>There is a lot of related work in contact mechanics/elasticity (using Augmented Lagrange method, Uzawa algorithm, Projected Gauss-Seidel, SQP, Non-Smooth Optimisation) <a href=\"https://www.springer.com/gp/book/9783540326083\">https://www.springer.com/gp/book/9783540326083</a><br>\non the other hand, computer scientists have magic methods, for example, Position-based Dynamics (used by NVIDIA's physics engine), e.g. <a href=\"https://matthias-research.github.io/pages/publications/XPBD.pdf\">https://matthias-research.github.io/pages/publications/XPBD.pdf</a><br>\nwhich are super fast and stable.  (And then there is of course the penalty method.)</p>\n<p>Maybe, one day, ModelingToolkit can combine the ODE solvers and the Optimisers to solve the KKT conditions in each step <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 243514062,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624367826
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; there are some algorithms, but no solvers.</p>",
        "id": 243514451,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624368000
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; There are ways to do this related to DAE solving.</p>",
        "id": 243514523,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624368022
    },
    {
        "content": "<p>[slack] &lt;Steffen Plunder&gt; I had to google to get the difference between solver and algorithm. But yes, I also don't know solvers (in the Julia universe) for that.</p>",
        "id": 243515067,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624368266
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; are there any standard solvers for it?</p>",
        "id": 243515126,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624368298
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I can't name a single optimized C code in that domain.</p>",
        "id": 243515140,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624368306
    },
    {
        "content": "<p>[slack] &lt;Steffen Plunder&gt; I have to look in the literature. I only know closed source projects are Fraunhofer for such things.<br>\nIf I find some, I will write you</p>",
        "id": 243515378,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624368420
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; thanks, do share if you do.</p>",
        "id": 243515404,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624368435
    },
    {
        "content": "<p>[slack] &lt;bhvieira&gt; Sorry, but what's a PsA? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 243527177,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624373083
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://discourse.julialang.org/t/psa-how-to-help-yourself-debug-differential-equation-solving-issues/62489\">https://discourse.julialang.org/t/psa-how-to-help-yourself-debug-differential-equation-solving-issues/62489</a></p>",
        "id": 243527736,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624373320
    },
    {
        "content": "<p>[slack] &lt;bhvieira&gt; Oh, I read it yesterday, thanks for the link! I'm still investigating, just wanted to note about the callback instability</p>",
        "id": 243528136,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624373474
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; is your system a DAE?</p>",
        "id": 243528523,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624373630
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; also, what version do you have?</p>",
        "id": 243528596,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624373644
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; The callbacks got a pretty big improvement last Friday.</p>",
        "id": 243528614,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624373652
    },
    {
        "content": "<p>[slack] &lt;bhvieira&gt; I'm on <code>DifferentialEquations v6.16.0</code></p>",
        "id": 243529059,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624373823
    },
    {
        "content": "<p>[slack] &lt;bhvieira&gt; The equations are actually very simple, albeit non-linear, here's it all:</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>@with_kw mutable struct IzhikevichParams{R}\n    C::R = 150e-12\n    v_r::R = -75e-3\n    v_L::R = -45e-3\n    k::R = 1.2\n    a::R = 0.01\n    b::R = 5.0\n    c::R = -56e-3\n    d::R = 130.0\n    v_p::R = 50e-3\n    I::R = 0.0\nend\n\nfunction Izhikevich(U,p,t)\n    @unpack C, v_r, v_L, k, a, b, c, d, v_p, I = p\n    v = U[1]\n    u = U[2]\n    [\n        (k * (v - v_r)*(v - v_L) - u + I)/C;\n        a * (b * (v - v_r) - u)\n    ]\nend\nfunction v_condition(u,t,integrator)\n    u[1] - integrator.p.v_p\nend\nfunction v_affect!(integrator)\n    integrator.u[1] = integrator.p.c\n    integrator.u[2] += integrator.p.d\nend\nfunction current_on_condition(u,t,integrator)\n    t &gt; 0.02\nend\nfunction current_on_affect!(integrator)\n    integrator.p.I = 550e-12\nend\nfunction current_off_condition(u,t,integrator)\n    t &gt; 0.450\nend\nfunction current_off_affect!(integrator)\n    integrator.p.I = 0.0\nend\n\ncb = CallbackSet(ContinuousCallback(v_condition,v_affect!), DiscreteCallback(current_on_condition,current_on_affect!), DiscreteCallback(current_off_condition,current_off_affect!));\nparams = IzhikevichParams();\nprob = ODEProblem(Izhikevich,[-75e-3, 0.0],(0.0, 0.5), params);\nsol = solve(prob, Euler(), callback=cb, saveat = 0.1, dt = 1e-6, save_everystep=false);```\n</code></pre></div>",
        "id": 243529205,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624373875
    },
    {
        "content": "<p>[slack] &lt;bhvieira&gt; I went overboard on <code>Callbacks</code> here, but passing in a function of time for the current didn't work either</p>",
        "id": 243529326,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624373913
    },
    {
        "content": "<p>[slack] &lt;bhvieira&gt; I'm pretty much confident Callbacks are not to blame here, instead the very steep spiking brings most algorithms to a grinding halt</p>",
        "id": 243594777,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624407860
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah which implicit algorithms are you using?</p>",
        "id": 243594825,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624407917
    },
    {
        "content": "<p>[gitter] &lt;stewpend0us&gt; hello...I work with non-linear state-space equations and I typically define my functions like (dX, Y) = physics(t, X, U). I was wondering if there is a nice way to hande the \"Y\" and \"U\" parts that would work with the diffeq solvers?</p>",
        "id": 243595856,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624409020
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; just treat them explicitly, or use <a href=\"https://github.com/search?q=ModelingToolkit.jl&amp;type=Repositories\">ModelingToolkit.jl</a> for the elimination tooling</p>",
        "id": 243596153,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624409326
    },
    {
        "content": "<p>[slack] &lt;Stewart Wadsworth&gt; by explicitly you mean dX = f(t,X,U) and Y = g(t,X,U)?</p>",
        "id": 243596388,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624409537
    },
    {
        "content": "<p>[slack] &lt;Stewart Wadsworth&gt; with two separate functions there is a lot of duplication since the internals of f often use Y</p>",
        "id": 243596673,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624409899
    },
    {
        "content": "<p>[slack] &lt;Stewart Wadsworth&gt; hmmm ModelingToolkit looks promising though....I'll dig more into that. Thanks!!</p>",
        "id": 243597020,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624410251
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it usually wouldn't duplicate because &lt;15% of time points actually are in the save, and normally that's more like &lt;5% because of rejections.</p>",
        "id": 243599279,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624412987
    },
    {
        "content": "<p>[slack] &lt;bhvieira&gt; Hey Chris, sorry for the long delay (been having one those days where everything comes down... for like the last few weeks haha). I haven't tried many methods actually because the base code apparently worked with Euler, but there are differences. I tried Euler, RK4, Rosenbrock23 and Tsit5, so now I should move on to other solvers. I saw <a href=\"https://diffeq.sciml.ai/stable/solvers/ode_solve/#OrdinaryDiffEq.jl-for-Stiff-Equations\">https://diffeq.sciml.ai/stable/solvers/ode_solve/#OrdinaryDiffEq.jl-for-Stiff-Equations</a>, so maybe I'll try each one of those (any recommendations?).</p>",
        "id": 243709666,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624480820
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; QNDF or TRBDF2 are good first ones to try here.</p>",
        "id": 243709810,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624480900
    },
    {
        "content": "<p>[slack] &lt;Cristiano Ricci&gt; Hello. I am trying to test some finite element method to solve time dependent PDEs, and I would really like to use the DifferentialEquations library. I saw around the two packages for FEM i should use are either <a href=\"https://github.com/search?q=Gridap.jl&amp;type=Repositories\">Gridap.jl</a> or <a href=\"https://github.com/search?q=Ferrite.jl&amp;type=Repositories\">Ferrite.jl</a>. Does one of the two integrate better with DifferentialEquations? In the end in my case I only need them to compute Mass and Stiffness matrix really.</p>",
        "id": 243792408,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624544135
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I have a model in my test scripts.</p>",
        "id": 243894014,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624613847
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; ```using ModelingToolkit<br>\nusing DiffEqBase<br>\nusing DifferentialEquations</p>\n<p>function Model(tspan = (0.0, 1.0))<br>\n    pars = ModelingToolkit.@parameters(begin<br>\n        (a, t)<br>\n    end)<br>\n    vars = ModelingToolkit.@variables(begin<br>\n        (x(t),)<br>\n    end)<br>\n    eqs = [begin<br>\n        0 ~ -x + t + 1<br>\n    end]<br>\n    nonLinearSystem =<br>\n        ModelingToolkit.ODESystem(eqs, t, vars, pars, name = :($(Symbol(\"Model\"))))<br>\n    pars = Dict(begin<br>\n        a =&gt; float(begin<br>\n            1.0<br>\n        end)<br>\n    end, t =&gt; tspan[1])<br>\n    initialValues = [begin<br>\n        x =&gt; begin<br>\n            1.0<br>\n        end<br>\n    end]<br>\n    problem = ModelingToolkit.ODEProblem(nonLinearSystem, initialValues, tspan, pars)<br>\n    return problem<br>\nend<br>\nproblem = Model()<br>\nfunction Simulate(tspan = (0.0, 1.0))<br>\n    solve(problem, tspan = tspan)<br>\nend```</p>",
        "id": 243894015,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624613848
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; does anyone know where this example came from? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 243894023,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624613855
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/search?q=Gridap.jl&amp;type=Repositories\">Gridap.jl</a> is the one that I have familiarity with, and wrote an example:</p>\n<p><a href=\"https://github.com/gridap/GridapODEs.jl/issues/4#issuecomment-758496597\">https://github.com/gridap/GridapODEs.jl/issues/4#issuecomment-758496597</a></p>",
        "id": 243894108,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624613908
    },
    {
        "content": "<p>[slack] &lt;bhvieira&gt; So I spoke to the professor regarding stiffness, he pointed me to Paul Miller's MATLAB code. It's straightforward Euler. Can I replicate this rule with a Callback without interpolation?</p>\n<div class=\"codehilite\" data-code-language=\"if\"><pre><span></span><code>        v(j) = V_Reset;         % reset the voltage\n        w(j) = w(j) + b;        % increase the adaptation variable by b\n        spikes(j) = 1;          % record the spike\n    end```\n</code></pre></div>",
        "id": 243906476,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624622788
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that is not an ODE</p>",
        "id": 243906682,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624622946
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh yeah, with a callback you can use a DiscreteCallback</p>",
        "id": 243906694,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624622965
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but note, that is not an ODE'</p>",
        "id": 243906698,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624622968
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; this is addressed in the PSA and it describes why you'd see an instability if you did something like this in the RHS</p>",
        "id": 243906716,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624622989
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; (in MATLAB, <code>v(j) = V_Reset</code> actually doesn't work so that's why it would \"work\" <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> )</p>",
        "id": 243906791,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624623007
    },
    {
        "content": "<p>[slack] &lt;bhvieira&gt; I only pasted the callback rule part, the rest of the ODE is there in the code too.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code>    <span class=\"o\">%</span> <span class=\"n\">first</span> <span class=\"n\">term</span> <span class=\"n\">within</span> <span class=\"n\">parentheses</span> <span class=\"n\">is</span> <span class=\"n\">like</span> <span class=\"n\">the</span> <span class=\"n\">LIF</span> <span class=\"n\">model</span>\n    <span class=\"o\">%</span> <span class=\"n\">second</span> <span class=\"n\">term</span> <span class=\"n\">is</span> <span class=\"n\">an</span> <span class=\"n\">exponential</span> <span class=\"n\">spiking</span> <span class=\"n\">term</span>\n    <span class=\"o\">%</span> <span class=\"n\">third</span> <span class=\"n\">term</span> <span class=\"n\">includes</span> <span class=\"n\">adaptation</span>\n    <span class=\"n\">v</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">v</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">dt</span><span class=\"o\">*</span><span class=\"p\">(</span> <span class=\"n\">G_L</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">E_L</span><span class=\"o\">-</span><span class=\"n\">v</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">deltaT</span><span class=\"o\">*</span><span class=\"n\">exp</span><span class=\"p\">((</span><span class=\"n\">v</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"n\">V_Thresh</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"n\">deltaT</span><span class=\"p\">)</span> <span class=\"p\">)</span> <span class=\"o\">...</span>\n       <span class=\"o\">-</span> <span class=\"n\">w</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">I</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"p\">))</span><span class=\"o\">/</span><span class=\"n\">C</span><span class=\"p\">;</span>\n\n   <span class=\"o\">%</span> <span class=\"n\">next</span> <span class=\"n\">line</span> <span class=\"n\">decys</span> <span class=\"n\">the</span> <span class=\"n\">adaptation</span> <span class=\"n\">toward</span> <span class=\"n\">a</span> <span class=\"n\">steady</span> <span class=\"n\">state</span> <span class=\"k\">in</span> <span class=\"n\">between</span> <span class=\"n\">spikes</span>\n    <span class=\"n\">w</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">w</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">dt</span><span class=\"o\">*</span><span class=\"p\">(</span> <span class=\"n\">a</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"p\">)</span><span class=\"o\">-</span><span class=\"n\">E_L</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">w</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"p\">)</span><span class=\"o\">/</span><span class=\"n\">tauw</span><span class=\"p\">;</span><span class=\"sb\">```</span>\n</code></pre></div>",
        "id": 243910037,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624624983
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; okay not in a function call.</p>",
        "id": 243910156,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624625044
    },
    {
        "content": "<p>[slack] &lt;bhvieira&gt; Couldn't get it to work with DiscreteCallback, though a naÏve Euler implementation runs fine. Is this right?</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    u[1] &gt; 0.050\nend\nfunction affect!(integrator)\n    integrator.u[1] = integrator.p.u_reset\n    integrator.u[2] += integrator.p.b\nend\ncb = DiscreteCallback(condition,affect!);```\nCompare with the naive (this one works):\n```for i in 2:length(t)\n    if sol[i-1,1] &gt; 0.050\n        sol[i-1,1] = p4.u_reset\n        sol[i-1,2] += p4.b\n    end\n    sol[i,:] = sol[i-1,:] + dt * AdEx(sol[i-1,:], p4, 0.0)\nend```\n</code></pre></div>",
        "id": 243912924,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624626558
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that looks right if <code>AdEx</code> is the ODE</p>",
        "id": 243913045,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624626617
    },
    {
        "content": "<p>[slack] &lt;bhvieira&gt; It is</p>",
        "id": 243913418,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624626804
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 243915335,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624627793
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 243916239,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624628221
    },
    {
        "content": "<p>[slack] &lt;bhvieira&gt; So, I tried the PsA again now. I think I was submitting a too extreme condition to the problem. Using lower (more normal) currents, <code>DifferentialEquations</code> works flawlessly indeed. Thanks for the help Chris, now it works and I can finally use the smarter solvers again <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 243916887,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624628566
    },
    {
        "content": "<p>[slack] &lt;Paul Myers&gt; Perhaps this question is better-suited for another channel, but is anyone aware of any libraries in Julia with capabilities for building logic-based ODE models such as those used in systems biology (e.g., see section 2.1 <a href=\"https://doi.org/10.1093/bioinformatics/btv314\">https://doi.org/10.1093/bioinformatics/btv314</a>)?</p>",
        "id": 243927914,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624633413
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 243929637,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624634183
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; no, but it looks fun. Open an issue on <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a> and we could look into it.</p>",
        "id": 243933853,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624636061
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; does <code>StepsizeLimiter</code> override <code>dtmin</code>  and <code>dtmax</code> or no?</p>",
        "id": 243934852,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624636507
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; both would apply.</p>",
        "id": 243939188,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624638521
    },
    {
        "content": "<p>[slack] &lt;Cristiano Ricci&gt; thanks!</p>",
        "id": 243940108,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624639007
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; ```using ModelingToolkit, DifferentialEquations</p>\n<p>@parameters t σ ρ β<br>\n@variables x(t) y(t) z(t)<br>\nD = Differential(t)</p>\n<p>eqs = [D(x) ~ σ*(y-x),<br>\n       D(y) ~ x*(ρ-z)-y,<br>\n       D(z) ~ x<em>y - β</em>z]</p>\n<p>noiseeqs = [0.1*x,<br>\n            0.1*y,<br>\n            0.1*z,<br>\n            0.1*z]</p>\n<p>de = SDESystem(eqs,noiseeqs,t,[x,y,z],[σ,ρ,β]; defaults=[x=&gt;1.,y=&gt;1.,z=&gt;1., σ=&gt;1., ρ=&gt;1., β=&gt;1.])<br>\nprob = SDEProblem(de, Pair[], (0, 10.))<br>\nsol = solve(prob)<code>\nThe number of noiseeqs != eqs, but it still initializes the sys/prob and solves fine.\nfrom these docs https://diffeq.sciml.ai/stable/tutorials/sde_example/ it seems diagonal noise is implied by arg types.\nbut i would expect an error like\n</code>ERROR: DimensionMismatch(\"arrays could not be broadcast to a common size; got a dimension with lengths 3 and 4\")```<br>\nam i missing something? is it falling back to non diagonal noise? how do i check</p>",
        "id": 243985394,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624668367
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; You seem to have an extra element in <code>noiseeqs</code>. Shouldn’t it have just three elements:</p>\n<div class=\"codehilite\" data-code-language=\"noiseeqs\"><pre><span></span><code>            0.1*y,\n            0.1*z]```\n</code></pre></div>",
        "id": 243986919,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624670091
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; did you read my post? i am asking why it <strong>doesnt</strong> error</p>",
        "id": 243988056,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624671636
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; Oh, sorry, I read it in the diagonal.</p>",
        "id": 243988258,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624671948
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it shouldn't require diagonal.</p>",
        "id": 244000153,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624692243
    },
    {
        "content": "<p>[slack] &lt;dawbarton&gt; An MTK question on namespaces: I'm trying to write a helper function to deal with a my own system definitions I've created but I'm struggling to get the right variable names once I start embedding the system. My (pseudo-) code is</p>\n<div class=\"codehilite\" data-code-language=\"coll\"><pre><span></span><code>sys = DynamicalSystem(...; systems=[coll]) # create container with other subsystems as well\nics = generate_initialconditions(sys.coll, sol, (0.0, 1.0)) # generate initial conditions for the collocation subsystem from a previous time integration\n</code></pre></div>\n<p>My helper function is the <code>generate_initialconditions</code> and it needs the correct namespacing for the variables. When I do <code>sys.coll</code> it namespaces the <code>coll</code> subsystem with the name of the outer (top-level) container, but the name of the outer (top-level) container isn't actually used when you solve a <code>NonlinearSystem</code> (which is what I convert to). Do I just need to strip of the first level of namespacing when I generate the variable names? Or is there a better way of doing it? (An MTK function that I've missed?)</p>",
        "id": 244004159,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624698209
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt;  <code>@nonamespace sys.coll</code></p>",
        "id": 244015379,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624714387
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; I think that’s going to be changing soon, though, so by default things won’t be namespaced when doing something like <code>sys.coll</code></p>",
        "id": 244015447,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624714462
    },
    {
        "content": "<p>[slack] &lt;dawbarton&gt; Great, thanks! I'll try it out later</p>",
        "id": 244024872,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624727835
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; There is this step <code>noiseeqs = get_noiseeqs(sys)</code> in line 338 that I don’t understand (<code>get_noiseeqs()</code> is generated somehow with <code>build_function</code> in line 116), but there is also this step in line 130 that seems to just silently ignore extra elements in the <code>noiseeqs</code> vector if it is longer than the <code>states</code> vector: <a href=\"https://github.com/SciML/ModelingToolkit.jl/blob/master/src/systems/diffeqs/sdesystem.jl#L130\">https://github.com/SciML/ModelingToolkit.jl/blob/master/src/systems/diffeqs/sdesystem.jl#L130</a></p>",
        "id": 244025298,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624728538
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; @chrisrackauckas yeah that seems like the issue im describing. it silently ignores them</p>",
        "id": 244025885,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624729336
    },
    {
        "content": "<p>[slack] &lt;dawbarton&gt; Ok, that removes all the namespacing; is there a version that just removes the top level namespacing? (I can make one easy enough but I just want to check if I've missed something.)</p>",
        "id": 244028861,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624733411
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah this is exactly what's changing. @yingbo_ma’s probably working on it right now.</p>",
        "id": 244030595,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624736015
    },
    {
        "content": "<p>[slack] &lt;John Waczak&gt; Hi Everyone, in the <code>DifferentialEquations.jl</code> docs, the page on symplectic integrators says \"Note that all symplectic integrators are fixed timestep only.\" Is there a way to filter the list of symplectic solvers to see which ones allow for variable time steps?</p>",
        "id": 244030640,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624736050
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; all symplectic integrators are fixed timestep only.</p>",
        "id": 244030645,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624736073
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; That's pretty fundamental to the method BTW. It's really computationally expensive to make them adaptive, which is why you generally don't see it.</p>",
        "id": 244030657,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624736095
    },
    {
        "content": "<p>[slack] &lt;John Waczak&gt; That makes way more sense, thanks. I think I misread \"note\" as \"not\" and got a little excited</p>",
        "id": 244030863,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624736351
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh hehe</p>",
        "id": 244030872,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624736381
    },
    {
        "content": "<p>[slack] &lt;John Waczak&gt; This package is awesome, btw. I'm having a bunch of fun playing around with the <code>HamiltonianProblem()</code> at the moment</p>",
        "id": 244030932,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624736443
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; great!</p>",
        "id": 244030960,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624736497
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yes, I want to speed that one up. @SebastianM-C wanted to auto-symbolic differentiate the HP, and it's a really good idea.</p>",
        "id": 244030969,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624736521
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; Is the idea that when constructing a Problem or accessing a solution variable, it removes the top-level namespace by default?</p>",
        "id": 244031033,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624736616
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/SciML/ModelingToolkit.jl/issues/1052\">https://github.com/SciML/ModelingToolkit.jl/issues/1052</a></p>",
        "id": 244031091,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624736660
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; flipping the implicit namespacing assumption makes <code>sys1.x</code> the <code>x</code> from sys1, and then allows <code>@namespace sys1.x</code> to be used for generating composed modes while making inheritance easy.</p>",
        "id": 244031154,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624736758
    },
    {
        "content": "<p>[slack] &lt;John Waczak&gt; Awesome! Hopefully I can help contribute once I'm a little more familiar with the  SciML ecosystem.</p>",
        "id": 244031218,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624736828
    },
    {
        "content": "<p>[slack] &lt;dawbarton&gt; Thanks! That issue describes exactly my problem with auto created variables. I'll keep an eye on that issue</p>",
        "id": 244032151,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624738193
    },
    {
        "content": "<p>[slack] &lt;Anas Abdelrehim&gt; I'm in the process of updating the docstrings for SDEs, and I came across this description for the for LambdaEM:<br>\n\"A modified Euler-Heun method with adaptive time stepping with an error estimator <strong>based on Lamba due to Rackauckas</strong>\" @chrisrackauckas am I reading this right <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 244041439,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624752744
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes it's a partial LambaEM</p>",
        "id": 244041524,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624752907
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes it's Lamba's error estimate mixed with the RSwM scheme</p>",
        "id": 244041535,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624752938
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; Anyone else getting the <code>ERROR: LoadError: LoadError: UndefVarError: AllObserved not defined\nStacktrace:</code> error, pointing to <code>SciMLBase\\kCcpg\\src\\solutions\\solution_interface.jl:2</code> ?</p>",
        "id": 244129897,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624879103
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; Can't precompile SciMLBase</p>",
        "id": 244129904,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624879108
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @Datseris <code>]st -m</code>?</p>",
        "id": 244129944,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624879142
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; <code>[0bca4576] SciMLBase v1.13.6</code></p>",
        "id": 244129978,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624879163
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; I just did <code>up</code> now, hoping there isn't any weird package holding it back...</p>",
        "id": 244130001,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624879177
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; force <code>]add SciMLBase@1.14</code>?</p>",
        "id": 244130074,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624879205
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; Hm, that worked. Trying again now!</p>",
        "id": 244130186,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624879287
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; Yeap it works thanks. Well, that was weird.</p>",
        "id": 244130473,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624879448
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; interesting...</p>",
        "id": 244130962,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624879789
    },
    {
        "content": "<p>[slack] &lt;termi-official&gt; Some Ferrite examples will come soon, too. I just could not find the time to finish them.</p>",
        "id": 244133311,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624881334
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; I am trying out Random ODE and I am having an issue with plotting the ensemble summary for a system. It works fine for a scalar RODE and for system of SDEs, but not for a system of RODEs. It is just the example RODE from the docs:</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>  du[1] = 2u[1]*sin(W[1] - W[2])\n  du[2] = -2u[2]*cos(W[1] + W[2])\nend\nu0 = [1.00;1.00]\ntspan = (0.0,5.0)\nprob = RODEProblem(f,u0,tspan)\n\nensembleprob = EnsembleProblem(prob)\nsol = solve(ensembleprob,EnsembleThreads(), dt=0.01, trajectories=1000)\n\nsumm = EnsembleSummary(sol,0:0.01:1)\nplot(summ,labels=\"Middle 95%\")```\nThen I get the following error:\n```MethodError: getindex(::DiffEqArray{Float64, 2, Vector{Vector{Float64}}, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Nothing, Nothing, Nothing, Nothing}, ::Int64, ::Colon) is ambiguous. Candidates:\n  getindex(VA::AbstractVectorOfArray{T, N, A} where A, i::Int64, ::Colon) where {T, N} in RecursiveArrayTools at /Users/rrosa/.julia/packages/RecursiveArrayTools/zewse/src/vector_of_array.jl:107\n  getindex(A::AbstractDiffEqArray{T, N, A} where A, sym, args...) where {T, N} in RecursiveArrayTools at /Users/rrosa/.julia/packages/RecursiveArrayTools/zewse/src/vector_of_array.jl:78\nPossible fix, define\n  getindex(::AbstractDiffEqArray{T, N, A} where A, ::Int64, ::Colon) where {T, N}```\n</code></pre></div>",
        "id": 244134738,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624882271
    },
    {
        "content": "<p>[slack] &lt;skleinbo&gt; I'm solving a <code>JumpProblem</code>with <code>SSAStepper</code> . To limit memory consumption, I specify <code>saveat</code> , yet the solver saves the solution at many more intermediate points too. It steps to the times specified by saveat correctly, but also saves anything in between.</p>",
        "id": 244138642,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624884368
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @Ricardo M. S. Rosa I think that's the same thing from @sharan</p>",
        "id": 244139467,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624884770
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @Ricardo M. S. Rosa the new RecursiveArrayTools v2.14.2 patch should handle this. It should release fairly soon</p>",
        "id": 244139676,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624884907
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; Ok, great. Thanks!</p>",
        "id": 244139720,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624884940
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @yingbo_ma @sharan could you watch this closely today? Since the fix is a patch release most people should be fine, but I assume this won't be the only report to show up. Though we'll see how many people hit a specific indexing dispatch with an update that was live for only a few hours <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> .</p>",
        "id": 244139800,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624884978
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I need to clean out my office so I might not be as responsive.</p>",
        "id": 244139831,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624884997
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @skleinbo you'll want to change <code>save_positions=(false,false)</code> if you want to disable callback saving.</p>",
        "id": 244139864,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624885015
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @isaacsas I'm wondering if you had some opinion on tying the save_positions default to whether <code>saveat</code> is defined. These seems to come up often.</p>",
        "id": 244139927,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624885043
    },
    {
        "content": "<p>[slack] &lt;sharan&gt; @Ricardo M. S. Rosa v2.14.2 patch was just released</p>",
        "id": 244141463,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624885751
    },
    {
        "content": "<p>[slack] &lt;skleinbo&gt; Thanks Chris! Hmm, but I'm not using an explicit callback.</p>\n<div class=\"codehilite\" data-code-language=\"rn\"><pre><span></span><code>    α, S + I --&gt; 2I\n    β, I --&gt; R\n    γ, I --&gt; H\n    δ, H --&gt; D\n    ϵ, H --&gt; R\nend α β γ δ ϵ\n\nN = 10^3\nI0 = 10\nu0 = [N-I0, I0, 0.0, 0.0, 0.0]\npsir = [0.5/365, (1-0.06)/7, 0.01/7, 0.2/14, 0.8/14]\n\ndprob = DiscreteProblem(rn, u0, (0.0, 50.0), psir)\njprob = JumpProblem(rn, dprob, Direct())\n\nsol = solve(jprob, SSAStepper(), saveat=1)\n\nretcode: Default\nInterpolation: Piecewise constant interpolation\nt: 2054-element Vector{Float64}:\n  0.0\n  0.01794525526259428\n  0.022830034676610045\n  0.02873765677176467\n  0.05180247593059502\n  0.09397285189142385\n  0.10458307786641399\n  0.11933798010484165\n  0.20815525943060034\n  0.28504989031106176\n  0.3406760208105898\n  0.3656665498308938\n  0.42021110772567666\n  ⋮\n 43.0\n 44.0\n 45.0\n 46.0```\nI'd expect the solution to be saved at 0:1:50 only.\n</code></pre></div>",
        "id": 244142691,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624886356
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>jprob = JumpProblem(rn, dprob, Direct(), save_positions=(false,false))</code></p>",
        "id": 244143100,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624886544
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the jumps themselves are the callback.</p>",
        "id": 244143114,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624886551
    },
    {
        "content": "<p>[slack] &lt;skleinbo&gt; Oh right <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> Thanks!</p>",
        "id": 244144377,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624887123
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; That makes sense to me if it can be done uniformly across the board (i.e. not just for SSAStepper -- I don't think we'd want the behavior to be too different from the ODE/SDE solvers). Alternatively, I think we need some doc updates or revisions which could perhaps include answers to common questions like this.</p>",
        "id": 244148536,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624888866
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Looking at your code; if you want to solve pure jump problems I'd recommend keeping <code>u0</code> purely integer.</p>",
        "id": 244149387,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624889202
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; Thanks, it is working great now!!!</p>",
        "id": 244154893,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624891292
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; How can I get the summary plot for just one of the variables in the system?</p>",
        "id": 244158723,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624892806
    },
    {
        "content": "<p>[slack] &lt;dawbarton&gt; Partly as a way to learn MTK, I've been trying to write a collocation discretisation (piecewise polynomial) for ODEs to create a <code>NonlinearSystem</code>. I've got it all working following the approach used in <code>runge_kutta_discretize</code> but the compile times are painful. It works pretty well for (say) 10 intervals with 4th order polynomials but when I take it up to 100 intervals (about 800 variables; I'm envisaging using it with highly nonlinear systems) the compile time goes up to about 3 minutes, which seems excessive given how structured the problem is. (The creation of the equations is reasonably fast and <code>structural_simplfy</code> on it is fairly good, it's just the <code>solve</code> .) Are there any good strategies for reducing the compile time down? I started trying to look through <code>MOLFiniteDifference</code> but it wasn't obvious that it was significantly different from my current strategy.</p>",
        "id": 244161052,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624893751
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; I was hoping <code>plot(summ, vars=(0,1))</code>would work, but it doesn’t.</p>",
        "id": 244162012,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624894168
    },
    {
        "content": "<p>[slack] &lt;skleinbo&gt; Good point!</p>",
        "id": 244203293,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624913682
    },
    {
        "content": "<p>[slack] &lt;Cristiano Ricci&gt; I'll stay tuned</p>",
        "id": 244208804,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624916856
    },
    {
        "content": "<p>[slack] &lt;Clement Lee&gt; Is there a simple way to simulate a function of a <code>NoiseProcess</code>? I.e. given Wiener Process $W_t$, I just want to simulate $f(W_t)$. (I know I can simulate $W_t$ and apply the function to the solution, but this seems like a hack)</p>",
        "id": 244215146,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624921184
    },
    {
        "content": "<p>[slack] &lt;Clement Lee&gt; I figure something of the sort must be happening for <code>plot_analytic=true</code> when plotting a solution to an <code>SDEPProblem</code></p>",
        "id": 244215810,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624921641
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; What about just broadcasting <code>f</code> on the solution?</p>",
        "id": 244219992,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624925763
    },
    {
        "content": "<p>[slack] &lt;Clement Lee&gt; that works, thanks! just wanted to make sure there wasn’t a “more elegant” way I was passing over</p>",
        "id": 244228762,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624936231
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Could I get some timings on the following (in thread), with multithreading turned on?</p>",
        "id": 244265598,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624966057
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; ```using ModelingToolkit, OrdinaryDiffEq</p>\n<p>@variables t y₁(t) y₂(t) y₃(t)<br>\n@parameters k₁ k₂ k₃<br>\nD = Differential(t)<br>\neqs = [D(y₁) ~ -k₁<em>y₁+k₃</em>y₂*y₃<br>\n       D(y₂) ~  k₁<em>y₁-k₂</em>y₂^2-k₃<em>y₂</em>y₃<br>\n       D(y₃) ~  k₂*y₂^2]</p>\n<p>sys = ODESystem(eqs, t)<br>\nprob = ODEProblem(sys,[y₁=&gt;1f0,y₂=&gt;0f0,y₃=&gt;0f0],(0f0,500f0),<br>\n                      [k₁=&gt;4f-2,k₂=&gt;3f7,k₃=&gt;1f4],jac=true)</p>\n<p>N = 1000<br>\ny₁s = rand(Float32,N)<br>\ny₂s = 1f-4 .* rand(Float32,N)<br>\ny₃s = rand(Float32,N)</p>\n<p>function prob_func(prob,i,repeat)<br>\n    remake(prob,p=[y₁s[i],y₂s[i],y₃s[i]])<br>\nend</p>\n<p>monteprob = EnsembleProblem(prob, prob_func = prob_func)</p>\n<p>solve(monteprob,Rodas5(),EnsembleThreads(),trajectories=1000)</p>\n<p>@time solve(monteprob,Rodas5(),EnsembleThreads(),trajectories=1000)</p>\n<p><a href=\"https://github.com/JuliaLang/julia/issues/0\">#0</a>.088638 seconds (1.51 M allocations: 125.064 MiB)<br>\n<a href=\"https://github.com/JuliaLang/julia/issues/0\">#0</a>.088388 seconds (1.51 M allocations: 125.067 MiB)<br>\n<a href=\"https://github.com/JuliaLang/julia/issues/0\">#0</a>.089982 seconds (1.51 M allocations: 125.064 MiB)</p>\n<p>solve(monteprob,RadauIIA5(),EnsembleThreads(),trajectories=1000)</p>\n<p>@time solve(monteprob,RadauIIA5(),EnsembleThreads(),trajectories=1000)</p>\n<p><a href=\"https://github.com/JuliaLang/julia/issues/0\">#0</a>.084923 seconds (1.45 M allocations: 123.207 MiB)<br>\n<a href=\"https://github.com/JuliaLang/julia/issues/0\">#0</a>.087754 seconds (1.45 M allocations: 123.207 MiB)<br>\n<a href=\"https://github.com/JuliaLang/julia/issues/0\">#0</a>.087159 seconds (1.45 M allocations: 123.207 MiB)```</p>",
        "id": 244265602,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624966061
    },
    {
        "content": "<p>[slack] &lt;Gabriel Baraldi&gt; ```@time solve(monteprob,Rodas5(),EnsembleThreads(),trajectories=1000)<br>\n  0.290155 seconds (1.83 M allocations: 145.314 MiB, 19.05% gc time)</p>\n<p>0.244627 seconds (1.83 M allocations: 145.314 MiB)</p>\n<p>0.263999 seconds (1.83 M allocations: 145.310 MiB)</p>\n<p>@time solve(monteprob,RadauIIA5(),EnsembleThreads(),trajectories=1000)<br>\n  0.226405 seconds (1.70 M allocations: 140.530 MiB)<br>\n  0.207470 seconds (1.70 M allocations: 140.530 MiB)<br>\n  0.204621 seconds (1.70 M allocations: 140.530 MiB)</p>\n<p>julia&gt; versioninfo()<br>\nJulia Version 1.6.1<br>\nCommit 6aaedecc44 (2021-04-23 05:59 UTC)<br>\nPlatform Info:<br>\n  OS: macOS (x86_64-apple-darwin18.7.0)<br>\n  CPU: Apple M1<br>\n  WORD_SIZE: 64<br>\n  LIBM: libopenlibm<br>\n  LLVM: libLLVM-11.0.1 (ORCJIT, westmere)<br>\nEnvironment:<br>\n  JULIA_NUM_THREADS = 4<br>\n  JULIA_EDITOR = code```</p>",
        "id": 244267234,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624967155
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Wild. Am I the outlier? @elrodc</p>",
        "id": 244267497,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624967300
    },
    {
        "content": "<p>[slack] &lt;hexaeder&gt; ```julia&gt; @time solve(monteprob,Rodas5(),EnsembleThreads(),trajectories=1000);</p>\n<h1>0.241770 seconds (1.83 M allocations: 145.459 MiB)</h1>\n<h1>0.205763 seconds (1.83 M allocations: 145.459 MiB)</h1>\n<h1>0.230574 seconds (1.83 M allocations: 145.459 MiB)```</h1>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"c\"># 0.200740 seconds (1.70 M allocations: 140.708 MiB)</span>\n<span class=\"c\"># 0.208498 seconds (1.70 M allocations: 140.708 MiB)</span>\n<span class=\"c\"># 0.208204 seconds (1.70 M allocations: 140.708 MiB)```</span>\n<span class=\"n\">on</span>\n<span class=\"sb\">```Julia Version 1.6.1</span>\n<span class=\"sb\">Commit 6aaedecc44 (2021-04-23 05:59 UTC)</span>\n<span class=\"sb\">Platform Info:</span>\n<span class=\"sb\">  OS: macOS (x86_64-apple-darwin18.7.0)</span>\n<span class=\"sb\">  CPU: Apple M1</span>\n<span class=\"sb\">  WORD_SIZE: 64</span>\n<span class=\"sb\">  LIBM: libopenlibm</span>\n<span class=\"sb\">  LLVM: libLLVM-11.0.1 (ORCJIT, westmere)```</span>\n<span class=\"n\">well</span> <span class=\"n\">kinda</span> <span class=\"n\">the</span> <span class=\"n\">same</span> <span class=\"n\">data</span> <span class=\"n\">as</span> <span class=\"n\">Gabriels</span> <span class=\"n\">but</span> <span class=\"n\">since</span> <span class=\"n\">i’ve</span> <span class=\"n\">allready</span> <span class=\"n\">started</span> <span class=\"n\">the</span> <span class=\"n\">timings…</span>\n</code></pre></div>",
        "id": 244267601,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624967389
    },
    {
        "content": "<p>[slack] &lt;Gabriel Baraldi&gt; I wanted to try on native but it didn’t work. Some blas thing with 1.8</p>",
        "id": 244268360,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624967822
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; ```solve(monteprob,Rodas5(),EnsembleThreads(),trajectories=1000)<br>\n@time solve(monteprob,Rodas5(),EnsembleThreads(),trajectories=1000)</p>\n<h1>0.308122 seconds (1.81 M allocations: 144.661 MiB)</h1>\n<h1>0.341812 seconds (1.82 M allocations: 145.316 MiB)</h1>\n<h1>0.336665 seconds (1.82 M allocations: 145.317 MiB)</h1>\n<p>solve(monteprob,RadauIIA5(),EnsembleThreads(),trajectories=1000)<br>\n@time solve(monteprob,RadauIIA5(),EnsembleThreads(),trajectories=1000)</p>\n<h1>0.223360 seconds (1.68 M allocations: 139.685 MiB)</h1>\n<h1>0.244967 seconds (1.69 M allocations: 140.458 MiB)</h1>\n<h1>0.257136 seconds (1.69 M allocations: 140.455 MiB)</h1>\n<p>Julia Version 1.6.1<br>\nCommit 6aaedecc44 (2021-04-23 05:59 UTC)<br>\nPlatform Info:<br>\n  OS: Linux (x86_64-pc-linux-gnu)<br>\n  CPU: AMD Ryzen 7 PRO 4750U with Radeon Graphics<br>\n  WORD_SIZE: 64<br>\n  LIBM: libopenlibm<br>\n  LLVM: libLLVM-11.0.1 (ORCJIT, znver2)<br>\nEnvironment:<br>\n  JULIA_NUM_THREADS = 16<br>\n  JULIA_EDITOR = atom  -a```<br>\n@chrisrackauckas on what CPU did you run the simulations ?</p>",
        "id": 244268918,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624968123
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh haha. How about with <code>safetycopy=false</code>?</p>",
        "id": 244269780,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624968513
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; ```using ModelingToolkit, OrdinaryDiffEq</p>\n<p>@variables t y₁(t) y₂(t) y₃(t)<br>\n@parameters k₁ k₂ k₃<br>\nD = Differential(t)<br>\neqs = [D(y₁) ~ -k₁<em>y₁+k₃</em>y₂*y₃<br>\n       D(y₂) ~  k₁<em>y₁-k₂</em>y₂^2-k₃<em>y₂</em>y₃<br>\n       D(y₃) ~  k₂*y₂^2]</p>\n<p>sys = ODESystem(eqs, t)<br>\nprob = ODEProblem(sys,[y₁=&gt;1f0,y₂=&gt;0f0,y₃=&gt;0f0],(0f0,500f0),<br>\n                      [k₁=&gt;4f-2,k₂=&gt;3f7,k₃=&gt;1f4],jac=true)</p>\n<p>N = 1000<br>\ny₁s = rand(Float32,N)<br>\ny₂s = 1f-4 .* rand(Float32,N)<br>\ny₃s = rand(Float32,N)</p>\n<p>function prob_func(prob,i,repeat)<br>\n    remake(prob,p=[y₁s[i],y₂s[i],y₃s[i]])<br>\nend</p>\n<p>monteprob = EnsembleProblem(prob, prob_func = prob_func, safetycopy = false)</p>\n<p>solve(monteprob,Rodas5(),EnsembleThreads(),trajectories=1000)</p>\n<p>@time solve(monteprob,Rodas5(),EnsembleThreads(),trajectories=1000)</p>\n<p><a href=\"https://github.com/JuliaLang/julia/issues/0\">#0</a>.088638 seconds (1.51 M allocations: 125.064 MiB)<br>\n<a href=\"https://github.com/JuliaLang/julia/issues/0\">#0</a>.088388 seconds (1.51 M allocations: 125.067 MiB)<br>\n<a href=\"https://github.com/JuliaLang/julia/issues/0\">#0</a>.089982 seconds (1.51 M allocations: 125.064 MiB)</p>\n<p>solve(monteprob,RadauIIA5(),EnsembleThreads(),trajectories=1000)</p>\n<p>@time solve(monteprob,RadauIIA5(),EnsembleThreads(),trajectories=1000)</p>\n<p><a href=\"https://github.com/JuliaLang/julia/issues/0\">#0</a>.084923 seconds (1.45 M allocations: 123.207 MiB)<br>\n<a href=\"https://github.com/JuliaLang/julia/issues/0\">#0</a>.087754 seconds (1.45 M allocations: 123.207 MiB)<br>\n<a href=\"https://github.com/JuliaLang/julia/issues/0\">#0</a>.087159 seconds (1.45 M allocations: 123.207 MiB)```</p>",
        "id": 244269785,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624968515
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; ```solve(monteprob,Rodas5(),EnsembleThreads(),trajectories=1000)<br>\n@time solve(monteprob,Rodas5(),EnsembleThreads(),trajectories=1000)</p>\n<h1>0.286984 seconds (579.92 k allocations: 39.468 MiB)</h1>\n<h1>0.298308 seconds (580.01 k allocations: 39.474 MiB)</h1>\n<h1>0.322972 seconds (586.44 k allocations: 40.250 MiB)</h1>\n<p>solve(monteprob,RadauIIA5(),EnsembleThreads(),trajectories=1000)<br>\n@time solve(monteprob,RadauIIA5(),EnsembleThreads(),trajectories=1000)</p>\n<h1>0.245401 seconds (456.89 k allocations: 35.456 MiB)</h1>\n<h1>0.226091 seconds (456.91 k allocations: 35.456 MiB)</h1>\n<h1>0.226375 seconds (456.94 k allocations: 35.457 MiB)```</h1>",
        "id": 244269978,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624968627
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @lungd is that with safetycopy=false?</p>",
        "id": 244270014,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624968648
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; yes</p>",
        "id": 244270026,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624968655
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what was your <code>Threads.nthreads()</code>?</p>",
        "id": 244270074,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624968682
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; 16</p>",
        "id": 244270086,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624968691
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; wat.</p>",
        "id": 244270093,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624968698
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Can you share what gets hit in your profile?</p>",
        "id": 244270117,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624968714
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; First one:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code>  <span class=\"mf\">0.101398</span> <span class=\"n\">seconds</span> <span class=\"p\">(</span><span class=\"mf\">1.52</span> <span class=\"n\">M</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">125.315</span> <span class=\"n\">MiB</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@time</span> <span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">monteprob</span><span class=\"p\">,</span><span class=\"n\">RadauIIA5</span><span class=\"p\">(),</span><span class=\"n\">EnsembleThreads</span><span class=\"p\">(),</span><span class=\"n\">trajectories</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">);</span>\n  <span class=\"mf\">0.178398</span> <span class=\"n\">seconds</span> <span class=\"p\">(</span><span class=\"mf\">1.46</span> <span class=\"n\">M</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">123.496</span> <span class=\"n\">MiB</span><span class=\"p\">,</span> <span class=\"mf\">45.44</span><span class=\"o\">%</span> <span class=\"n\">gc</span> <span class=\"n\">time</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@time</span> <span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">monteprob</span><span class=\"p\">,</span><span class=\"n\">Rodas5</span><span class=\"p\">(),</span><span class=\"n\">EnsembleThreads</span><span class=\"p\">(),</span><span class=\"n\">trajectories</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">);</span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">monteprob</span><span class=\"p\">,</span><span class=\"n\">RadauIIA5</span><span class=\"p\">(),</span><span class=\"n\">EnsembleThreads</span><span class=\"p\">(),</span><span class=\"n\">trajectories</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">);</span>\n  <span class=\"mf\">0.103894</span> <span class=\"n\">seconds</span> <span class=\"p\">(</span><span class=\"mf\">1.52</span> <span class=\"n\">M</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">125.315</span> <span class=\"n\">MiB</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@time</span> <span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">monteprob</span><span class=\"p\">,</span><span class=\"n\">RadauIIA5</span><span class=\"p\">(),</span><span class=\"n\">EnsembleThreads</span><span class=\"p\">(),</span><span class=\"n\">trajectories</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">);</span>\n  <span class=\"mf\">0.099560</span> <span class=\"n\">seconds</span> <span class=\"p\">(</span><span class=\"mf\">1.46</span> <span class=\"n\">M</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">123.496</span> <span class=\"n\">MiB</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@time</span> <span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">monteprob</span><span class=\"p\">,</span><span class=\"n\">Rodas5</span><span class=\"p\">(),</span><span class=\"n\">EnsembleSerial</span><span class=\"p\">(),</span><span class=\"n\">trajectories</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">);</span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">monteprob</span><span class=\"p\">,</span><span class=\"n\">RadauIIA5</span><span class=\"p\">(),</span><span class=\"n\">EnsembleThreads</span><span class=\"p\">(),</span><span class=\"n\">trajectories</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">);</span>\n  <span class=\"mf\">0.346009</span> <span class=\"n\">seconds</span> <span class=\"p\">(</span><span class=\"mf\">1.52</span> <span class=\"n\">M</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">125.328</span> <span class=\"n\">MiB</span><span class=\"p\">,</span> <span class=\"mf\">20.24</span><span class=\"o\">%</span> <span class=\"n\">gc</span> <span class=\"n\">time</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@time</span> <span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">monteprob</span><span class=\"p\">,</span><span class=\"n\">Rodas5</span><span class=\"p\">(),</span><span class=\"n\">EnsembleSerial</span><span class=\"p\">(),</span><span class=\"n\">trajectories</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">);</span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">monteprob</span><span class=\"p\">,</span><span class=\"n\">RadauIIA5</span><span class=\"p\">(),</span><span class=\"n\">EnsembleThreads</span><span class=\"p\">(),</span><span class=\"n\">trajectories</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">);</span>\n  <span class=\"mf\">0.339486</span> <span class=\"n\">seconds</span> <span class=\"p\">(</span><span class=\"mf\">1.52</span> <span class=\"n\">M</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">125.328</span> <span class=\"n\">MiB</span><span class=\"p\">,</span> <span class=\"mf\">19.47</span><span class=\"o\">%</span> <span class=\"n\">gc</span> <span class=\"n\">time</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@time</span> <span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">monteprob</span><span class=\"p\">,</span><span class=\"n\">RadauIIA5</span><span class=\"p\">(),</span><span class=\"n\">EnsembleSerial</span><span class=\"p\">(),</span><span class=\"n\">trajectories</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">);</span>\n  <span class=\"mf\">0.345758</span> <span class=\"n\">seconds</span> <span class=\"p\">(</span><span class=\"mf\">1.46</span> <span class=\"n\">M</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">123.509</span> <span class=\"n\">MiB</span><span class=\"p\">,</span> <span class=\"mf\">18.30</span><span class=\"o\">%</span> <span class=\"n\">gc</span> <span class=\"n\">time</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@time</span> <span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">monteprob</span><span class=\"p\">,</span><span class=\"n\">RadauIIA5</span><span class=\"p\">(),</span><span class=\"n\">EnsembleSerial</span><span class=\"p\">(),</span><span class=\"n\">trajectories</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">);</span>\n  <span class=\"mf\">0.364516</span> <span class=\"n\">seconds</span> <span class=\"p\">(</span><span class=\"mf\">1.46</span> <span class=\"n\">M</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">123.509</span> <span class=\"n\">MiB</span><span class=\"p\">,</span> <span class=\"mf\">24.55</span><span class=\"o\">%</span> <span class=\"n\">gc</span> <span class=\"n\">time</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">Threads</span><span class=\"o\">.</span><span class=\"n\">nthreads</span><span class=\"p\">()</span>\n<span class=\"mi\">4</span><span class=\"sb\">```</span>\n</code></pre></div>",
        "id": 244270220,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624968751
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; 18 threads is maybe 2x faster than 4:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code>  <span class=\"mf\">0.121129</span> <span class=\"n\">seconds</span> <span class=\"p\">(</span><span class=\"mf\">1.52</span> <span class=\"n\">M</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">125.304</span> <span class=\"n\">MiB</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@time</span> <span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">monteprob</span><span class=\"p\">,</span><span class=\"n\">RadauIIA5</span><span class=\"p\">(),</span><span class=\"n\">EnsembleThreads</span><span class=\"p\">(),</span><span class=\"n\">trajectories</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">);</span>\n  <span class=\"mf\">0.047591</span> <span class=\"n\">seconds</span> <span class=\"p\">(</span><span class=\"mf\">1.46</span> <span class=\"n\">M</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">123.480</span> <span class=\"n\">MiB</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@time</span> <span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">monteprob</span><span class=\"p\">,</span><span class=\"n\">Rodas5</span><span class=\"p\">(),</span><span class=\"n\">EnsembleThreads</span><span class=\"p\">(),</span><span class=\"n\">trajectories</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">);</span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">monteprob</span><span class=\"p\">,</span><span class=\"n\">RadauIIA5</span><span class=\"p\">(),</span><span class=\"n\">EnsembleThreads</span><span class=\"p\">(),</span><span class=\"n\">trajectories</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">);</span>\n  <span class=\"mf\">0.092691</span> <span class=\"n\">seconds</span> <span class=\"p\">(</span><span class=\"mf\">1.52</span> <span class=\"n\">M</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">125.304</span> <span class=\"n\">MiB</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@time</span> <span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">monteprob</span><span class=\"p\">,</span><span class=\"n\">RadauIIA5</span><span class=\"p\">(),</span><span class=\"n\">EnsembleThreads</span><span class=\"p\">(),</span><span class=\"n\">trajectories</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">);</span>\n  <span class=\"mf\">0.047372</span> <span class=\"n\">seconds</span> <span class=\"p\">(</span><span class=\"mf\">1.46</span> <span class=\"n\">M</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">123.480</span> <span class=\"n\">MiB</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@time</span> <span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">monteprob</span><span class=\"p\">,</span><span class=\"n\">Rodas5</span><span class=\"p\">(),</span><span class=\"n\">EnsembleSerial</span><span class=\"p\">(),</span><span class=\"n\">trajectories</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">);</span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">monteprob</span><span class=\"p\">,</span><span class=\"n\">RadauIIA5</span><span class=\"p\">(),</span><span class=\"n\">EnsembleThreads</span><span class=\"p\">(),</span><span class=\"n\">trajectories</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">);</span>\n  <span class=\"mf\">0.283816</span> <span class=\"n\">seconds</span> <span class=\"p\">(</span><span class=\"mf\">1.52</span> <span class=\"n\">M</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">125.303</span> <span class=\"n\">MiB</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@time</span> <span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">monteprob</span><span class=\"p\">,</span><span class=\"n\">Rodas5</span><span class=\"p\">(),</span><span class=\"n\">EnsembleSerial</span><span class=\"p\">(),</span><span class=\"n\">trajectories</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">);</span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">monteprob</span><span class=\"p\">,</span><span class=\"n\">RadauIIA5</span><span class=\"p\">(),</span><span class=\"n\">EnsembleThreads</span><span class=\"p\">(),</span><span class=\"n\">trajectories</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">);</span>\n  <span class=\"mf\">0.556068</span> <span class=\"n\">seconds</span> <span class=\"p\">(</span><span class=\"mf\">1.52</span> <span class=\"n\">M</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">125.303</span> <span class=\"n\">MiB</span><span class=\"p\">,</span> <span class=\"mf\">52.07</span><span class=\"o\">%</span> <span class=\"n\">gc</span> <span class=\"n\">time</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@time</span> <span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">monteprob</span><span class=\"p\">,</span><span class=\"n\">RadauIIA5</span><span class=\"p\">(),</span><span class=\"n\">EnsembleSerial</span><span class=\"p\">(),</span><span class=\"n\">trajectories</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">);</span>\n  <span class=\"mf\">0.335562</span> <span class=\"n\">seconds</span> <span class=\"p\">(</span><span class=\"mf\">1.46</span> <span class=\"n\">M</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">123.478</span> <span class=\"n\">MiB</span><span class=\"p\">,</span> <span class=\"mf\">18.39</span><span class=\"o\">%</span> <span class=\"n\">gc</span> <span class=\"n\">time</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@time</span> <span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">monteprob</span><span class=\"p\">,</span><span class=\"n\">RadauIIA5</span><span class=\"p\">(),</span><span class=\"n\">EnsembleSerial</span><span class=\"p\">(),</span><span class=\"n\">trajectories</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">);</span>\n  <span class=\"mf\">0.358124</span> <span class=\"n\">seconds</span> <span class=\"p\">(</span><span class=\"mf\">1.46</span> <span class=\"n\">M</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">123.478</span> <span class=\"n\">MiB</span><span class=\"p\">,</span> <span class=\"mf\">23.37</span><span class=\"o\">%</span> <span class=\"n\">gc</span> <span class=\"n\">time</span><span class=\"p\">)</span><span class=\"sb\">```</span>\n</code></pre></div>",
        "id": 244270324,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624968811
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; <code>@profview solve(monteprob,RadauIIA5(),EnsembleThreads(),trajectories=1000)</code>: <a href=\"https://files.slack.com/files-pri/T68168MUP-F0277ANPMJL/download/ensemble_prof.jlprof\">https://files.slack.com/files-pri/T68168MUP-F0277ANPMJL/download/ensemble_prof.jlprof</a></p>",
        "id": 244270551,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624968927
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; @chrisrackauckas can you open this file or shall I share some other profiling output (e.g. other tool) ?</p>",
        "id": 244270869,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624969105
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; can you take a picture of the flamegraph and annotate the biggest part?</p>",
        "id": 244270883,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624969122
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; <a href=\"https://files.slack.com/files-pri/T68168MUP-F026PSZRNA0/download/flamegraph.png\">https://files.slack.com/files-pri/T68168MUP-F026PSZRNA0/download/flamegraph.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F026PSZRNA0/download/flamegraph.png\"><img src=\"https://uploads.zulipusercontent.net/5ca3634ea28214ea1fce3fb2bcc25049fa09c98e/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d4630323650535a524e41302f646f776e6c6f61642f666c616d6567726170682e706e67\"></a></div>",
        "id": 244271802,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624969625
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; @chrisrackauckas does this help? do you want me to annotate other boxes?</p>",
        "id": 244271873,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624969676
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what's the block on the bottom right?</p>",
        "id": 244272072,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624969778
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; so okay, most of it is in the linear solve, but the bottom right part is the extra chunk.</p>",
        "id": 244272110,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624969798
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; at the very bottom: <code>task.jl, task_done_hook: line 494</code></p>",
        "id": 244272249,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624969855
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh that's nothing, okay.</p>",
        "id": 244272282,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624969869
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Weird, your profile looks good.</p>",
        "id": 244272290,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624969876
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Maybe set BLAS threads to 1? <code>using LinearAlgebra; Blas.set_num_threads(1)</code> and see if it was a BLAS issue.</p>",
        "id": 244272411,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624969926
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; <a href=\"https://files.slack.com/files-pri/T68168MUP-F026HU6ML91/download/flamegraph_blas1.png\">https://files.slack.com/files-pri/T68168MUP-F026HU6ML91/download/flamegraph_blas1.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F026HU6ML91/download/flamegraph_blas1.png\"><img src=\"https://uploads.zulipusercontent.net/8f7c596bfe16c34f76598102c8251629ff9b1630/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d463032364855364d4c39312f646f776e6c6f61642f666c616d6567726170685f626c6173312e706e67\"></a></div>",
        "id": 244273042,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624970277
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; What's the time with that?</p>",
        "id": 244273119,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624970299
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; I'd say the output looks better now but that's not true for the timing?</p>",
        "id": 244273126,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624970302
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; That looks BLAS bound again.</p>",
        "id": 244273132,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624970304
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; <code> 3.533809 seconds (450.33 k allocations: 34.671 MiB)\n  0.608426 seconds (450.33 k allocations: 34.671 MiB)\n  1.650738 seconds (450.34 k allocations: 34.672 MiB)\n  0.265637 seconds (450.33 k allocations: 34.671 MiB)\n  0.701826 seconds (450.33 k allocations: 34.671 MiB)\n  0.497240 seconds (450.33 k allocations: 34.672 MiB)\n  0.218667 seconds (457.25 k allocations: 35.463 MiB)\n  0.273861 seconds (450.33 k allocations: 34.671 MiB)\n  0.211760 seconds (457.27 k allocations: 35.463 MiB)\n  2.317313 seconds (450.33 k allocations: 34.672 MiB)</code></p>",
        "id": 244273150,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624970322
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; for some calls it took &gt;1 sec</p>",
        "id": 244273194,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624970346
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I don't understand that at all <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span> ... @elrodc help?</p>",
        "id": 244273561,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624970532
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; BLAS 1, @btime: <code>5.188 s (450263 allocations: 34.67 MiB)</code></p>",
        "id": 244273669,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624970583
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; 5 sec ???</p>",
        "id": 244273687,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624970590
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; what is my machine doing?</p>",
        "id": 244273720,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624970612
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yeah dude, your computer is actually just a hamster running on a wheel. Confirmed.</p>",
        "id": 244273731,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624970618
    },
    {
        "content": "<p>&lt;system&gt; file image.png too big to download (1073870 &gt; allowed size: 1000000)</p>",
        "id": 244273753,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624970632
    },
    {
        "content": "<p>[slack] &lt;Gabriel Baraldi&gt; my flamegraph is quite different, for some reason. I dunno if it is the vscode flamegraph viewer acting up</p>",
        "id": 244273754,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624970632
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @Gabriel Baraldi yeah, now try it with safetycopy=false and those deepcopies should go away.</p>",
        "id": 244273850,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624970664
    },
    {
        "content": "<p>[slack] &lt;Gabriel Baraldi&gt; <code>@time solve(monteprob,RadauIIA5(),EnsembleThreads(),trajectories=1000)\n  0.134264 seconds (450.37 k allocations: 34.679 MiB)\n@time solve(monteprob,Rodas5(),EnsembleThreads(),trajectories=1000)\n  0.193620 seconds (581.44 k allocations: 39.485 MiB)</code><br>\nThe timings with safetycopy = false got significantly better</p>",
        "id": 244274282,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624970867
    },
    {
        "content": "<p>[slack] &lt;Gabriel Baraldi&gt; <a href=\"https://files.slack.com/files-pri/T68168MUP-F026323B7V5/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F026323B7V5/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F026323B7V5/download/image.png\"><img src=\"https://uploads.zulipusercontent.net/f4821f0101988ada2dc88a64c82c0fd1e4393c17/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303236333233423756352f646f776e6c6f61642f696d6167652e706e67\"></a></div>",
        "id": 244274410,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624970915
    },
    {
        "content": "<p>[slack] &lt;Gabriel Baraldi&gt; <a href=\"https://files.slack.com/files-pri/T68168MUP-F026324RMGX/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F026324RMGX/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F026324RMGX/download/image.png\"><img src=\"https://uploads.zulipusercontent.net/4f8d916b3b76be0a24225b2dd5b933fcdd49032d/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303236333234524d47582f646f776e6c6f61642f696d6167652e706e67\"></a></div>",
        "id": 244274457,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624970937
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; Can I get an annotated flamegraph with Atom as well?</p>",
        "id": 244274516,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624970973
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; When I use ensemble problem for jump problem, all the simulations turn out the same (but not for sde problem):</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>rn = @reaction_network begin\n    (k1,k2), X &amp;lt;--&amp;gt; Y\nend k1 k2\n\ndprob = DiscreteProblem(rn, [10,10], (0.,10.), [1.,2.])\njprob = JumpProblem(rn, dprob, Direct())\nejprob = EnsembleProblem(jprob,prob_func=(p,i,r)-&amp;gt;p)\njsol = solve(ejprob,SSAStepper(),trajectories=4)\n\nsprob = SDEProblem(rn, [10.,10.], (0.,10.), [1.,2.])\nesprob = EnsembleProblem(sprob,prob_func=(p,i,r)-&amp;gt;p)\nssol = solve(esprob,ImplicitEM(),trajectories=4)\n\nplot(plot(jsol),plot(ssol),size=(900,250))```\ngives the attached picture. Is there something one should do with the jump problem to ensure this is happening?  I tried a simple `prob_func=(p,i,r)-&amp;gt;remake(p)` which didn't work, but couldn't come up with something better :confused: .: https://files.slack.com/files-pri/T68168MUP-F026B1BGRBQ/download/image.png\n</code></pre></div>",
        "id": 244274646,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624971025
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @torkel.loman what version?</p>",
        "id": 244274903,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624971126
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; this should be explicitly handled here: <a href=\"https://github.com/SciML/DiffEqJump.jl/blob/master/src/solve.jl#L40\">https://github.com/SciML/DiffEqJump.jl/blob/master/src/solve.jl#L40</a></p>",
        "id": 244274916,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624971130
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; That seems to be a lot less allocations than we got.</p>",
        "id": 244274969,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624971159
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; <code>[[DifferentialEquations]]\ndeps = [\"BoundaryValueDiffEq\", \"DelayDiffEq\", \"DiffEqBase\", \"DiffEqCallbacks\", \"DiffEqFinancial\", \"DiffEqJump\", \"DiffEqNoiseProcess\", \"DiffEqPhysics\", \"DimensionalPlotRecipes\", \"LinearAlgebra\", \"MultiScaleArrays\", \"OrdinaryDiffEq\", \"ParameterizedFunctions\", \"Random\", \"RecursiveArrayTools\", \"Reexport\", \"SteadyStateDiffEq\", \"StochasticDiffEq\", \"Sundials\"]\ngit-tree-sha1 = \"5166b3ea4fbddcd9eb16a9e10a9bd5bec16e8582\"\nuuid = \"0c46a032-eb83-5123-abaf-570d42b7fbaa\"\nversion = \"6.17.1\"</code></p>",
        "id": 244274992,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624971173
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; which DiffEqJump?</p>",
        "id": 244275070,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624971213
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; <code>[[DiffEqJump]]\ndeps = [\"ArrayInterface\", \"Compat\", \"DataStructures\", \"DiffEqBase\", \"FunctionWrappers\", \"LinearAlgebra\", \"PoissonRandom\", \"Random\", \"RandomNumbers\", \"RecursiveArrayTools\", \"StaticArrays\", \"TreeViews\", \"UnPack\"]\ngit-tree-sha1 = \"210ae4148a9b687680c74d13f415cc190fb2c101\"\nuuid = \"c894b116-72e5-5b58-be3c-e6d8d4ac2b12\"\nversion = \"6.14.2\"</code></p>",
        "id": 244275333,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624971324
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; werid</p>",
        "id": 244275389,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624971357
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; open an issue and I'll look at that today. That should be relatively quick to handle</p>",
        "id": 244275440,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624971369
    },
    {
        "content": "<p>[slack] &lt;Gabriel Baraldi&gt; yeah, I dunno why</p>",
        "id": 244276475,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624971787
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; sample the initial conditions again?</p>",
        "id": 244277333,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624972181
    },
    {
        "content": "<p>[slack] &lt;Gabriel Baraldi&gt; After restarting the REPL</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code>  <span class=\"mf\">0.192813</span> <span class=\"n\">seconds</span> <span class=\"p\">(</span><span class=\"mf\">582.15</span> <span class=\"n\">k</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">39.526</span> <span class=\"n\">MiB</span><span class=\"p\">)</span>\n <span class=\"nd\">@time</span> <span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">monteprob</span><span class=\"p\">,</span><span class=\"n\">RadauIIA5</span><span class=\"p\">(),</span><span class=\"n\">EnsembleThreads</span><span class=\"p\">(),</span><span class=\"n\">trajectories</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n  <span class=\"mf\">0.140052</span> <span class=\"n\">seconds</span> <span class=\"p\">(</span><span class=\"mf\">451.53</span> <span class=\"n\">k</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">34.760</span> <span class=\"n\">MiB</span><span class=\"p\">)</span><span class=\"sb\">```</span>\n</code></pre></div>",
        "id": 244278189,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624972576
    },
    {
        "content": "<p>[slack] &lt;Gabriel Baraldi&gt; with <code>safetycopy = false</code></p>",
        "id": 244278286,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624972618
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh, you're on an M1</p>",
        "id": 244281691,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624973910
    },
    {
        "content": "<p>[slack] &lt;Gabriel Baraldi&gt; on rosetta but yeah</p>",
        "id": 244282138,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624974085
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah the BLAS probably isn't as optimized there</p>",
        "id": 244282262,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624974132
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; after restarting my session I get the following</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@btime</span> <span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">monteprob</span><span class=\"p\">,</span><span class=\"n\">RadauIIA5</span><span class=\"p\">(),</span><span class=\"n\">EnsembleThreads</span><span class=\"p\">(),</span><span class=\"n\">trajectories</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">)</span>\n  <span class=\"mf\">177.223</span> <span class=\"n\">ms</span> <span class=\"p\">(</span><span class=\"mi\">451629</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">34.77</span> <span class=\"n\">MiB</span><span class=\"p\">)</span><span class=\"sb\">```</span>\n</code></pre></div>",
        "id": 244283942,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624974761
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; wowza</p>",
        "id": 244284027,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624974788
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; It performs better with 8 threads instead of 16 on my computer</p>",
        "id": 244284039,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624974793
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; I saw ~ 190 with 16</p>",
        "id": 244284086,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624974810
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah, I think you're hitting threading GC</p>",
        "id": 244284128,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624974828
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; M1 Rosetta will be using nehalem BLAS. No FMA, 128 bit vectors.<br>\nM1 running natively should be 2x faster (FMA).</p>",
        "id": 244284586,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624975016
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 244284596,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624975021
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 244284617,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624975029
    },
    {
        "content": "<p>[slack] &lt;Gabriel Baraldi&gt; Yeah, unfortunately it doesnt run for some reason</p>",
        "id": 244285105,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624975215
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; What problem do you hit?<br>\nEDIT: I have an M1, so I'll try.</p>",
        "id": 244285312,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624975288
    },
    {
        "content": "<p>[slack] &lt;Gabriel Baraldi&gt; ```julia&gt; solve(monteprob,Rodas5(),EnsembleThreads(),trajectories=1000)<br>\nERROR: TaskFailedException</p>\n<div class=\"codehilite\"><pre><span></span><code>nested task error: ┌ Warning: `vendor()` is deprecated, use `BLAS.get_config()` and inspect the output instead\n</code></pre></div>\n\n<p>│   caller = ip:0x0<br>\n└ @ Core :-1<br>\n┌ Warning: <code>vendor()</code> is deprecated, use <code>BLAS.get_config()</code> and inspect the output instead<br>\n│   caller = ip:0x0<br>\n└ @ Core :-1</p>\n<p>signal (11): Segmentation fault: 11<br>\nin expression starting at none:0<br>\nntuple at ./ntuple.jl:0<br>\nAllocations: 147535981 (Pool: 147485170; Big: 50811); GC: 109```</p>",
        "id": 244285824,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624975465
    },
    {
        "content": "<p>[slack] &lt;Gabriel Baraldi&gt; The other time it didnt segfault but it did give a task error</p>",
        "id": 244285863,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624975481
    },
    {
        "content": "<p>[slack] &lt;Gabriel Baraldi&gt; It doesnt segfault with safetycopy = false</p>",
        "id": 244286516,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624975698
    },
    {
        "content": "<p>[slack] &lt;Gabriel Baraldi&gt; ```julia&gt; solve(monteprob,Rodas5(),EnsembleThreads(),trajectories=1000)<br>\nERROR: TaskFailedException</p>\n<div class=\"codehilite\"><pre><span></span><code>nested task error: ┌ Warning: `vendor()` is deprecated, use `BLAS.get_config()` and inspect the output instead\n</code></pre></div>\n\n<p>│   caller = ip:0x0<br>\n└ @ Core :-1<br>\n┌ Warning: <code>vendor()</code> is deprecated, use <code>BLAS.get_config()</code> and inspect the output instead<br>\n│   caller = ip:0x0<br>\n└ @ Core :-1<br>\nMethodError: no method matching generic_lufact!(::Matrix{Float32}, ::Val{true}; check=true)<br>\n    Closest candidates are:<br>\n      generic_lufact!(::StridedMatrix{T}) where T at /Users/gabrielbaraldi/julia/usr/share/julia/stdlib/v1.8/LinearAlgebra/src/lu.jl:143 got unsupported keyword argument \"check\"<br>\n      generic_lufact!(::StridedMatrix{T}, ::Union{LinearAlgebra.NoPivot, LinearAlgebra.RowMaximum}; check) where T at /Users/gabrielbaraldi/julia/usr/share/julia/stdlib/v1.8/LinearAlgebra/src/lu.jl:143```</p>",
        "id": 244286553,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624975715
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; I get segfaults too.<br>\nAlso, defining</p>\n<div class=\"codehilite\" data-code-language=\"const\"><pre><span></span><code>const y₂s = 1f-4 .* rand(Float32,N);\nconst y₃s = rand(Float32,N);\nfunction prob_func(prob,i,repeat)\n  remake(prob,p=[y₁s[i],y₂s[i],y₃s[i]])\nend```\nyields:\n```julia&gt; @time solve(monteprob,Rodas5(),EnsembleSerial(),trajectories=1000);\n  0.044213 seconds (281.04 k allocations: 19.746 MiB)\n\njulia&gt; @time solve(monteprob,Rodas5(),EnsembleSerial(),trajectories=1000);\n  0.044531 seconds (281.04 k allocations: 19.746 MiB)\n\njulia&gt; @time solve(monteprob,RadauIIA5(),EnsembleSerial(),trajectories=1000);\n  0.039327 seconds (220.96 k allocations: 17.874 MiB)\n\njulia&gt; @time solve(monteprob,RadauIIA5(),EnsembleSerial(),trajectories=1000);\n  0.073577 seconds (221.19 k allocations: 17.884 MiB, 47.20% gc time)```\n</code></pre></div>",
        "id": 244291357,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624977377
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; The <code>./ntuple</code> segfaults are common. I also got</p>\n<div class=\"codehilite\" data-code-language=\"signal\"><pre><span></span><code>signal (11): Segmentation fault: 11\nfish: Job 1, '/Users/chriselrod/Documents/l...' terminated by signal SIGBUS (Misaligned address error)```\n</code></pre></div>",
        "id": 244291479,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624977441
    },
    {
        "content": "<p>[slack] &lt;ignace-computing&gt; Hi, does <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a> by chance have a nice tool for balancing (i) the number of realizations with (ii) the discretization error in solving (stochastic) differential equations?<br>\nEdit: In the sense that... it doesn't make sense to have a huge amount of particles when the discretization error is large anyways... and the other way round.<br>\nThanks!</p>",
        "id": 244298903,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624979998
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; not automatically, but that would be interesting to work on.</p>",
        "id": 244299127,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624980076
    },
    {
        "content": "<p>[slack] &lt;ignace-computing&gt; For instance, if one needs an a priori estimate,... if we know the order of the numerical method (in theory), we should, although extrapolating is often very dangerous, be able to extrapolate the required info from a low number of (possibly cheap) experiments... In other words: we should be able to compute the (problem-dependent) constants in expressions like <code>error ~ C* dt^k</code> or <code>error ~ C* sqrt(1/R)</code>. with <code>R</code> the number of realizations.  Obviously we then need two kinds of experiments: (i) w.r.t. the number of realizations, and (ii) w.r.t. the number of time-steps. I guess for this we can partly reuse existing convergence tests?</p>\n<p>Online estimates are probably more involved, and also more interesting.</p>\n<p>Do you have other thoughts?</p>",
        "id": 244301040,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624980780
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Seems it is an issue with using safetycopy when using serial EnsembleProblems with jumps. The copies are somehow causing the seed to reset (and the default when there is a prob_func is to use safety copies).</p>",
        "id": 244319651,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624988691
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; In contrast, when not using <code>prob_func</code> we have the <code>alias_jump</code> solver flag that correctly keeps using the same problem.</p>",
        "id": 244319962,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624988832
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Would it make sense to disable <code>safetycopy</code> for JumpProblems when there is only one thread? (Like how <code>alias_jump</code> works for seeding.) If so, is DiffEqJump the right place to give the <code>EnsembleProblem</code> overload for <code>JumpProblem</code>s? I can PR this if that seems reasonable.</p>",
        "id": 244321659,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624989557
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; (by disable I mean make the default <code>safetycopy=false</code> if there is only one thread.)</p>",
        "id": 244321713,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624989582
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; &gt; Would it make sense to disable <code>safetycopy</code> for JumpProblems when there is only one thread?<br>\nI think for all problems that might make sense.</p>",
        "id": 244321842,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624989619
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; So PR SciMLBase?</p>",
        "id": 244321869,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624989629
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah</p>",
        "id": 244321892,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624989640
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; ok</p>",
        "id": 244321899,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624989642
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Actually, this is a little tricky in the current setup. Users don't decide on threading until calling <code>solve</code>, but that is after <code>safetycopy</code> has been initialized in the problem setup.</p>",
        "id": 244324657,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624990748
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; @chrisrackauckas do you know of a good reference about the complexity of ODE solvers w.r.t to the number of states?</p>",
        "id": 244333952,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624994730
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; O(n^3) because of the liner solve</p>",
        "id": 244334016,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624994762
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I don't know if there's a reference just because it's \"obvious\"</p>",
        "id": 244334068,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624994770
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; lol ok</p>",
        "id": 244334083,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624994780
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; This is for power engineers so it is less obvious</p>",
        "id": 244334134,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624994819
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; but thanks, I think that will allow me to make an argument for the issue with increased N</p>",
        "id": 244334172,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624994839
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I put obvious in quotes because I recognize that it's probably not obvious, but to people in the discipline its probably obvious enough to not publish about <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> . The academic void.</p>",
        "id": 244334308,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624994891
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; I get it, funny enough in the power systems literature no one talks about the issue of computational effort as a function of the number of states, they mostly focus on the need to make \\delta_t really small to capture fast dynamics</p>",
        "id": 244334438,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624994958
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Both are changing. Master has a breaking change to use symbolic arrays, instead of arrays of symbolics, which would make it so that the code is loops instead of expanding to all of the scalar operations</p>",
        "id": 244335491,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624995403
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; O(n^3) is not exactly right. It’s O(n^3) per stiff solver step if the Jacobian doesn’t have a particularly nice pattern.</p>",
        "id": 244338154,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624996645
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yeah, it's dependent on the sparsity pattern or matrix type if that is supplied</p>",
        "id": 244338270,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624996688
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; How the number of states relates to the number of steps required is not clear</p>",
        "id": 244338280,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624996694
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; But it could also be dominated by an O(n^2) part in a lot of cases</p>",
        "id": 244338326,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624996715
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; But no one cares about the details which actually matter for performance <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 244338379,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624996742
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; @chrisrackauckas that is true, and in most applications to power systems dynamics there is “canon” that the best method is the so called Dommel method (also named Numerical Integration Substitution) which uses a trapezoidal rule to solve fast (stiff dynamic models)</p>",
        "id": 244338649,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624996843
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; There is plenty of literature showing that BDF methods are better than that, but the industry rarely uses that family of methods</p>",
        "id": 244338784,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624996910
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; I am trying to understand the pros/cons of the methods</p>",
        "id": 244338857,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1624996926
    },
    {
        "content": "<p>[slack] &lt;Paul Myers&gt; When solving boundary value problems with BoundaryValueDiffEq, is it possible to enforce additional constraints (e.g., mass balances, non-negativity, etc.) on variables in the system beyond just the BCs? In the problem I'm working on, I'm trying to solve a system of ODEs that are derived from a system of reaction-diffusion equations at steady state with mass balances on chemical species (defined by integrals over the solutions) that need to be conserved. I can easily code up a finite difference version with the integral constraints on my own, but would like to have an additional example of using BoundaryValueDiffEq or some other diff eq library if possible.</p>\n<p>Also, are there additional BVP examples beyond the <a href=\"https://diffeq.sciml.ai/stable/tutorials/bvp_example/\">https://diffeq.sciml.ai/stable/tutorials/bvp_example/</a> in the docs?</p>",
        "id": 244348587,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625001197
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; i thnk i am messing up early exiting. i have this as my call to solve <code>solve(prob, TRBDF2(), dtmax=0.5; force_dtmin=true, unstable_check=unstable_check = (dt,u,p,t) -&gt; any(isnan, u))</code><br>\nbut it looks like even after hitting the instability warnings and NaN warnings it keeps trying to solve <a href=\"https://github.com/anandijain/SBMLBioModelsRepository.jl/runs/2946260952#step:5:27813\">https://github.com/anandijain/SBMLBioModelsRepository.jl/runs/2946260952#step:5:27813</a></p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">└</span> <span class=\"err\">@</span> <span class=\"n\">OrdinaryDiffEq</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">OrdinaryDiffEq</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"n\">AoGt</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">solve</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">510</span>\n<span class=\"n\">┌</span> <span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"nb\">NaN</span> <span class=\"n\">dt</span> <span class=\"n\">detected</span><span class=\"o\">.</span> <span class=\"n\">Likely</span> <span class=\"n\">a</span> <span class=\"nb\">NaN</span> <span class=\"n\">value</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">parameters</span><span class=\"p\">,</span> <span class=\"n\">or</span> <span class=\"n\">derivative</span> <span class=\"n\">value</span> <span class=\"n\">caused</span> <span class=\"n\">this</span> <span class=\"n\">outcome</span><span class=\"o\">.</span>\n<span class=\"n\">└</span> <span class=\"err\">@</span> <span class=\"n\">SciMLBase</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">SciMLBase</span><span class=\"o\">/</span><span class=\"n\">kCcpg</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">integrator_interface</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">325</span>\n<span class=\"n\">┌</span> <span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"n\">First</span> <span class=\"k\">function</span> <span class=\"n\">call</span> <span class=\"n\">produced</span> <span class=\"n\">NaNs</span><span class=\"o\">.</span> <span class=\"n\">Exiting</span><span class=\"o\">.</span>\n<span class=\"n\">└</span> <span class=\"err\">@</span> <span class=\"n\">OrdinaryDiffEq</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">OrdinaryDiffEq</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"n\">AoGt</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">initdt</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">81</span><span class=\"sb\">```</span>\n<span class=\"sb\">how do i make diffeq just give up? i read faq and common solver options but it seems to continue trying to solve after giving the warnings</span>\n</code></pre></div>",
        "id": 244349239,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625001491
    },
    {
        "content": "<p>[slack] &lt;dawbarton&gt; Great, thanks! Does that mean we'll be able to use true vector equations rather than the scalarized broadcasts that we get at the moment? Is there an issue or PR I can follow (or help with)?</p>",
        "id": 244351099,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625002492
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yes. The first part of it merged, but it scalarizes at the last possible moment now. We're pushing it further and further back</p>",
        "id": 244370378,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625019068
    },
    {
        "content": "<p>[slack] &lt;Gabriel Birnbaum&gt; Does anyone have any examples of a Julia implementation of a discretized 3-dimensional PDE or a system of PDEs?</p>",
        "id": 244383903,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625036220
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 244384196,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625036462
    },
    {
        "content": "<p>[slack] &lt;Gabriel Birnbaum&gt; <a href=\"https://diffeqflux.sciml.ai/dev/examples/pde_constrained/\">https://diffeqflux.sciml.ai/dev/examples/pde_constrained/</a> an example like this but in higher dimensions would be super helpful for example</p>",
        "id": 244385698,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625037581
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; here's a 3D example: <a href=\"https://github.com/omlins/ParallelStencil.jl/issues/29#issue-926926068\">https://github.com/omlins/ParallelStencil.jl/issues/29#issue-926926068</a></p>",
        "id": 244406576,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625051062
    },
    {
        "content": "<p>[slack] &lt;tshort&gt; @Jose Daniel Lara, it's interesting that you're doing work in the power-systems area. I'm interested in work in this area, too. Do you  mind sharing what types of things you're working on?</p>",
        "id": 244410207,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625053519
    },
    {
        "content": "<p>[slack] &lt;Gabriel Birnbaum&gt; Thanks! Will try to make sense of it. ParallelStencil + DiffEq is quite cool btw! I wasn't aware there was such a thing as <code>@d2_xi</code> Does it basically give the derivative for each discrete x?</p>",
        "id": 244413757,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625055603
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's the spatial derivatives along x using the finite difference stencil</p>",
        "id": 244414840,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625056156
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it is a nifty DSL for that kind of thing.</p>",
        "id": 244414854,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625056161
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; the issue was force_dtmin needs to be false</p>",
        "id": 244424612,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625060341
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; I think you can just write <code>solve(prob, TRBDF2(), dtmax=0.5)</code><br>\nYou are using defaults for <code>force_dtmin</code> and <code>unstable_check</code></p>",
        "id": 244436781,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625065163
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; yeah agreed</p>",
        "id": 244438137,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625065605
    },
    {
        "content": "<p>[slack] &lt;rtsbailo&gt; I am writing code to solve a PDE where the right hand side involves a convolution with a (not small) fixed kernel (the same kernel for all time), and which will require an implicit method. I was hoping to use automatic differentiation, but it seems that the gold standard for performance reasons is using FFTW for the convolution, which gets in the way. Short of defining the derivatives of the convolution myself, which could quickly get messy, is there a performant alternative?</p>",
        "id": 244595540,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625158107
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; autodiff in which way? For the Jacobian?</p>",
        "id": 244595822,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625158265
    },
    {
        "content": "<p>[slack] &lt;rtsbailo&gt; Yes, for the Jacobian</p>",
        "id": 244596535,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625158602
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah that's square. autodiff=false isn't much of a performance difference, like 20%</p>",
        "id": 244596574,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625158629
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; If you're using something like TRBDF2 or QNDF there is almost no difference.</p>",
        "id": 244596607,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625158646
    },
    {
        "content": "<p>[slack] &lt;rtsbailo&gt; I should have specified, the reason for autodiff is not performance per se, is that the implicit problem is rather nasty (because the PDE is rather nasty), so convergence to a solution can be a problem when the Jacobian is approximated.</p>",
        "id": 244596799,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625158736
    },
    {
        "content": "<p>[slack] &lt;rtsbailo&gt; The heuristics seem to be that a Newton iteration takes ~ 4x longer to converge if not using automatic differentiation in this kind of problem, that's why I'm wondering.</p>",
        "id": 244596911,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625158787
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Is it AD vs finite diff?</p>",
        "id": 244599712,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625159998
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; making FFTW work with ForwardDiff is pretty trivial, so I'd just solve that and call it a day then.</p>",
        "id": 244600730,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625160512
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; For ordinary differential equations and boundary value problems is there a way to include a Dirac delta forcing term?</p>",
        "id": 244774584,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625278416
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @gideon.simpson callbacks</p>",
        "id": 244775105,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625279359
    },
    {
        "content": "<p>[slack] &lt;Chaopeng Shen&gt; Is there a function like is_cuda to check if a variable is on gpu?<br>\nI ran a bunch of calculations with some GPU arrays, and I put results in a BandedMatrix. I'm not sure if the output A is on the gpu or not.</p>\n<p>julia&gt; A5<br>\n10-element CuArray{Float32, 1}:<br>\n 4.3199997<br>\n 4.3199997<br>\n 4.3199997<br>\n 4.3199997<br>\n 4.3199997<br>\n 4.3199997<br>\n 4.3199997<br>\n 4.3199997<br>\n 4.3199997<br>\n 4.3199997</p>\n<p>julia&gt; A1 = -(A4.+A5)<br>\n10-element CuArray{Float32, 1}:<br>\n -8.639999<br>\n -8.639999<br>\n -8.639999<br>\n -8.639999<br>\n -8.639999<br>\n -8.639999<br>\n -8.639999<br>\n -8.639999<br>\n -8.639999<br>\n -8.639999<br>\njulia&gt; A = BandedMatrix(0 =&gt; A1, 1 =&gt; A5[1:end-1], -1 =&gt; A4[2:end]) # the sign is different from manual FD. Different from my previous code.<br>\n10×10 BandedMatrix{Float32} with bandwidths (1, 1):<br>\n -8.64   4.32    ⋅      ⋅      ⋅      ⋅      ⋅      ⋅      ⋅      ⋅<br>\n  4.32  -8.64   4.32    ⋅      ⋅      ⋅      ⋅      ⋅      ⋅      ⋅<br>\n   ⋅     4.32  -8.64   4.32    ⋅      ⋅      ⋅      ⋅      ⋅      ⋅<br>\n   ⋅      ⋅     4.32  -8.64   4.32    ⋅      ⋅      ⋅      ⋅      ⋅<br>\n   ⋅      ⋅      ⋅     4.32  -8.64   4.32    ⋅      ⋅      ⋅      ⋅<br>\n   ⋅      ⋅      ⋅      ⋅     4.32  -8.64   4.32    ⋅      ⋅      ⋅<br>\n   ⋅      ⋅      ⋅      ⋅      ⋅     4.32  -8.64   4.32    ⋅      ⋅<br>\n   ⋅      ⋅      ⋅      ⋅      ⋅      ⋅     4.32  -8.64   4.32    ⋅<br>\n   ⋅      ⋅      ⋅      ⋅      ⋅      ⋅      ⋅     4.32  -8.64   4.32<br>\n   ⋅      ⋅      ⋅      ⋅      ⋅      ⋅      ⋅      ⋅     4.32  -8.64</p>",
        "id": 244775848,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625280704
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Hmm, that is a good question. I imagine some of the more seasoned julia folks will have a better answer. I mights start by using something like @code_lowered or the other macros to show the more precise llvm code. Then hopefully you would catch a reference to passing data to the GPU etc.</p>",
        "id": 244776447,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625281760
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Look at <code>fieldnames(typeof(A))</code></p>",
        "id": 244776978,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625282807
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; Again, not sure if I am missing some setting here, or if this is a potential issue for GitHub. When I use <code>saveat=1.</code> to make the solution object be on a predetermined grid, it only seems to work for continuous cases, not jump solutions:</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>rn = @reaction_network begin\n    (p,d), 0 &lt;--&gt; X\nend p d\n\noprob = ODEProblem(rn,[1.],(0.,100.),[10.,1.])\nosol = solve(oprob,Rosenbrock23(),saveat=1.)\n\n\ndprob = DiscreteProblem(rn,[1.],(0.,100.),[10.,1.])\njprob = JumpProblem(rn,dprob,Direct())\njsol = solve(jprob,SSAStepper(),saveat=1.)\n\nprintln(length(osol.t),\"   \",length(jsol.t))```\nthis returns\n```101   2096```\nwhere the `osol` contains the solutions on the grid t = 0,1,2,3,...,100. While the `jsol` do contain those grid points, but also a lot of other grid points inbetween.\n\n(this is with `[0c46a032] DifferentialEquations v6.17.1` )\n</code></pre></div>",
        "id": 244805758,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625319417
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>jprob = JumpProblem(rn,dprob,Direct(),save_positions=(false,false))</code></p>",
        "id": 244805799,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625319475
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; Ahh, makes sense, basically like for callbacks.</p>",
        "id": 244806217,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625319886
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; I do get error though:</p>\n<div class=\"codehilite\" data-code-language=\"methoderror\"><pre><span></span><code>Closest candidates are:\n  JumpSystem(::U, ::Any, ::Vector{T} where T, ::Vector{T} where T, ::Vector{Equation}, ::Symbol, ::Vector{JumpSystem}, ::Dict, ::Any) where U&lt;:RecursiveArrayTools.ArrayPartition at /home/torkelloman/.julia/packages/ModelingToolkit/Mo4gw/src/systems/jumps/jumpsystem.jl:29 got unsupported keyword arguments \"name\", \"systems\", \"save_positions\"\n  JumpSystem(::Any, ::Any, ::Any, ::Any; observed, systems, default_u0, default_p, defaults, name, connection_type) at /home/torkelloman/.julia/packages/ModelingToolkit/Mo4gw/src/systems/jumps/jumpsystem.jl:56 got unsupported keyword argument \"save_positions\"\n\nStacktrace:\n [1] kwerr(::NamedTuple{(:name, :systems, :save_positions), Tuple{Symbol, Vector{Any}, Tuple{Bool, Bool}}}, ::Type, ::RecursiveArrayTools.ArrayPartition{Any, Tuple{Vector{MassActionJump}, Vector{ConstantRateJump}, Vector{VariableRateJump}}}, ::Sym{Real, Base.ImmutableDict{DataType, Any}}, ::Vector{Term{Real, Nothing}}, ::Vector{Sym{Real, Base.ImmutableDict{DataType, Any}}})\n   @ Base ./error.jl:157\n [2] convert(::Type{JumpSystem}, rs::ReactionSystem; name::Symbol, combinatoric_ratelaws::Bool, kwargs::Base.Iterators.Pairs{Symbol, Tuple{Bool, Bool}, Tuple{Symbol}, NamedTuple{(:save_positions,), Tuple{Tuple{Bool, Bool}}}})\n   @ ModelingToolkit ~/.julia/packages/ModelingToolkit/Mo4gw/src/systems/reaction/reactionsystem.jl:501\n [3] JumpProblem(::ReactionSystem, ::DiscreteProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, DiscreteFunction{true, DiscreteFunction{true, SciMLBase.var\"#158#159\", Nothing, Nothing}, Nothing, Vector{Symbol}}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, ::Direct; kwargs::Base.Iterators.Pairs{Symbol, Tuple{Bool, Bool}, Tuple{Symbol}, NamedTuple{(:save_positions,), Tuple{Tuple{Bool, Bool}}}})\n   @ ModelingToolkit ~/.julia/packages/ModelingToolkit/Mo4gw/src/systems/reaction/reactionsystem.jl:533\n [4] top-level scope\n   @ In[10]:11\n [5] eval\n   @ ./boot.jl:360 [inlined]\n [6] include_string(mapexpr::typeof(REPL.softscope), mod::Module, code::String, filename::String)\n   @ Base ./loading.jl:1094```\n</code></pre></div>",
        "id": 244806220,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625319896
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; But I don't get any error in this case, which works fine:</p>\n<div class=\"codehilite\" data-code-language=\"p\"><pre><span></span><code>rate1(u,p,t) = (0.1/1000.0)*u[1]*u[2]\nfunction affect1!(integrator)\n  integrator.u[1] -= 1\n  integrator.u[2] += 1\nend\njump = ConstantRateJump(rate1,affect1!)\n\nrate2(u,p,t) = 0.01u[2]\nfunction affect2!(integrator)\n  integrator.u[2] -= 1\n  integrator.u[3] += 1\nend\njump2 = ConstantRateJump(rate2,affect2!)\n\nprob = DiscreteProblem([999,1,0], (0.0,250.0), p)\njump_prob = JumpProblem(prob, Direct(), jump, jump2,save_positions=(false,false))\nsol = solve(jump_prob, SSAStepper(),saveat=1.)```\n</code></pre></div>",
        "id": 244806309,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625320021
    },
    {
        "content": "<p>[slack] &lt;Chaopeng Shen&gt; julia&gt; fieldnames(typeof(A))<br>\n(:data, :raxis, :l, :u)</p>",
        "id": 244806497,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625320287
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes, so then you checked <code>A.data</code>?</p>",
        "id": 244806594,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625320391
    },
    {
        "content": "<p>[slack] &lt;Chaopeng Shen&gt; julia&gt; <a href=\"http://A.data\">A.data</a><br>\n3×10 Matrix{Float32}:<br>\n  0.0    4.32   4.32   4.32   4.32   4.32   4.32   4.32   4.32   4.32<br>\n -8.64  -8.64  -8.64  -8.64  -8.64  -8.64  -8.64  -8.64  -8.64  -8.64<br>\n  4.32   4.32   4.32   4.32   4.32   4.32   4.32   4.32   4.32   0.0</p>\n<p>julia&gt; typeof(<a href=\"http://A.data\">A.data</a>)<br>\nMatrix{Float32} (alias for Array{Float32, 2})</p>",
        "id": 244806689,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625320507
    },
    {
        "content": "<p>[slack] &lt;Chaopeng Shen&gt; It looks like it's not on the GPU</p>",
        "id": 244806747,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625320515
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah so it's on the CPU</p>",
        "id": 244806750,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625320517
    },
    {
        "content": "<p>[slack] &lt;Chaopeng Shen&gt; so what is the idomatic way of taking some diagonals and create a matrix on the GPU? needed this for solving PDE.</p>",
        "id": 244806756,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625320549
    },
    {
        "content": "<p>[slack] &lt;Chaopeng Shen&gt; or just write the loops.</p>",
        "id": 244806812,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625320613
    },
    {
        "content": "<p>[slack] &lt;Chaopeng Shen&gt; but it will be slow to write loops for GPU code?</p>",
        "id": 244806818,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625320623
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>Tridiagonal</code> should be fine</p>",
        "id": 244806957,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625320688
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I don't know about <a href=\"https://github.com/search?q=BandedMatrices.jl&amp;type=Repositories\">BandedMatrices.jl</a> though</p>",
        "id": 244806959,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625320695
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Just modify the source to be compatible and open a PR to the package to fix its GPU compatibility?</p>",
        "id": 244806962,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625320709
    },
    {
        "content": "<p>[slack] &lt;Chaopeng Shen&gt; another question is if adjoint is defined for copying from CPU to GPU. If it is, I could assemble it in CPU and copy it to GPU (this may only work for the case where the matrix is assembled only once, not every time step)</p>",
        "id": 244807108,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625320866
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it is.</p>",
        "id": 244807120,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625320885
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the adjoint is to just copy in the other direction.</p>",
        "id": 244807130,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625320897
    },
    {
        "content": "<p>[slack] &lt;Chaopeng Shen&gt; actually, it may still be slow because each different parameter value will cause the matrix to be different and will involve back and forth between GPU and CPU.</p>",
        "id": 244807196,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625320965
    },
    {
        "content": "<p>[slack] &lt;Chaopeng Shen&gt; let me look at the BandedMatrix group and see if I can give them some feedbacks. It's going to be difficult for me to fix this for them (just getting started on julia).</p>",
        "id": 244807206,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625320998
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; open an issue. I would presume making BandedMatrix compatible with GPUs is rather straightforward</p>",
        "id": 244807267,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625321083
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Latest ModelingToolkit?</p>",
        "id": 244807651,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625321632
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; <code>5.13.3</code>, maybe as simple as that?</p>",
        "id": 244807717,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625321706
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; I thought we fixed this recently, so I’d suggest updating.</p>",
        "id": 244807975,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625322026
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; But let me know if that doesn’t fix it!</p>",
        "id": 244807983,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625322049
    },
    {
        "content": "<p>[slack] &lt;Chaopeng Shen&gt; So BandedMatrix should be doing scalar operations which GPU don't like. Given a new Julia session, it also triggers a scalar op warning. Do we have any other options regarding assembling matrices on the GPU?</p>\n<p>julia&gt; using BandedMatrices</p>\n<p>julia&gt; using CUDA</p>\n<p>julia&gt; A0 = cu(rand(10))<br>\n10-element CuArray{Float32, 1}:<br>\n 0.9238173<br>\n 0.39963627<br>\n 0.74860376<br>\n 0.5007854<br>\n 0.41714704<br>\n 0.41270784<br>\n 0.36631182<br>\n 0.75199664<br>\n 0.14709264<br>\n 0.17270018</p>\n<p>julia&gt; A = BandedMatrix(0 =&gt; A0)<br>\n┌ Warning: Performing scalar operations on GPU arrays: This is very slow, consider disallowing these operations with <code>allowscalar(false)</code><br>\n└ @ GPUArrays C:\\Users\\cxs1024\\.julia\\packages\\GPUArrays\\Z5nPF\\src\\host\\indexing.jl:64<br>\n10×10 BandedMatrix{Float32} with bandwidths (0, 0):<br>\n 0.923817   ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅<br>\n  ⋅        0.399636   ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅<br>\n  ⋅         ⋅        0.748604   ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅<br>\n  ⋅         ⋅         ⋅        0.500785   ⋅         ⋅         ⋅         ⋅         ⋅         ⋅<br>\n  ⋅         ⋅         ⋅         ⋅        0.417147   ⋅         ⋅         ⋅         ⋅         ⋅<br>\n  ⋅         ⋅         ⋅         ⋅         ⋅        0.412708   ⋅         ⋅         ⋅         ⋅<br>\n  ⋅         ⋅         ⋅         ⋅         ⋅         ⋅        0.366312   ⋅         ⋅         ⋅<br>\n  ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅        0.751997   ⋅         ⋅<br>\n  ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅        0.147093   ⋅<br>\n  ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅        0.1727</p>\n<p>julia&gt; typeof(<a href=\"http://A.data\">A.data</a>)<br>\nMatrix{Float32} (alias for Array{Float32, 2})</p>\n<p>julia&gt; <a href=\"http://A.data\">A.data</a><br>\n1×10 Matrix{Float32}:<br>\n 0.923817  0.399636  0.748604  0.500785  0.417147  0.412708  0.366312  0.751997  0.147093  0.1727</p>",
        "id": 244808115,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625322222
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Set allowscalar to false and track down where it's doing it</p>",
        "id": 244808462,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625322614
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I think it's in the show method</p>",
        "id": 244808464,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625322617
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; The latest requires symbolic arrays to be tagged.</p>",
        "id": 244808471,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625322635
    },
    {
        "content": "<p>[slack] &lt;Chaopeng Shen&gt; julia&gt; A = BandedMatrix(0 =&gt; A0)<br>\nERROR: scalar getindex is disallowed<br>\nStacktrace:<br>\n  [1] error(s::String)<br>\n    @ Base .\\error.jl:33<br>\n  [2] assertscalar(op::String)<br>\n    @ GPUArrays C:\\Users\\cxs1024\\.julia\\packages\\GPUArrays\\Z5nPF\\src\\host\\indexing.jl:62<br>\n  [3] getindex<br>\n    @ C:\\Users\\cxs1024\\.julia\\packages\\GPUArrays\\Z5nPF\\src\\host\\indexing.jl:104 [inlined]<br>\n  [4] iterate<br>\n    @ .\\abstractarray.jl:1096 [inlined]<br>\n  [5] iterate<br>\n    @ .\\abstractarray.jl:1094 [inlined]<br>\n  [6] _unsafe_setindex!(::IndexLinear, ::Matrix{Float32}, ::CuArray{Float32, 1}, ::Int64, ::UnitRange{Int64})<br>\n    @ Base .\\multidimensional.jl:897<br>\n  [7] _setindex!<br>\n    @ .\\multidimensional.jl:887 [inlined]<br>\n  [8] setindex!<br>\n    @ .\\abstractarray.jl:1267 [inlined]<br>\n  [9] (BandedMatrix{Float32, CONTAINER, RAXIS} where {CONTAINER, RAXIS})(kv::Tuple{Pair{Int64, CuArray{Float32, 1}}}, mn::Tuple{Int64, Int64}, lu::Tuple{Int64, Int64})<br>\n    @ BandedMatrices C:\\Users\\cxs1024\\.julia\\packages\\BandedMatrices\\Gbqeq\\src\\banded\\BandedMatrix.jl:254<br>\n [10] BandedMatrix<br>\n    @ C:\\Users\\cxs1024\\.julia\\packages\\BandedMatrices\\Gbqeq\\src\\banded\\BandedMatrix.jl:286 [inlined]<br>\n [11] BandedMatrix(kv::Pair{Int64, CuArray{Float32, 1}})<br>\n    @ BandedMatrices C:\\Users\\cxs1024\\.julia\\packages\\BandedMatrices\\Gbqeq\\src\\banded\\BandedMatrix.jl:295<br>\n [12] top-level scope<br>\n    @ REPL[10]:1<br>\n [13] top-level scope<br>\n    @ C:\\Users\\cxs1024\\.julia\\packages\\CUDA\\3VnCC\\src\\initialization.jl:81</p>",
        "id": 244809531,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625323990
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh it needs the lu overload</p>",
        "id": 244810385,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625324897
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; So I tried two version of the following code for solving -u’’=Dirac(x-x0), with Dirichlet BCs, but it’s just giving me the zero solution:</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    du[1] = u[2]\n    du[2] = 0.\n    du\nend\n\nfunction bc!(res, u, p, t)\n    res[1] = u[1][1];\n    res[2] = u[end][1];\n    res\nend\n\n\ntspan = (0.,1.)\nt0= 0.6\n\nfunction condition(u,t,integrator)\n    t - t0\nend\n\nfunction affect!(integrator)\n    integrator.u[2]=integrator.u[2] - 1.0\n    integrator\nend\n\ncb = ContinuousCallback(condition,affect!)\n# cb = PresetTimeCallback([t0], affect!) also tried this\n\nbvp = BVProblem(green!, bc!, [0.,0.], tspan,callback=cb)\n\nsoln = solve(bvp,GeneralMIRK4(), dt = 0.01);\nplot(soln)```\n</code></pre></div>",
        "id": 244810521,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625325092
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; for bvps it needs shooting, there's an issue on this.</p>",
        "id": 244810863,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625325530
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; Gotcha. Switching methods wroked.  Thanks.  (BTW, this could be a good example to add since that’s such a classical exercise)</p>",
        "id": 244811170,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625325992
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah, that's worth adding to the tutorials</p>",
        "id": 244811248,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625326187
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; saw a discourse post that this was on the to do list a while back, but is the ability to solve for unknown parameters in systems (i.e.,  an eigenvalue problem) implemented or still to come?</p>",
        "id": 244814298,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625331111
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I mean that's DiffEqFlux</p>",
        "id": 244821442,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625341964
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Unless you're talking BVPs</p>",
        "id": 244821445,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625341971
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; BVPs</p>",
        "id": 244824189,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625346301
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah, that still hasn't been done</p>",
        "id": 244824386,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625346549
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; BVPs haven't been touched in awhile</p>",
        "id": 244824389,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625346553
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I'm seeing allocations when benchmarking <code>nonlinear_diffusion!</code> from <code>DiffEqOperators</code> . Is that expected?</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">BenchmarkTools</span><span class=\"o\">.</span><span class=\"n\">Trial</span><span class=\"o\">:</span>\n  <span class=\"n\">memory</span> <span class=\"n\">estimate</span><span class=\"o\">:</span>  <span class=\"mf\">37.34</span> <span class=\"n\">KiB</span>\n  <span class=\"n\">allocs</span> <span class=\"n\">estimate</span><span class=\"o\">:</span>  <span class=\"mi\">526</span>\n  <span class=\"o\">--------------</span>\n  <span class=\"n\">minimum</span> <span class=\"n\">time</span><span class=\"o\">:</span>     <span class=\"mf\">59.024</span> <span class=\"n\">μs</span> <span class=\"p\">(</span><span class=\"mf\">0.00</span><span class=\"o\">%</span> <span class=\"n\">GC</span><span class=\"p\">)</span>\n  <span class=\"n\">median</span> <span class=\"n\">time</span><span class=\"o\">:</span>      <span class=\"mf\">60.739</span> <span class=\"n\">μs</span> <span class=\"p\">(</span><span class=\"mf\">0.00</span><span class=\"o\">%</span> <span class=\"n\">GC</span><span class=\"p\">)</span>\n  <span class=\"n\">mean</span> <span class=\"n\">time</span><span class=\"o\">:</span>        <span class=\"mf\">68.190</span> <span class=\"n\">μs</span> <span class=\"p\">(</span><span class=\"mf\">3.26</span><span class=\"o\">%</span> <span class=\"n\">GC</span><span class=\"p\">)</span>\n  <span class=\"n\">maximum</span> <span class=\"n\">time</span><span class=\"o\">:</span>     <span class=\"mf\">7.830</span> <span class=\"n\">ms</span> <span class=\"p\">(</span><span class=\"mf\">98.37</span><span class=\"o\">%</span> <span class=\"n\">GC</span><span class=\"p\">)</span>\n  <span class=\"o\">--------------</span>\n  <span class=\"n\">samples</span><span class=\"o\">:</span>          <span class=\"mi\">10000</span>\n  <span class=\"n\">evals</span><span class=\"o\">/</span><span class=\"n\">sample</span><span class=\"o\">:</span>     <span class=\"mi\">1</span><span class=\"sb\">```</span>\n</code></pre></div>",
        "id": 244824518,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625346751
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; maybe. @mjsheikh did you finish optimizations on it?</p>",
        "id": 244824525,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625346782
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; This is what I get from my handwritten nonlinear diffusion:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">BenchmarkTools</span><span class=\"o\">.</span><span class=\"n\">Trial</span><span class=\"o\">:</span>\n  <span class=\"n\">memory</span> <span class=\"n\">estimate</span><span class=\"o\">:</span>  <span class=\"mi\">0</span> <span class=\"n\">bytes</span>\n  <span class=\"n\">allocs</span> <span class=\"n\">estimate</span><span class=\"o\">:</span>  <span class=\"mi\">0</span>\n  <span class=\"o\">--------------</span>\n  <span class=\"n\">minimum</span> <span class=\"n\">time</span><span class=\"o\">:</span>     <span class=\"mf\">150.226</span> <span class=\"n\">ns</span> <span class=\"p\">(</span><span class=\"mf\">0.00</span><span class=\"o\">%</span> <span class=\"n\">GC</span><span class=\"p\">)</span>\n  <span class=\"n\">median</span> <span class=\"n\">time</span><span class=\"o\">:</span>      <span class=\"mf\">151.311</span> <span class=\"n\">ns</span> <span class=\"p\">(</span><span class=\"mf\">0.00</span><span class=\"o\">%</span> <span class=\"n\">GC</span><span class=\"p\">)</span>\n  <span class=\"n\">mean</span> <span class=\"n\">time</span><span class=\"o\">:</span>        <span class=\"mf\">160.409</span> <span class=\"n\">ns</span> <span class=\"p\">(</span><span class=\"mf\">0.00</span><span class=\"o\">%</span> <span class=\"n\">GC</span><span class=\"p\">)</span>\n  <span class=\"n\">maximum</span> <span class=\"n\">time</span><span class=\"o\">:</span>     <span class=\"mf\">360.123</span> <span class=\"n\">ns</span> <span class=\"p\">(</span><span class=\"mf\">0.00</span><span class=\"o\">%</span> <span class=\"n\">GC</span><span class=\"p\">)</span>\n  <span class=\"o\">--------------</span>\n  <span class=\"n\">samples</span><span class=\"o\">:</span>          <span class=\"mi\">10000</span>\n  <span class=\"n\">evals</span><span class=\"o\">/</span><span class=\"n\">sample</span><span class=\"o\">:</span>     <span class=\"mi\">811</span><span class=\"sb\">```</span>\n</code></pre></div>",
        "id": 244824534,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625346816
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; So it's slower but allocation free. Not sure what the right trade-off is there...?</p>",
        "id": 244824540,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625346833
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Wait no, it's faster. I misread <code>ns</code> as <code>ms</code> oops...</p>",
        "id": 244824583,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625346864
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I guess I'll stick with my implementation then.</p>",
        "id": 244824590,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625346884
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah open an issue. @mjsheikh needs to optimize it.</p>",
        "id": 244824655,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625346969
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Oh, btw, kind of unrelated to <code>DiffEqOperators</code> , but is there a way to make <code>@avx</code> work with <code>ForwardDiff</code> ?</p>",
        "id": 244825044,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625347621
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I think <code>@turbo</code> would be the one to look at, and @elrodc knows it's something to do.</p>",
        "id": 244825139,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625347802
    },
    {
        "content": "<p>[slack] &lt;mjsheikh&gt; Yes, please open an issue.<br>\nI'll have a look</p>",
        "id": 244845742,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625382642
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; (Updated the various packages, and this works now <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> )</p>",
        "id": 244854122,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625396775
    },
    {
        "content": "<p>[slack] &lt;Gabriel Birnbaum&gt; I am getting an <code>ArgumentError: reducing over an empty collection is not allowed</code> when running <code>discretize</code> on a PDESystem with <code>MOLFiniteDifference</code> . Not sure what I am doing wrong at this point.</p>",
        "id": 244901506,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625469126
    },
    {
        "content": "<p>[slack] &lt;Gabriel Birnbaum&gt; Here is the code for reference. Is this a common error?</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"nd\">@variables</span> <span class=\"n\">A1</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">),</span> <span class=\"n\">A2</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">),</span> <span class=\"n\">A3</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">),</span> <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">)</span>\n<span class=\"n\">Dxx</span> <span class=\"o\">=</span> <span class=\"n\">Differential</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">^</span><span class=\"mi\">2</span>\n<span class=\"n\">Dyy</span> <span class=\"o\">=</span> <span class=\"n\">Differential</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"o\">^</span><span class=\"mi\">2</span>\n<span class=\"n\">Dzz</span> <span class=\"o\">=</span> <span class=\"n\">Differential</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"o\">^</span><span class=\"mi\">2</span>\n<span class=\"n\">Dtt</span> <span class=\"o\">=</span> <span class=\"n\">Differential</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"o\">^</span><span class=\"mi\">2</span>\n<span class=\"n\">Dx</span> <span class=\"o\">=</span> <span class=\"n\">Differential</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">Dy</span> <span class=\"o\">=</span> <span class=\"n\">Differential</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"n\">Dz</span> <span class=\"o\">=</span> <span class=\"n\">Differential</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span>\n<span class=\"n\">Dt</span> <span class=\"o\">=</span> <span class=\"n\">Differential</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n\n<span class=\"c\"># Physics</span>\n<span class=\"n\">μ_0</span> <span class=\"o\">=</span> <span class=\"mf\">1.25663706212e-6</span> <span class=\"c\"># N A⁻²</span>\n<span class=\"n\">ε_0</span> <span class=\"o\">=</span> <span class=\"mf\">8.8541878128e-12</span> <span class=\"c\"># F ms⁻¹</span>\n\n<span class=\"c\"># Helpers</span>\n<span class=\"n\">divergenceA</span> <span class=\"o\">=</span> <span class=\"n\">Dx</span><span class=\"p\">(</span><span class=\"n\">A1</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"n\">Dy</span><span class=\"p\">(</span><span class=\"n\">A2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"n\">Dz</span><span class=\"p\">(</span><span class=\"n\">A3</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">))</span>\n<span class=\"n\">laplacianV</span>  <span class=\"o\">=</span> <span class=\"n\">Dxx</span><span class=\"p\">(</span><span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"n\">Dyy</span><span class=\"p\">(</span><span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"n\">Dzz</span><span class=\"p\">(</span><span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">))</span>\n<span class=\"n\">laplacianA1</span> <span class=\"o\">=</span> <span class=\"n\">Dxx</span><span class=\"p\">(</span><span class=\"n\">A1</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"n\">Dyy</span><span class=\"p\">(</span><span class=\"n\">A1</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"n\">Dzz</span><span class=\"p\">(</span><span class=\"n\">A1</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">))</span>\n<span class=\"n\">laplacianA2</span> <span class=\"o\">=</span> <span class=\"n\">Dxx</span><span class=\"p\">(</span><span class=\"n\">A2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"n\">Dyy</span><span class=\"p\">(</span><span class=\"n\">A2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"n\">Dzz</span><span class=\"p\">(</span><span class=\"n\">A2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">))</span>\n<span class=\"n\">laplacianA3</span> <span class=\"o\">=</span> <span class=\"n\">Dxx</span><span class=\"p\">(</span><span class=\"n\">A3</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"n\">Dyy</span><span class=\"p\">(</span><span class=\"n\">A3</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"n\">Dzz</span><span class=\"p\">(</span><span class=\"n\">A3</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">))</span>\n\n<span class=\"n\">S</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ρ</span><span class=\"o\">/</span><span class=\"n\">ε_0</span><span class=\"p\">,</span> <span class=\"n\">μ_0</span><span class=\"o\">*</span><span class=\"n\">jx</span><span class=\"p\">,</span> <span class=\"n\">μ_0</span><span class=\"o\">*</span><span class=\"n\">jy</span><span class=\"p\">,</span> <span class=\"n\">μ_0</span><span class=\"o\">*</span><span class=\"n\">jz</span><span class=\"p\">]</span>\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">),</span> <span class=\"n\">A1</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">),</span> <span class=\"n\">A2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">),</span> <span class=\"n\">A3</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">)]</span>\n<span class=\"n\">laplacians</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">laplacianV</span><span class=\"p\">,</span> <span class=\"n\">laplacianA1</span><span class=\"p\">,</span> <span class=\"n\">laplacianA2</span><span class=\"p\">,</span> <span class=\"n\">laplacianA3</span><span class=\"p\">]</span>\n\n<span class=\"c\"># Problem setup</span>\n<span class=\"n\">eqs</span> <span class=\"o\">=</span> <span class=\"n\">Dtt</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span> <span class=\"o\">.~</span> <span class=\"p\">(</span><span class=\"n\">S</span> <span class=\"o\">+</span> <span class=\"n\">laplacians</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"p\">(</span><span class=\"n\">μ_0</span><span class=\"o\">*</span><span class=\"n\">ε_0</span><span class=\"p\">)</span>\n\n<span class=\"c\"># Boundary Conditions</span>\n<span class=\"n\">bcs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">Dt</span><span class=\"p\">(</span><span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">))</span> <span class=\"o\">~</span> <span class=\"n\">divergenceA</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">μ_0</span> <span class=\"o\">*</span> <span class=\"n\">ε_0</span><span class=\"p\">),</span> <span class=\"c\"># set this as a condition</span>\n       <span class=\"n\">A1</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"o\">~</span> <span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"o\">*</span><span class=\"nb\">pi</span><span class=\"o\">*</span><span class=\"n\">z</span><span class=\"p\">),</span>\n       <span class=\"n\">A2</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"o\">~</span> <span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"nb\">pi</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">),</span>\n       <span class=\"n\">A3</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"o\">~</span> <span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"nb\">pi</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">),</span>\n       <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"o\">~</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span>\n       <span class=\"n\">A1</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"o\">~</span> <span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">t</span><span class=\"p\">),</span>\n       <span class=\"n\">A2</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"o\">~</span> <span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">t</span><span class=\"p\">),</span>\n       <span class=\"n\">A3</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"o\">~</span> <span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">t</span><span class=\"p\">),</span>\n       <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"o\">~</span> <span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">t</span><span class=\"p\">),</span>\n       <span class=\"n\">A1</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"o\">~</span> <span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n       <span class=\"n\">A2</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"o\">~</span> <span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n       <span class=\"n\">A3</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"o\">~</span> <span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n       <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"o\">~</span> <span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n       <span class=\"n\">A1</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"o\">~</span> <span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">t</span><span class=\"p\">),</span>\n       <span class=\"n\">A2</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"o\">~</span> <span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">t</span><span class=\"p\">),</span>\n       <span class=\"n\">A3</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"o\">~</span> <span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">t</span><span class=\"p\">),</span>\n       <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"o\">~</span> <span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">t</span><span class=\"p\">),</span>\n       <span class=\"n\">A1</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"o\">~</span> <span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n       <span class=\"n\">A2</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"o\">~</span> <span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n       <span class=\"n\">A3</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"o\">~</span> <span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n       <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"o\">~</span> <span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n       <span class=\"n\">A1</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">~</span> <span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">t</span><span class=\"p\">),</span>\n       <span class=\"n\">A2</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">~</span> <span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">t</span><span class=\"p\">),</span>\n       <span class=\"n\">A3</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">~</span> <span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">t</span><span class=\"p\">),</span>\n       <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">~</span> <span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">t</span><span class=\"p\">),</span>\n       <span class=\"n\">A1</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span> <span class=\"o\">~</span> <span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n       <span class=\"n\">A2</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span> <span class=\"o\">~</span> <span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n       <span class=\"n\">A3</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span> <span class=\"o\">~</span> <span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n       <span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span> <span class=\"o\">~</span> <span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)]</span>\n\n<span class=\"c\"># Space and time domains</span>\n<span class=\"n\">domains</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">t</span> <span class=\"o\">∈</span> <span class=\"n\">Interval</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"mf\">1.0</span><span class=\"p\">),</span>\n           <span class=\"n\">x</span> <span class=\"o\">∈</span> <span class=\"n\">Interval</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"mf\">1.0</span><span class=\"p\">),</span>\n           <span class=\"n\">y</span> <span class=\"o\">∈</span> <span class=\"n\">Interval</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"mf\">1.0</span><span class=\"p\">),</span>\n           <span class=\"n\">z</span> <span class=\"o\">∈</span> <span class=\"n\">Interval</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"mf\">1.0</span><span class=\"p\">)]</span>\n\n<span class=\"n\">pde_system</span> <span class=\"o\">=</span> <span class=\"n\">PDESystem</span><span class=\"p\">(</span><span class=\"n\">eqs</span><span class=\"p\">,</span><span class=\"n\">bcs</span><span class=\"p\">,</span><span class=\"n\">domains</span><span class=\"p\">,[</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">],[</span><span class=\"n\">V</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">),</span> <span class=\"n\">A1</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">),</span> <span class=\"n\">A2</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">),</span> <span class=\"n\">A3</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">)],[</span><span class=\"n\">ρ</span><span class=\"o\">=&gt;</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"n\">jx</span><span class=\"o\">=&gt;</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">jy</span><span class=\"o\">=&gt;</span><span class=\"mf\">1.2</span><span class=\"p\">,</span> <span class=\"n\">jz</span><span class=\"o\">=&gt;</span><span class=\"mf\">4.8</span><span class=\"p\">])</span>\n\n<span class=\"c\"># Method of lines discretization</span>\n<span class=\"n\">dx</span><span class=\"p\">,</span> <span class=\"n\">dy</span><span class=\"p\">,</span> <span class=\"n\">dz</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span>\n<span class=\"n\">order</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n<span class=\"n\">discretization</span> <span class=\"o\">=</span> <span class=\"n\">MOLFiniteDifference</span><span class=\"p\">([</span><span class=\"n\">x</span><span class=\"o\">=&gt;</span><span class=\"n\">dx</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=&gt;</span><span class=\"n\">dy</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"o\">=&gt;</span><span class=\"n\">dz</span><span class=\"p\">],</span><span class=\"n\">t</span><span class=\"p\">)</span>\n\n<span class=\"n\">prob</span> <span class=\"o\">=</span> <span class=\"n\">discretize</span><span class=\"p\">(</span><span class=\"n\">pde_system</span><span class=\"p\">,</span><span class=\"n\">discretization</span><span class=\"p\">)</span>\n\n<span class=\"c\"># Solve ODE problem</span>\n<span class=\"n\">sol</span> <span class=\"o\">=</span> <span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">prob</span><span class=\"p\">,</span><span class=\"n\">Tsit5</span><span class=\"p\">(),</span><span class=\"n\">saveat</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">)</span><span class=\"sb\">```</span>\n</code></pre></div>",
        "id": 244901541,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625469177
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; open an issue</p>",
        "id": 244919523,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625481392
    },
    {
        "content": "<p>[slack] &lt;boo850919&gt; Hi,</p>\n<p>Long time ago, I use ModelingToolkit to write the following codes.<br>\n<code>my_var = Variable(Symbol(name))(t)  # name is a string</code><br>\nBut it can’t work in the latest version. Here is the error.<br>\n<code>ERROR: Sym name is not callable. Use @syms name(var1, var2,...) to create it as a callable.</code><br>\nHowever, the number of variables is not fixed, so I can’t set them before running the codes.<br>\nCan anyone help me?</p>",
        "id": 244920504,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625482053
    },
    {
        "content": "<p>[slack] &lt;Troy Rockwood&gt; I have a 2D array of functions and their values generated from a Gaussian Random Field that I would like to do a numerical anti-derivative.  The functions are smooth so I thought giving ODEProblem the interpolate function would do what I want but I'm stuck in \"no method matching\" land:</p>\n<p><code>using Stheno</code><br>\n<code>l = 0.2  # GRF parameter (see table 1)</code><br>\n<code>m = 100  # Number of sensors (see table 1)</code><br>\n<code>initial_condition = 0  # s(0) = 0</code><br>\n<code>train_trajectories = 100  # number of functions with s</code><br>\n<code>x_begin = 0.0</code><br>\n<code>x_end = 1.0</code><br>\n<code>x = range(x_begin, x_end; length=m)</code><br>\n<code>GRF = GP(SEKernel() ∘ ScaleTransform(1/l))</code><br>\n<code>u_train = transpose(rand(GRF(x, 1e-12), train_trajectories))</code><br>\n<code>s_train = similar(u_train)</code><br>\n<code>using Interpolations</code><br>\n<code>using DifferentialEquations</code><br>\n<code>for index in 1:train_trajectories</code><br>\n<code>problem = ODEProblem(interpolate(u_train[index, :]), initial_condition, (x_begin, x_end))</code><br>\n<code>s_train[index] = solve(problem, reltol=1e-9, abstol=1e-9)</code><br>\n<code>end</code></p>\n<p>I'm getting the error: <strong>MethodError: no method matching interpolate(::Vector{Float64})</strong></p>",
        "id": 244939936,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625493937
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; Until <a href=\"https://github.com/SciML/SciMLBase.jl/pull/72\">https://github.com/SciML/SciMLBase.jl/pull/72</a> is figured out, is there a way to run <code>EnsembleProblem</code>s of <code>JumpProblem</code>s, where there's a mid-simulation callback modifying parameter values? (Setting <code>safetycopy=false</code> messes up callbacks which modified paraemter values)</p>",
        "id": 244941466,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625494697
    },
    {
        "content": "<p>[slack] &lt;ignace-computing&gt; Has anyone done Burgers's equation with <code>DifferentialEquations.jl</code> ?</p>",
        "id": 244942286,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625495146
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; <a href=\"https://github.com/SciML/DiffEqOperators.jl/issues/422\">https://github.com/SciML/DiffEqOperators.jl/issues/422</a></p>",
        "id": 244942378,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625495183
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://benchmarks.sciml.ai/html/MOLPDE/burgers_fdm_wpd.html\">https://benchmarks.sciml.ai/html/MOLPDE/burgers_fdm_wpd.html</a></p>",
        "id": 244942955,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625495489
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://benchmarks.sciml.ai/html/MOLPDE/burgers_spectral_wpd.html\">https://benchmarks.sciml.ai/html/MOLPDE/burgers_spectral_wpd.html</a></p>",
        "id": 244943008,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625495518
    },
    {
        "content": "<p>[slack] &lt;ranocha&gt; Using Trixi in space and DifferentialEquations (OrdinaryDiffEq) in time: <a href=\"https://github.com/trixi-framework/Trixi.jl/blob/main/examples/tree_1d_dgsem/elixir_burgers_basic.jl\">https://github.com/trixi-framework/Trixi.jl/blob/main/examples/tree_1d_dgsem/elixir_burgers_basic.jl</a></p>",
        "id": 244943604,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625495790
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/search?q=Quadrature.jl&amp;type=Repositories\">Quadrature.jl</a> makes more sense there?</p>",
        "id": 244945317,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625496736
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; @chrisrackauckas how do you handle the dual tagging in the <code>dualcache</code>? It looks like the cache is initialized with <code>nothing</code> and then at some point it gets the correct tag for the function.</p>\n<p>For reference: <a href=\"https://discourse.julialang.org/t/forwarddiff-caches-usage/64058/2\">https://discourse.julialang.org/t/forwarddiff-caches-usage/64058/2</a></p>",
        "id": 244949350,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625499050
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; answered</p>",
        "id": 244949638,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625499229
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; thanks</p>",
        "id": 244949650,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625499236
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; Does <code>DiffEqBase.dualcache</code> handles the reinterpretation?</p>",
        "id": 244950890,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625499944
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; similar to your suggestions here <a href=\"https://discourse.julialang.org/t/trouble-using-forwarddiff-on-a-function-with-a-cache-vector-and-a-custom-struct/63420/2\">https://discourse.julialang.org/t/trouble-using-forwarddiff-on-a-function-with-a-cache-vector-and-a-custom-struct/63420/2</a></p>",
        "id": 244950979,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625499979
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes it does. If you look at the code that defines it you can see how it does it.</p>",
        "id": 244952369,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625500945
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; yeah, thanks for that. I’ve learned a lot in the past few days looking at the code over the different repos. I am guessing that in SparseDiffTools you avoid reinterpret because you can make the correct tag in advance</p>",
        "id": 244952451,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625501023
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; Do you know much is the penalty for the reinterpret call?</p>",
        "id": 244952515,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625501052
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; there's no penalty</p>",
        "id": 244952603,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625501130
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's just a type change.</p>",
        "id": 244952605,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625501132
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; ok great</p>",
        "id": 244952609,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625501137
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; @chrisrackauckas I don't think that's true. <code>reinterpret</code> does a <code>memcpy</code> under the hood, iirc.</p>",
        "id": 244959780,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625506452
    },
    {
        "content": "<p>[slack] &lt;Chaopeng Shen&gt; I got some reply and was pointed to an old example<br>\n<a href=\"https://github.com/JuliaMatrices/BandedMatrices.jl/issues/238\">https://github.com/JuliaMatrices/BandedMatrices.jl/issues/238</a></p>",
        "id": 244959792,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625506468
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; not if the types are bit compatible</p>",
        "id": 244965295,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625511332
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Hmm. I recall seeing a pretty huge slowdown in my benchmarks when I included a <code>reinterpret</code> call in the step function.</p>",
        "id": 244965692,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625511645
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; were your arrays bit compatible?</p>",
        "id": 244965708,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625511663
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Did you avoid <code>ReinterpretedArray</code>?</p>",
        "id": 244965715,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625511669
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; That could have been it, I'll have to go back and check.</p>",
        "id": 244965922,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625511863
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Also I was probably using <code>ComponentArray</code> or <code>DEDataArray</code> or something.</p>",
        "id": 244965959,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625511906
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; (In the meantime I have made a temporary solution that should work until a solution gets merged)</p>",
        "id": 244966306,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625512211
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Remake the JumpProblem to have the original parameter values in the problem function?</p>",
        "id": 244973726,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625518663
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Or are you changing parameters within a MassActionJump?</p>",
        "id": 244973808,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625518716
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; In which case reset those in the problem function.</p>",
        "id": 244973835,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625518745
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; yes, I am changing parameters in a MassActionJump (mid simulation, using callbacks), and strange things are happening (that is, nothing at all). I'm trying to figure out enough to create a minimal working example right now</p>",
        "id": 244975594,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625520595
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; (but that's probably another issue, simply fetching the initial parameter values of the model with remake works and seems to work without any drawbacks more than 20 extra characters of code or so)</p>",
        "id": 244975701,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625520697
    },
    {
        "content": "<p>[slack] &lt;Troy Rockwood&gt; Yes and no, since this particular ODE is so simple, yes Quadrature would be simpler but I want to use the same structure for a later problem in which the ODE isn't as simple so no, I would prefer to use ODEProblem so that all the steps are the same later when the ODE isn't as simple.</p>",
        "id": 244975799,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625520813
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Did you see <a href=\"https://github.com/SciML/DiffEqJump.jl/issues/185#issuecomment-872342884\">https://github.com/SciML/DiffEqJump.jl/issues/185#issuecomment-872342884</a> someone else was just asking about this recently.</p>",
        "id": 244975892,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625520919
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; Missed that one, yeah, that's probably it (would also make sense why it works on SDE).</p>\n<p>E.g. thus it would make sense that this:</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>rn = @reaction_network begin\n    (p,d), 0 &lt;--&gt; X\nend p d\n\nc(u,t,integrator) = (t==50.)\na!(integrator) = (integrator.p[1] += 10.)    # Changes p1.\ncb = DiscreteCallback(c,a!,save_positions = (false,false))\n\ndprob = DiscreteProblem(rn,[1],(0.,100.),[1.,0.1])\njprob = JumpProblem(rn,dprob,Direct())\njsol = solve(jprob,SSAStepper(),callback=cb)\n\nplot(jsol)```\ndo not work?\n</code></pre></div>",
        "id": 244976309,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625521332
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; MassAcrionJumps currently store their own copy of (scaled) reaction rates, so don’t see changes to integrator.p. They need to be updated directly. We need to add a mechanism to make this easy to do, but my comment explains how to do it right now.</p>",
        "id": 244976552,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625521574
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; OK, yes, I think I understand what is going on now. Yes, that seems like an easy modification (in my code, for the specific case)</p>",
        "id": 244976824,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625521837
    },
    {
        "content": "<p>[slack] &lt;Troy Rockwood&gt; I'm getting closer I think with a tip from the #general channel.  Now I'm getting a different error:<br>\n<code>using Dierckx</code><br>\n<code>using DifferentialEquations</code><br>\n<code>interp = Spline1D(x, u_train)</code><br>\n<code>curry(u, p, t) = interp(t)</code><br>\n<code>problem = ODEProblem(curry, initial_condition, (x_begin, x_end))</code><br>\n<code>s_train = solve(problem, reltol=1e-9, abstol=1e-9)</code></p>\n<p><strong>MethodError: Cannot <code>convert</code> an object of type OrdinaryDiffEq.ODECompositeSolution{Float64, 1, Vector{Float64}, Nothing, Nothing, Vector{Float64}, Vector{Vector{Float64}}, ODEProblem{Float64, Tuple{Float64, Float64}, false, SciMLBase.NullParameters, ODEFunction{false, typeof(curry), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SciMLBase.StandardODEProblem}, CompositeAlgorithm{Tuple{Vern9, Rodas5{0, false, DefaultLinSolve, DataType}}, OrdinaryDiffEq.AutoSwitchCache{Vern9, Rodas5{0, false, DefaultLinSolve, DataType}, Rational{Int64}, Int64}}, OrdinaryDiffEq.CompositeInterpolationData{ODEFunction{false, typeof(curry), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Vector{Float64}, Vector{Float64}, Vector{Vector{Float64}}, OrdinaryDiffEq.CompositeCache{Tuple{OrdinaryDiffEq.Vern9ConstantCache{OrdinaryDiffEq.Vern9Tableau{Float64, Float64}}, OrdinaryDiffEq.Rosenbrock5ConstantCache{SciMLBase.TimeDerivativeWrapper{ODEFunction{false, typeof(curry), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Float64, SciMLBase.NullParameters}, SciMLBase.UDerivativeWrapper{ODEFunction{false, typeof(curry), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Float64, SciMLBase.NullParameters}, OrdinaryDiffEq.Rodas5Tableau{Float64, Float64}, Float64, Float64, DefaultLinSolve}}, OrdinaryDiffEq.AutoSwitchCache{Vern9, Rodas5{0, false, DefaultLinSolve, DataType}, Rational{Int64}, Int64}}}, DiffEqBase.DEStats} to an object of type Float64</strong></p>",
        "id": 244980853,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625526865
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah the error isn't in the code you show there though.</p>",
        "id": 244982206,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625528742
    },
    {
        "content": "<p>[slack] &lt;Troy Rockwood&gt; <code>using Stheno</code><br>\n<code>using Plots</code></p>\n<p><code>l = 0.2  # GRF parameter (see table 1)</code><br>\n<code>m = 101  # Number of sensors (see table 1)</code><br>\n<code>initial_condition = 0  # s(0) = 0</code><br>\n<code>train_trajectories = 100  # number of functions with sensor data for training (u's: xm sets)</code><br>\n<code>test_trajectories = 1000  # number of functions with sensor data for testing (u's: xm sets)</code><br>\n<code>locations = 100  # number of output function locations (y's)</code></p>\n<p><code>x_begin = 0.0</code><br>\n<code>x_end = 1.0</code><br>\n<code>x = range(x_begin, x_end; length=m)</code><br>\n<code>GRF = GP(SEKernel() ∘ ScaleTransform(1/l))</code><br>\n<code>u_train = transpose(rand(GRF(x, 1e-12), train_trajectories))</code><br>\n<code>s_train = similar(u_train)</code><br>\n<code>y_train = Array{Float64}(undef, train_trajectories, locations)</code></p>\n<p><code>u_test = transpose(rand(GRF(x, 1e-12), test_trajectories))</code><br>\n<code>s_test = similar(u_test)</code><br>\n<code>y_test = Array{Float64}(undef, test_trajectories, locations)</code></p>\n<p><code>using Dierckx</code><br>\n<code>using DifferentialEquations</code><br>\n<code>for index in 1:train_trajectories</code><br>\n<code>interp = Spline1D(x, u_train[index, :], k=3)  # Cubic spline interpolation</code><br>\n<code>curry(u, p, t) = interp(t)  # our differential equation only depends on one variable</code><br>\n<code>problem = ODEProblem(curry, initial_condition, (x_begin, x_end))</code><br>\n<code>s_train[index] = solve(problem, reltol=1e-9, abstol=1e-9)</code><br>\n<code>y_train[index] = interp(rand(locations))</code><br>\n<code>end</code></p>",
        "id": 244985712,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625533815
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>interp(rand(locations))</code></p>",
        "id": 244986276,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625534702
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it said that's undefined I think</p>",
        "id": 244986281,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625534705
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; because the interpolation is only defined on scalars</p>",
        "id": 244986286,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625534711
    },
    {
        "content": "<p>[slack] &lt;Troy Rockwood&gt; I'm getting the error on line 31: <strong>MethodError: Cannot <code>convert</code> an object of type OrdinaryDiffEq.ODECompositeSolution{Float64, 1, Vector{Float64}, Nothing, Nothing, Vector{Float64}, Vector{Vector{Float64}}, ODEProblem{Float64, Tuple{Float64, Float64}, false, SciMLBase.NullParameters, ODEFunction{false, typeof(curry), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SciMLBase.StandardODEProblem}, CompositeAlgorithm{Tuple{Vern9, Rodas5{0, false, DefaultLinSolve, DataType}}, OrdinaryDiffEq.AutoSwitchCache{Vern9, Rodas5{0, false, DefaultLinSolve, DataType}, Rational{Int64}, Int64}}, OrdinaryDiffEq.CompositeInterpolationData{ODEFunction{false, typeof(curry), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Vector{Float64}, Vector{Float64}, Vector{Vector{Float64}}, OrdinaryDiffEq.CompositeCache{Tuple{OrdinaryDiffEq.Vern9ConstantCache{OrdinaryDiffEq.Vern9Tableau{Float64, Float64}}, OrdinaryDiffEq.Rosenbrock5ConstantCache{SciMLBase.TimeDerivativeWrapper{ODEFunction{false, typeof(curry), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Float64, SciMLBase.NullParameters}, SciMLBase.UDerivativeWrapper{ODEFunction{false, typeof(curry), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Float64, SciMLBase.NullParameters}, OrdinaryDiffEq.Rodas5Tableau{Float64, Float64}, Float64, Float64, DefaultLinSolve}}, OrdinaryDiffEq.AutoSwitchCache{Vern9, Rodas5{0, false, DefaultLinSolve, DataType}, Rational{Int64}, Int64}}}, DiffEqBase.DEStats} to an object of type Float64</strong><br>\n<strong>Closest candidates are:</strong><br>\n<strong>convert(::Type{T}, !Matched::VectorizationBase.AbstractSIMD) where T&lt;:Union{Bool, Float32, Float64, Int16, Int32, Int64, Int8, UInt16, UInt32, UInt64, UInt8, VectorizationBase.Bit} at /home/troyrock/.julia/packages/VectorizationBase/2vKLL/src/base_defs.jl:151</strong><br>\n<strong>convert(::Type{T}, !Matched::Static.StaticFloat64{N}) where {N, T&lt;:AbstractFloat} at /home/troyrock/.julia/packages/Static/wlEMx/src/float.jl:26</strong><br>\n<strong>convert(::Type{T}, !Matched::LLVM.GenericValue, !Matched::LLVM.LLVMType) where T&lt;:AbstractFloat at /home/troyrock/.julia/packages/LLVM/srSVa/src/execution.jl:39</strong><br>\n<strong>...</strong><br>\nin eval at &lt;#|base/boot.jl:360&gt;<br>\nin top-level scope at &lt;#|deeponet.jl:31&gt;<br>\nin setindex! at &lt;#|base/array.jl:839&gt;</p>",
        "id": 244986415,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625534846
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>s_train[index] = solve(problem, reltol=1e-9, abstol=1e-9)</code></p>",
        "id": 244986475,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625534897
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the solution isn't a float64</p>",
        "id": 244986480,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625534902
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; so that line doesn't make much sense</p>",
        "id": 244986486,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625534907
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; did you mean [end?</p>",
        "id": 244986488,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625534911
    },
    {
        "content": "<p>[slack] &lt;Troy Rockwood&gt; oh, that's right, I think it should be <code>s_train[:,index] = solve(problem, reltol=1e-9, abstol=1e-9)</code></p>",
        "id": 244986628,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625535067
    },
    {
        "content": "<p>[slack] &lt;Troy Rockwood&gt; Now <strong>DimensionMismatch(\"tried to assign 47-element array to 100×1 destination\").</strong>   What determines the size of vector that solve returns?</p>",
        "id": 244986715,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625535138
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's adaptive</p>",
        "id": 244987594,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625536102
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; use saveat if you want it at fixed points</p>",
        "id": 244987598,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625536113
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; or just store the thing not as an array</p>",
        "id": 244987600,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625536119
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I don't quite get what you're trying to do.</p>",
        "id": 244987601,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625536124
    },
    {
        "content": "<p>[slack] &lt;Troy Rockwood&gt; What I need is to be able to determine the value of the solution at a random point.  I should store the solution object.  Is this the correct way to make an array of solutions?  <code>s_train = Array{DAESolution}(undef, train_trajectories)</code></p>",
        "id": 244988144,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625536796
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; At that point, just do an ~Array{Any}` and make it easy.</p>",
        "id": 244989041,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625537813
    },
    {
        "content": "<p>[slack] &lt;Troy Rockwood&gt; Hurray!  It seems to be working!  Thank you.  I appreciate your patience with me while I learn how to debug in Julia.</p>",
        "id": 244989682,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625538535
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; no problem'</p>",
        "id": 244990183,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625539122
    },
    {
        "content": "<p>[slack] &lt;Anas Abdelrehim&gt; Random question... If someone were to try and scrape all the different differential equation models published in papers from say...2005 until now, and constrained their search to domains relevant to some relevant major industry and ODEs only.. would there actually be that many unique equations? Like maybe even in the 1e5-1e7 range? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 245122046,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625627405
    },
    {
        "content": "<p>[slack] &lt;Anas Abdelrehim&gt; I know the constraints of the space is rather vague, even a super rough estimate would be interesting</p>",
        "id": 245122079,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625627508
    },
    {
        "content": "<p>[slack] &lt;Anas Abdelrehim&gt; Trying to settle a debate <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 245122259,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625627764
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Systems biology alone would have that many models.</p>",
        "id": 245153250,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625650431
    },
    {
        "content": "<p>[slack] &lt;Anas Abdelrehim&gt; Damn... Can the same be said for other domains too.. like the heavy industry and such? Or is Systems Biology uniquely qualified in this case</p>",
        "id": 245157901,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625652967
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Sysbio has a tendency to create lots and lots of models</p>",
        "id": 245157931,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625652986
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Physics less so.</p>",
        "id": 245157933,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625652989
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; chemistry too, for the same reason as sysbio</p>",
        "id": 245157955,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625653005
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; every combination of chemicals is a new system</p>",
        "id": 245157959,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625653018
    },
    {
        "content": "<p>[slack] &lt;rtsbailo&gt; TL;DR - Would it be possible/a good idea to create a \"just the basics\" version of <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a> for installation and compilation speed?</p>\n<p>Long version: I'm preparing to teach some lectures with a numerical analysis component, and I think Julia + <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a> is the way to go, since I care about writing fast code. The one thing that worries me is that the process of installing Julia + <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a> and the first time compilation can be quite slow, which has put off students of mine in the past. This can be a problem specially if the students are encouraged to try other packages, as sometimes this leads to a re-compilation. Given that these students are only going to be solving basic ODEs, no SDEs, no neural networks, no jump conditions... I'm considering whether a \"quick install\" lightweight version of <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a> would be worth pursuing.</p>",
        "id": 245182886,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625665907
    },
    {
        "content": "<p>[slack] &lt;frankschae&gt; Probably,  <a href=\"https://github.com/SciML/SimpleDiffEq.jl\">https://github.com/SciML/SimpleDiffEq.jl</a> is quite close.</p>",
        "id": 245183520,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625666128
    },
    {
        "content": "<p>[slack] &lt;frankschae&gt; (<a href=\"https://diffeq.sciml.ai/latest/solvers/ode_solve/#SimpleDiffEq.jl\">https://diffeq.sciml.ai/latest/solvers/ode_solve/#SimpleDiffEq.jl</a>)</p>",
        "id": 245183780,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625666217
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://diffeq.sciml.ai/stable/features/low_dep/\">https://diffeq.sciml.ai/stable/features/low_dep/</a></p>",
        "id": 245184652,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625666530
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; just using OrdinaryDiffEq satisfies most users</p>",
        "id": 245184669,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625666537
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; SimpleDiffEq's SimpleATsit5 is also fine, but a bit bare if you run into say a stiff problem.</p>",
        "id": 245184698,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625666552
    },
    {
        "content": "<p>[slack] &lt;rtsbailo&gt; Sweet, thank you, I will experiment with compilation time and a few examples!</p>",
        "id": 245186476,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625667283
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; FWIW, I just include OrdinaryDiffEq and maybe DiffEqBase when solving ODES (maybe the latter is not even needed anymore). That is much faster than using the full DifferentialEquations meta-package.</p>",
        "id": 245195837,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625670610
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the latter isn't needed.</p>",
        "id": 245201394,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625672796
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Yeah, at some something needed it for everything through plotting to work (maybe I'm thinking of DiffEqJump, which doesn't seem to reexport it), and I just got in the habit.</p>",
        "id": 245215157,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1625679041
    },
    {
        "content": "<p>Is this bridge down too?</p>",
        "id": 246039077,
        "sender_full_name": "Brenhin Keller",
        "timestamp": 1626309059
    },
    {
        "content": "<p>Looks like that's a yes</p>",
        "id": 246039093,
        "sender_full_name": "Brenhin Keller",
        "timestamp": 1626309074
    },
    {
        "content": "<p>Bridge test</p>",
        "id": 246118811,
        "sender_full_name": "Brenhin Keller",
        "timestamp": 1626366112
    },
    {
        "content": "<p>[slack] &lt;cbkeller&gt; Hooray, it’s back!</p>",
        "id": 246118833,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626366122
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 246118960,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626366164
    },
    {
        "content": "<p>[slack] &lt;Chaopeng Shen&gt; FYI, I don't know this is possible. somewhere I read lapack is not on GPU on julia, so this is probably a no go. I will look at another path: <a href=\"https://files.slack.com/files-pri/T68168MUP-F0287BM40HH/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F0287BM40HH/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F0287BM40HH/download/image.png\"><img src=\"https://uploads.zulipusercontent.net/6e94b35d71077e192a296fb8a302bf7b3561a72f/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d4630323837424d343048482f646f776e6c6f61642f696d6167652e706e67\"></a></div>",
        "id": 246121309,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626367137
    },
    {
        "content": "<p>[slack] &lt;Chaopeng Shen&gt; FYI, I don't know if overloading lapack is possible. somewhere I read lapack is not on GPU on julia, so this is probably a no go. I will look at another path</p>",
        "id": 246121369,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626367162
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Ahh, that does help. Yeah, if you can post the link when you are ready, it would really be appreciated. I think part of my confusion is that you laid out a really nice explanation of the packages in lecture 11 on Tracker and Zygote, and then jump directly into deriving reverse mode rules. I was was like Wow, but the eco-system is so great <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>. But I will definitely watch the video again to catch any additional wisdom <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>.</p>",
        "id": 246121841,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626367376
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; But I think I get what you mean by \"a mixture of performance and stability issues\". Like if the adjoint generated by <code>Zygote</code> is like ill-conditioned or slow to compute or something. So in that sense, it makes sense to write the adjoint yourself. See that is probably one key point that I missed.</p>",
        "id": 246123065,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626367917
    },
    {
        "content": "<p>[slack] &lt;Peter J&gt; Is it possible to access the output of an ODE solver as a iterable? I remember seeing some information on this a while ago, and the answer was \"not yet\".</p>\n<p>The use-case is that I need to fit a lot of very small ODE models. Since I only need the squared error between a function of the solution and my data for each model, it seems like the bottleneck actually is allocating the solution vectors.</p>",
        "id": 246174364,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626397196
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you can use the integrator interface.</p>",
        "id": 246174467,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626397261
    },
    {
        "content": "<p>[slack] &lt;Peter J&gt; <del>won't that still allocate solutions, even if I don't use the output?</del></p>",
        "id": 246174485,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626397288
    },
    {
        "content": "<p>[slack] &lt;Peter J&gt; ah, no it wont</p>",
        "id": 246174543,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626397330
    },
    {
        "content": "<p>[slack] &lt;Peter J&gt; thank you!</p>",
        "id": 246174544,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626397332
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; Is there somewhere a more exhaustive documentation of the integrator interface than <a href=\"https://diffeq.sciml.ai/stable/basics/integrator/\">https://diffeq.sciml.ai/stable/basics/integrator/</a> ? For example I'm looking at this: <a href=\"https://github.com/SciML/OrdinaryDiffEq.jl/pull/1090/files#diff-a721ada310bc38819c4261cbd046828a3abe5add13aa60f970c685a7abc206c5R31-R59\">https://github.com/SciML/OrdinaryDiffEq.jl/pull/1090/files#diff-a721ada310bc38819c4261cbd046828a3abe5add13aa60f970c685a7abc206c5R31-R59</a> and I don't know what <code>fsalfirst</code>, <code>fsallast</code> , <code>k</code>  or <code>kshortsize</code> are.</p>",
        "id": 246220719,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626441245
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; those are not part of the user interface.</p>",
        "id": 246221975,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626441897
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; There is no intention to tell users what those are, since they are internal.</p>",
        "id": 246221998,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626441914
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; is this for dev?</p>",
        "id": 246222020,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626441927
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; Yes, I'm trying to implement a new solver</p>",
        "id": 246222127,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626441967
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; FSAL is first same as last, it's a value copied from last to first in the next step, except with invalidation.</p>",
        "id": 246225409,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626443615
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; have you seen <a href=\"http://devdocs.sciml.ai/latest/contributing/diffeq_internals/\">http://devdocs.sciml.ai/latest/contributing/diffeq_internals/</a> ?</p>",
        "id": 246225456,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626443640
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; Thanks, I didn't see that page</p>",
        "id": 246225548,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626443672
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"http://devdocs.sciml.ai/latest/contributing/adding_algorithms/\">http://devdocs.sciml.ai/latest/contributing/adding_algorithms/</a> is a good source too.</p>",
        "id": 246225788,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626443766
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; OK, I think I see how it's supposed to work. Thanks for links <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 246227300,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626444399
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; @chrisrackauckas do you have any ideas on how to fix? Sorry if anything was unclear and let me know if I can provide any more info <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I haven't tried making a simpler example (i.e. without the graph) but I'll try to do this soon!</p>",
        "id": 246229310,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626445324
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; try simplifying it first</p>",
        "id": 246229383,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626445352
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I'm busy today, and that's what I would do first</p>",
        "id": 246229394,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626445358
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; No worries. I'll try that next! Thanks <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 246229463,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626445388
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; @chrisrackauckas hi! Are you still using Juno? I had issue using Documenter and Atom recently. Thinking about switching</p>",
        "id": 246331387,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626537789
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes, still am about 80% of the time</p>",
        "id": 246331540,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626537987
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but in the middle of switching</p>",
        "id": 246331541,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626537989
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; VS Code still has a few too many issues for me to use it, but it's fine.</p>",
        "id": 246331545,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626537998
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; Can I somehow use my own interpolation algorithm for solving an ODE? Or should I just avoid the builtin interpolation and interpolate the solution separately?</p>",
        "id": 246334608,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626542573
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; OK, I've found it. It seems that adding methods to <code>InterpolationData</code> should be fine.</p>",
        "id": 246388329,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626627941
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yeah, you can add them there to do that.</p>",
        "id": 246402641,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626647680
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I don't think it would make much sense though. What's the purpose? Just for testing?</p>",
        "id": 246402644,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626647688
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Any other interpolation you could build will have higher error or more function evaluations.</p>",
        "id": 246402648,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626647706
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; overloading lapack is possible</p>",
        "id": 246403231,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626648761
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Just change to MKL or whatnot.</p>",
        "id": 246403233,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626648765
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; That's for exponential integrators, I need an interpolation that keeps the solution on manifold, ideally up to machine precision, even if I have a higher tolerance for the integrator itself.</p>",
        "id": 246431689,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626685504
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; BTW, I'm working on exponential integrators that work with the <a href=\"https://github.com/search?q=Manifolds.jl&amp;type=Repositories\">Manifolds.jl</a> ecosystem and I'm figuring out how much needs to be redone. Exponential solvers from <a href=\"https://github.com/search?q=OrdinaryDiffEq.jl&amp;type=Repositories\">OrdinaryDiffEq.jl</a> have way too many assumptions for me.</p>",
        "id": 246431977,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626685710
    },
    {
        "content": "<p>[gitter] &lt;SamuelBrand1&gt; Hi everyone, DiffEqNoiseProcess is chucking an error after latest update. I think its because its not using SciMLBase anymore (possible typo?). I don't know if this is the right forum to mention this... maybe put an issue up on the DiffEqNoiseProcess repo?</p>",
        "id": 246447602,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626697438
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; What's the error?</p>",
        "id": 246447686,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626697486
    },
    {
        "content": "<p>[gitter] &lt;SamuelBrand1&gt; <code>julia&gt; using DiffEqNoiseProcess\n[ Info: Precompiling DiffEqNoiseProcess [77a26b50-5914-5dd7-bc55-306e6241c503]\nERROR: LoadError: LoadError: UndefVarError: SciMLBase not defined\nStacktrace:\n  [1] top-level scope\n    @ ~/.julia/packages/DiffEqNoiseProcess/9NzQP/src/solve.jl:1\n  [2] include(mod::Module, _path::String)\n    @ Base ./Base.jl:386\n  [3] include(x::String)\n    @ DiffEqNoiseProcess ~/.julia/packages/DiffEqNoiseProcess/9NzQP/src/DiffEqNoiseProcess.jl:1\n  [4] top-level scope\n    @ ~/.julia/packages/DiffEqNoiseProcess/9NzQP/src/DiffEqNoiseProcess.jl:23\n  [5] include\n    @ ./Base.jl:386 [inlined]\n  [6] include_package_for_output(pkg::Base.PkgId, input::String, depot_path::Vector{String}, dl_load_path::Vector{String}, load_path::Vector{String}, concrete_deps::Vector{Pair{Base.PkgId, UInt64}}, source::Nothing)\n    @ Base ./loading.jl:1235\n  [7] top-level scope\n    @ none:1\n  [8] eval\n    @ ./boot.jl:360 [inlined]\n  [9] eval(x::Expr)\n    @ Base.MainInclude ./client.jl:446\n [10] top-level scope\n    @ none:1\nin expression starting at /Users/Sam/.julia/packages/DiffEqNoiseProcess/9NzQP/src/solve.jl:1\nin expression starting at /Users/Sam/.julia/packages/DiffEqNoiseProcess/9NzQP/src/DiffEqNoiseProcess.jl:1</code></p>",
        "id": 246447732,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626697523
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; which version?</p>",
        "id": 246447837,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626697597
    },
    {
        "content": "<p>[gitter] &lt;SamuelBrand1&gt; DiffEqNoiseProcess v5.9.0</p>",
        "id": 246447852,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626697621
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Julia v1.6?</p>",
        "id": 246448018,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626697729
    },
    {
        "content": "<p>[gitter] &lt;SamuelBrand1&gt; Yes. I just tried going from v1.6.0 -&gt; v1.6.2</p>",
        "id": 246448055,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626697757
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @samuelbrand1 <a href=\"https://github.com/SciML/DiffEqNoiseProcess.jl/pull/96\">https://github.com/SciML/DiffEqNoiseProcess.jl/pull/96</a></p>",
        "id": 246450077,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626699006
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; master works</p>",
        "id": 246450078,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626699007
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; so can you share what you're doing differently?</p>",
        "id": 246450089,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626699013
    },
    {
        "content": "<p>[gitter] &lt;SamuelBrand1&gt; I'm not sure... it was as simple as <code>pkg&gt; update</code> and since then its been chucking the error. I'll investigate. Thanks for identifying that its on my end.</p>",
        "id": 246451220,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626699687
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; @chrisrackauckas I figured I would check if you had a chance to update the universal differential equations paper as you mentioned. I busted to check the additions to the section in writing custom adjoints. I figure you must be busy with Juliacon starting so I won’t bug you too much ;).</p>",
        "id": 246473693,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626710080
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I didn't put it on Arxiv yet.</p>",
        "id": 246473736,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626710103
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Cool. Can you just ping the channel when you do. I am sure others will be interested too.</p>",
        "id": 246474158,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626710304
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 246478172,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626712236
    },
    {
        "content": "<p>[slack] &lt;iv.borissov&gt; Hi, how can I monitor progress in distributed ensemble simulations using <code>ProgressMeter</code>  bars ? Should I put  the following code into <code>prob_func</code>  ( <a href=\"https://github.com/timholy/ProgressMeter.jl#tips-for-parallel-programming\">https://github.com/timholy/ProgressMeter.jl#tips-for-parallel-programming</a> ) Or can it be achieved with the default <code>progress</code>  argument ?</p>",
        "id": 246582789,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626787317
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; I am looking to optimize some parameters in a model of mine that uses a <code>Rosenbrock</code> solver to leverage a mass matrix. The parameters enter on the rhs of the ODE equations...is it reasonable to expect the step operation to be AD-compliant given the linear solve involved?</p>",
        "id": 246633035,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626807037
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I don't get the question.</p>",
        "id": 246634317,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626807705
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I don't know if any loggers are parallel-compliant, so the first might be better.</p>",
        "id": 246634400,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626807728
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; at a first go using <code>DiffEqFlux</code>, I had an AD warning pop up stating that AD failed, using numerical differentiation. Tried to take the gradient of the loss function directly to debug, and seems to fail on the linear solve part of the perform_step. Have tried different <code>linsolve</code> arguments with the same issue. I am not very knowledgable around AD, so I am wondering if it is possible to use an implicit solver and still be AD-able.</p>",
        "id": 246635088,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626808102
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; I am trying to reduce it down to a smaller MWE to demonstrate</p>",
        "id": 246635104,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626808118
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah an MWE is needed for this.</p>",
        "id": 246635132,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626808135
    },
    {
        "content": "<p>[slack] &lt;Andrew Leonard&gt; so I think I have this sorted, I was using a <code>DiffEqArrayOperator</code> which, while the matrix is constant, is a function of the \"parameter\" and (I am guessing) when that was a dual number, caused the type issues. I was using the operator inside <code>ODEFunction</code> to pass the mass matrix in and get the benefits of automatically setting the jacobian, etc. I am now manually specifying the function, jac, and paramjac args and the MWE seems to be working. sorry for the false alarm.</p>",
        "id": 246650535,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626815206
    },
    {
        "content": "<p>[slack] &lt;iv.borissov&gt; Ok, thanks. I will test <code>ProgressMeter</code></p>",
        "id": 246726911,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626877496
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; hey @chrisrackauckas, I got around to making a simpler example by extending the example in diffeq local sensitivity docs and posted to discourse here: <a href=\"https://discourse.julialang.org/t/zygote-gradients-with-ensemble-odes/65062\">https://discourse.julialang.org/t/zygote-gradients-with-ensemble-odes/65062</a>. If you have time, please share your thoughts on next steps. I can't see an example of gradients of ensemble problems in the diffeq docs so if I can get this working I'd be glad to make a PR adding this as an example.</p>",
        "id": 246766840,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626895635
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I'm way behind this but am tagging everything.</p>",
        "id": 246766914,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626895678
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; No worries! If/when you have time <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>  I can also make an issue somewhere if that makes it easier to for other people involved with diffeq to assist</p>",
        "id": 246767082,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626895756
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; an issue to DiffEqFlux</p>",
        "id": 246767387,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626895898
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; I am having trouble implementing this in the current high level interface</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>function fiip(du,u,p,t)\n    du[1] = dx = p[1]*u[1] - p[2]*u[1]*u[2]\n    du[2] = dy = -p[3]*u[2] + p[4]*u[1]*u[2]\nend\np = [1.5,1.0,3.0,1.0]; u0 = [1.0;1.0]\nfunction sum_of_solution(x)\n    _prob = remake(prob,u0=x[1:2],p=x[3:end])\n    sum(solve(_prob,solver,saveat=0.1))\nend\n\nprob = ODEProblem(fiip,u0,(0.0,10.0),p,sensealg=InterpolatingAdjoint())\nsolver = QNDF()\nsum_of_solution([u0;p])\nReverseDiff.gradient(sum_of_solution,[u0;p])\nForwardDiff.gradient(sum_of_solution,[u0;p])\nZygote.gradient(sum_of_solution,[u0;p])\n\nprob = ODEProblem(fiip,u0,(0.0,10.0),p,sensealg=InterpolatingAdjoint())\nsolver = QNDF(linsolve=LinSolveGMRES())\nsum_of_solution([u0;p])\nForwardDiff.gradient(sum_of_solution,[u0;p])\nZygote.gradient(sum_of_solution,[u0;p])\n\nprob = ODEProblem(fiip,u0,(0.0,10.0),p,sensealg=InterpolatingAdjoint(autodiff=false,autojacvec=false))\nsolver = QNDF(linsolve=LinSolveGMRES())\nsum_of_solution([u0;p])\nForwardDiff.gradient(sum_of_solution,[u0;p])\nZygote.gradient(sum_of_solution,[u0;p])\n\nJv = JacVecOperator(fiip,u0,p,0.0);\nfiip3 = ODEFunction(fiip;jac_prototype=Jv);\nprob = ODEProblem(fiip3,u0,(0.0,10.0),p,sensealg=InterpolatingAdjoint())\nsolver = QNDF()\nsum_of_solution([u0;p])\nForwardDiff.gradient(sum_of_solution,[u0;p])\nZygote.gradient(sum_of_solution,[u0;p])\n\nprob = ODEProblem(fiip3,u0,(0.0,10.0),p,sensealg=InterpolatingAdjoint())\nsolver = QNDF(linsolve=LinSolveGMRES())\nsum_of_solution([u0;p])\nForwardDiff.gradient(sum_of_solution,[u0;p])\nZygote.gradient(sum_of_solution,[u0;p])```\nShould I expect stuff like this to work? Or should I stick to the lower level interfaces?\n</code></pre></div>",
        "id": 246859173,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626966037
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; What's the issue?</p>",
        "id": 246859454,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626966093
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; @chrisrackauckas Is SMBL integration working with Catalyst?</p>",
        "id": 246862603,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626967516
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes</p>",
        "id": 246862610,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626967523
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; SBML</p>",
        "id": 246862613,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626967526
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; do you have a. pointer please?</p>",
        "id": 246862651,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626967555
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://discourse.julialang.org/t/ann-sbmltoolkit-importer-of-biomodels/64271\">https://discourse.julialang.org/t/ann-sbmltoolkit-importer-of-biomodels/64271</a></p>",
        "id": 246862715,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626967572
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; sweeeet</p>",
        "id": 246862751,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626967597
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; thank you</p>",
        "id": 246862759,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626967602
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; yes* with caveats, see #sciml-sysbio and please report bugs</p>",
        "id": 246862785,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626967623
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; and dont thank @chrisrackauckas he gets way too much credit as it is. thank @Paul Lang and @mk <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 246862880,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626967678
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; Many different things,</p>\n<p>ReverseDiff generally complains about<br>\n<code>ERROR: DimensionMismatch(\"arrays could not be broadcast to a common size; got a dimension with lengths 5 and 6\")</code><br>\nWhile I think that was not an issue before</p>\n<p>When using LinSolveGMRES without JacVecOperator<br>\njulia&gt; Zygote.gradient(sum_of_solution,[u0;p])<br>\nERROR: MethodError: no method matching givensAlgorithm(::ForwardDiff.Dual{ForwardDiff.Tag{ODEFunction{true, typeof(fiip), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Float64}, Float64, 2}, ::ForwardDiff.Dual{ForwardDiff.Tag{ODEFunction{true, typeof(fiip), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Float64}, Float64, 2})</p>",
        "id": 246864564,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626968424
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>solver = CVODE_BDF(linear_solver=:GMRES)</code><br>\nshould work?</p>",
        "id": 246864657,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626968472
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; I was thanking for the link <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 246864714,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626968507
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; More output from QNDF()<br>\nWhen using with JacVecOperator and LinSolveGMRes</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">MethodError</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">method</span> <span class=\"n\">matching</span> <span class=\"n\">givensAlgorithm</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">ForwardDiff</span><span class=\"o\">.</span><span class=\"kt\">Dual</span><span class=\"p\">{</span><span class=\"kt\">ForwardDiff</span><span class=\"o\">.</span><span class=\"kt\">Tag</span><span class=\"p\">{</span><span class=\"kt\">ODEFunction</span><span class=\"p\">{</span><span class=\"kt\">true</span><span class=\"p\">,</span> <span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">fiip</span><span class=\"p\">),</span> <span class=\"kt\">LinearAlgebra</span><span class=\"o\">.</span><span class=\"kt\">UniformScaling</span><span class=\"p\">{</span><span class=\"kt\">Bool</span><span class=\"p\">},</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">DEFAULT_OBSERVED</span><span class=\"p\">),</span> <span class=\"kt\">Nothing</span><span class=\"p\">},</span> <span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">ForwardDiff</span><span class=\"o\">.</span><span class=\"kt\">Dual</span><span class=\"p\">{</span><span class=\"kt\">ForwardDiff</span><span class=\"o\">.</span><span class=\"kt\">Tag</span><span class=\"p\">{</span><span class=\"kt\">ODEFunction</span><span class=\"p\">{</span><span class=\"kt\">true</span><span class=\"p\">,</span> <span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">fiip</span><span class=\"p\">),</span> <span class=\"kt\">LinearAlgebra</span><span class=\"o\">.</span><span class=\"kt\">UniformScaling</span><span class=\"p\">{</span><span class=\"kt\">Bool</span><span class=\"p\">},</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">DEFAULT_OBSERVED</span><span class=\"p\">),</span> <span class=\"kt\">Nothing</span><span class=\"p\">},</span> <span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">})</span><span class=\"sb\">```</span>\n<span class=\"sb\">When using with JacVecOperator but standard non linear system solve</span>\n<span class=\"sb\">```</span><span class=\"sa\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">Zygote</span><span class=\"o\">.</span><span class=\"n\">gradient</span><span class=\"p\">(</span><span class=\"n\">sum_of_solution</span><span class=\"p\">,[</span><span class=\"n\">u0</span><span class=\"p\">;</span><span class=\"n\">p</span><span class=\"p\">])</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">MethodError</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">method</span> <span class=\"n\">matching</span> <span class=\"n\">length</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">JacVecOperator</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">fiip</span><span class=\"p\">),</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">ForwardDiff</span><span class=\"o\">.</span><span class=\"kt\">Dual</span><span class=\"p\">{</span><span class=\"kt\">DiffEqOperators</span><span class=\"o\">.</span><span class=\"kt\">JacVecTag</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">}},</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">ForwardDiff</span><span class=\"o\">.</span><span class=\"kt\">Dual</span><span class=\"p\">{</span><span class=\"kt\">DiffEqOperators</span><span class=\"o\">.</span><span class=\"kt\">JacVecTag</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">}},</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">Bool</span><span class=\"p\">})</span><span class=\"sb\">```</span>\n<span class=\"sb\">I find this a bit strange, why is it using JacVecOperator at all with the default solve?</span>\n\n<span class=\"sb\">With CVODE_BDF</span>\n<span class=\"sb\">```</span><span class=\"sa\">using</span> <span class=\"n\">Sundials</span>\n<span class=\"n\">prob</span> <span class=\"o\">=</span> <span class=\"n\">ODEProblem</span><span class=\"p\">(</span><span class=\"n\">fiip</span><span class=\"p\">,</span><span class=\"n\">u0</span><span class=\"p\">,(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"mf\">10.0</span><span class=\"p\">),</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"n\">sensealg</span><span class=\"o\">=</span><span class=\"n\">InterpolatingAdjoint</span><span class=\"p\">())</span>\n<span class=\"n\">solver</span> <span class=\"o\">=</span> <span class=\"n\">CVODE_BDF</span><span class=\"p\">(</span><span class=\"n\">linear_solver</span><span class=\"o\">=</span><span class=\"ss\">:GMRES</span><span class=\"p\">)</span>\n<span class=\"n\">sum_of_solution</span><span class=\"p\">([</span><span class=\"n\">u0</span><span class=\"p\">;</span><span class=\"n\">p</span><span class=\"p\">])</span>\n<span class=\"n\">ForwardDiff</span><span class=\"o\">.</span><span class=\"n\">gradient</span><span class=\"p\">(</span><span class=\"n\">sum_of_solution</span><span class=\"p\">,[</span><span class=\"n\">u0</span><span class=\"p\">;</span><span class=\"n\">p</span><span class=\"p\">])</span>\n<span class=\"n\">Zygote</span><span class=\"o\">.</span><span class=\"n\">gradient</span><span class=\"p\">(</span><span class=\"n\">sum_of_solution</span><span class=\"p\">,[</span><span class=\"n\">u0</span><span class=\"p\">;</span><span class=\"n\">p</span><span class=\"p\">])</span><span class=\"sb\">```</span>\n<span class=\"sb\">```</span><span class=\"sa\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">Zygote</span><span class=\"o\">.</span><span class=\"n\">gradient</span><span class=\"p\">(</span><span class=\"n\">sum_of_solution</span><span class=\"p\">,[</span><span class=\"n\">u0</span><span class=\"p\">;</span><span class=\"n\">p</span><span class=\"p\">])</span>\n<span class=\"n\">┌</span> <span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"n\">The</span> <span class=\"n\">save_idxs</span> <span class=\"n\">argument</span> <span class=\"n\">is</span> <span class=\"n\">ignored</span> <span class=\"n\">by</span> <span class=\"kt\">CVODE_BDF</span><span class=\"p\">{</span><span class=\"ss\">:Newton</span><span class=\"p\">,</span> <span class=\"ss\">:GMRES</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">}(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">false</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"nb\">nothing</span><span class=\"p\">,</span> <span class=\"nb\">nothing</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span>\n<span class=\"n\">└</span> <span class=\"err\">@</span> <span class=\"n\">SciMLBase</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">SciMLBase</span><span class=\"o\">/</span><span class=\"mi\">1</span><span class=\"n\">aTqd</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">87</span>\n<span class=\"n\">┌</span> <span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"n\">Please</span> <span class=\"n\">see</span> <span class=\"n\">http</span><span class=\"o\">://</span><span class=\"n\">docs</span><span class=\"o\">.</span><span class=\"n\">juliadiffeq</span><span class=\"o\">.</span><span class=\"n\">org</span><span class=\"o\">/</span><span class=\"n\">dev</span><span class=\"o\">/</span><span class=\"n\">basics</span><span class=\"o\">/</span><span class=\"n\">compatibility_chart</span><span class=\"o\">.</span><span class=\"n\">html</span>\n<span class=\"n\">└</span> <span class=\"err\">@</span> <span class=\"n\">SciMLBase</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">SciMLBase</span><span class=\"o\">/</span><span class=\"mi\">1</span><span class=\"n\">aTqd</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">100</span>\n<span class=\"n\">┌</span> <span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"n\">The</span> <span class=\"n\">save_idxs</span> <span class=\"n\">argument</span> <span class=\"n\">is</span> <span class=\"n\">ignored</span> <span class=\"n\">by</span> <span class=\"kt\">CVODE_BDF</span><span class=\"p\">{</span><span class=\"ss\">:Newton</span><span class=\"p\">,</span> <span class=\"ss\">:GMRES</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">}(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">false</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"nb\">nothing</span><span class=\"p\">,</span> <span class=\"nb\">nothing</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span>\n<span class=\"n\">└</span> <span class=\"err\">@</span> <span class=\"n\">SciMLBase</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">SciMLBase</span><span class=\"o\">/</span><span class=\"mi\">1</span><span class=\"n\">aTqd</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">87</span>\n<span class=\"n\">┌</span> <span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"n\">Please</span> <span class=\"n\">see</span> <span class=\"n\">http</span><span class=\"o\">://</span><span class=\"n\">docs</span><span class=\"o\">.</span><span class=\"n\">juliadiffeq</span><span class=\"o\">.</span><span class=\"n\">org</span><span class=\"o\">/</span><span class=\"n\">dev</span><span class=\"o\">/</span><span class=\"n\">basics</span><span class=\"o\">/</span><span class=\"n\">compatibility_chart</span><span class=\"o\">.</span><span class=\"n\">html</span>\n<span class=\"n\">└</span> <span class=\"err\">@</span> <span class=\"n\">SciMLBase</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">SciMLBase</span><span class=\"o\">/</span><span class=\"mi\">1</span><span class=\"n\">aTqd</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">100</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">MethodError</span><span class=\"o\">:</span> <span class=\"n\">no</span> <span class=\"n\">method</span> <span class=\"n\">matching</span> <span class=\"kt\">Ptr</span><span class=\"p\">{</span><span class=\"kt\">Sundials</span><span class=\"o\">.</span><span class=\"kt\">_generic_N_Vector</span><span class=\"p\">}(</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">ForwardDiff</span><span class=\"o\">.</span><span class=\"kt\">Dual</span><span class=\"p\">{</span><span class=\"kt\">ForwardDiff</span><span class=\"o\">.</span><span class=\"kt\">Tag</span><span class=\"p\">{</span><span class=\"kt\">ODEFunction</span><span class=\"p\">{</span><span class=\"kt\">true</span><span class=\"p\">,</span> <span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">fiip</span><span class=\"p\">),</span> <span class=\"kt\">LinearAlgebra</span><span class=\"o\">.</span><span class=\"kt\">UniformScaling</span><span class=\"p\">{</span><span class=\"kt\">Bool</span><span class=\"p\">},</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">DEFAULT_OBSERVED</span><span class=\"p\">),</span> <span class=\"kt\">Nothing</span><span class=\"p\">},</span> <span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">}})</span><span class=\"sb\">```</span>\n<span class=\"sb\">```</span><span class=\"sa\">prob</span> <span class=\"o\">=</span> <span class=\"n\">ODEProblem</span><span class=\"p\">(</span><span class=\"n\">fiip</span><span class=\"p\">,</span><span class=\"n\">u0</span><span class=\"p\">,(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"mf\">10.0</span><span class=\"p\">),</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"n\">sensealg</span><span class=\"o\">=</span><span class=\"n\">InterpolatingAdjoint</span><span class=\"p\">(</span><span class=\"n\">autodiff</span><span class=\"o\">=</span><span class=\"nb\">false</span><span class=\"p\">))</span><span class=\"sb\">```</span>\n<span class=\"sb\">Still complains about Dual stuff.</span>\n</code></pre></div>",
        "id": 246866285,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626969153
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Interesting, I'll have to take a look</p>",
        "id": 246866403,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626969212
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Can you open an issue on DiffEqSensitivity?</p>",
        "id": 246866422,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626969223
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; Shall I make an issue?</p>",
        "id": 246866424,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626969224
    },
    {
        "content": "<p>[slack] &lt;mbauman&gt; Did <code>ODESolution</code> ever support a Matrix or Table-like interface?  I have some old code that has <code>DataFrame(transpose(sol))</code> in it…   Did that ever make sense?</p>",
        "id": 246881201,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626975722
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes, it should still work?</p>",
        "id": 246881379,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626975823
    },
    {
        "content": "<p>[slack] &lt;mbauman&gt; <code>julia&gt; DataFrame(transpose(sol))\nERROR: ArgumentError: a 'LinearAlgebra.Transpose{Float64, ODESolution{Float64, 1, Vector{Float64}, Nothing, Nothing, Vector{Float64}, Vector{Vector{Float64}}, ODEProblem{Float64, Tuple{Float64, Float64}, false, SciMLBase.NullParameters, ODEFunction{false, typeof(f), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SciMLBase.StandardODEProblem}, Tsit5, OrdinaryDiffEq.InterpolationData{ODEFunction{false, typeof(f), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Vector{Float64}, Vector{Float64}, Vector{Vector{Float64}}, OrdinaryDiffEq.Tsit5ConstantCache{Float64, Float64}}, DiffEqBase.DEStats}}' is not a table; see `?Tables.table` for ways to treat an AbstractMatrix as a table</code></p>",
        "id": 246881633,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626975926
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>DataFrame(sol)</code>?</p>",
        "id": 246881812,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626975997
    },
    {
        "content": "<p>[gitter] &lt;sibyjackgrove&gt; I updated to the latest versions of <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a> and diffeqpy Now I am getting the following error when I try to do from diffeqpy import ode: \"&lt;PyCall.jlwrap (in a Julia function called from Python)\\nJULIA: LoadError: SystemError: opening file \\\"C:\\\\\\\\Users\\\\\\\\splathottam\\\\\\\\.julia\\\\\\\\compiled\\\\\\\\v1.5\\\\\\\\DiffEqBase\\\\\\\\oaevG_w6YVl.ji\\\": No such file or directory\\n</p>",
        "id": 246888839,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626979250
    },
    {
        "content": "<p>[gitter] &lt;sibyjackgrove&gt; It was working perfectly before the update.</p>",
        "id": 246888943,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626979314
    },
    {
        "content": "<p>[gitter] &lt;sibyjackgrove&gt; Any help would be much appreciated.</p>",
        "id": 246889014,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626979330
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; can you post that into an issue? I may need to dig in after JuliaCon: I'm behind <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 246891353,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626980613
    },
    {
        "content": "<p>[gitter] &lt;sibyjackgrove&gt; Sure, I'll do that</p>",
        "id": 246892659,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626981347
    },
    {
        "content": "<p>[gitter] &lt;sibyjackgrove&gt; @ChrisRackauckas I have raised the issue here: <a href=\"https://github.com/SciML/DifferentialEquations.jl/issues/775\">https://github.com/SciML/DifferentialEquations.jl/issues/775</a></p>",
        "id": 246900095,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1626985250
    },
    {
        "content": "<p>[slack] &lt;MiguelRaz&gt; Hey peeps - does Raj Dandekar hang around here? I'm missing his upload for his Juliacon talk \"Bayesian Neural ODEs\"</p>",
        "id": 246932027,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627011812
    },
    {
        "content": "<p>[slack] &lt;MiguelRaz&gt; ...as well as Zoe McCarthy's \"Easy and Customizable PINN PDE Solving with Neural <a href=\"https://github.com/search?q=PDE.jl&amp;type=Repositories\">PDE.jl</a>\"</p>",
        "id": 246932085,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627011888
    },
    {
        "content": "<p>[slack] &lt;Thomas Marks&gt; just writing in to say that <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a> worked beautifully for my fluid dynamics code, let me focus entirely on the spatial discretization while leaving the time discretization to the experts :)</p>",
        "id": 246940334,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627016734
    },
    {
        "content": "<p>[slack] &lt;vaibhavdixit02&gt; @Raj Dandekar</p>",
        "id": 246940714,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627017262
    },
    {
        "content": "<p>[slack] &lt;ranocha&gt; Just curious (since I'm also working with CFD): What kind of spatial discretizations are you using and which ODE solvers (with fixed or adaptive step sizes) do you apply?</p>",
        "id": 246940914,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627017594
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @Zoe McCarthy</p>",
        "id": 246953391,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627029699
    },
    {
        "content": "<p>[slack] &lt;Raj Dandekar&gt; Just messaged you @MiguelRaz</p>",
        "id": 246968541,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627041769
    },
    {
        "content": "<p>[slack] &lt;MiguelRaz&gt; Neat</p>",
        "id": 246968874,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627042024
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; @chrisrackauckas before I forget, I opened an issue here that may be related to what you were saying on zoom <a href=\"https://github.com/rveltz/PiecewiseDeterministicMarkovProcesses.jl/issues/6\">https://github.com/rveltz/PiecewiseDeterministicMarkovProcesses.jl/issues/6</a></p>",
        "id": 246984401,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627050461
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; For nonautonomous_linear_ode there are currently both stiff and non stiff solvers for <a href=\"https://diffeq.sciml.ai/latest/solvers/nonautonomous_linear_ode/#State-Dependent-Solvers\">https://diffeq.sciml.ai/latest/solvers/nonautonomous_linear_ode/#State-Dependent-Solvers</a> but there is only one solver for <a href=\"https://diffeq.sciml.ai/latest/solvers/nonautonomous_linear_ode/#Time-and-State-Dependent-Operators\">https://diffeq.sciml.ai/latest/solvers/nonautonomous_linear_ode/#Time-and-State-Dependent-Operators</a> : <code>CG3</code> - Third order Crouch-Grossman method. Is this for stiff problems?</p>",
        "id": 246989089,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627052706
    },
    {
        "content": "<p>[slack] &lt;MiguelRaz&gt; Found it - Raj did nothing wrong, he submitted the talk as \"JuliaConTalk.mp4\", which is something we should not allow in the first place. AKA don't let users input data. Thanks!</p>",
        "id": 246990171,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627053237
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; do I need to go find Zoe?</p>",
        "id": 246990244,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627053262
    },
    {
        "content": "<p>[slack] &lt;MiguelRaz&gt; Please do, I can't find her talk in the submissions.</p>",
        "id": 246990292,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627053290
    },
    {
        "content": "<p>[slack] &lt;MiguelRaz&gt; Also, I believe Gilot's \"Non-linear SDE mechanical simulations\" is missing too. I will assume y'all know about them. Please ping them to submit it.</p>",
        "id": 246990393,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627053341
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I do not know them</p>",
        "id": 246990729,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627053523
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I'm not sure <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 246990759,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627053539
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It's hard to find many details on the performance properties of the method, so I still need to do some testing on it.</p>",
        "id": 246990795,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627053557
    },
    {
        "content": "<p>[slack] &lt;MiguelRaz&gt; F in the chat.</p>",
        "id": 246991062,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627053695
    },
    {
        "content": "<p>[slack] &lt;MiguelRaz&gt; This is the talk I mean btw - Fredric Gillot</p>",
        "id": 246992016,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627054108
    },
    {
        "content": "<p>[slack] &lt;MiguelRaz&gt; <a href=\"https://pretalx.com/juliacon2021/talk/V3FWTU/\">https://pretalx.com/juliacon2021/talk/V3FWTU/</a></p>",
        "id": 246992020,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627054110
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; I want to incrementally extend an ODE. e.g. run it from (0,1), do something, run it from (1,2), do something, etc</p>",
        "id": 247006566,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627060809
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; I know this would be usually done via callbacks, but for various reasons I need to use a loop (in this case, i'm actually running 2 ODE solvers at a time)</p>",
        "id": 247006640,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627060851
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; i can't figure out how to make this work</p>",
        "id": 247006715,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627060888
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; The integrator interface and call <code>step!</code> directly?</p>",
        "id": 247006753,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627060909
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Is this to implement a multirate method of sorts?</p>",
        "id": 247006769,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627060915
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; as a concrete example, here is what I have</p>",
        "id": 247006859,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627060949
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; ```prob = ODEProblem((dt,y,p,t) -&gt; dt .= 1.0, [1.0], (0.0, 3.0))<br>\ninteg = init(prob, SSPRK22(), tstops = [0.0], dt = 0.1)</p>\n<p>for tstop = 1.0:3.0<br>\n    add_tstop!(integ, tstop)<br>\n    solve!(integ)<br>\nend```</p>",
        "id": 247006860,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627060950
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; i was hoping there was something between this and <code>solve!</code>, e.g. <code>solve_to_tstop!</code>?</p>",
        "id": 247006926,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627060986
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you can use <code>step!</code> which has an option to step to the next tstop.</p>",
        "id": 247006957,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627061009
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; Sort of, it's for two coupled PDEs</p>",
        "id": 247006985,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627061032
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; that will work, thanks</p>",
        "id": 247007342,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627061191
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; it could be useful to have something that would stop at an absolute <code>t</code>, rather than a <code>dt</code> (in terms of error control)</p>",
        "id": 247007571,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627061324
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; interesting. Yes.</p>",
        "id": 247007602,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627061340
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; actually subtracting off <code>integ.t</code> should be sufficient</p>",
        "id": 247007739,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627061407
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; ```prob = ODEProblem((dt,y,p,t) -&gt; dt .= 1.0, [1.0], (0.0, 3.0))<br>\ninteg = init(prob, SSPRK22(), dt = 0.1)</p>\n<p>for tstop = 1.0:3.0<br>\n    step!(integ, tstop - integ.t, true)<br>\nend```</p>",
        "id": 247007747,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627061409
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah (within floating point accuracy <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> )</p>",
        "id": 247007779,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627061428
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; I don't know at which package I should raise this issue:</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    A[1,1] = 0\n    A[2,1] = sin(u[1])\n    A[1,2] = -1\n    A[2,2] = 0\nend\nA = DiffEqArrayOperator(ones(2,2),update_func=update_func)\nprob = ODEProblem(A, ones(2), (0, 30.))\nsol = solve(prob,LieRK4(),dt=1/4) # works\nsol = solve(prob,CayleyEuler(),dt=1/4) # does not work\n#ERROR: MethodError: no method matching mul!(::Vector{Float64}, ::Matrix{Float64}, ::Matrix{Float64}, ::Bool, ::Bool)```\n</code></pre></div>",
        "id": 247008021,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627061533
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; yeah, but it will keep the error at O(1), whereas</p>\n<div class=\"codehilite\" data-code-language=\"prob\"><pre><span></span><code>integ = init(prob, SSPRK22(), dt = 0.1)\nfor tstop = 1.0:3.0\n    step!(integ, 1.0, true)\nend```\nwill accumulate error at O(N)\n</code></pre></div>",
        "id": 247008029,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627061539
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; thanks!</p>",
        "id": 247008061,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627061558
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah no problem</p>",
        "id": 247008080,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627061568
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; OrdinaryDiffEq</p>",
        "id": 247008461,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627061738
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Note it'll get buried in the \"ehh, after JuliaCon\" stack for a bit <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 247008488,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627061752
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; so you may want to do a reminder like a week from now.</p>",
        "id": 247008513,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627061760
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Found a Zoe, she'll have it today</p>",
        "id": 247018373,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627066932
    },
    {
        "content": "<p>[slack] &lt;MiguelRaz&gt; woooo</p>",
        "id": 247018437,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627066970
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; Related to juliacon: I have some performance optimizations that could potentially be useful for continuous forward mode sensitivity analysis. Under the hood this method still uses ForwardDiff. I don't want to waist time improving this if that will be obsolete because of diffractor soon?</p>",
        "id": 247035607,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627076314
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what kind of performance optimizations?</p>",
        "id": 247040528,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627079756
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; For stiff ODEs you can do a lot of extra cool optimizations which we haven't done yet.</p>",
        "id": 247040571,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627079765
    },
    {
        "content": "<p>[slack] &lt;Thomas Marks&gt; I'm using a second order finite volume scheme with MUSCL reconstruction, using the SSPRK34 integrator (adaptive stepsize, with a callback function to limit the time step to satisfy the CFL condition)</p>",
        "id": 247055322,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627101004
    },
    {
        "content": "<p>[slack] &lt;ranocha&gt; Nice <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 247056276,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627102712
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Hi,</p>\n<p>When solving a DAE with IDA, it works fine. Then I use DABDF2, and I get a <code>ERROR: UndefRefError: access to undefined reference</code>: <a href=\"https://files.slack.com/files-pri/T68168MUP-F029FK1TVSM/download/screen_shot_2021-07-24_at_18.04.51.png\">https://files.slack.com/files-pri/T68168MUP-F029FK1TVSM/download/screen_shot_2021-07-24_at_18.04.51.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F029FK1TVSM/download/screen_shot_2021-07-24_at_18.04.51.png\"><img src=\"https://uploads.zulipusercontent.net/95b24d8b225d7d88b20b2b9437a6ae3ba179f7f6/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303239464b315456534d2f646f776e6c6f61642f73637265656e5f73686f745f323032312d30372d32345f61745f31382e30342e35312e706e67\"></a></div>",
        "id": 247081990,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627142701
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Hi,</p>\n<p>When solving a DAE with IDA, it works fine. Then I use DABDF2, and I get a <code>ERROR: UndefRefError: access to undefined reference</code></p>\n<p>Is it an obvious mistake?</p>",
        "id": 247082059,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627142790
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; \\</p>",
        "id": 247203092,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627306649
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Hi,</p>\n<p>I am looking at the best method to solve PDAE which arise in freezing a travelling wave. The PDAE is usually (in 1d) <code>du/dt = Au  + F(u) - c du/dx</code> with constraint <code>&lt;du0/dx, u(t) - u0&gt;</code> where u0 is a given profile. I have tried to solve with IDA and it works fine. But I was looking for a Julian solution using Mass-matrices ; this works OK.</p>\n<p>In particular, I am wondering if it would help to write the constraint like <code>&lt;u0, du(t)/dx - du0/dx&gt;</code> ?<br>\nIf you have advices concerning those PDAE…</p>",
        "id": 247203674,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627306930
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Has anyone tried out SciML libraries on an M1 with a native Julia build (i.e. not Rosetta)? Did everything seem to work ok?</p>",
        "id": 247210668,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627310152
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @mose?</p>",
        "id": 247210893,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627310249
    },
    {
        "content": "<p>[slack] &lt;mose&gt; which package in particular?</p>",
        "id": 247211139,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627310350
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; I guess in my case it would primarily be Catalyst, ModelingToolkit, OrdinaryDiffEq and DiffEqJump</p>",
        "id": 247211213,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627310383
    },
    {
        "content": "<p>[slack] &lt;Gabriel Baraldi&gt; Not sure if they all run, I remember with ModelingToolikt the ntuple crashes were common</p>",
        "id": 247211681,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627310564
    },
    {
        "content": "<p>[slack] &lt;mose&gt; yeah, apart from missing binary libraries (we're slowly trying to catch up), the main issue is <a href=\"https://github.com/JuliaLang/julia/issues/41440\">https://github.com/JuliaLang/julia/issues/41440</a> which is very nasty because it's hard to reduce to a minimal reproducer</p>",
        "id": 247212086,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627310739
    },
    {
        "content": "<p>[slack] &lt;mose&gt; tests of <code>Catalyst</code> segfault, RIP</p>",
        "id": 247212363,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627310841
    },
    {
        "content": "<p>[slack] &lt;Gabriel Baraldi&gt; For me they didn’t segfault, just error</p>",
        "id": 247215340,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627311985
    },
    {
        "content": "<p>[slack] &lt;mose&gt; ```     Testing Running tests...<br>\nTest Summary: | Pass  Total<br>\n1.6 Arrows    |    1      1<br>\n 22.738198 seconds (96.43 M allocations: 5.673 GiB, 4.81% gc time, 0.09% compilation time)<br>\nTest Summary:      | Pass  Total<br>\nModel Construction |  392    392<br>\n 13.327318 seconds (55.49 M allocations: 3.239 GiB, 3.40% gc time, 25.25% compilation time)</p>\n<p>signal (11): Segmentation fault: 11<br>\nin expression starting at /Users/mose/.julia/packages/Catalyst/H7Uga/test/custom_functions.jl:36<br>\n^ at ./math.jl:0 [inlined]<br>\nhill at /Users/mose/.julia/packages/Catalyst/H7Uga/src/registered_functions.jl:43<br>\nmacro expansion at /Users/mose/.julia/packages/SymbolicUtils/SXYR9/src/code.jl:375 [inlined]<br>\nmacro expansion at /Users/mose/.julia/packages/RuntimeGeneratedFunctions/3SZ1T/src/RuntimeGeneratedFunctions.jl:124 [inlined]<br>\nmacro expansion at ./none:0 [inlined]<br>\ngenerated_callfunc at ./none:0 [inlined]<br>\nRuntimeGeneratedFunction at /Users/mose/.julia/packages/RuntimeGeneratedFunctions/3SZ1T/src/RuntimeGeneratedFunctions.jl:112<br>\nf at /Users/mose/.julia/packages/ModelingToolkit/45oYI/src/systems/diffeqs/abstractodesystem.jl:227<br>\nunknown function (ip: 0x124555a0f)<br>\n_jl_invoke at /Users/mose/repo/julia/src/gf.c:0 [inlined]<br>\njl_apply_generic at /Users/mose/repo/julia/src/gf.c:2427<br>\nODEFunction at /Users/mose/.julia/packages/SciMLBase/cU5k7/src/scimlfunctions.jl:334<br>\n_jl_invoke at /Users/mose/repo/julia/src/gf.c:0 [inlined]<br>\njl_apply_generic at /Users/mose/repo/julia/src/gf.c:2427<br>\nmacro expansion at /Users/mose/repo/julia/usr/share/julia/stdlib/v1.8/Test/src/Test.jl:445 [inlined]```</p>",
        "id": 247215597,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627312090
    },
    {
        "content": "<p>[slack] &lt;Gabriel Baraldi&gt; <code>est Summary: | Pass  Total\n1.6 Arrows    |    1      1\n 24.362101 seconds (97.30 M allocations: 5.714 GiB, 4.86% gc time, 0.10% compilation time)\nTest Summary:      | Pass  Total\nModel Construction |  392    392\n 15.560539 seconds (55.05 M allocations: 3.211 GiB, 3.74% gc time, 24.31% compilation time)\nTest Summary:    | Pass  Total\nCustom Functions |   25     25\n  5.410837 seconds (19.59 M allocations: 1.168 GiB, 3.71% gc time, 34.11% compilation time)\nTest Summary:      | Pass  Total\nModel Modification |  200    200\n  4.308679 seconds (15.53 M allocations: 967.476 MiB, 4.10% gc time, 1.06% compilation time)\nTest Summary: | Pass  Total\nAPI           |   15     15\n  0.994657 seconds (3.58 M allocations: 212.639 MiB, 3.36% gc time, 97.50% compilation time)\nTest Summary: | Pass  Total\nHigher Order  |  218    218\n  8.937077 seconds (35.20 M allocations: 2.087 GiB, 4.24% gc time, 1.46% compilation time)\n┌ Warning: `vendor()` is deprecated, use `BLAS.get_config()` and inspect the output instead\n│   caller = (::DiffEqBase.DefaultLinSolve)(x::Vector{Float64}, A::Matrix{Float64}, b::Vector{Float64}, update_matrix::Bool; reltol::Float64, kwargs::Base.Pairs{Symbol, DiffEqBase.ScaleVector{Vector{Float64}}, Tuple{Symbol, Symbol}, NamedTuple{(:Pl, :Pr), Tuple{DiffEqBase.ScaleVector{Vector{Float64}}, DiffEqBase.ScaleVector{Vector{Float64}}}}}) at linear_nonlinear.jl:91\n└ @ DiffEqBase ~/.julia/packages/DiffEqBase/Nyo4y/src/linear_nonlinear.jl:91\nTest Summary:                 | Pass  Total\nU0 and Parameters Input Types |  126    126\n 20.673363 seconds (72.30 M allocations: 4.212 GiB, 5.10% gc time, 0.26% compilation time)\nIteration 5 at line 104 in file solve_ODEs.jl\nIteration 10 at line 104 in file solve_ODEs.jl\nIteration 15 at line 104 in file solve_ODEs.jl\nIteration 20 at line 104 in file solve_ODEs.jl\nIteration 25 at line 104 in file solve_ODEs.jl\nIteration 30 at line 104 in file solve_ODEs.jl\nIteration 35 at line 104 in file solve_ODEs.jl\nIteration 40 at line 104 in file solve_ODEs.jl\nTest Summary:      | Pass  Total\nODE System Solving |  180    180\n102.523268 seconds (413.84 M allocations: 26.279 GiB, 4.99% gc time, 0.04% compilation time)\nTest Summary: | Pass  Total\nMake Jacobian |  101    101\n  0.985356 seconds (4.59 M allocations: 262.724 MiB, 5.60% gc time, 23.33% compilation time)\nTest Summary:               | Pass  Total\nDiffEq Steady State Solving |   48     48\n  4.991715 seconds (21.45 M allocations: 1.156 GiB, 9.44% gc time, 2.05% compilation time)\nTest Summary:      | Pass  Total\nSDE System Solving |   86     86\n 33.152511 seconds (67.49 M allocations: 4.281 GiB, 3.20% gc time, 0.09% compilation time)\nIteration 5 at line 102 in file solve_jumps.jl\nIteration 10 at line 102 in file solve_jumps.jl\nIteration 15 at line 102 in file solve_jumps.jl\nIteration 20 at line 102 in file solve_jumps.jl\nIteration 25 at line 102 in file solve_jumps.jl\nIteration 30 at line 102 in file solve_jumps.jl\nIteration 35 at line 102 in file solve_jumps.jl\nIteration 40 at line 102 in file solve_jumps.jl\nTest Summary:       | Pass  Total\nJump System Solving |  348    348\n 28.918806 seconds (118.77 M allocations: 8.966 GiB, 11.91% gc time, 0.33% compilation time)\nTest Summary: | Pass  Total\nLatexify      |    4      4\n  2.185170 seconds (8.81 M allocations: 502.944 MiB, 0.33% compilation time)\n┌ Warning: Error requiring `Graphviz_jll` from `Catalyst`\n│   exception =\n│    UndefVarError: artifact_dir not defined\n│    Stacktrace:\n│      [1] getproperty(x::Module, f::Symbol)\n│        @ Base ./Base.jl:35\n│      [2] top-level scope\n│        @ ~/.julia/packages/Catalyst/H7Uga/src/Catalyst.jl:22\n│      [3] eval\n│        @ ./boot.jl:373 [inlined]\n│      [4] eval\n│        @ ~/.julia/packages/Catalyst/H7Uga/src/Catalyst.jl:4 [inlined]\n│      [5] (::Catalyst.var\"#5#8\")()\n│        @ Catalyst ~/.julia/packages/Requires/7Ncym/src/require.jl:99\n│      [6] err(f::Any, listener::Module, modname::String)\n│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:47\n│      [7] (::Catalyst.var\"#4#7\")()\n│        @ Catalyst ~/.julia/packages/Requires/7Ncym/src/require.jl:98\n│      [8] withpath(f::Any, path::String)\n│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:37\n│      [9] (::Catalyst.var\"#3#6\")()\n│        @ Catalyst ~/.julia/packages/Requires/7Ncym/src/require.jl:97\n│     [10] #invokelatest#2\n│        @ ./essentials.jl:718 [inlined]\n│     [11] invokelatest\n│        @ ./essentials.jl:716 [inlined]\n│     [12] foreach(f::typeof(Base.invokelatest), itr::Vector{Function})\n│        @ Base ./abstractarray.jl:2694\n│     [13] loadpkg(pkg::Base.PkgId)\n│        @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:27\n│     [14] #invokelatest#2\n│        @ ./essentials.jl:718 [inlined]\n│     [15] invokelatest\n│        @ ./essentials.jl:716 [inlined]\n│     [16] require(uuidkey::Base.PkgId)\n│        @ Base ./loading.jl:1030\n│     [17] require(into::Module, mod::Symbol)\n│        @ Base ./loading.jl:1008\n│     [18] include(mod::Module, _path::String)\n│        @ Base ./Base.jl:417\n│     [19] include(x::String)\n│        @ Main.##294 ~/.julia/packages/SafeTestsets/A83XK/src/SafeTestsets.jl:23\n│     [20] macro expansion\n│        @ ~/.julia/packages/Catalyst/H7Uga/test/runtests.jl:36 [inlined]\n│     [21] macro expansion\n│        @ ~/julia/usr/share/julia/stdlib/v1.8/Test/src/Test.jl:1282 [inlined]\n│     [22] top-level scope\n│        @ ~/.julia/packages/Catalyst/H7Uga/test/runtests.jl:36\n│     [23] eval(m::Module, e::Any)\n│        @ Core ./boot.jl:373\n│     [24] macro expansion\n│        @ ~/.julia/packages/SafeTestsets/A83XK/src/SafeTestsets.jl:23 [inlined]\n│     [25] macro expansion\n│        @ timing.jl:210 [inlined]\n│     [26] macro expansion\n│        @ ~/.julia/packages/Catalyst/H7Uga/test/runtests.jl:36 [inlined]\n│     [27] top-level scope\n│        @ timing.jl:210\n│     [28] include(fname::String)\n│        @ Base.MainInclude ./client.jl:451\n│     [29] top-level scope\n│        @ none:6\n│     [30] eval\n│        @ ./boot.jl:373 [inlined]\n│     [31] exec_options(opts::Base.JLOptions)\n│        @ Base ./client.jl:268\n│     [32] _start()\n│        @ Base ./client.jl:495\n└ @ Requires ~/.julia/packages/Requires/7Ncym/src/require.jl:49\nWARNING: both AbstractAlgebra and ModelingToolkit export \"compose\"; uses of it in module Catalyst must be qualified\nWARNING: both AbstractAlgebra and Symbolics export \"degree\"; uses of it in module Catalyst must be qualified\nWARNING: both AbstractAlgebra and Symbolics export \"term\"; uses of it in module Catalyst must be qualified\nGraphs: Error During Test at /Users/gabrielbaraldi/.julia/packages/SafeTestsets/A83XK/src/SafeTestsets.jl:25\n  Got exception outside of a @test\n  LoadError: UndefVarError: dot not defined\n  Stacktrace:\n    [1] run_graphviz(io::IOStream, graph::Catalyst.Graph; prog::Nothing, format::String)\n      @ Catalyst ~/.julia/packages/Catalyst/H7Uga/src/graphs.jl:115\n    [2] #5869\n      @ ~/.julia/packages/Catalyst/H7Uga/src/graphs.jl:320 [inlined]\n    [3] open(::Catalyst.var\"#5869#5870\"{Catalyst.Graph, String}, ::String, ::Vararg{String}; kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n      @ Base ./io.jl:330\n    [4] open\n      @ ./io.jl:328 [inlined]\n    [5] savegraph(g::Catalyst.Graph, fname::String, fmt::String)\n      @ Catalyst ~/.julia/packages/Catalyst/H7Uga/src/graphs.jl:319\n    [6] top-level scope\n      @ ~/.julia/packages/Catalyst/H7Uga/test/graphs.jl:14\n    [7] include(mod::Module, _path::String)\n      @ Base ./Base.jl:417\n    [8] include(x::String)\n      @ Main.##294 ~/.julia/packages/SafeTestsets/A83XK/src/SafeTestsets.jl:23\n    [9] macro expansion\n      @ ~/.julia/packages/Catalyst/H7Uga/test/runtests.jl:36 [inlined]\n   [10] macro expansion\n      @ ~/julia/usr/share/julia/stdlib/v1.8/Test/src/Test.jl:1282 [inlined]\n   [11] top-level scope\n      @ ~/.julia/packages/Catalyst/H7Uga/test/runtests.jl:36\n   [12] eval(m::Module, e::Any)\n      @ Core ./boot.jl:373\n   [13] macro expansion\n      @ ~/.julia/packages/SafeTestsets/A83XK/src/SafeTestsets.jl:23 [inlined]\n   [14] macro expansion\n      @ timing.jl:210 [inlined]\n   [15] macro expansion\n      @ ~/.julia/packages/Catalyst/H7Uga/test/runtests.jl:36 [inlined]\n   [16] top-level scope\n      @ timing.jl:210\n   [17] include(fname::String)\n      @ Base.MainInclude ./client.jl:451\n   [18] top-level scope\n      @ none:6\n   [19] eval\n      @ ./boot.jl:373 [inlined]\n   [20] exec_options(opts::Base.JLOptions)\n      @ Base ./client.jl:268\n   [21] _start()\n      @ Base ./client.jl:495\n  in expression starting at /Users/gabrielbaraldi/.julia/packages/Catalyst/H7Uga/test/graphs.jl:14\nTest Summary: | Error  Total\nGraphs        |     1      1\nERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored, 0 broken.\nin expression starting at /Users/gabrielbaraldi/.julia/packages/Catalyst/H7Uga/test/runtests.jl:5\nERROR: Package Catalyst errored during testing</code></p>",
        "id": 247215976,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627312279
    },
    {
        "content": "<p>[slack] &lt;Gabriel Baraldi&gt; Why is every segfault intermittent</p>",
        "id": 247216018,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627312300
    },
    {
        "content": "<p>[slack] &lt;mose&gt; your error seems to be due to missing binary library</p>",
        "id": 247216844,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627312648
    },
    {
        "content": "<p>[slack] &lt;mose&gt; (and graphviz isn't exactly something I'd enjoy touching again, it's uber awful)</p>",
        "id": 247216903,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627312678
    },
    {
        "content": "<p>[slack] &lt;Gabriel Baraldi&gt; I do have graphviz installed but I’m not sure if it tries and fails to install it as an artifact</p>",
        "id": 247217638,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627312967
    },
    {
        "content": "<p>[slack] &lt;Gabriel Baraldi&gt; But your test segfaulted on model construction so I have no idea</p>",
        "id": 247217769,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627313030
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Yeah, the Graphviz crash can be fixed by dropping the dependency, but I'm not sure about this Model Construction crash.</p>",
        "id": 247219734,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627313826
    },
    {
        "content": "<p>[slack] &lt;mose&gt; if I re-run the tests it gets past that point, so another non-reproducible segfault.  sigh</p>",
        "id": 247219848,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627313879
    },
    {
        "content": "<p>[slack] &lt;mose&gt; @Gabriel Baraldi can you try running the tests again and see if you get the segfault at some point?  it should happen fairly soon, see my output above</p>",
        "id": 247220065,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627313950
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Thanks both for the info! It sounds like things aren't quite there yet if I don't want to have to deal with random segfaults.</p>",
        "id": 247220177,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627313999
    },
    {
        "content": "<p>[slack] &lt;Gabriel Baraldi&gt; What version are you running @mose ?</p>",
        "id": 247220601,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627314178
    },
    {
        "content": "<p>[slack] &lt;mose&gt; <code>(@v1.8) pkg&gt; st\n      Status `~/.julia/environments/v1.8/Project.toml`\n  [479239e8] Catalyst v6.14.0</code></p>",
        "id": 247220646,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627314201
    },
    {
        "content": "<p>[slack] &lt;Gabriel Baraldi&gt; what commit of master?</p>",
        "id": 247220836,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627314288
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; That release should be the same as master -- it doesn't look like there have been any new PRs since it.</p>",
        "id": 247221586,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627314628
    },
    {
        "content": "<p>[slack] &lt;Gabriel Baraldi&gt; I meant of what version of julia <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 247221809,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627314741
    },
    {
        "content": "<p>[slack] &lt;mose&gt; I shutdown the laptop, if I remember correctly I built it this weekend</p>",
        "id": 247221963,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627314835
    },
    {
        "content": "<p>[slack] &lt;MiguelRaz&gt; Hey, could Zoe ping me on the file name she used for the upload?</p>",
        "id": 247222192,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627314921
    },
    {
        "content": "<p>[slack] &lt;Gabriel Baraldi&gt; Mine was from the weekend also so i dunno</p>",
        "id": 247222279,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627314961
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; I feel like the more I look at exponential solvers from <a href=\"https://github.com/search?q=OrdinaryDiffEq.jl&amp;type=Repositories\">OrdinaryDiffEq.jl</a> (LieEuler, CG2, etc.) the less I understand what is going on. Do people actually use them (in that implementation) is it just an early experiment?</p>",
        "id": 247246755,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627326135
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; I'm currently leaning towards just implementing them directly from papers rather than trying to fix what is already there...</p>",
        "id": 247247261,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627326362
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Which part of the code confuses you?</p>",
        "id": 247255991,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627330648
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; For example why do multistep exponential methods like CG2 or CG3 call <code>f</code> only once but normal methods do so multiple times? Why don't people care about the solution lying on the manifold when interpolating? Is the usage of <code>k</code> consistent? Why are multiple things put into caches and then either not used at all or seemingly duplicating what is already in the integrator?</p>",
        "id": 247256883,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627331068
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; You never need to call <code>f</code> more than once per step when doing a multistep method. You just cache the previous <code>f</code> calls, and use the cache as an already pre-computed value. That's the purpose of a multistep method.</p>",
        "id": 247265892,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627334803
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; &gt; Why are multiple things put into caches and then either not used at all or seemingly duplicating what is already in the integrator?<br>\nLike what?</p>",
        "id": 247265910,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627334814
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; &gt; Why don't people care about the solution lying on the manifold when interpolating?<br>\nThey might, but I don't know of a good way to enforce that. Is your solution just to apply the projection to the result of the Hermite interpolation? Or is there a better interpolant?</p>",
        "id": 247266002,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627334873
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Most of these were done by a GSoC student. While I didn't check all of the details, all of them do have convergence tests checking for higher order properties, and they do pass. I know that there are some values which aren't cached so I've been meaning to go in there and make them faster, but indeed they haven't found many users so far so it hasn't been a priority.</p>",
        "id": 247266179,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627334947
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 247267156,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627335472
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; &gt; You never need to call <code>f</code> more than once per step when doing a multistep method. You just cache the previous <code>f</code> calls, and use the cache as an already pre-computed value. That's the purpose of a multistep method.<br>\nMaybe that's a terminology issue but for example here: <a href=\"https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta_methods\">https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta_methods</a> and basically in every paper I've read about it, an <code>s</code>-stage scheme has at least  <code>s-1</code> calls to <code>f</code> .</p>",
        "id": 247267698,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627335779
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Those are one-stepmethods.</p>",
        "id": 247267817,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627335852
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Did you mean multi-stage methods?</p>",
        "id": 247267834,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627335865
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; ok, right, multi-stage</p>",
        "id": 247267870,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627335892
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; see here: RKMK4 has 4 calls to <code>f</code>, while here: &lt;<a href=\"https://github.com/Biswajitghosh98/OrdinaryDiffEq.jl/blob/e85465246b63cdfd87ee47ab17cfe1f6dfb7f7c0/src/perform_step/linear_perform_step.jl#L91\">https://github.com/Biswajitghosh98/OrdinaryDiffEq.jl/blob/e85465246b63cdfd87ee47ab17cfe1f6dfb7f7c0/src/perform_step/linear_perform_step.jl#L91</a>&gt; it has one: <a href=\"https://files.slack.com/files-pri/T68168MUP-F02957883UM/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F02957883UM/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02957883UM/download/image.png\"><img src=\"https://uploads.zulipusercontent.net/da6349c3abd2502e72dc064d191d3ef83d8df127/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d463032393537383833554d2f646f776e6c6f61642f696d6167652e706e67\"></a></div>",
        "id": 247267935,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627335926
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; &gt; Why are multiple things put into caches and then either not used at all or seemingly duplicating what is already in the integrator?</p>\n<blockquote>\n<p>Like what?<br>\nI'll make a list later</p>\n</blockquote>",
        "id": 247268090,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627335995
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 247268102,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627336003
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/Biswajitghosh98/OrdinaryDiffEq.jl/blob/e85465246b63cdfd87ee47ab17cfe1f6dfb7f7c0/src/perform_step/linear_perform_step.jl#L97-L99\">https://github.com/Biswajitghosh98/OrdinaryDiffEq.jl/blob/e85465246b63cdfd87ee47ab17cfe1f6dfb7f7c0/src/perform_step/linear_perform_step.jl#L97-L99</a></p>",
        "id": 247268104,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627336004
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; isn't this equivalent to the first <code>f</code> application?</p>",
        "id": 247268120,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627336017
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; &gt; They might, but I don't know of a good way to enforce that. Is your solution just to apply the projection to the result of the Hermite interpolation? Or is there a better interpolant?<br>\nThere are special on-manifold Hermite interpolation methods, I can give references</p>",
        "id": 247268150,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627336038
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Okay cool, yes, those would be good to add.</p>",
        "id": 247268163,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627336048
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but yeah, when <code>f</code> is linear, <code>update_coefficients!</code> and then multiplying by <code>dt</code> is equivalent to the <code>f</code> calculation</p>",
        "id": 247268195,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627336072
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; so there's 4 <code>f</code> calculations there, and then the linear combination.</p>",
        "id": 247268252,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627336088
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I know the student didn't use caches correctly (GSoC ran out of time), but the algorithms look correct and they pass the higher order convergence tests so I'm pretty sure they calculate the right thing. Someone just needs to go in and make <code>A = Matrix(deepcopy(L))</code> instead to a <code>copyto!</code> to a cached array, which should be a rather quick fix.</p>",
        "id": 247268405,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627336203
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; How can <code>f</code> be linear if it's primarily defined on a nonlinear manifold?</p>",
        "id": 247268430,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627336205
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; These methods are all defined by a locally linear operator <code>A(u,p,t)</code></p>",
        "id": 247268466,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627336229
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>update_coefficients!(L,u,p,t)</code> updates the coefficients of that operator <code>L</code> for the current state <code>(u,p,t)</code></p>",
        "id": 247268488,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627336249
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; But in what way is <code>A</code> linear?</p>",
        "id": 247268513,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627336272
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; locally linear</p>",
        "id": 247268524,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627336280
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; in <code>u</code>?</p>",
        "id": 247268529,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627336284
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I mean it's defined by a linear operator <code>u' = A(u,p,t)*u</code></p>",
        "id": 247268552,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627336300
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; That's a very weird way to define manifold ODEs...</p>",
        "id": 247268729,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627336395
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I see your issue though. They shouldn't be accumulating the matrices, but instead it should be <code>k1 = dt*A*u</code> accumulating the vectors.</p>",
        "id": 247268787,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627336430
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; there should be more <code>expv</code> expressions.</p>",
        "id": 247268843,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627336445
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; We are just using the standard method. What's the way you'd use?</p>",
        "id": 247268873,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627336465
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; well, anyway, thanks for explanations -- I'll implement them separately for problems of type <code>u'=f(t,u)</code> (either frozen coefficient way or Lie action formulation)</p>",
        "id": 247269004,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627336536
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; BTW, I already have a repository for that: <a href=\"https://github.com/JuliaManifolds/ManifoldDiffEq.jl\">https://github.com/JuliaManifolds/ManifoldDiffEq.jl</a></p>",
        "id": 247269139,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627336613
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I think it would be best in OrdinaryDiffEq because I assume you'd want to use that with event handling?</p>",
        "id": 247269179,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627336641
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; I need a lot of <a href=\"https://github.com/search?q=Manifolds.jl&amp;type=Repositories\">Manifolds.jl</a> stuff though. Once I have a few methods we can discuss migrating but I prefer to start there. I'm not sure currently if I'm going to need event handling, my primary use case is, at the moment, FFJORD-style CNFs on manifolds.</p>",
        "id": 247269327,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627336753
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/JuliaManifolds/ManifoldDiffEq.jl/pull/1/files#diff-009d4b55e7b3cd25dc4143c5a89ad1107bf6de308e3a0a1498d637f244458893\">https://github.com/JuliaManifolds/ManifoldDiffEq.jl/pull/1/files#diff-009d4b55e7b3cd25dc4143c5a89ad1107bf6de308e3a0a1498d637f244458893</a></p>",
        "id": 247269329,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627336753
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I'm not sure why a different DiffEqOperator is needed?</p>",
        "id": 247269359,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627336771
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; Maybe it's not, I'm still experimenting <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 247269493,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627336839
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; IIRC a Lie group action should keep values on the manifold. Is the retraction just for numerical errors?</p>",
        "id": 247269790,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627337024
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I see, so you have people define the Lie group action exp(A<em>t)</em>v directly?</p>",
        "id": 247270007,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627337140
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; LieEuler has no \"serious\" Lie group stuff in it; retraction is there as a (potential) cheap substitute for an exact exponential map.</p>",
        "id": 247270041,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627337163
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; Anyway, it's not even the correct LieEuler at the moment, in that it doesn't do the action it's supposed to</p>",
        "id": 247270128,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627337207
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; okay yeah, I was trying to understand it <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 247270157,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627337233
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; but yes, we allow for different actions than just multiplication</p>",
        "id": 247270192,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627337264
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; sorry for the small confusion, I wanted to start with LieEuler but then found that frozen coefficient stuff is easier so I jumped to that but didn't update everything yet</p>",
        "id": 247270283,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627337313
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yeah if all that's needed is to add the retraction operations (and the DiffEqOperator is the same), then we could just add that to the ODEProblem and add the dependency on <a href=\"https://github.com/search?q=Manifolds.jl&amp;type=Repositories\">Manifolds.jl</a> and keep everything clean. I'm curious to see how this evolves though, since indeed I do think you can do this nicer than just expv on vectors (which is a straight interpretation of Hairer)</p>",
        "id": 247270327,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627337336
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; But if more in-depth changes are needed, then a separate solver package which we reference from the DiffEq docs is the right way to go</p>",
        "id": 247270367,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627337373
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; Lie stuff also needs Lie group actions, Lie brackets and some other things</p>",
        "id": 247270373,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627337379
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; so it's quite heavy</p>",
        "id": 247270393,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627337392
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah, the Lie brackets is why the student kept the matrices</p>",
        "id": 247270399,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627337395
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and that is heavy <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 247270412,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627337400
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; yes, unfortunately</p>",
        "id": 247270487,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627337413
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; that's why I'm hesitant to consider putting it in OrdinaryDiffEq</p>",
        "id": 247270551,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627337433
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; so maybe this does need a whole separate package of machinery to make that more efficient, because specializing the on the Lie brackets is probably a huge performance gain.</p>",
        "id": 247270571,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627337448
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; I think there are many potential performance gains, and also generality gains</p>",
        "id": 247270660,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627337503
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah, so you might just want to do that part better</p>",
        "id": 247270768,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627337561
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; That only cover the Lie Group methods, not the Magnus and other methods?</p>",
        "id": 247270787,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627337571
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; The goal is to support all on-manifold methods but I haven't read about all of them yet</p>",
        "id": 247270831,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627337603
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; there are many subtle issues that I want to preserve</p>",
        "id": 247270959,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627337686
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://en.wikipedia.org/wiki/Magnus_expansion\">https://en.wikipedia.org/wiki/Magnus_expansion</a></p>",
        "id": 247270964,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627337687
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I know they are geometric integrators, but I'm not sure if there's a nice manifold description like there is for the Lie group methods.</p>",
        "id": 247271001,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627337708
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; At the first glance it doesn't look like there would be much benefit in expressing Magnus expansion in terms on manifolds. There are no manifolds in the problem formulation and I don't see any \"pick your Lie group\" stuff in the description</p>",
        "id": 247271501,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627338049
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah</p>",
        "id": 247271809,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627338270
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 247279095,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627344452
    },
    {
        "content": "<p>[slack] &lt;MiguelRaz&gt; @Zoe McCarthy sorry to bother again - any updates?</p>",
        "id": 247280986,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627346418
    },
    {
        "content": "<p>[slack] &lt;MiguelRaz&gt; @Raj Dandekar I'm uploadong your final version as we speak</p>",
        "id": 247281018,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627346472
    },
    {
        "content": "<p>[slack] &lt;Raj Dandekar&gt; Great! <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 247286258,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627351712
    },
    {
        "content": "<p>[slack] &lt;Vasily Ilin&gt; I've had weird warnings come up for the past couple of days when I do <code>using DiffEqBase</code>. I did <code>]update</code> , and <code>]resolve</code> but the warnings remain. Any idea what they might be caused by and how to fix the issue? I will provide the warnings in the thread.</p>",
        "id": 247286547,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627352028
    },
    {
        "content": "<p>[slack] &lt;Vasily Ilin&gt; <code>julia&gt; include(\"test\\\\geneexpr_test.jl\")\n[ Info: Precompiling DiffEqBase [2b5f629d-d688-5b77-993f-72d75c75574e]\n┌ Warning: Module IfElse with build ID 279935326262401 is missing from the cache.\n│ This may mean IfElse [615f187c-cbe4-4ef1-ba3b-2fcf58d6d173] does not support precompilation but is imported by a module that does.\n└ @ Base loading.jl:1008\n┌ Warning: Module IfElse with build ID 279935326262401 is missing from the cache.\n│ This may mean IfElse [615f187c-cbe4-4ef1-ba3b-2fcf58d6d173] does not support precompilation but is imported by a module that does.\n└ @ Base loading.jl:1008\n┌ Warning: Module IfElse with build ID 279935326262401 is missing from the cache.\n│ This may mean IfElse [615f187c-cbe4-4ef1-ba3b-2fcf58d6d173] does not support precompilation but is imported by a module that does.\n└ @ Base loading.jl:1008\n┌ Warning: Module IfElse with build ID 279935326262401 is missing from the cache.\n│ This may mean IfElse [615f187c-cbe4-4ef1-ba3b-2fcf58d6d173] does not support precompilation but is imported by a module that does.\n└ @ Base loading.jl:1008\n┌ Warning: Module IfElse with build ID 279935326262401 is missing from the cache.\n│ This may mean IfElse [615f187c-cbe4-4ef1-ba3b-2fcf58d6d173] does not support precompilation but is imported by a module that does.\n└ @ Base loading.jl:1008\n┌ Warning: Module IfElse with build ID 279935326262401 is missing from the cache.\n│ This may mean IfElse [615f187c-cbe4-4ef1-ba3b-2fcf58d6d173] does not support precompilation but is imported by a module that does.\n└ @ Base loading.jl:1008\n┌ Warning: Module IfElse with build ID 279935326262401 is missing from the cache.\n│ This may mean IfElse [615f187c-cbe4-4ef1-ba3b-2fcf58d6d173] does not support precompilation but is imported by a module that does.\n└ @ Base loading.jl:1008\n┌ Warning: Module IfElse with build ID 279935326262401 is missing from the cache.\n│ This may mean IfElse [615f187c-cbe4-4ef1-ba3b-2fcf58d6d173] does not support precompilation but is imported by a module that does.\n└ @ Base loading.jl:1008\n┌ Warning: Module IfElse with build ID 279935326262401 is missing from the cache.\n│ This may mean IfElse [615f187c-cbe4-4ef1-ba3b-2fcf58d6d173] does not support precompilation but is imported by a module that does.\n└ @ Base loading.jl:1008\n┌ Warning: Module IfElse with build ID 279935326262401 is missing from the cache.\n│ This may mean IfElse [615f187c-cbe4-4ef1-ba3b-2fcf58d6d173] does not support precompilation but is imported by a module that does.\n└ @ Base loading.jl:1008\n┌ Warning: Module IfElse with build ID 279935326262401 is missing from the cache.\n│ This may mean IfElse [615f187c-cbe4-4ef1-ba3b-2fcf58d6d173] does not support precompilation but is imported by a module that does.\n└ @ Base loading.jl:1008\n┌ Warning: Module IfElse with build ID 279935326262401 is missing from the cache.\n│ This may mean IfElse [615f187c-cbe4-4ef1-ba3b-2fcf58d6d173] does not support precompilation but is imported by a module that does.\n└ @ Base loading.jl:1008\n┌ Warning: Module IfElse with build ID 279935326262401 is missing from the cache.\n│ This may mean IfElse [615f187c-cbe4-4ef1-ba3b-2fcf58d6d173] does not support precompilation but is imported by a module that does.\n└ @ Base loading.jl:1008\n┌ Warning: Module IfElse with build ID 279935326262401 is missing from the cache.\n│ This may mean IfElse [615f187c-cbe4-4ef1-ba3b-2fcf58d6d173] does not support precompilation but is imported by a module that does.\n└ @ Base loading.jl:1008\n┌ Warning: Module IfElse with build ID 279935326262401 is missing from the cache.\n│ This may mean IfElse [615f187c-cbe4-4ef1-ba3b-2fcf58d6d173] does not support precompilation but is imported by a module that does.\n└ @ Base loading.jl:1008\n┌ Warning: Module IfElse with build ID 279935326262401 is missing from the cache.\n│ This may mean IfElse [615f187c-cbe4-4ef1-ba3b-2fcf58d6d173] does not support precompilation but is imported by a module that does.\n└ @ Base loading.jl:1008\n[ Info: Skipping precompilation since __precompile__(false). Importing DiffEqBase [2b5f629d-d688-5b77-993f-72d75c75574e].\n[ Info: Precompiling RecursiveFactorization [f2c3362d-daeb-58d1-803e-2bc74f2840b4]\n┌ Warning: Module IfElse with build ID 279935326262401 is missing from the cache.\n│ This may mean IfElse [615f187c-cbe4-4ef1-ba3b-2fcf58d6d173] does not support precompilation but is imported by a module that does.\n└ @ Base loading.jl:1008\n┌ Warning: Module IfElse with build ID 279935326262401 is missing from the cache.\n│ This may mean IfElse [615f187c-cbe4-4ef1-ba3b-2fcf58d6d173] does not support precompilation but is imported by a module that does.\n└ @ Base loading.jl:1008\n┌ Warning: Module IfElse with build ID 279935326262401 is missing from the cache.\n│ This may mean IfElse [615f187c-cbe4-4ef1-ba3b-2fcf58d6d173] does not support precompilation but is imported by a module that does.\n└ @ Base loading.jl:1008\n┌ Warning: Module IfElse with build ID 279935326262401 is missing from the cache.\n│ This may mean IfElse [615f187c-cbe4-4ef1-ba3b-2fcf58d6d173] does not support precompilation but is imported by a module that does.\n└ @ Base loading.jl:1008\n┌ Warning: Module IfElse with build ID 279935326262401 is missing from the cache.\n│ This may mean IfElse [615f187c-cbe4-4ef1-ba3b-2fcf58d6d173] does not support precompilation but is imported by a module that does.\n└ @ Base loading.jl:1008\n┌ Warning: Module IfElse with build ID 279935326262401 is missing from the cache.\n│ This may mean IfElse [615f187c-cbe4-4ef1-ba3b-2fcf58d6d173] does not support precompilation but is imported by a module that does.\n└ @ Base loading.jl:1008</code></p>",
        "id": 247286649,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627352118
    },
    {
        "content": "<p>[slack] &lt;Vasily Ilin&gt; ... continued stacktrace<br>\n<code>┌ Warning: Module IfElse with build ID 279935326262401 is missing from the cache.\n│ This may mean IfElse [615f187c-cbe4-4ef1-ba3b-2fcf58d6d173] does not support precompilation but is imported by a module that does.\n└ @ Base loading.jl:1008\n┌ Warning: Module IfElse with build ID 279935326262401 is missing from the cache.\n│ This may mean IfElse [615f187c-cbe4-4ef1-ba3b-2fcf58d6d173] does not support precompilation but is imported by a module that does.\n└ @ Base loading.jl:1008\n[ Info: Skipping precompilation since __precompile__(false). Importing RecursiveFactorization [f2c3362d-daeb-58d1-803e-2bc74f2840b4].\n[ Info: Precompiling LoopVectorization [bdcacae8-1622-11e9-2a5c-532679323890]\n┌ Warning: Module IfElse with build ID 279935326262401 is missing from the cache.\n│ This may mean IfElse [615f187c-cbe4-4ef1-ba3b-2fcf58d6d173] does not support precompilation but is imported by a module that does.\n└ @ Base loading.jl:1008\n┌ Warning: Module IfElse with build ID 279935326262401 is missing from the cache.\n│ This may mean IfElse [615f187c-cbe4-4ef1-ba3b-2fcf58d6d173] does not support precompilation but is imported by a module that does.\n└ @ Base loading.jl:1008\n┌ Warning: Module IfElse with build ID 279935326262401 is missing from the cache.\n│ This may mean IfElse [615f187c-cbe4-4ef1-ba3b-2fcf58d6d173] does not support precompilation but is imported by a module that does.\n└ @ Base loading.jl:1008\n┌ Warning: Module IfElse with build ID 279935326262401 is missing from the cache.\n│ This may mean IfElse [615f187c-cbe4-4ef1-ba3b-2fcf58d6d173] does not support precompilation but is imported by a module that does.\n└ @ Base loading.jl:1008\n[ Info: Skipping precompilation since __precompile__(false). Importing LoopVectorization [bdcacae8-1622-11e9-2a5c-532679323890].\n[ Info: Precompiling VectorizationBase [3d5dd08c-fd9d-11e8-17fa-ed2836048c2f]\n┌ Warning: Module IfElse with build ID 279935326262401 is missing from the cache.\n│ This may mean IfElse [615f187c-cbe4-4ef1-ba3b-2fcf58d6d173] does not support precompilation but is imported by a module that does.\n└ @ Base loading.jl:1008\n┌ Warning: Module IfElse with build ID 279935326262401 is missing from the cache.\n│ This may mean IfElse [615f187c-cbe4-4ef1-ba3b-2fcf58d6d173] does not support precompilation but is imported by a module that does.\n└ @ Base loading.jl:1008\n[ Info: Skipping precompilation since __precompile__(false). Importing VectorizationBase [3d5dd08c-fd9d-11e8-17fa-ed2836048c2f].\n[ Info: Precompiling ArrayInterface [4fba245c-0d91-5ea0-9b3e-6abc04ee57a9]\n┌ Warning: Module IfElse with build ID 279935326262401 is missing from the cache.\n│ This may mean IfElse [615f187c-cbe4-4ef1-ba3b-2fcf58d6d173] does not support precompilation but is imported by a module that does.\n└ @ Base loading.jl:1008\n[ Info: Skipping precompilation since __precompile__(false). Importing ArrayInterface [4fba245c-0d91-5ea0-9b3e-6abc04ee57a9].\n[ Info: Precompiling Static [aedffcd0-7271-4cad-89d0-dc628f76c6d3]\n┌ Warning: Module IfElse with build ID 279935326262401 is missing from the cache.\n│ This may mean IfElse [615f187c-cbe4-4ef1-ba3b-2fcf58d6d173] does not support precompilation but is imported by a module that does.\n└ @ Base loading.jl:1008\n[ Info: Skipping precompilation since __precompile__(false). Importing Static [aedffcd0-7271-4cad-89d0-dc628f76c6d3].\n[ Info: Precompiling SLEEFPirates [476501e8-09a2-5ece-8869-fb82de89a1fa]\n┌ Warning: Module VectorizationBase with build ID 338551162703547 is missing from the cache.\n│ This may mean VectorizationBase [3d5dd08c-fd9d-11e8-17fa-ed2836048c2f] does not support precompilation but is imported by a module that does.    \n└ @ Base loading.jl:1008\n[ Info: Skipping precompilation since __precompile__(false). Importing SLEEFPirates [476501e8-09a2-5ece-8869-fb82de89a1fa].\n[ Info: Precompiling ThreadingUtilities [8290d209-cae3-49c0-8002-c8c24d57dab5]\n┌ Warning: Module VectorizationBase with build ID 338551162703547 is missing from the cache.\n│ This may mean VectorizationBase [3d5dd08c-fd9d-11e8-17fa-ed2836048c2f] does not support precompilation but is imported by a module that does.    \n└ @ Base loading.jl:1008\n[ Info: Skipping precompilation since __precompile__(false). Importing ThreadingUtilities [8290d209-cae3-49c0-8002-c8c24d57dab5].\n[ Info: Precompiling NonlinearSolve [8913a72c-1f9b-4ce2-8d82-65094dcecaec]\n┌ Warning: Module ArrayInterface with build ID 338551680724248 is missing from the cache.\n│ This may mean ArrayInterface [4fba245c-0d91-5ea0-9b3e-6abc04ee57a9] does not support precompilation but is imported by a module that does.       \n└ @ Base loading.jl:1008\n┌ Warning: Module ArrayInterface with build ID 338551680724248 is missing from the cache.\n│ This may mean ArrayInterface [4fba245c-0d91-5ea0-9b3e-6abc04ee57a9] does not support precompilation but is imported by a module that does.       \n└ @ Base loading.jl:1008\n[ Info: Skipping precompilation since __precompile__(false). Importing NonlinearSolve [8913a72c-1f9b-4ce2-8d82-65094dcecaec].\n[ Info: Precompiling FiniteDiff [6a86dc24-6348-571c-b903-95158fe2bd41]\n┌ Warning: Module ArrayInterface with build ID 338551680724248 is missing from the cache.\n│ This may mean ArrayInterface [4fba245c-0d91-5ea0-9b3e-6abc04ee57a9] does not support precompilation but is imported by a module that does.\n└ @ Base loading.jl:1008\n[ Info: Skipping precompilation since __precompile__(false). Importing FiniteDiff [6a86dc24-6348-571c-b903-95158fe2bd41].\n[ Info: Precompiling RecursiveArrayTools [731186ca-8d62-57ce-b412-fbd966d074cd]\n┌ Warning: Module ArrayInterface with build ID 338551680724248 is missing from the cache.\n│ This may mean ArrayInterface [4fba245c-0d91-5ea0-9b3e-6abc04ee57a9] does not support precompilation but is imported by a module that does.\n└ @ Base loading.jl:1008\n[ Info: Skipping precompilation since __precompile__(false). Importing RecursiveArrayTools [731186ca-8d62-57ce-b412-fbd966d074cd].\n[ Info: Precompiling SciMLBase [0bca4576-84f4-4d90-8ffe-ffa030f20462]\n┌ Warning: Module RecursiveArrayTools with build ID 338574927900067 is missing from the cache.\n│ This may mean RecursiveArrayTools [731186ca-8d62-57ce-b412-fbd966d074cd] does not support precompilation but is imported by a module that does.\n└ @ Base loading.jl:1008\n[ Info: Skipping precompilation since __precompile__(false). Importing SciMLBase [0bca4576-84f4-4d90-8ffe-ffa030f20462].\n[ Info: Precompiling LabelledArrays [2ee39098-c373-598a-b85f-a56591580800]\n┌ Warning: Module ArrayInterface with build ID 338551680724248 is missing from the cache.\n│ This may mean ArrayInterface [4fba245c-0d91-5ea0-9b3e-6abc04ee57a9] does not support precompilation but is imported by a module that does.\n└ @ Base loading.jl:1008\n[ Info: Skipping precompilation since __precompile__(false). Importing LabelledArrays [2ee39098-c373-598a-b85f-a56591580800].</code></p>",
        "id": 247286708,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627352166
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; might've just been a bad compile cache.</p>",
        "id": 247287610,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627353021
    },
    {
        "content": "<p>[slack] &lt;Vasily Ilin&gt; This was definitely not a one-time thing. What would be the solution if it is a bad compile cache?</p>",
        "id": 247287688,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627353108
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it would be a one time thing. You restarted Julia and it happened again?</p>",
        "id": 247288107,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627353523
    },
    {
        "content": "<p>[slack] &lt;Vasily Ilin&gt; Yes</p>",
        "id": 247288144,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627353577
    },
    {
        "content": "<p>[slack] &lt;Vasily Ilin&gt; It only happens after I activate my <code>DiffEqJump</code>  environment too...</p>",
        "id": 247288618,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627354176
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 247310120,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627377084
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; I’m not seeing it at all on my local PRs.</p>",
        "id": 247318625,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627383718
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; But I’m not sure if all my packages are on the latest version.</p>",
        "id": 247318717,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627383752
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; @Vasily Ilin did you try trashing your Manifest before resolving?</p>",
        "id": 247318778,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627383790
    },
    {
        "content": "<p>[slack] &lt;Vasily Ilin&gt; Update: after deleting the local folder I was <code>develop</code>ing and <code>develop</code>ing it again, errors went away!</p>",
        "id": 247333688,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627393037
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Is there a compatibility issue affecting StochasticDiffEq? I just got the following error on CI, when it is only a test dependency:</p>",
        "id": 247335698,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627394100
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; <a href=\"https://github.com/SciML/DiffEqJump.jl/runs/3172182958#step:6:82\">https://github.com/SciML/DiffEqJump.jl/runs/3172182958#step:6:82</a></p>",
        "id": 247335704,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627394102
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I would assume that's related to @elrodc again, since that's hitting ArrayInterface which is an issue from <a href=\"https://github.com/search?q=Static.jl&amp;type=Repositories\">Static.jl</a> 0.3</p>",
        "id": 247336054,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627394228
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Everything seems a mess. Trying to update DiffEqJump gives an error about StochasticDiffEq, which is only a test dependency. Removing StochasticDiffEq gives a never ending stream of package compatibility errors.</p>",
        "id": 247337682,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627394783
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; <code>(@v1.6) pkg&gt; add DiffEqJump@v7\n   Resolving package versions...\nERROR: Unsatisfiable requirements detected for package StochasticDiffEq [789caeaf]:\n StochasticDiffEq [789caeaf] log:\n ├─possible versions are: 5.0.0-6.35.0 or uninstalled\n ├─restricted to versions * by an explicit requirement, leaving only versions 5.0.0-6.35.0\n ├─restricted by compatibility requirements with DiffEqJump [c894b116] to versions: 5.0.0-6.20.0 or uninstalled, leaving only versions: 5.0.0-6.20.0\n │ └─DiffEqJump [c894b116] log:\n │   ├─possible versions are: 5.0.0-7.0.0 or uninstalled\n │   └─restricted to versions 7 by ModelingToolkit [961ee093], leaving only versions 7.0.0\n │     └─ModelingToolkit [961ee093] log:\n │       ├─possible versions are: 5.25.1 or uninstalled\n │       └─ModelingToolkit [961ee093] is fixed to version 5.25.1\n └─restricted by compatibility requirements with DataStructures [864edb3b] to versions: 6.25.1-6.35.0 or uninstalled — no versions left\n   └─DataStructures [864edb3b] log:\n     ├─possible versions are: 0.9.0-0.18.9 or uninstalled\n     ├─restricted to versions 0.17-0.18 by ModelingToolkit [961ee093], leaving only versions 0.17.0-0.18.9\n     │ └─ModelingToolkit [961ee093] log: see above\n     └─restricted by compatibility requirements with DiffEqCallbacks [459566f4] to versions: 0.18.0-0.18.9\n       └─DiffEqCallbacks [459566f4] log:\n         ├─possible versions are: 2.0.0-2.16.1 or uninstalled\n         └─restricted to versions 2.16.0-2 by ModelingToolkit [961ee093], leaving only versions 2.16.0-2.16.1\n           └─ModelingToolkit [961ee093] log: see above</code></p>",
        "id": 247337757,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627394821
    },
    {
        "content": "<p>[slack] &lt;sverek&gt; <code>] add DiffEqJump#master</code> ?</p>",
        "id": 247338700,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627395252
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; I just confirmed I can install the latest release in a clean environment, so I'm not sure what is going on on CI.</p>",
        "id": 247338797,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627395315
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; CI has to bump the test dependencies after, and so that attempts to keep package versions of the non-test dep form</p>",
        "id": 247339850,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627395808
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; SLEEFPirate's compat wasn't updated, which is probably what was holding it back.</p>",
        "id": 247340853,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627396225
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; A new release should be out soon.</p>",
        "id": 247340870,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627396235
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; Static 0.3 wasn't actually a breaking release, so IMO it shouldn't have had a minor version bump. I was probably the one that reviewed the PR, so that's on me.</p>",
        "id": 247340998,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627396302
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Yeah, even locally I can't run tests now, with the error</p>",
        "id": 247358012,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627403835
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; <code>1526\nERROR: Unsatisfiable requirements detected for package StochasticDiffEq [789caeaf]:\n StochasticDiffEq [789caeaf] log:\n ├─possible versions are: 5.0.0-6.35.0 or uninstalled\n ├─restricted to versions * by an explicit requirement, leaving only versions 5.0.0-6.35.0\n ├─restricted by compatibility requirements with ArrayInterface [4fba245c] to versions: [5.0.0-6.7.0, 6.14.0-6.35.0] or uninstalled, leaving only versions: [5.0.0-6.7.0, 6.14.0-6.35.0]\n │ └─ArrayInterface [4fba245c] log:\n │   ├─possible versions are: 0.0.1-3.1.18 or uninstalled\n │   └─restricted to versions 2.8.0-3 by DiffEqJump [c894b116], leaving only versions 2.8.0-3.1.18\n │     └─DiffEqJump [c894b116] log:\n │       ├─possible versions are: 7.0.0 or uninstalled\n │       └─DiffEqJump [c894b116] is fixed to version 7.0.0\n ├─restricted by compatibility requirements with DiffEqJump [c894b116] to versions: 5.0.0-6.20.0 or uninstalled, leaving only versions: [5.0.0-6.7.0, 6.14.0-6.20.0]\n │ └─DiffEqJump [c894b116] log: see above\n ├─restricted by compatibility requirements with RecursiveArrayTools [731186ca] to versions: 6.17.0-6.35.0 or uninstalled, leaving only versions: 6.17.0-6.20.0\n │ └─RecursiveArrayTools [731186ca] log:\n │   ├─possible versions are: 0.16.0-2.16.1 or uninstalled\n │   └─restricted to versions 2 by DiffEqJump [c894b116], leaving only versions 2.0.0-2.16.1\n │     └─DiffEqJump [c894b116] log: see above\n └─restricted by compatibility requirements with DataStructures [864edb3b] to versions: 6.25.1-6.35.0 or uninstalled — no versions left\n   └─DataStructures [864edb3b] log:\n     ├─possible versions are: 0.9.0-0.18.9 or uninstalled\n     ├─restricted to versions 0.17-0.18 by DiffEqJump [c894b116], leaving only versions 0.17.0-0.18.9\n     │ └─DiffEqJump [c894b116] log: see above\n     └─restricted by compatibility requirements with DiffEqBase [2b5f629d] to versions: 0.18.0-0.18.9\n       └─DiffEqBase [2b5f629d] log:\n         ├─possible versions are: 3.13.2-6.70.0 or uninstalled\n         └─restricted to versions 6.45.0-6 by DiffEqJump [c894b116], leaving only versions 6.45.0-6.70.0\n           └─DiffEqJump [c894b116] log: see above</code></p>",
        "id": 247358016,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627403839
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; I can't decipher what the issue is from this.</p>",
        "id": 247358033,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627403847
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Ahh, I didn't realize StochasticDiffEq has a DiffEqJump dependency. That's probably the issue.</p>",
        "id": 247358704,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627404186
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; That's an unfortunate circular dependency, even if it is in the tests.</p>",
        "id": 247358937,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627404283
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah... we should move the definition of the jumps to SciMLBase sometime.</p>",
        "id": 247464782,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627481839
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; their definitions are more critical infrastructure than solver-specific stuff</p>",
        "id": 247464817,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627481860
    },
    {
        "content": "<p>[slack] &lt;ignace-computing&gt; Is there a way to first setup a <code>SDEProblem</code>, and <strong>thereafter</strong> define the <code>noise=...</code> ?<br>\nNumerical example in reply.</p>",
        "id": 247477564,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627487692
    },
    {
        "content": "<p>[slack] &lt;ignace-computing&gt; ```using StochasticDiffEq,  DiffEqNoiseProcess, Test</p>\n<p>f1(u, p, t) = 1.01u<br>\ng1(u, p, t) = 1.01u<br>\ndt = 1//2^(4)<br>\nprob1 = SDEProblem(f1,g1,1.0,(0.0,1.0))<br>\nsol1 = solve(prob1,EM(),dt=dt,save_noise = true)</p>\n<p>W2 = NoiseWrapper(sol1.W)<br>\nprob2 = SDEProblem(f1,g1,1.0,(0.0,1.0),noise=W2)<br>\ndt = 1//2^(5)<br>\nsol2 = solve(prob2,EM(),dt=dt)</p>\n<p>W3 = NoiseWrapper(sol1.W)<br>\nprob3 = SDEProblem(f1,g1,1.0,(0.0,1.0))<br>\ndt = 1//2^(5)<br>\nsol3 = solve(prob3,EM(),dt=dt,noise=W3)</p>\n<p>using Plots<br>\nplotly()<br>\nplot(sol1, label=\"reference\")<br>\nplot!(sol2, label=\"good coarse reconstruction\")<br>\nplot!(sol3, label=\"bad coarse reconstruction\")```</p>",
        "id": 247477595,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627487710
    },
    {
        "content": "<p>[slack] &lt;frankschae&gt; if you have a fixed size grid in time, using a <code>NoiseGrid</code> might be the best option. Otherwise,<br>\n<code>W2 = pCN(sol1.W,1)</code> should do it I think.</p>",
        "id": 247479719,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627488637
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; Does there exist an example how to pass your own jacvec functions to Krylov based stiff solvers?<br>\nI have functions jacvec(du,u,v,p,t) and jacvec(u,v,p,t).</p>",
        "id": 247534999,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627520635
    },
    {
        "content": "<p>[slack] &lt;Jonathan Klaric&gt; Hi guys, I'm trying to model a bioreactor with flows into and out of said reactor using ModelingToolkit, but I don't know if I am doing the connections right? I have set up the following system/code and it APPEARS to be doing structural simplify and the Jacobian correctly but doesn't want to make an ODE function with said Jacobian - and then when I attempt to solve i immediately get a StackOverflowError. Code is below. Would anyone be able to point me in the direction of where I might be going wrong? Any help would be GREATLY appreciated!</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>@parameters t\n\n@parameters k1, k2, k3\n\nk1 = 0.04\nk2 = 3e7\nk3 = 1e4\n\n@connector function State(;name)\n    sts = @variables x(t), y(t), z(t), Q(t)\n    ODESystem(Equation[], t, sts, []; name=name)\nend\n\nfunction ModelingToolkit.connect(::Type{State}, state_from, state_to)\n    # flows have to sum to zero\n    # but the rest of the concs are the weighted average\n    eqs = [state_to.x ~ state_from.x\n            state_to.y ~ state_from.y\n            state_to.z ~ state_from.z\n            state_to.Q ~ state_from.Q]\n    return eqs\nend\n\nfunction Tank(Volume=1000 ;name)\n    @parameters t V=Volume\n    @named inflow = State()\n    @named outflow = State()\n    D = Differential(t)\n    eqs = [D(outflow.x) ~ (outflow.Q/V)*(inflow.x - outflow.x) - k1*outflow.x+k3*outflow.y*outflow.z\n            D(outflow.y) ~ (outflow.Q/V)*(inflow.y - outflow.y) + k1*outflow.x-k2*outflow.y^2-k3*outflow.y*outflow.z\n            D(outflow.z) ~ (outflow.Q/V)*(inflow.z - outflow.z) + k2*outflow.y^2\n            outflow.Q ~ inflow.Q]\n    compose(ODESystem(eqs; name=name), inflow, outflow)\nend\n\nfunction  ConstantInflow(Qin=10.0 ;name)\n    @named inflow = State()\n    @parameters Q=Qin\n    eqs = [inflow.x ~ 0.01\n            inflow.y ~ 1e5\n            inflow.z ~ 1e4\n            inflow.Q ~ Q]\n    ps = []\n    compose(ODESystem(eqs, t, [], []; name=name), inflow)\nend\n\n\n# create objects\n@named constant_source = ConstantInflow()\n@named TA = Tank()\n@named TB = Tank()\n\nsystem_objects = [constant_source, TA, TB]\n\nroger_eqs = [\n            connect(constant_source.inflow, TA.inflow)\n            connect(TA.outflow, TB.inflow)]\n\n\n@named roger_model = compose(ODESystem(roger_eqs, t), [constant_source, TA, TB])\n\nsys = structural_simplify(roger_model)\n\n# states(sys)\n# equations(sys)\n\ntspan = (0.0,1e5)\nu0 = []\nfor i in 2:length(system_objects)\n    append!(u0, [0.5, 0.5, 0.5])\nend\n\njac = eval(ModelingToolkit.generate_jacobian(sys)[2])\n\nf = ODEFunction(sys, jac=jac)```\n</code></pre></div>",
        "id": 247537732,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627524552
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; attempt to solve what?</p>",
        "id": 247539741,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627527366
    },
    {
        "content": "<p>[slack] &lt;Jonathan Klaric&gt; If I run:</p>\n<div class=\"codehilite\" data-code-language=\"prob\"><pre><span></span><code>sol = solve(prob)```\nI get a stack overflow error. If I instead try to run\n```jac = eval(ModelingToolkit.generate_jacobian(sys)[2])\nf = ODEFunction(sys, jac=jac)```\nI instead get\n```TypeError: non-boolean (var\"#7#8\") used in boolean context\n\nStacktrace:\n [1] (ODEFunction{true, F, TMM, Ta, Tt, TJ, JVP, VJP, JP, SP, TW, TWt, TPJ, S, S2, O, TCV} where {F, TMM, Ta, Tt, TJ, JVP, VJP, JP, SP, TW, TWt, TPJ, S, S2, O, TCV})(sys::ODESystem, dvs::Vector{Any}, ps::Vector{Sym{Real, Base.ImmutableDict{DataType, Any}}}, u0::Nothing; version::Nothing, tgrad::Bool, jac::Function, eval_expression::Bool, sparse::Bool, simplify::Bool, eval_module::Module, steady_state::Bool, checkbounds::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})```\n</code></pre></div>",
        "id": 247541082,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627529341
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>u0</code> isn't typed/.</p>",
        "id": 247541272,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627529560
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; use the standard ODEProblem constructor.</p>",
        "id": 247541290,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627529588
    },
    {
        "content": "<p>[slack] &lt;Jonathan Klaric&gt; It worked! Thank you so much! Here is the last piece of code that got it working (if you wanted to include this in any examples or documentation):</p>\n<div class=\"codehilite\" data-code-language=\"tspan\"><pre><span></span><code>u0 = [source.inflow.Q =&gt; 10.0]\n\nfor i in 2:length(system_objects)\n    append!(u0, [system_objects[i].outflow.x =&gt; 0.5\n                  system_objects[i].outflow.y =&gt; 0.5\n                  system_objects[i].outflow.z =&gt; 0.5])\nend\nprintln(u0)\np = []\nprob = ODEProblem(sys, u0, tspan, p, jac=true)\n@time sol = solve(prob)```\n</code></pre></div>",
        "id": 247544233,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627534048
    },
    {
        "content": "<p>[slack] &lt;ignace-computing&gt; Thank you!</p>",
        "id": 247558767,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627548997
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Say, I am playing with the <code>EnsembleSummary()</code> in diffeq, but I am not sure of the right way to access the mean and quantile information. The data seems to be there, but I don't think I am indexing it correctly.</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>plotly()\n\nα=1\nβ=1\nu₀=1/2\nf(u,p,t) = α*u\ng(u,p,t) = β*u\ndt = 1//2^(4)\ntspan = (0.0,1.0)\nprob = SDEProblem(f,g,u₀,(0.0,1.0))\n\nsol = solve(prob,SRIW1(),dt=dt)\n#plot(sol)\n\nensembleprob = EnsembleProblem(prob)\nsol = solve(ensembleprob,EnsembleThreads(),trajectories=1000)\n\nsumm = EnsembleSummary(sol,0:0.01:1;quantiles=[0.025,0.975])\n\nsumm.u```\nSo I just want the `mean` and `qlow` and `qhigh` arrays. I can do `summ.u` but that seems to give me both `t` and `u`, and it is not clear whether the `u` value is, meaning the name `u` is a bit ambiguous as to whether it is the mean or `qlow` or `qhigh`. I even tried `timeseries_steps_mean(sol)` but that gave an indexing error about trying to access a 114 element array at index 115. Can anyone indicate the right way to do that indexing?\n</code></pre></div>",
        "id": 247627152,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627585575
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Note that even <code>fieldnames(summ)</code> returns nothing, so i can't really look inside of the summary.</p>",
        "id": 247627300,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627585662
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; we have a tendency function which evaluates an expensive intermediate value: is there a way we can add that to the solution object?</p>",
        "id": 247645040,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627594821
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; we could do the expensive evaluation via a callback, but you would then want to do it at each RK stage?</p>",
        "id": 247645473,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627595060
    },
    {
        "content": "<p>[slack] &lt;mose&gt; I’m trying to rerun tests, I get new different segfaults, sigh</p>",
        "id": 247648732,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627597230
    },
    {
        "content": "<p>[slack] &lt;Gabriel Baraldi&gt; How would I debug these segfaults? Can you use valgrind or some tool like it?</p>",
        "id": 247650165,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627598309
    },
    {
        "content": "<p>[slack] &lt;mose&gt; I mean, I can't even reproduce them <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 247650309,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627598407
    },
    {
        "content": "<p>[slack] &lt;Gabriel Baraldi&gt; Does julia use that reserved register for something? it shouldn’t but I dunno</p>",
        "id": 247650398,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627598495
    },
    {
        "content": "<p>[slack] &lt;Gabriel Baraldi&gt; I don’t know if a reserved register would trigger a segfault anyway</p>",
        "id": 247650498,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627598559
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://youtu.be/9YWwiFbaRx8?t=175\">https://youtu.be/9YWwiFbaRx8?t=175</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"9YWwiFbaRx8\" href=\"https://youtu.be/9YWwiFbaRx8?t=175\"><img src=\"https://uploads.zulipusercontent.net/26e9d2707c719a0c720afa1085c356634248793a/68747470733a2f2f692e7974696d672e636f6d2f76692f39595777694662615278382f64656661756c742e6a7067\"></a></div>",
        "id": 247653356,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627600517
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Two SciML codes in the most lines of code list <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 247653364,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627600524
    },
    {
        "content": "<p>[slack] &lt;mose&gt; and maybe one of the few not autogenerated there <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 247653492,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627600604
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Ahh okay, so I get it now. For the <code>summ = EnsembleSummary(...)</code> , the <code>summ.u</code> is the mean of the simulations. This is a little confusing because I would imagine that <code>summ.mean</code> would be a more descriptive name, but <code>summ.u</code> is consistent with the usual layout of Diffeq solutions, as per the first Diffeq tutorial. So that makes sense.</p>",
        "id": 247653870,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627600864
    },
    {
        "content": "<p>[slack] &lt;pmyers&gt; Has anyone recently run into any issues trying to run batch simulations of ODE systems generated from Catalyst networks with Distributed? This code</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>if nprocs() == 1\n    addprocs(Threads.nthreads(), exeflags=\"--project=.\")\nend\n@everywhere using DifferentialEquations, Catalyst\n\n## Example model using built-in Michaelis-Menten rate function:\nmodel1 = @reaction_network begin\n    mm(X,v,K), ∅ → X\nend v K\ntspan = (0.0,1.0)\nu0 = [1.0]\nodeprob1 = ODEProblem(model1, u0, tspan, ones(2))\nps1 = [ones(2), ones(2), ones(2), ones(2), ones(2)].*collect(1:5)\nbatchsol1 = pmap(p-&gt;solve(odeprob1, Tsit5(), p=p), ps1)\n\n## Same thing happens with EnsembleProblem:\n@everywhere prob_func(prob, i, repeat) = remake(prob; p=ps1[i])\nensemble_prob = EnsembleProblem(odeprob1, prob_func=prob_func)\nbatchsol2 = solve(ensemble_prob, Tsit5(), EnsembleDistributed(); trajectories=length(ps1))\nbatchsol3 = solve(ensemble_prob, Tsit5(), EnsembleThreads(); trajectories=length(ps1)) # but this works fine```\ngenerates a key error that I really don't know what to do with (see reply for error and stacktrace). For reference, I'm calling `pmap` directly because I can't just use `EnsembleDistributed` for my specific, more complex problem, but calling `EnsembleDistributed` generates the same error anyway. Is there something I'm missing w/r/t setting up problems for Distributed or is it something else related to Catalyst and/or DifferentialEquations?\n</code></pre></div>",
        "id": 247660898,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627607746
    },
    {
        "content": "<p>[slack] &lt;pmyers&gt; Error/stacktrace:<br>\nERROR: On worker 9:<br>\nKeyError: key (0xf66753a6, 0x8168c51d, 0xfa5c35ea, 0x941a4aa8, 0x39949471) not found<br>\nStacktrace:<br>\n  [1] getindex<br>\n    @ .\\dict.jl:482<br>\n  [2] <a href=\"https://github.com/JuliaLang/julia/issues/8\">#8</a><br>\n    @ C:\\Users\\pmyer\\.julia\\packages\\RuntimeGeneratedFunctions\\3SZ1T\\src\\RuntimeGeneratedFunctions.jl:177<br>\n  [3] lock<br>\n    @ .\\lock.jl:187<br>\n  [4] _lookup_body<br>\n    @ C:\\Users\\pmyer\\.julia\\packages\\RuntimeGeneratedFunctions\\3SZ1T\\src\\RuntimeGeneratedFunctions.jl:175<br>\n  [5] generated_callfunc_body<br>\n    @ C:\\Users\\pmyer\\.julia\\packages\\RuntimeGeneratedFunctions\\3SZ1T\\src\\RuntimeGeneratedFunctions.jl:120<br>\n  [6] #s1#3<br>\n    @ C:\\Users\\pmyer\\.julia\\packages\\RuntimeGeneratedFunctions\\3SZ1T\\src\\RuntimeGeneratedFunctions.jl:208 [inlined]<br>\n  [7] #s1#3<br>\n    @ .\\none:0<br>\n  [8] GeneratedFunctionStub<br>\n    @ .\\boot.jl:571<br>\n  [9] RuntimeGeneratedFunction<br>\n    @ C:\\Users\\pmyer\\.julia\\packages\\RuntimeGeneratedFunctions\\3SZ1T\\src\\RuntimeGeneratedFunctions.jl:112 [inlined]<br>\n [10] f<br>\n    @ C:\\Users\\pmyer\\.julia\\packages\\ModelingToolkit\\yGWxM\\src\\systems\\diffeqs\\abstractodesystem.jl:228 [inlined]<br>\n [11] ODEFunction<br>\n    @ C:\\Users\\pmyer\\.julia\\packages\\SciMLBase\\cU5k7\\src\\scimlfunctions.jl:334 [inlined]<br>\n [12] initialize!<br>\n    @ C:\\Users\\pmyer\\.julia\\packages\\OrdinaryDiffEq\\UcJTX\\src\\perform_step\\low_order_rk_perform_step.jl:623<br>\n [13] #__init#467<br>\n    @ C:\\Users\\pmyer\\.julia\\packages\\OrdinaryDiffEq\\UcJTX\\src\\solve.jl:456<br>\n [14] #__solve#466<br>\n    @ C:\\Users\\pmyer\\.julia\\packages\\OrdinaryDiffEq\\UcJTX\\src\\solve.jl:4 [inlined]<br>\n [15] #solve_call#58<br>\n    @ C:\\Users\\pmyer\\.julia\\packages\\DiffEqBase\\niZxn\\src\\solve.jl:61 [inlined]<br>\n [16] solve_call<br>\n    @ C:\\Users\\pmyer\\.julia\\packages\\DiffEqBase\\niZxn\\src\\solve.jl:48 [inlined]<br>\n [17] #solve_up#60<br>\n    @ C:\\Users\\pmyer\\.julia\\packages\\DiffEqBase\\niZxn\\src\\solve.jl:85 [inlined]<br>\n [18] solve_up<br>\n    @ C:\\Users\\pmyer\\.julia\\packages\\DiffEqBase\\niZxn\\src\\solve.jl:78 [inlined]<br>\n [19] #solve#59<br>\n    @ C:\\Users\\pmyer\\.julia\\packages\\DiffEqBase\\niZxn\\src\\solve.jl:73<br>\n [20] <a href=\"https://github.com/JuliaLang/julia/issues/31\">#31</a><br>\n    @ g: my_script_to_test_pmap.jl:21<br>\n [21] <a href=\"https://github.com/JuliaLang/julia/issues/106\">#106</a><br>\n    @ C:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.6\\Distributed\\src\\process_messages.jl:278<br>\n [22] run_work_thunk<br>\n    @ C:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.6\\Distributed\\src\\process_messages.jl:63<br>\n [23] macro expansion<br>\n    @ C:\\buildbot\\worker\\package_win64\\build\\usr\\share\\julia\\stdlib\\v1.6\\Distributed\\src\\process_messages.jl:278 [inlined]<br>\n [24] <a href=\"https://github.com/JuliaLang/julia/issues/105\">#105</a><br>\n    @ .\\task.jl:411<br>\nStacktrace:</p>\n<ol>\n<li><code>(::Base.var\"#837#839\")(x::Task)</code> at vscode-file://vscode-app/c:/Users/pmyer/AppData/Local/Programs/Microsoft%20VS%20Code/resources/app/out/vs/code/electron-browser/workbench/workbench.html#</li>\n<li><code>foreach(f::Base.var\"#837#839\", itr::Vector{Any})</code> at vscode-file://vscode-app/c:/Users/pmyer/AppData/Local/Programs/Microsoft%20VS%20Code/resources/app/out/vs/code/electron-browser/workbench/workbench.html#</li>\n<li><code>maptwice(wrapped_f::Function, chnl::Channel{Any}, worker_tasks::Vector{Any}, c::Vector{Vector{Float64}})</code> at vscode-file://vscode-app/c:/Users/pmyer/AppData/Local/Programs/Microsoft%20VS%20Code/resources/app/out/vs/code/electron-browser/workbench/workbench.html#</li>\n<li><code>wrap_n_exec_twice</code> at vscode-file://vscode-app/c:/Users/pmyer/AppData/Local/Programs/Microsoft%20VS%20Code/resources/app/out/vs/code/electron-browser/workbench/workbench.html#</li>\n<li><code>#async_usemap#822</code> at vscode-file://vscode-app/c:/Users/pmyer/AppData/Local/Programs/Microsoft%20VS%20Code/resources/app/out/vs/code/electron-browser/workbench/workbench.html#</li>\n<li><code>async_usemap</code> at vscode-file://vscode-app/c:/Users/pmyer/AppData/Local/Programs/Microsoft%20VS%20Code/resources/app/out/vs/code/electron-browser/workbench/workbench.html#</li>\n<li><code>#asyncmap#821</code> at vscode-file://vscode-app/c:/Users/pmyer/AppData/Local/Programs/Microsoft%20VS%20Code/resources/app/out/vs/code/electron-browser/workbench/workbench.html#</li>\n<li><code>asyncmap</code> at vscode-file://vscode-app/c:/Users/pmyer/AppData/Local/Programs/Microsoft%20VS%20Code/resources/app/out/vs/code/electron-browser/workbench/workbench.html#</li>\n<li><code>pmap(f::Function, p::WorkerPool, c::Vector{Vector{Float64}}; distributed::Bool, batch_size::Int64, on_error::Nothing, retry_delays::Vector{Any}, retry_check::Nothing)</code> at vscode-file://vscode-app/c:/Users/pmyer/AppData/Local/Programs/Microsoft%20VS%20Code/resources/app/out/vs/code/electron-browser/workbench/workbench.html#</li>\n<li><code>pmap(f::Function, p::WorkerPool, c::Vector{Vector{Float64}})</code> at vscode-file://vscode-app/c:/Users/pmyer/AppData/Local/Programs/Microsoft%20VS%20Code/resources/app/out/vs/code/electron-browser/workbench/workbench.html#</li>\n<li><code>pmap(f::Function, c::Vector{Vector{Float64}}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})</code> at vscode-file://vscode-app/c:/Users/pmyer/AppData/Local/Programs/Microsoft%20VS%20Code/resources/app/out/vs/code/electron-browser/workbench/workbench.html#</li>\n<li><code>pmap(f::Function, c::Vector{Vector{Float64}})</code> at vscode-file://vscode-app/c:/Users/pmyer/AppData/Local/Programs/Microsoft%20VS%20Code/resources/app/out/vs/code/electron-browser/workbench/workbench.html#</li>\n</ol>",
        "id": 247660950,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627607768
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; @pmyers Do you get the same error when running the ensemble just on one process? Seems a little challenging to debug with the multiproc setup. Like is the problem occurring when you call EnsembleDistributed() and EnsembleThreads().</p>",
        "id": 247662136,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627609385
    },
    {
        "content": "<p>[slack] &lt;pmyers&gt; I haven't tried just a single process yet (will try it tomorrow morn), but EnsembleDistributed() does produce the same error with multiple procs. EnsembleThreads() runs without any issues.</p>",
        "id": 247662245,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627609527
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; open an issue. I think I know what's going on.</p>",
        "id": 247663727,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627611281
    },
    {
        "content": "<p>[slack] &lt;jon.norberg935&gt; question: is it possible to inside the derivative function dudt(du,u,p,t) have access to the proposed stepsize dt, or rather, the previous time step so I can calculate (t-t_prev)? I am applying a trick inside my dudt function and I may have to adjust its effect depending on the actual stepsize. I realise this may not be how it's supposed to be done, i.e. one calculates the dudt and then multiples the result by dt.  I see that the integrator interface has proposed next time step and previous step, but can I access previous step inside my dudt function?</p>",
        "id": 247675883,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627628267
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that is not generally well-defined</p>",
        "id": 247689260,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627639624
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you usually don't end up with an ODE if you do that</p>",
        "id": 247689271,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627639631
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what about using a delay differential equation?</p>",
        "id": 247689282,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627639644
    },
    {
        "content": "<p>[slack] &lt;jon.norberg935&gt; hm, I have to look at that if delayed Differ is a possible way. Essentially, I want to adjust dudt so that the u+du cannot go outside of given boundaries. But since I calculate dudt=du/dt I cannot check u+dudt as the units are not right, so I would need to check u+dudt * dt. So my \"trick\" is that if u+du/dt * dt &gt; k I reduce du/dt accordingly. Anyhow, I'll check your suggestion. Thanks</p>",
        "id": 247693512,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627642952
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; Sounds like you need a callback?<br>\n<a href=\"https://diffeq.sciml.ai/stable/features/callback_functions/\">https://diffeq.sciml.ai/stable/features/callback_functions/</a></p>",
        "id": 247693794,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627643170
    },
    {
        "content": "<p>[slack] &lt;jon.norberg935&gt; possibly, I tried it but I still need to get dt into my function dudt...I can use it to detect the crossing of a value, but not how to reduce the value of dudt if so. I think. will study callbacks library some more</p>",
        "id": 247694411,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627643615
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; The issue is that isn't necessarily an ODE <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 247696054,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627644840
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you can use the callbacks to modify post-step, and that can <code>integrator.dt</code></p>",
        "id": 247696112,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627644854
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; PositiveDomain and <code>isoutofdomain</code> are two methods for doing this in a way that keeps a well-defined solution, but that solution better be actually positive or else they will complain.</p>",
        "id": 247696163,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627644892
    },
    {
        "content": "<p>[slack] &lt;Kim Laberinto (he/him)&gt; @jon.norberg935 Fortunately there are <a href=\"https://github.com/search?q=DiffEq.jl&amp;type=Repositories\">DiffEq.jl</a> callbacks that might (maybe?) be similar to what you what, ensuring that the solution (u + du) of the system stays within some sort of manifold. If thats your end goal</p>",
        "id": 247696338,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627645014
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 247699575,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627646991
    },
    {
        "content": "<p>[slack] &lt;pmyers&gt; @chrisrackauckas done</p>",
        "id": 247718006,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627656696
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Thanks!</p>",
        "id": 247718310,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627656834
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what kind of method? In most methods the save point isn't going to match the evaluation points.</p>",
        "id": 247837088,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627787415
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; MWE?</p>",
        "id": 247837292,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627787729
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; right now, IDA</p>",
        "id": 247837298,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627787756
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; did I answer this?</p>",
        "id": 247837370,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627787819
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; no</p>",
        "id": 247840644,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627793907
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; After updating to newest DiffEqSensitivity</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"p\">[</span> <span class=\"n\">Info</span><span class=\"o\">:</span> <span class=\"n\">Precompiling</span> <span class=\"n\">DiffEqSensitivity</span> <span class=\"p\">[</span><span class=\"mi\">41</span><span class=\"n\">bf760c</span><span class=\"o\">-</span><span class=\"n\">e81c</span><span class=\"o\">-</span><span class=\"mi\">5289</span><span class=\"o\">-</span><span class=\"mf\">8e54</span><span class=\"o\">-</span><span class=\"mi\">58</span><span class=\"n\">b1f1f8abe2</span><span class=\"p\">]</span>\n<span class=\"n\">┌</span> <span class=\"n\">Warning</span><span class=\"o\">:</span> <span class=\"n\">The</span> <span class=\"n\">call</span> <span class=\"n\">to</span> <span class=\"n\">compilecache</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">create</span> <span class=\"n\">a</span> <span class=\"n\">usable</span> <span class=\"n\">precompiled</span> <span class=\"n\">cache</span> <span class=\"n\">file</span> <span class=\"k\">for</span> <span class=\"n\">DiffEqNoiseProcess</span> <span class=\"p\">[</span><span class=\"mi\">77</span><span class=\"n\">a26b50</span><span class=\"o\">-</span><span class=\"mi\">5914</span><span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"n\">dd7</span><span class=\"o\">-</span><span class=\"n\">bc55</span><span class=\"o\">-</span><span class=\"mf\">306e6241</span><span class=\"n\">c503</span><span class=\"p\">]</span>\n<span class=\"n\">│</span>   <span class=\"n\">exception</span> <span class=\"o\">=</span> <span class=\"n\">Required</span> <span class=\"n\">dependency</span> <span class=\"n\">StatsFuns</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"n\">c63d2b9</span><span class=\"o\">-</span><span class=\"mi\">4356</span><span class=\"o\">-</span><span class=\"mi\">54</span><span class=\"n\">db</span><span class=\"o\">-</span><span class=\"mi\">8</span><span class=\"n\">cca</span><span class=\"o\">-</span><span class=\"mi\">17</span><span class=\"n\">b64c39e42c</span><span class=\"p\">]</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">load</span> <span class=\"n\">from</span> <span class=\"n\">a</span> <span class=\"n\">cache</span> <span class=\"n\">file</span><span class=\"o\">.</span>\n<span class=\"n\">└</span> <span class=\"err\">@</span> <span class=\"n\">Base</span> <span class=\"n\">loading</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">1033</span><span class=\"sb\">```</span>\n</code></pre></div>",
        "id": 247856971,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627820651
    },
    {
        "content": "<p>[slack] &lt;mose&gt; Try to delete the directory <code>~/.julia/compiled/v1.X</code>, where <code>1.X</code> is your version of Julia. This is safe to do as the files in this directory are automatically generated</p>",
        "id": 247857070,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627820770
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; if you had RandomNumbers already imported then it'l need to redo the caches</p>",
        "id": 247857100,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627820861
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Is that a fresh session?</p>",
        "id": 247857102,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627820863
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; Revise (and some other stuff?) gets loaded automatically by vscode I guess.</p>",
        "id": 247857170,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627820933
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I just always restart my session when package versions change <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 247857497,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627821448
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 247866416,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627835499
    },
    {
        "content": "<p>[slack] &lt;Utkarsh&gt; Hi,</p>\n<p>I am getting this error when using <code>OrdinaryDiffEq.PolyesterThreads()</code> :</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>function test!(du, u, p, t)\n     du[1] = -10 * u[1]\n     du[2] = -0.01 * u[2]\nend\n\nu0 = [1.01, 1.01]\ntspan = (0.0, 1.0)\nprob = ODEProblem(test!, u0, tspan)\nsol = solve(prob,ImplicitHairerWannerExtrapolation(min_order=5, max_order=7, init_order=6,threading = OrdinaryDiffEq.PolyesterThreads()))```\nStack trace:\n\n```ERROR: Type Module does not have a definite size.\nStacktrace:\n  [1] sizeof(x::Type)\n    @ Base ./essentials.jl:455\n  [2] #s13#23\n    @ ~/.julia/packages/StrideArraysCore/pHdXt/src/thread_compatible.jl:3 [inlined]\n  [3] var\"#s13#23\"(T::Any, ::Any, x::Any)\n    @ StrideArraysCore ./none:0\n  [4] (::Core.GeneratedFunctionStub)(::Any, ::Vararg{Any, N} where N)\n    @ Core ./boot.jl:571\n  [5] object_and_preserve\n    @ ~/.julia/packages/StrideArraysCore/pHdXt/src/thread_compatible.jl:12 [inlined]\n  [6] macro expansion\n    @ ~/.julia/packages/Polyester/fDoT4/src/batch.jl:59 [inlined]\n  [7] _batch_no_reserve\n    @ ~/.julia/packages/Polyester/fDoT4/src/batch.jl:53 [inlined]\n  [8] batch\n    @ ~/.julia/packages/Polyester/fDoT4/src/batch.jl:194 [inlined]\n  [9] macro expansion\n    @ ~/.julia/packages/Polyester/fDoT4/src/closure.jl:164 [inlined]\n [10] macro expansion\n    @ ~/.julia/dev/OrdinaryDiffEq/src/misc_utils.jl:74 [inlined]\n [11] perform_step!(integrator::OrdinaryDiffEq.ODEIntegrator{ImplicitHairerWannerExtrapolation{0, true, DefaultLinSolve, DataType, OrdinaryDiffEq.PolyesterThreads}, true, Vector{Float64}, Nothing, Float64, SciMLBase.NullParameters, Float64, Float64, Float64, Float64, Vector{Vector{Float64}}, ODESolution{Float64, 2, Vector{Vector{Float64}}, Nothing, Nothing, Vector{Float64}, Vector{Vector{Vector{Float64}}}, ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, SciMLBase.NullParameters, ODEFunction{true, typeof(test!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SciMLBase.StandardODEProblem}, ImplicitHairerWannerExtrapolation{0, true, DefaultLinSolve, DataType, OrdinaryDiffEq.PolyesterThreads}, OrdinaryDiffEq.InterpolationData{ODEFunction{true, typeof(test!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Vector{Vector{Float64}}, Vector{Float64}, Vector{Vector{Vector{Float64}}}, OrdinaryDiffEq.ImplicitHairerWannerExtrapolationCache{Vector{Float64}, Vector{Float64}, Vector{Float64}, Float64, OrdinaryDiffEq.extrapolation_coefficients{Vector{Int64}, Matrix{Float64}, Vector{Float64}}, Matrix{Float64}, Vector{Matrix{Float64}}, DefaultLinSolve, SparseDiffTools.ForwardColorJacCache{Vector{ForwardDiff.Dual{ForwardDiff.Tag{SciMLBase.UJacobianWrapper{ODEFunction{true, typeof(test!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Float64, SciMLBase.NullParameters}, Float64}, Float64, 2}}, Vector{ForwardDiff.Dual{ForwardDiff.Tag{SciMLBase.UJacobianWrapper{ODEFunction{true, typeof(test!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Float64, SciMLBase.NullParameters}, Float64}, Float64, 2}}, Vector{Float64}, Vector{Vector{Tuple{Bool, Bool}}}, UnitRange{Int64}, Nothing}, Vector{ForwardDiff.Dual{ForwardDiff.Tag{SciMLBase.TimeGradientWrapper{ODEFunction{true, typeof(test!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Vector{Float64}, SciMLBase.NullParameters}, Float64}, Float64, 1}}, SciMLBase.TimeGradientWrapper{ODEFunction{true, typeof(test!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Vector{Float64}, SciMLBase.NullParameters}, SciMLBase.UJacobianWrapper{ODEFunction{true, typeof(test!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Float64, SciMLBase.NullParameters}}}, DiffEqBase.DEStats}, ODEFunction{true, typeof(test!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, OrdinaryDiffEq.ImplicitHairerWannerExtrapolationCache{Vector{Float64}, Vector{Float64}, Vector{Float64}, Float64, OrdinaryDiffEq.extrapolation_coefficients{Vector{Int64}, Matrix{Float64}, Vector{Float64}}, Matrix{Float64}, Vector{Matrix{Float64}}, DefaultLinSolve, SparseDiffTools.ForwardColorJacCache{Vector{ForwardDiff.Dual{ForwardDiff.Tag{SciMLBase.UJacobianWrapper{ODEFunction{true, typeof(test!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Float64, SciMLBase.NullParameters}, Float64}, Float64, 2}}, Vector{ForwardDiff.Dual{ForwardDiff.Tag{SciMLBase.UJacobianWrapper{ODEFunction{true, typeof(test!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Float64, SciMLBase.NullParameters}, Float64}, Float64, 2}}, Vector{Float64}, Vector{Vector{Tuple{Bool, Bool}}}, UnitRange{Int64}, Nothing}, Vector{ForwardDiff.Dual{ForwardDiff.Tag{SciMLBase.TimeGradientWrapper{ODEFunction{true, typeof(test!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Vector{Float64}, SciMLBase.NullParameters}, Float64}, Float64, 1}}, SciMLBase.TimeGradientWrapper{ODEFunction{true, typeof(test!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Vector{Float64}, SciMLBase.NullParameters}, SciMLBase.UJacobianWrapper{ODEFunction{true, typeof(test!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Float64, SciMLBase.NullParameters}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, OrdinaryDiffEq.ExtrapolationController{Rational{Int64}}, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), Nothing, CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryMinHeap{Float64}, DataStructures.BinaryMinHeap{Float64}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Vector{Float64}, Float64, Nothing, OrdinaryDiffEq.DefaultInit}, cache::OrdinaryDiffEq.ImplicitHairerWannerExtrapolationCache{Vector{Float64}, Vector{Float64}, Vector{Float64}, Float64, OrdinaryDiffEq.extrapolation_coefficients{Vector{Int64}, Matrix{Float64}, Vector{Float64}}, Matrix{Float64}, Vector{Matrix{Float64}}, DefaultLinSolve, SparseDiffTools.ForwardColorJacCache{Vector{ForwardDiff.Dual{ForwardDiff.Tag{SciMLBase.UJacobianWrapper{ODEFunction{true, typeof(test!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Float64, SciMLBase.NullParameters}, Float64}, Float64, 2}}, Vector{ForwardDiff.Dual{ForwardDiff.Tag{SciMLBase.UJacobianWrapper{ODEFunction{true, typeof(test!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Float64, SciMLBase.NullParameters}, Float64}, Float64, 2}}, Vector{Float64}, Vector{Vector{Tuple{Bool, Bool}}}, UnitRange{Int64}, Nothing}, Vector{ForwardDiff.Dual{ForwardDiff.Tag{SciMLBase.TimeGradientWrapper{ODEFunction{true, typeof(test!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Vector{Float64}, SciMLBase.NullParameters}, Float64}, Float64, 1}}, SciMLBase.TimeGradientWrapper{ODEFunction{true, typeof(test!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Vector{Float64}, SciMLBase.NullParameters}, SciMLBase.UJacobianWrapper{ODEFunction{true, typeof(test!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Float64, SciMLBase.NullParameters}}, repeat_step::Bool)\n    @ OrdinaryDiffEq ~/.julia/dev/OrdinaryDiffEq/src/perform_step/extrapolation_perform_step.jl:2180```\nContinued in thread.\n</code></pre></div>",
        "id": 247866478,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627835613
    },
    {
        "content": "<p>[slack] &lt;Utkarsh&gt; <code>[12] perform_step!\n    @ ~/.julia/dev/OrdinaryDiffEq/src/perform_step/extrapolation_perform_step.jl:2057 [inlined]\n [13] solve!(integrator::OrdinaryDiffEq.ODEIntegrator{ImplicitHairerWannerExtrapolation{0, true, DefaultLinSolve, DataType, OrdinaryDiffEq.PolyesterThreads}, true, Vector{Float64}, Nothing, Float64, SciMLBase.NullParameters, Float64, Float64, Float64, Float64, Vector{Vector{Float64}}, ODESolution{Float64, 2, Vector{Vector{Float64}}, Nothing, Nothing, Vector{Float64}, Vector{Vector{Vector{Float64}}}, ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, SciMLBase.NullParameters, ODEFunction{true, typeof(test!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SciMLBase.StandardODEProblem}, ImplicitHairerWannerExtrapolation{0, true, DefaultLinSolve, DataType, OrdinaryDiffEq.PolyesterThreads}, OrdinaryDiffEq.InterpolationData{ODEFunction{true, typeof(test!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Vector{Vector{Float64}}, Vector{Float64}, Vector{Vector{Vector{Float64}}}, OrdinaryDiffEq.ImplicitHairerWannerExtrapolationCache{Vector{Float64}, Vector{Float64}, Vector{Float64}, Float64, OrdinaryDiffEq.extrapolation_coefficients{Vector{Int64}, Matrix{Float64}, Vector{Float64}}, Matrix{Float64}, Vector{Matrix{Float64}}, DefaultLinSolve, SparseDiffTools.ForwardColorJacCache{Vector{ForwardDiff.Dual{ForwardDiff.Tag{SciMLBase.UJacobianWrapper{ODEFunction{true, typeof(test!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Float64, SciMLBase.NullParameters}, Float64}, Float64, 2}}, Vector{ForwardDiff.Dual{ForwardDiff.Tag{SciMLBase.UJacobianWrapper{ODEFunction{true, typeof(test!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Float64, SciMLBase.NullParameters}, Float64}, Float64, 2}}, Vector{Float64}, Vector{Vector{Tuple{Bool, Bool}}}, UnitRange{Int64}, Nothing}, Vector{ForwardDiff.Dual{ForwardDiff.Tag{SciMLBase.TimeGradientWrapper{ODEFunction{true, typeof(test!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Vector{Float64}, SciMLBase.NullParameters}, Float64}, Float64, 1}}, SciMLBase.TimeGradientWrapper{ODEFunction{true, typeof(test!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Vector{Float64}, SciMLBase.NullParameters}, SciMLBase.UJacobianWrapper{ODEFunction{true, typeof(test!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Float64, SciMLBase.NullParameters}}}, DiffEqBase.DEStats}, ODEFunction{true, typeof(test!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, OrdinaryDiffEq.ImplicitHairerWannerExtrapolationCache{Vector{Float64}, Vector{Float64}, Vector{Float64}, Float64, OrdinaryDiffEq.extrapolation_coefficients{Vector{Int64}, Matrix{Float64}, Vector{Float64}}, Matrix{Float64}, Vector{Matrix{Float64}}, DefaultLinSolve, SparseDiffTools.ForwardColorJacCache{Vector{ForwardDiff.Dual{ForwardDiff.Tag{SciMLBase.UJacobianWrapper{ODEFunction{true, typeof(test!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Float64, SciMLBase.NullParameters}, Float64}, Float64, 2}}, Vector{ForwardDiff.Dual{ForwardDiff.Tag{SciMLBase.UJacobianWrapper{ODEFunction{true, typeof(test!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Float64, SciMLBase.NullParameters}, Float64}, Float64, 2}}, Vector{Float64}, Vector{Vector{Tuple{Bool, Bool}}}, UnitRange{Int64}, Nothing}, Vector{ForwardDiff.Dual{ForwardDiff.Tag{SciMLBase.TimeGradientWrapper{ODEFunction{true, typeof(test!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Vector{Float64}, SciMLBase.NullParameters}, Float64}, Float64, 1}}, SciMLBase.TimeGradientWrapper{ODEFunction{true, typeof(test!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Vector{Float64}, SciMLBase.NullParameters}, SciMLBase.UJacobianWrapper{ODEFunction{true, typeof(test!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Float64, SciMLBase.NullParameters}}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, OrdinaryDiffEq.ExtrapolationController{Rational{Int64}}, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), Nothing, CallbackSet{Tuple{}, Tuple{}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryMinHeap{Float64}, DataStructures.BinaryMinHeap{Float64}, Nothing, Nothing, Int64, Tuple{}, Tuple{}, Tuple{}}, Vector{Float64}, Float64, Nothing, OrdinaryDiffEq.DefaultInit})\n    @ OrdinaryDiffEq ~/.julia/dev/OrdinaryDiffEq/src/solve.jl:478\n [14] __solve(::ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, SciMLBase.NullParameters, ODEFunction{true, typeof(test!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SciMLBase.StandardODEProblem}, ::ImplicitHairerWannerExtrapolation{0, true, DefaultLinSolve, DataType, OrdinaryDiffEq.PolyesterThreads}; kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n    @ OrdinaryDiffEq ~/.julia/dev/OrdinaryDiffEq/src/solve.jl:5\n [15] __solve\n    @ ~/.julia/dev/OrdinaryDiffEq/src/solve.jl:4 [inlined]\n [16] #solve_call#58\n    @ ~/.julia/packages/DiffEqBase/niZxn/src/solve.jl:61 [inlined]\n [17] solve_call\n    @ ~/.julia/packages/DiffEqBase/niZxn/src/solve.jl:48 [inlined]\n [18] #solve_up#60\n    @ ~/.julia/packages/DiffEqBase/niZxn/src/solve.jl:85 [inlined]\n [19] solve_up\n    @ ~/.julia/packages/DiffEqBase/niZxn/src/solve.jl:78 [inlined]\n [20] solve(prob::ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, SciMLBase.NullParameters, ODEFunction{true, typeof(test!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SciMLBase.StandardODEProblem}, args::ImplicitHairerWannerExtrapolation{0, true, DefaultLinSolve, DataType, OrdinaryDiffEq.PolyesterThreads}; sensealg::Nothing, u0::Nothing, p::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n    @ DiffEqBase ~/.julia/packages/DiffEqBase/niZxn/src/solve.jl:73\n [21] solve(prob::ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, SciMLBase.NullParameters, ODEFunction{true, typeof(test!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SciMLBase.StandardODEProblem}, args::ImplicitHairerWannerExtrapolation{0, true, DefaultLinSolve, DataType, OrdinaryDiffEq.PolyesterThreads})\n    @ DiffEqBase ~/.julia/packages/DiffEqBase/niZxn/src/solve.jl:68\n [22] top-level scope\n    @ REPL[7]:1</code><br>\nMaybe @elrodc can help?</p>",
        "id": 247866576,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627835754
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; The problem is that <code>@..</code> turns <code>Threads.threadid()</code> into <code>Base.getproperty(Threads, :threadid)</code>, and then <code>@batch</code> tries to add <code>Threads</code> as an argument</p>",
        "id": 247869885,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627840865
    },
    {
        "content": "<p>[slack] &lt;Utkarsh&gt; Oh I see, well that wasn't happening before. How can we fix that?<br>\nI did not notice any problem with <code>threading=OrdinaryDiffEq.Sequential()</code> or <code>BaseThreads()</code></p>",
        "id": 247870125,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627841204
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; That's because <code>@batch</code> tries to pass things as arguments instead of capturing them in a closure.<br>\nSequential doesn't need a closure.</p>",
        "id": 247870203,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627841285
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; Threads captures everything into a closure, which makes it super easy to get terrible performance.</p>",
        "id": 247870215,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627841309
    },
    {
        "content": "<p>[slack] &lt;Utkarsh&gt; Okay, do you have some idea how can we work around that? I'll be happy to help.</p>\n<p>Strangely enough when executing the <code>solve</code> multiple times the algorithm works after some executions <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 247870304,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627841443
    },
    {
        "content": "<p>[slack] &lt;Utkarsh&gt; It is required for a project with @chrisrackauckas on parallel extrapolation methods so yeah it's a little bit important</p>",
        "id": 247870365,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627841560
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; &gt;  Strangely enough when executing the <code>solve</code> multiple times the algorithm works after some executions<br>\nBut it would be single threaded after those executions</p>",
        "id": 247870371,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627841586
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; what happens is, because of the error, Polyester fails to free its threads.</p>",
        "id": 247870382,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627841609
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; Once it has no threads left, it turns single threaded (and thus runs sequentially, avoiding the need for the closure / passing contents as arguments).</p>",
        "id": 247870386,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627841621
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; An easy workaround within DiffEq itself would be</p>\n<div class=\"codehilite\" data-code-language=\"tiddler\"><pre><span></span><code>@.. whatever[tid] = foo(otherthing[tid])```\n</code></pre></div>",
        "id": 247870450,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627841714
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; I.e., don't let <code>@..</code> see <code>Threads.threadid()</code>  and turn it into<br>\n<code>gensymedname = Base.getproperty(Threads, threadid)</code></p>",
        "id": 247870509,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627841803
    },
    {
        "content": "<p>[slack] &lt;Utkarsh&gt; Okay, that information really helps. Let me try to implement it. Thank you!</p>",
        "id": 247870584,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627841897
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Say, does anyone know a good way to find out the variables or internals of a DiffEq object or <code>DiffEqArray</code>. For example I ran some code:<br>\n<code>a = timeseries_steps_meanvar(sol_lorenz)</code><br>\nWhich successfully computes the mean and variance of each timestep for an ensemble simulation. But I was not sure how to index into <code>a</code> to pull out those values. It turns out that <code>a[1].u</code> gives the mean and <code>a[2].u</code> gives the variance. I tried to use <code>fieldnames(a)</code> or such, but no luck. I just try to follow the main Diffeq api design as closely as possible, but technically doesn't <code>a[1]</code> usually mean the exact solution at timestep nearest 1, and <code>a(1)</code> mean the interpolated value at that timestep. Sorry I am not trying to nitpick or anything, just wanted to figure out how to look at the structure of the <code>DiffEqArray</code> or struct to figure out its structure.</p>",
        "id": 247870591,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627841925
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; I think the way to handle this within Polyester itself is to check if <code>Threads</code> and <code>threadid</code> depend on any loop symbols, and if not, automatically hoist it out of the loop.<br>\nIt can pass non-closure functions (more generally, any singleton struct is trivial) as arguments, but not modules</p>",
        "id": 247870598,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627841934
    },
    {
        "content": "<p>[slack] &lt;Utkarsh&gt; Agreed, yeah that DiffEq workaround would alright for that use case but agreed that things should handled in the Polyester itself. I am relatively new to the packages like Polyester <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> so yeah I will try to go through the current implementation and handle this in it itself.</p>",
        "id": 247870783,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627842232
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; This isn't really a general fix, but should work in these cases:<br>\n<a href=\"https://github.com/JuliaSIMD/Polyester.jl/commit/a15c5d44acbd3e8794b8d6d3aa3e09391c6142d7\">https://github.com/JuliaSIMD/Polyester.jl/commit/a15c5d44acbd3e8794b8d6d3aa3e09391c6142d7</a><br>\nIt checks to make sure a symbol isn't defined in the module before passing it as an argument.<br>\nIf you did</p>\n<div class=\"codehilite\" data-code-language=\"mythreads\"><pre><span></span><code>@batch for ...\n   mythreadsfun = MyThreads.threadid\n   ...\nend```\nyou'd still get the error, because `MyThreads` isn't defined in the module (just in the local scope), so it'd still get passed as an argument.\n</code></pre></div>",
        "id": 247873627,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627846709
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; But that's an uncommon programming pattern, so it should be fine.</p>",
        "id": 247873666,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627846762
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that would need special tooling</p>",
        "id": 247874857,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627848412
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; which is why I'm pulling DiffEqArray out</p>",
        "id": 247874874,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627848419
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; let me finally do that tonight <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 247874879,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627848424
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Oh sounds good. Sorry, did not mean to add work to you.</p>",
        "id": 247876179,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627850515
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; no worries at all</p>",
        "id": 247876233,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627850560
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; I am actually going to see if I can write some updates to the SDE docs with this, so that might help answer people's questions before the come ask on slack. Like the original SDE tutorial in DiffEq mentions <code>timeseries_steps_meanvar()</code>, but it does not have an example. So I can add an example of that--complete with the caveat about using <code>saveat</code> because of adaptivity. Then I can show how to index into the result of that function to pull out the mean and variances.</p>",
        "id": 247876324,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627850743
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; I am trying to pull out those means and variances at each timestep so that I can use them in Turing, like the Bayesian ODE example. But again, the Bayesian ODE example in Turing does not show ensembling, so perhaps I will have to write a new tutorial to show  how to do that <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>. Keeps me busy <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> .</p>",
        "id": 247876437,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627850899
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that would be great</p>",
        "id": 247876610,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627851187
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; actually, changing those descriptions to docstrings and embedding those docstrings would be right.</p>",
        "id": 247876613,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627851203
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Oh yes, that is a good idea. I did not think about that. I looked at the <code>help&gt;</code> and saw the docstrings needed to be filled in. So that would be the docstrings for <code>timeseries_steps_meanvar()</code> and related functions. I can take a look at that.</p>",
        "id": 247876696,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627851322
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; I've got a system that is very sparse (&gt;99.9% zeros in jacobian), and I was wondering if the autodiff used by a solver like <code>TRBDF2</code> takes that into account. If not, would declaring a jacobian prototype help, and what's the best way to do so using autodiff?</p>",
        "id": 247882331,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627860586
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; You need to declare the sparsity pattern via a Jacobian prototype in order for it to specialize on sparsity</p>",
        "id": 247882389,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627860672
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; then it will</p>",
        "id": 247882391,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627860677
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; though note that autodiff cannot specialize as much as symbolic diff, so if you can run it through MTK you might be able to improve it still</p>",
        "id": 247882436,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627860727
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; the computation is way too complicated for symbolic diff as far as I can tell, this is a system of coupled nonlinear PDEs</p>",
        "id": 247882452,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627860810
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; our examples are all coupled nonlinear PDEs <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 247882506,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627860870
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but yeah, grabbing the sparsity pattern is fine too</p>",
        "id": 247882509,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627860882
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; sorry, I should be more clear, there's a lot of interchangeable parts in these equations so the computation isn't defined by one simple function and there's a lot of fenagling with the types and sizes of data vectors. If MTK can handle that I would certainly be interested. But for now, is there a way to grab the sparsity pattern with autodiff?</p>",
        "id": 247882664,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627861146
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you can just throw <code>modelingtoolkitize(prob)</code> on it and just see if it works</p>",
        "id": 247882673,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627861176
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; otherwise <a href=\"https://github.com/search?q=SparsityDetection.jl&amp;type=Repositories\">SparsityDetection.jl</a> might be able to be used on your problem</p>",
        "id": 247882683,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627861193
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; autodiff isn't sufficient to prove sparsity because sparsity is not a local property.</p>",
        "id": 247882724,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627861206
    },
    {
        "content": "<p>[gitter] &lt;jianqixi&gt; Hi All, I have one system to simulate the bubble evolution at different temperatures. I tried to use the CVODE_Dense algorithm to solve the ODE. But I got the following warnings \"[CVODE WARNING]  CVode<br>\n  Internal t = <strong>* and h = </strong>* are such that t + h = t on the next step. The solver will continue anyway.\"  After those warnings showed up, the code was halted. I have tested at two different temperatures, 573 K and 773 K. In both cases, the code was halted, but at different steps (129 steps at 573 K and 91 steps at 773 K). Any ideas for the debugging of the code would be very appreciated. Thanks.</p>",
        "id": 247882728,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627861215
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @jianqixi try lower tolerances?</p>",
        "id": 247882741,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627861273
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://diffeq.sciml.ai/stable/basics/faq/#faq_stability\">https://diffeq.sciml.ai/stable/basics/faq/#faq_stability</a> should be helpful</p>",
        "id": 247882742,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627861281
    },
    {
        "content": "<p>[gitter] &lt;jianqixi&gt; I have tried to use lower tolerances, like rtol=1e-5 and abtol=1e-8, but still doesn't work</p>",
        "id": 247882866,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627861518
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that's not very low <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 247882933,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627861680
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; But okay, did you check all of the other things mentioned in that FAQ?</p>",
        "id": 247882971,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627861698
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; regarding <code>modelingtoolkitize</code>, it seems as though it's converting my parameters into a <code>Vector</code>, while my code relies on it being a <code>NamedTuple</code></p>",
        "id": 247883221,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627862076
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's going to trace it down to vectors, and the form would match the cat form.</p>",
        "id": 247883285,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627862192
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; the parameters that are used might change, which is why I'm referring to them by name and not ordinal. I supposed I could make it a vector and map symbols to ordinals but this is starting to feel overly complicated already <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 247883362,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627862333
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah, you can just grab the <code>jacobian_sparsity</code> out of that then.</p>",
        "id": 247883566,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627862532
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; Would this be with <code>SparsityDetection.jl</code>? I just tried this and got<br>\n<code>TypeError: in ccall: first argument not a pointer or valid constant expression, expected Ptr, got a value of type Symbol</code><br>\nDoesn't seem to be any indication of where in my code this issue is. Looking like I might have to work out the sparsity myself :smiling_face_with_tear:</p>",
        "id": 247884102,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627863478
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; well you said <code>modelingtoolkitize</code> worked?</p>",
        "id": 247884201,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627863605
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; No, it did not work, sorry for the confusion</p>",
        "id": 247884212,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627863654
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; my residual calculations reference parameters by name, so I can't accept a <code>Vector</code> instead of a <code>NamedTuple</code></p>",
        "id": 247884225,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627863689
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it should handle NamedTuple just fine</p>",
        "id": 247884228,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627863705
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; hmm, well my ode problem is defined as such:<br>\n<code>ODEProblem((dh, h, params, _) -&gt; solver_callback!(dh, provider, h, params), flattened, (0, time), prob_p)</code><br>\nwhere <code>provider</code> is a local variable and <code>prob_p</code> is a <code>NamedTuple</code>. When calling <code>modelingtoolkitize</code>, it seems to be passing something along the lines of<br>\n<code>(dh::Vector{Num}, h::Vector{Num}, params::Vector{Num}, #unused#::Num)</code><br>\nto the ode function. Naturally, there is no matching <code>solver_callback!</code> because params isn't a <code>NamedTuple</code></p>",
        "id": 247884402,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627863976
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I see</p>",
        "id": 247884411,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627864009
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; hmm I thought it would match form for the tracing</p>",
        "id": 247884415,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627864018
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I thought I handled NamedTuple and LabelledArrays</p>",
        "id": 247884422,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627864027
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; <a href=\"https://github.com/SciML/ModelingToolkit.jl/blob/master/src/systems/diffeqs/modelingtoolkitize.jl#L11-L15\">https://github.com/SciML/ModelingToolkit.jl/blob/master/src/systems/diffeqs/modelingtoolkitize.jl#L11-L15</a> this seems highly suspect</p>",
        "id": 247884481,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627864103
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/SciML/ModelingToolkit.jl/blob/master/src/systems/diffeqs/modelingtoolkitize.jl#L24\">https://github.com/SciML/ModelingToolkit.jl/blob/master/src/systems/diffeqs/modelingtoolkitize.jl#L24</a></p>",
        "id": 247884482,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627864119
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but then it should restructure</p>",
        "id": 247884483,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627864123
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; so it sounds like there might be a restructure dispatch missng.</p>",
        "id": 247884487,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627864131
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; ah, I see</p>",
        "id": 247884492,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627864136
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; I'm a bit confused, don't you lose the name information on line 12?</p>",
        "id": 247884624,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627864341
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; I don't see how that would reenter at any point in this</p>",
        "id": 247884626,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627864362
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; restructure should restore it.</p>",
        "id": 247884967,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627864934
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; From where? I don't follow. The names of the original parameters are not stored in the vector <code>p</code>  from which <code>params</code> is derived</p>",
        "id": 247885783,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627866332
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh interesting. So your parameters <code>p</code> are not a NamedTuple?</p>",
        "id": 247886587,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627867780
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; I think we're not on the same page here haha. My original parameters are a named tuple, yes</p>",
        "id": 247886794,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627868067
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; What I'm saying is the naming information is lost in the first few lines of <code>modelingtoolkitize</code></p>",
        "id": 247886800,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627868094
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; the restructure call you linked has none of the original names from the <code>NamedTuple</code>, just the values</p>",
        "id": 247886879,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627868234
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; <a href=\"https://gist.github.com/superckl/2ea748756b4a6e290cab3229005366f3\">https://gist.github.com/superckl/2ea748756b4a6e290cab3229005366f3</a> Here is a minimal reproduction</p>",
        "id": 247887232,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627868776
    },
    {
        "content": "<p>[slack] &lt;Utkarsh&gt; Alright, thanks for the quick fix! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 247890870,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627874833
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; at the moment, fixed step size methods</p>",
        "id": 247891953,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627877781
    },
    {
        "content": "<p>[gitter] &lt;jianqixi&gt; @GitterIRCbot Thank you for your response. I am wondering that what you mean the lower tolerance, does it mean set smaller abtol and retol, like change retol from 1e-5 to 1e-10? Thanks</p>",
        "id": 247891978,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627877873
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; @chrisrackauckas I managed to get <code>modelingtoolkitize</code> working! While it still doesn't work with the NamedTuple, I just inserted some intermediate code that reconstructs the NamedTuple from the Vector that gets passed in. I just want to say this automatic sparsity detection is a lifesaver</p>",
        "id": 247898099,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627890486
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yes, @jianqixi 1e-10 is around the range where I usually check</p>",
        "id": 247903114,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627896113
    },
    {
        "content": "<p>[slack] &lt;Alexandr Komisov&gt; Hello! Maybe it is a stupid question, but is there any general predifined (by the developers) way of including modelica models/blocks (diffeqs) without rewriting the whole model/block in julia? Right now I see a FMI/FMU solution but maybe there is a better way.</p>",
        "id": 247925578,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627914294
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Not in general. FMU integration will come from JuliaSim, and JuliaSim has a standard library which includes translations of the Modelica standard lib, but I don't think any auto-translator from Modelica is planned.</p>",
        "id": 247925799,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627914399
    },
    {
        "content": "<p>[slack] &lt;gregorykimmel&gt; I am solving a large ODE system which is a multi-dimensional array (e.g. <code>u = rand(2,2,2,2,21,21)</code> ) where the last 2 indices correspond to spatial coordinates. I want to introduce an energy constraint that also evolves over space (e.g. <code>E = rand(21,21)</code>). What is the correct way to concatenate these into <code>ODEProblem</code>. I was thinking to do something like:</p>\n<div class=\"codehilite\" data-code-language=\"s0\"><pre><span></span><code>E0 = rand(21,21);\nu0 = [s0,E0]\nprob = ODEProblem(myf,s0,tspan,p)\n\n# Then grab them separately in myf:\nfunction myf(du,u,p,t)\ns,E = u\n\n# update s\nds = # stuff\n\n# update E\ndE = # stuff\n\ndu .= [ds,dE]\nend```\nWill this work?\n</code></pre></div>",
        "id": 247926890,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627915003
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 247930046,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627916589
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; ComponentArrays can handle this.</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>s0 = rand(2,2,2,2,21,21);\nE0 = rand(21,21);\nu0 = ComponentArray(s=s0,E=E0)\n\nprob = ODEProblem(myf,u0,tspan,p)\n\nfunction myf(du,u,p,t)\n  s,E = u.s,u.E\n  du.s = # stuff\n  du.E = # stuff\nend```\n</code></pre></div>",
        "id": 247933654,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627918515
    },
    {
        "content": "<p>[slack] &lt;gregorykimmel&gt; Will test it. Thanks!</p>",
        "id": 247933750,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627918573
    },
    {
        "content": "<p>[slack] &lt;gregorykimmel&gt; Ok this seems to be running. Do I access the solution via something like <code>sol.u.E</code> and <code>sol.u.s</code> ?</p>",
        "id": 247937299,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627920689
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; I usually do something like<br>\n<code>[u.s for u in sol.u]</code><br>\nor similar.<br>\nYou can also interpolate with something like</p>\n<div class=\"codehilite\" data-code-language=\"t\"><pre><span></span><code>[u.s for u in sol(t)]```\n</code></pre></div>",
        "id": 247937767,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627921021
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; could you just use the same interpolation mechanism you use for prognostic variables?</p>",
        "id": 247948734,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627926743
    },
    {
        "content": "<p>[slack] &lt;Alex Wadell&gt; For nested ODESystems is there a way to set parameters with a nested Dict?</p>\n<div class=\"codehilite\" data-code-language=\"u0\"><pre><span></span><code>  x =&gt; 2.0\n  subsys.x =&gt; 2.0\n]```\nOnly works if the `x` and `subsys` are declared in the current scope.\nIe. something like:\n```u0 = Dict(\n  :x =&gt; 2.0,\n  :subsys =&gt; Dict(:x =&gt; 2.0)\n)```\n</code></pre></div>",
        "id": 247965958,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627935445
    },
    {
        "content": "<p>[gitter] &lt;jianqixi&gt; @GitterIRCbot Thank you!</p>",
        "id": 247970834,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627937979
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; That should be fixed in the newest verison? @yingbo_ma was the namespace fix tagged?</p>",
        "id": 247974151,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627939904
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; The fix is not ready, and even with the fix, it won’t work</p>",
        "id": 247976813,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627941516
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; This issue falls in the category of “modification of the system before or after the instantiation”</p>",
        "id": 247976880,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627941572
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Do open an issue so that this is tracked</p>",
        "id": 247978637,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627942857
    },
    {
        "content": "<p>[slack] &lt;Alex Wadell&gt; <a href=\"https://github.com/SciML/ModelingToolkit.jl/issues/1159\">https://github.com/SciML/ModelingToolkit.jl/issues/1159</a></p>",
        "id": 247980152,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627944138
    },
    {
        "content": "<p>[slack] &lt;gregorykimmel&gt; Thanks. Worked like a charm.</p>",
        "id": 248168688,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627949379
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; Are there any pointers when to use FastBroadcast.@.. , and when not to?<br>\nAnd what to do if not all your operators should be broadcasted. Is there a non-marcro alternative?</p>",
        "id": 248186911,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627972948
    },
    {
        "content": "<p>[slack] &lt;Junpeng&gt; As I understand, broadcast could help make GPU compatible so that you could make the code GPU-parallelized easily as pointed in <a href=\"https://www.stochasticlifestyle.com/solving-systems-stochastic-pdes-using-gpus-julia/\">https://www.stochasticlifestyle.com/solving-systems-stochastic-pdes-using-gpus-julia/</a><br>\nThe final results should be the same as using loops as shown in <a href=\"https://tutorials.sciml.ai/html/introduction/03-optimizing_diffeq_code.html\">https://tutorials.sciml.ai/html/introduction/03-optimizing_diffeq_code.html</a><br>\n@.. should has the same usage as @. , so you could avoid adding dots with <code>$</code>. (You could type <code>?@.</code> to find it in the julia REPL.</p>",
        "id": 248194720,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627979488
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; FastBroadcast just generally lowers to nicer code that fully matches the loop while standard broadcast sometimes does not fully inline.</p>",
        "id": 248195797,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627980203
    },
    {
        "content": "<p>[gitter] &lt;Danijel-Zadravec&gt; Hi guys! I have a question regarding the type of solution.<br>\nWhy does the solve function returns ::Any type while solving system of equations?</p>\n<p>For example:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">using</span> <span class=\"n\">DifferentialEquations</span>\n<span class=\"k\">function</span> <span class=\"n\">lorenz!</span><span class=\"p\">(</span><span class=\"n\">du</span><span class=\"p\">,</span><span class=\"n\">u</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"n\">du</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">10.0</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">-</span><span class=\"n\">u</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n    <span class=\"n\">du</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">u</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"mf\">28.0</span><span class=\"o\">-</span><span class=\"n\">u</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">])</span> <span class=\"o\">-</span> <span class=\"n\">u</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n    <span class=\"n\">du</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">u</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"n\">u</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"o\">/</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">u</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n<span class=\"k\">end</span>\n<span class=\"n\">u0</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">1.0</span><span class=\"p\">;</span><span class=\"mf\">0.0</span><span class=\"p\">;</span><span class=\"mf\">0.0</span><span class=\"p\">]</span>\n<span class=\"n\">tspan</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"mf\">100.0</span><span class=\"p\">)</span>\n<span class=\"n\">prob</span> <span class=\"o\">=</span> <span class=\"n\">ODEProblem</span><span class=\"p\">(</span><span class=\"n\">lorenz!</span><span class=\"p\">,</span><span class=\"n\">u0</span><span class=\"p\">,</span><span class=\"n\">tspan</span><span class=\"p\">)</span>\n<span class=\"n\">sol</span> <span class=\"o\">=</span> <span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">prob</span><span class=\"p\">)</span>\n<span class=\"nd\">@code_warntype</span> <span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">prob</span><span class=\"p\">)</span>\n\n <span class=\"sb\">```</span>\n\n<span class=\"sb\"> I use the solution as input in other function (for the calculation of gradient), and I wonder if this has effect on overall performance.</span>\n<span class=\"sb\">If yes, is there some kind of workaround to specify solution type? Maybe barrier function?</span>\n</code></pre></div>",
        "id": 248203290,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627985674
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @danijel-Zadravec the automated algorithm choice is type-unstable since it has to choose an algorithm type out of the hat. If you choose a solver directly it won't be type-unstable.</p>",
        "id": 248205381,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627987352
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; I'm now taking the time to hand-write the jacobian of a discretized Kurmato-Shivashinski equation <a href=\"https://en.wikipedia.org/wiki/Kuramoto%E2%80%93Sivashinsky_equation\">https://en.wikipedia.org/wiki/Kuramoto%E2%80%93Sivashinsky_equation</a>  . But I'm wondering whether there is a way to get the sparse Jacobian analytically via <a href=\"https://github.com/Symbolics/ModellingToolkit.jl\">Symbolics/ModellingToolkit.jl</a> ? How well does it play with for loops, as I dont want to define potentially 100 variables x_1, ... x_100 ?\\</p>",
        "id": 248206485,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627988183
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; (for reference, the discretized form is<br>\n```    @inbounds for n in 3:length(u)-2<br>\n        np1 = n+1<br>\n        nm1 = n-1<br>\n        np2 = n+2<br>\n        nm2 = n-2<br>\n        du[n] = (<br>\n            -(u[np1] - 2u[n] + u[nm1])/dxx<br>\n            -(u[np2] - 4u[np1] + 6u[n] - 4u[nm1] + u[nm2])/dxxxx</p>\n<div class=\"codehilite\"><pre><span></span><code>        - u[n]*(u[np1] - u[nm1])/dx2\n    )\nend```\n</code></pre></div>\n\n<p>wjere <code>np1</code> means <code>n+1</code>.</p>",
        "id": 248206514,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627988212
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; right now it would scalarize the for loops, but it should just work on that example.</p>",
        "id": 248206619,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627988289
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; Do you guys have any example/tutorial to get me started? Or is the way to really define the 100 x_1, .. x_100 ?</p>",
        "id": 248206678,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627988359
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; I could do it with a for loop and <code>@eval @variable</code></p>",
        "id": 248206699,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627988383
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; and <code>$</code> on the symbol</p>",
        "id": 248206704,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627988390
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>modelingtoolkitize(prob)</code> is the quickest way to do it.</p>",
        "id": 248206710,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627988396
    },
    {
        "content": "<p>[gitter] &lt;Danijel-Zadravec&gt; @ChrisRackauckas Thank you very much!<br>\nIs there a way to infer solver and parameters which were used for the solution frim the solution?<br>\nIn my problem I am solving DAE which does solve using only  alg_hints= [:stiff]</p>",
        "id": 248206969,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627988582
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; yeah: <a href=\"https://mtk.sciml.ai/dev/mtkitize_tutorials/modelingtoolkitize/\">https://mtk.sciml.ai/dev/mtkitize_tutorials/modelingtoolkitize/</a> perfect thanks</p>",
        "id": 248206973,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627988589
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>sol.alg</code> will tell you which solver was chosen.</p>",
        "id": 248207064,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627988675
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>f = ODEFunction(rober, sparse=true)</code> if you just want to rebuild with the sparsity pattern, etc.</p>",
        "id": 248207122,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627988727
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://diffeq.sciml.ai/stable/tutorials/advanced_ode_example/#Automatic-Sparsity-Detection\">https://diffeq.sciml.ai/stable/tutorials/advanced_ode_example/#Automatic-Sparsity-Detection</a> is similar.</p>",
        "id": 248207138,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627988740
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; Oh, so this and the one from the ModelingToolkit will be the same?</p>",
        "id": 248207159,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627988751
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; (after converting the symbolic to numeric)</p>",
        "id": 248207167,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627988758
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; we should update the DiffEq documentation one to just use the ModelingToolkit approach. It should be faster these days, though @shashi does need to look at one performance thing that can come up in the tracing.</p>",
        "id": 248207259,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627988819
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; After I optimize the jacobian of an ODE via the pipeline:</p>\n<div class=\"codehilite\" data-code-language=\"prob\"><pre><span></span><code>sys = modelingtoolkitize(prob)\njac = eval(ModelingToolkit.generate_jacobian(sys)[2])\nf = ODEFunction(kse, jac=jac)\nprob_jac = ODEProblem(f, uinit, (0.0, T), p)```\nHow do I obtain the actual sparse Jacobian matrix? (I need it for some other code). I could do `jac(zeros(100,100),...)` but I would like to have the sparse version (which in principle I don't know the sparsity pattern yet, it was optimized via diffeq)\n</code></pre></div>",
        "id": 248207600,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627989073
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>f = ODEFunction(kse, sparse=true)</code> and then <code>jac_prototype</code> will be the sparsity pattern</p>",
        "id": 248207731,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627989200
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what you did there generated the analytical solution to the Jacobian</p>",
        "id": 248207736,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627989207
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I'm realizing we should really add a doc example that exploits sparsity <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 248207745,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627989226
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; haha yeah I want to pass the sparse Jacobian to <code>lyapunovspectrum</code> and see how muich speed up I get <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> At the moment it takes 1 hour with ForwardDiff jacobian</p>",
        "id": 248207833,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627989297
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; Hm unfortuantely something went wrong here: <a href=\"https://files.slack.com/files-pri/T68168MUP-F029TS6P8S2/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F029TS6P8S2/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F029TS6P8S2/download/image.png\"><img src=\"https://uploads.zulipusercontent.net/22af52646b36496508240806919db055e6334f5b/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303239545336503853322f646f776e6c6f61642f696d6167652e706e67\"></a></div>",
        "id": 248207884,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627989361
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; share your exampel?</p>",
        "id": 248207941,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627989399
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>`f = ODEFunction(kse, jac=true, sparse=true)</code> should at least work?</p>",
        "id": 248207960,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627989422
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I think one of the things you'll want to steal is <a href=\"https://github.com/search?q=RecursiveFactorization.jl&amp;type=Repositories\">RecursiveFactorization.jl</a>. For a lot of the problems of the size you look at, that will be faster than the default <code>\\</code> by a lot since OpenBLAS sucks.</p>",
        "id": 248208003,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627989472
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; <a href=\"https://gist.github.com/Datseris/8b791733318bb41c755064099ec71bbd\">https://gist.github.com/Datseris/8b791733318bb41c755064099ec71bbd</a></p>",
        "id": 248208083,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627989519
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; Seems like sparse is not a  keyword: <a href=\"https://files.slack.com/files-pri/T68168MUP-F02A0QUBUF5/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F02A0QUBUF5/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02A0QUBUF5/download/image.png\"><img src=\"https://uploads.zulipusercontent.net/1969c9433dce694268e4a946978fb15a44af2e3f/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303241305155425546352f646f776e6c6f61642f696d6167652e706e67\"></a></div>",
        "id": 248208128,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627989575
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; Let me update packages once again, although I did it this morning.</p>",
        "id": 248208133,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627989582
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; I don't use <code>\\</code>, I use <code>qr</code> in that function. Hope it will go into <a href=\"https://github.com/search?q=RecursiveFactorization.jl&amp;type=Repositories\">RecursiveFactorization.jl</a> soon <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 248208215,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627989637
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Like seriously, look at <a href=\"https://github.com/YingboMa/RecursiveFactorization.jl/pull/28#issuecomment-890267907\">https://github.com/YingboMa/RecursiveFactorization.jl/pull/28#issuecomment-890267907</a></p>",
        "id": 248208398,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627989785
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; OpenBLAS is a performance nightmare.</p>",
        "id": 248208402,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627989790
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; haha looking dforwards to this finding its way into Base</p>",
        "id": 248208493,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627989867
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; I confirm that after updating both issues remain</p>",
        "id": 248209256,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627990472
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; okay open an issue with an example</p>",
        "id": 248209716,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627990812
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I'll turn it into a doc tutorial</p>",
        "id": 248209723,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627990815
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; cool. In ordinarydiffeq.jl or modelingtoolkit.jl?</p>",
        "id": 248209750,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627990835
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/search?q=ModelingToolkit.jl&amp;type=Repositories\">ModelingToolkit.jl</a></p>",
        "id": 248209751,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627990841
    },
    {
        "content": "<p>[gitter] &lt;Danijel-Zadravec&gt; @ChrisRackauckas <br>\nBy specifying solver for the Lorenz problem i get stable type of solution. But for my problem it is still unstable:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@code_warntype</span> <span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">dae_problem</span><span class=\"p\">,</span> <span class=\"n\">Rodas4</span><span class=\"p\">())</span>\n<span class=\"n\">Variables</span>\n  <span class=\"c\">#self#::Core.Const(CommonSolve.solve)</span>\n  <span class=\"n\">prob</span><span class=\"o\">::</span><span class=\"kt\">ODEProblem</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">true</span><span class=\"p\">,</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">ODEFunction</span><span class=\"p\">{</span><span class=\"kt\">true</span><span class=\"p\">,</span> <span class=\"kt\">BatchDistillation</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#states_dae_f!#50\"</span><span class=\"p\">{</span><span class=\"kt\">BatchDistillation</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#138#139\"</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span>\n<span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">DEFAULT_OBSERVED</span><span class=\"p\">),</span> <span class=\"kt\">Nothing</span><span class=\"p\">},</span> <span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">Iterators</span><span class=\"o\">.</span><span class=\"kt\">Pairs</span><span class=\"p\">{</span><span class=\"kt\">Union</span><span class=\"p\">{},</span> <span class=\"kt\">Union</span><span class=\"p\">{},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{},</span> <span class=\"kt\">NamedTuple</span><span class=\"p\">{(),</span> <span class=\"kt\">Tuple</span><span class=\"p\">{}}},</span> <span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">StandardODEProblem</span><span class=\"p\">}</span>\n  <span class=\"n\">args</span><span class=\"o\">::</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Rodas4</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"kt\">true</span><span class=\"p\">,</span> <span class=\"kt\">DefaultLinSolve</span><span class=\"p\">,</span> <span class=\"kt\">DataType</span><span class=\"p\">}}</span>\n\n<span class=\"n\">Body</span><span class=\"o\">::</span><span class=\"kt\">Any</span>\n<span class=\"mi\">1</span> <span class=\"n\">─</span> <span class=\"o\">%</span><span class=\"mi\">1</span> <span class=\"o\">=</span> <span class=\"n\">Core</span><span class=\"o\">.</span><span class=\"kt\">NamedTuple</span><span class=\"p\">()</span><span class=\"o\">::</span><span class=\"kt\">Core</span><span class=\"o\">.</span><span class=\"n\">Const</span><span class=\"p\">(</span><span class=\"kt\">NamedTuple</span><span class=\"p\">())</span>\n<span class=\"n\">│</span>   <span class=\"o\">%</span><span class=\"mi\">2</span> <span class=\"o\">=</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">pairs</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Core</span><span class=\"o\">.</span><span class=\"n\">Const</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"kt\">Pairs</span><span class=\"p\">{</span><span class=\"kt\">Union</span><span class=\"p\">{},</span> <span class=\"kt\">Union</span><span class=\"p\">{},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{},</span> <span class=\"kt\">NamedTuple</span><span class=\"p\">{(),</span> <span class=\"kt\">Tuple</span><span class=\"p\">{}}}())</span>\n<span class=\"n\">│</span>   <span class=\"o\">%</span><span class=\"mi\">3</span> <span class=\"o\">=</span> <span class=\"n\">Core</span><span class=\"o\">.</span><span class=\"n\">tuple</span><span class=\"p\">(</span><span class=\"n\">DiffEqBase</span><span class=\"o\">.</span><span class=\"nb\">nothing</span><span class=\"p\">,</span> <span class=\"n\">DiffEqBase</span><span class=\"o\">.</span><span class=\"nb\">nothing</span><span class=\"p\">,</span> <span class=\"n\">DiffEqBase</span><span class=\"o\">.</span><span class=\"nb\">nothing</span><span class=\"p\">,</span> <span class=\"o\">%</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"c\">#self#, prob)::Core.PartialStruct(Tuple{Nothing, Nothing, Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(solve), ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, BatchDistillation.var\"#states_dae_f!#50\"{BatchDistillation.var\"#138#139\", Float64}, Matrix{Int64}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SciMLBase.StandardODEProblem}}, Any[Core.Const(nothing), Core.Const(nothing), Core.Const(nothing), Core.Const(Base.Iterators.Pairs{Union{}, Union{}, Tuple{},</span>\n<span class=\"kt\">NamedTuple</span><span class=\"p\">{(),</span> <span class=\"kt\">Tuple</span><span class=\"p\">{}}</span><span class=\"err\">}</span><span class=\"p\">()),</span> <span class=\"n\">Core</span><span class=\"o\">.</span><span class=\"n\">Const</span><span class=\"p\">(</span><span class=\"n\">CommonSolve</span><span class=\"o\">.</span><span class=\"n\">solve</span><span class=\"p\">),</span> <span class=\"kt\">ODEProblem</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">true</span><span class=\"p\">,</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">ODEFunction</span><span class=\"p\">{</span><span class=\"kt\">true</span><span class=\"p\">,</span> <span class=\"kt\">BatchDistillation</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#states_dae_f!#50\"</span><span class=\"p\">{</span><span class=\"kt\">BatchDistillation</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#138#139\"</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">DEFAULT_OBSERVED</span><span class=\"p\">),</span> <span class=\"kt\">Nothing</span><span class=\"p\">},</span> <span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">Iterators</span><span class=\"o\">.</span><span class=\"kt\">Pairs</span><span class=\"p\">{</span><span class=\"kt\">Union</span><span class=\"p\">{},</span> <span class=\"kt\">Union</span><span class=\"p\">{},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{},</span> <span class=\"kt\">NamedTuple</span><span class=\"p\">{(),</span> <span class=\"kt\">Tuple</span><span class=\"p\">{}}},</span> <span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">StandardODEProblem</span><span class=\"p\">}])</span>\n<span class=\"n\">│</span>   <span class=\"o\">%</span><span class=\"mi\">4</span> <span class=\"o\">=</span> <span class=\"n\">Core</span><span class=\"o\">.</span><span class=\"n\">_apply_iterate</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">iterate</span><span class=\"p\">,</span> <span class=\"n\">DiffEqBase</span><span class=\"o\">.:</span><span class=\"p\">(</span><span class=\"sa\">var</span><span class=\"s\">\"#solve#59\"</span><span class=\"p\">),</span> <span class=\"o\">%</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">)</span><span class=\"o\">::</span><span class=\"kt\">Any</span>\n<span class=\"n\">└──</span>      <span class=\"k\">return</span> <span class=\"o\">%</span><span class=\"mi\">4</span>\n\n <span class=\"sb\">```</span>\n\n<span class=\"sb\">Nevertheless, code runs 10x faster.</span>\n</code></pre></div>",
        "id": 248209785,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627990873
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; A function barrier would solve it, but I think this might be a case where <code>@code_warntype</code> could be lying and Cthulhu might more accurately describe it <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 248209909,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627990973
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; <a href=\"https://github.com/SciML/ModelingToolkit.jl/issues/1160\">https://github.com/SciML/ModelingToolkit.jl/issues/1160</a></p>",
        "id": 248210100,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627991101
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; alright, I'll try to get to that later today</p>",
        "id": 248210155,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627991157
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; still behind from JuliaCon <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 248210161,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627991161
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; oh well, what can you do, a lot of great talks need a lot of time <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 248210212,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1627991179
    },
    {
        "content": "<p>[gitter] &lt;HenriLaurie&gt; Hi all -- not sure this is the best place. I am getting errors running hudson_bay.jl from the universal_differential_equations repo. They're niggly shape mismatches and so on. I could shift the line where the error is reported from by using very localised names instead of what look like globals to me, but I couldn't eliminate them.</p>",
        "id": 248257038,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628013894
    },
    {
        "content": "<p>[gitter] &lt;HenriLaurie&gt; So that means I can't put in a pull request, or at least, not one with a code fix. I would love some advice ;-)</p>",
        "id": 248257148,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628013942
    },
    {
        "content": "<p>[slack] &lt;AlCap23&gt; Can you post the trace of the error?</p>",
        "id": 248257937,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628014290
    },
    {
        "content": "<p>[slack] &lt;AlCap23&gt; Or show me the code <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> Maybe I can reproduce.</p>",
        "id": 248258148,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628014383
    },
    {
        "content": "<p>[slack] &lt;AlCap23&gt; I just reran the hudson_bay example, and it works locally. If you put up an Issue at DataDrivenDiffEq or in the universal differential repo with the code attached, I will have a look.</p>",
        "id": 248262904,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628016670
    },
    {
        "content": "<p>[gitter] &lt;HenriLaurie&gt; Thanks! Just started an issue</p>",
        "id": 248270686,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628020180
    },
    {
        "content": "<p>[slack] &lt;Alex Wadell&gt; Is there an in-place <code>extend</code>/ is it even possible? I’ve noticed <code>ODESystem.eqs</code> , etc. are mutable but that could be a happy coincidence?</p>",
        "id": 248272793,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628020991
    },
    {
        "content": "<p>[slack] &lt;tinosulzer&gt; Have been trying out some things related to generated jacobians, sparsities, etc. <a href=\"https://gist.github.com/tinosulzer/a5ecefb731ad8924b80d964257a5567f\">https://gist.github.com/tinosulzer/a5ecefb731ad8924b80d964257a5567f</a> What am I missing to get the version with automatic jacobian/sparsity as fast as the Sundials version with <code>CVODE_BDF(linear_solver=:Band,jac_upper=1,jac_lower=1)</code>?</p>",
        "id": 248302172,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628040910
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; using a BandedMatrix, or Tridiagonal, for the sparsity pattern will be way faster than a general sparse matrix.</p>",
        "id": 248302270,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628041053
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Try directly setting the sparsity to a Tridigonal</p>",
        "id": 248302277,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628041066
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; also try QNDF and FBDF</p>",
        "id": 248302331,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628041104
    },
    {
        "content": "<p>[slack] &lt;Or&gt; Does SciML support using complex numbers? Whenever I try to run using complex numbers I get a warning that automatic differentiation fails.</p>",
        "id": 248353746,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628085772
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; SciML does, a good chunk of the autodiff tools don't. So you just have to be careful which autodiff tool you use.</p>",
        "id": 248356001,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628086748
    },
    {
        "content": "<p>[slack] &lt;Or&gt; So all I need to do is:<br>\n<code>sciml_train(loss, _θ, adtype = GalacticOptim.AutoZygote())</code><br>\nand it should work?</p>",
        "id": 248356934,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628087149
    },
    {
        "content": "<p>[slack] &lt;Or&gt; (assuming that the loss function is a holomorphic function)</p>",
        "id": 248357052,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628087181
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it should. Zygote should be fine with complex.</p>",
        "id": 248357411,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628087333
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; Is it possible to terminate integration when an error is encountered while evaluating an ode function? I can catch the error myself, but I don't think the ode function has access to the integrator like a callback does.</p>",
        "id": 248360103,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628088377
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you mean instead of erroring, warn and return where it's at?</p>",
        "id": 248360456,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628088517
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; Yeah exactly</p>",
        "id": 248360497,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628088534
    },
    {
        "content": "<p>[slack] &lt;tinosulzer&gt; I was trying some things out to see if providing the automated jac/sparsity could be as fast as using the <code>Band</code> linear solver - to then apply to different cases where the jac isn’t TriDiagonal. I guess nothing beats specialized knowledge in this case?</p>\n<p><code>modelingtoolkitize</code> scalarizes the equations anyway, so form of the sparse matrix doesn’t make a difference to what jacobian gets generated<br>\n<code> Differential(t)(x₁(t)) ~ x₂(t) - x₁(t)\n Differential(t)(x₂(t)) ~ x₁(t) + x₃(t) - (2.0x₂(t))\n Differential(t)(x₃(t)) ~ x₂(t) + x₄(t) - (2.0x₃(t))\n Differential(t)(x₄(t)) ~ x₃(t) + x₅(t) - (2.0x₄(t))\n Differential(t)(x₅(t)) ~ x₄(t) + x₆(t) - (2.0x₅(t))\n Differential(t)(x₆(t)) ~ x₅(t) + x₇(t) - (2.0x₆(t))\n Differential(t)(x₇(t)) ~ x₆(t) + x₈(t) - (2.0x₇(t))\n Differential(t)(x₈(t)) ~ x₇(t) + x₉(t) - (2.0x₈(t))\n ⋮\n Differential(t)(x₉₃(t)) ~ x₉₂(t) + x₉₄(t) - (2.0x₉₃(t))\n Differential(t)(x₉₄(t)) ~ x₉₃(t) + x₉₅(t) - (2.0x₉₄(t))\n Differential(t)(x₉₅(t)) ~ x₉₄(t) + x₉₆(t) - (2.0x₉₅(t))\n Differential(t)(x₉₆(t)) ~ x₉₅(t) + x₉₇(t) - (2.0x₉₆(t))\n Differential(t)(x₉₇(t)) ~ x₉₆(t) + x₉₈(t) - (2.0x₉₇(t))\n Differential(t)(x₉₈(t)) ~ x₉₇(t) + x₉₉(t) - (2.0x₉₈(t))\n Differential(t)(x₉₉(t)) ~ x₁₀₀(t) + x₉₈(t) - (2.0x₉₉(t))\n Differential(t)(x₁₀₀(t)) ~ x₉₉(t) - x₁₀₀(t) </code></p>",
        "id": 248377323,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628096295
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; In theory we could run a few passes to check if it's Tridiagonal etc. and replace it.</p>",
        "id": 248377738,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628096469
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; In practice, we always return a SparseMatrixCSC, and that's just going to be slower than Tridiagonal or Banded representations.</p>",
        "id": 248377778,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628096489
    },
    {
        "content": "<p>[slack] &lt;tinosulzer&gt; yeah all the PDE discretizations will be at least block banded</p>",
        "id": 248378053,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628096614
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; I'm trying to debug an issue with the implicit solvers: is there a way to see what the Jacobian it is computing?</p>",
        "id": 248383736,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628099332
    },
    {
        "content": "<p>[slack] &lt;Utkarsh&gt; I think using integrator interface might be helpful for it: <a href=\"https://diffeq.sciml.ai/stable/basics/integrator/#integrator\">https://diffeq.sciml.ai/stable/basics/integrator/#integrator</a><br>\nAfter that, you can access cache using <code>integrator.cache</code>. Implicit solvers use <code>nlsolver</code> (which caches J and W computation), for eg: <code>KenCarp4()</code> has this:<br>\n<a href=\"https://github.com/SciML/OrdinaryDiffEq.jl/blob/master/src/caches/kencarp_kvaerno_caches.jl#L179\">https://github.com/SciML/OrdinaryDiffEq.jl/blob/master/src/caches/kencarp_kvaerno_caches.jl#L179</a></p>\n<p>So in that case you can access the Jacobian something like this: <code>integrator.cache.nlsolver.J</code></p>",
        "id": 248396255,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628105107
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; can you tell what <code>u</code> was used to compute that <code>J</code>?</p>",
        "id": 248398067,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628105907
    },
    {
        "content": "<p>[slack] &lt;Utkarsh&gt; <code>integrator.u</code> is the u at the time-step for the algorithm.</p>\n<p>In nlsolvers,<br>\nI think its here: <a href=\"https://github.com/SciML/OrdinaryDiffEq.jl/blob/master/src/nlsolve/newton.jl#L115\">https://github.com/SciML/OrdinaryDiffEq.jl/blob/master/src/nlsolve/newton.jl#L115</a><br>\nSo probably <code>integrator.cache.nlsolver.ustep</code></p>",
        "id": 248399583,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628106718
    },
    {
        "content": "<p>[slack] &lt;Utkarsh&gt; IMO it might be tough to debug it, because there could be many computations of J between two time steps, so you’ll need to print things</p>",
        "id": 248400968,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628107328
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I'd put an <code>@show</code> in the nlsolver code</p>",
        "id": 248428870,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628126880
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what's going on? what's the what?</p>",
        "id": 248428912,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628126888
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Who has cool SciML images to share? I need some examples with captions (and we'll credit you!).</p>",
        "id": 248428927,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628126922
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @ranocha, @Datseris, @SebastianM-C all come to mind as someone who might have something</p>",
        "id": 248428950,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628126951
    },
    {
        "content": "<p>[slack] &lt;ranocha&gt; We have some videos created with <a href=\"https://github.com/search?q=Trixi.jl&amp;type=Repositories\">Trixi.jl</a> in space and <a href=\"https://github.com/search?q=OrdinaryDiffEq.jl&amp;type=Repositories\">OrdinaryDiffEq.jl</a> in time in our Youtube channel: <a href=\"https://www.youtube.com/channel/UCpd92vU2HjjTPup-AIN0pkg/featured\">https://www.youtube.com/channel/UCpd92vU2HjjTPup-AIN0pkg/featured</a>. If there's anything interesting for you, we can of course also create some static plot</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"channel\" href=\"https://www.youtube.com/channel/UCpd92vU2HjjTPup-AIN0pkg/featured\"><img src=\"https://uploads.zulipusercontent.net/1476da0df5fee77805dce548fc04444608bb654b/68747470733a2f2f692e7974696d672e636f6d2f76692f6368616e6e656c2f64656661756c742e6a7067\"></a></div>",
        "id": 248438990,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628139934
    },
    {
        "content": "<p>&lt;system&gt; file image.png too big to download (2496049 &gt; allowed size: 1000000)</p>",
        "id": 248439204,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628140223
    },
    {
        "content": "<p>[slack] &lt;ranocha&gt; We also have a few more such as acoustics on the Trixi witch mesh with this initial condition</p>",
        "id": 248439205,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628140224
    },
    {
        "content": "<p>[slack] &lt;ranocha&gt; There is some work in progress by Jesse Chan to get visualization with Makie for <a href=\"https://github.com/search?q=Trixi.jl&amp;type=Repositories\">Trixi.jl</a>, e.g., <a href=\"https://user-images.githubusercontent.com/1156048/119928626-89c37680-bf41-11eb-95d5-7203ff94c5cf.png\">https://user-images.githubusercontent.com/1156048/119928626-89c37680-bf41-11eb-95d5-7203ff94c5cf.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://user-images.githubusercontent.com/1156048/119928626-89c37680-bf41-11eb-95d5-7203ff94c5cf.png\"><img src=\"https://uploads.zulipusercontent.net/3c6e04612c0d0434f79a0af5435959b77dbb38b9/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f313135363034382f3131393932383632362d38396333373638302d626634312d313165622d393564352d3732303366663934633563662e706e67\"></a></div>",
        "id": 248439283,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628140342
    },
    {
        "content": "<p>[slack] &lt;ranocha&gt; If some of the videos and/or pictures looks interesting, I can create a high-res static version and provide some captions for you</p>",
        "id": 248439310,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628140409
    },
    {
        "content": "<p>[slack] &lt;Fredrik Bagge Carlson&gt; @ranocha Cool! where can I learn more about your acoustic examples?</p>",
        "id": 248439558,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628140737
    },
    {
        "content": "<p>[slack] &lt;ranocha&gt; We implement the <code>AcousticPerturbationEquations2D</code> in <a href=\"https://github.com/search?q=Trixi.jl&amp;type=Repositories\">Trixi.jl</a>, see <a href=\"https://trixi-framework.github.io/Trixi.jl/stable/reference-trixi/#Trixi.AcousticPerturbationEquations2D\">https://trixi-framework.github.io/Trixi.jl/stable/reference-trixi/#Trixi.AcousticPerturbationEquations2D</a>. There are a few examples such as <a href=\"https://github.com/trixi-framework/Trixi.jl/blob/main/examples/unstructured_2d_dgsem/elixir_ape_gauss_wall.jl\">https://github.com/trixi-framework/Trixi.jl/blob/main/examples/unstructured_2d_dgsem/elixir_ape_gauss_wall.jl</a> to help you getting started. If you have any specific questions, feel free to join our <a href=\"https://github.com/search?q=Trixi.jl&amp;type=Repositories\">Trixi.jl</a> Slack workspace at <a href=\"https://join.slack.com/t/trixi-framework/shared_invite/zt-sgkc6ppw-6OXJqZAD5SPjBYqLd8MU~g\">https://join.slack.com/t/trixi-framework/shared_invite/zt-sgkc6ppw-6OXJqZAD5SPjBYqLd8MU~g</a> and ask there</p>",
        "id": 248440886,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628142549
    },
    {
        "content": "<p>[slack] &lt;ranocha&gt; Another example we have is the 3D astro blob <a href=\"https://github.com/trixi-framework/tutorial-2021-icosahom/raw/main/figures/blob_with_title.jpg\">https://github.com/trixi-framework/tutorial-2021-icosahom/raw/main/figures/blob_with_title.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"https://github.com/trixi-framework/tutorial-2021-icosahom/raw/main/figures/blob_with_title.jpg\"><img src=\"https://uploads.zulipusercontent.net/e6f5c14bb43d21e96f5de043e4adf505c7fa62ff/68747470733a2f2f6769746875622e636f6d2f74726978692d6672616d65776f726b2f7475746f7269616c2d323032312d69636f7361686f6d2f7261772f6d61696e2f666967757265732f626c6f625f776974685f7469746c652e6a7067\"></a></div>",
        "id": 248440895,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628142586
    },
    {
        "content": "<p>&lt;system&gt; file magneticpendulum.png too big to download (4471029 &gt; allowed size: 1000000)</p>",
        "id": 248443926,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628146409
    },
    {
        "content": "<p>&lt;system&gt; file gali.png too big to download (3078476 &gt; allowed size: 1000000)</p>",
        "id": 248443927,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628146409
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; Is this along the lines you're looking for?</p>",
        "id": 248443928,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628146409
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; They both come from solving ODEs, but also doing some additional analysis.</p>",
        "id": 248443989,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628146469
    },
    {
        "content": "<p>[slack] &lt;frankschae&gt; not as fancy as the astro blob but maybe the visualization of the control strategy for the continuously monitored qubit qualifies:: <a href=\"https://files.slack.com/files-pri/T68168MUP-F02A9K81P34/download/qubit.pdf\">https://files.slack.com/files-pri/T68168MUP-F02A9K81P34/download/qubit.pdf</a></p>",
        "id": 248455247,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628155622
    },
    {
        "content": "<p>[slack] &lt;SebastianM-C&gt; I have some gifs with the materials that I presented at DS19 like this &lt;<a href=\"https://github.com/SebastianM-C/DS19Presentation/blob/master/assets/nucleus-regular.gif\">https://github.com/SebastianM-C/DS19Presentation/blob/master/assets/nucleus-regular.gif</a>&gt; and some Poincare sections like &lt;@U8J1KET6K&gt; shared.<br>\nI am also working with a friend for an article and we will also have some plots from integrating electron dynamics.: <a href=\"https://files.slack.com/files-pri/T68168MUP-F02A9U95B5Y/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F02A9U95B5Y/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://github.com/SebastianM-C/DS19Presentation/blob/master/assets/nucleus-regular.gif\"><img src=\"https://uploads.zulipusercontent.net/42100522f9d93f7a49f226f556aad1918357fe48/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f53656261737469616e4d2d432f4453313950726573656e746174696f6e2f6d61737465722f6173736574732f6e75636c6575732d726567756c61722e676966\"></a></div><div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02A9U95B5Y/download/image.png\"><img src=\"https://uploads.zulipusercontent.net/617af363e11a381d2027d2e99b4c7208f8cfc921/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303241395539354235592f646f776e6c6f61642f696d6167652e706e67\"></a></div>",
        "id": 248462619,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628161365
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what's the 2 second caption for the gif?</p>",
        "id": 248463601,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628162151
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; Histogram of Lyapunov exponents (sampled over some initial conditions) (For Sebastian's figure)</p>",
        "id": 248463743,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628162274
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah, but application?</p>",
        "id": 248463805,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628162315
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; this is for press release thing <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 248463810,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628162322
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 248463875,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628162379
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 248463876,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628162379
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; Don't know about that. I can tell you for my figures. Left is color-coded basins of attraction for the magnetic pendulum. Figure shows the fact that basins of attraction can be fractal. Right is color coded poincare section of Henon-Heiles. Shows that different initial conditions can be chaotic or regular in the same system and with same parameters.</p>",
        "id": 248463889,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628162395
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; For <a href=\"https://github.com/search?q=Trixi.jl&amp;type=Repositories\">Trixi.jl</a>'s I dressed it up like</p>",
        "id": 248463946,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628162417
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Showcased is <a href=\"https://github.com/search?q=Trixi.jl&amp;type=Repositories\">Trixi.jl</a>, a Julia package which uses methods from the SciML software organization for fluid models. These models can be used to assess the effectiveness of cardiac drugs for blood flow, developing more energy-efficient airplanes, and more. Courtesy of Hendrick Ranchoa.</p>",
        "id": 248463947,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628162418
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; For this I need the high level, like the really high level, like \"PDE\" is too much. \"Fluid\".</p>",
        "id": 248463976,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628162452
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; Can't offer that kind of applications for my figures unfortunately, they are education-focused. You could say they are used in a Springer textbook if that matters.</p>",
        "id": 248463987,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628162466
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Which Springer textbook?</p>",
        "id": 248464134,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628162598
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; \"Nonlinear Dynamics: A concise introduction interlaced with code\". To be published in a couple of months. Have a look at my juliacon talk for more info.</p>",
        "id": 248464176,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628162636
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; awesome, yeah, saw the talk, was great</p>",
        "id": 248464221,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628162651
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; didn't know the title from that though <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 248464229,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628162660
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; Yeah it's only mentioned in the second slide but then never again <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 248464242,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628162672
    },
    {
        "content": "<p>[slack] &lt;ranocha&gt; @chrisrackauckas I just fixed my name and added the other main developers of <a href=\"https://github.com/search?q=Trixi.jl&amp;type=Repositories\">Trixi.jl</a> (from the time of creating the visualizations above).</p>\n<blockquote>\n<p>Showcased is <a href=\"https://github.com/search?q=Trixi.jl&amp;type=Repositories\">Trixi.jl</a>, a Julia package which uses methods from the SciML software organization for fluid models. These models can be used to assess the effectiveness of cardiac drugs for blood flow, developing more energy-efficient cars or airplanes, and more. Courtesy of Hendrik Ranocha, Michael Schlottke-Lakemper, Andrew Winters, and Gregor Gassner.<br>\nYou might also add something like \"predicting space weather to save satellites\" or \"studying the evolution of our galaxy\" before \"and more\" if you're aiming at the real high level <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>\n</blockquote>",
        "id": 248464285,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628162718
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; for the blueish \"regularity\" plot from the right, is this good @Datseris?</p>",
        "id": 248464303,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628162740
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>Simulations with the SciML software tools allow for mixing simulation speed and simplicity. Shown is an example from a new Springer textbook \"Nonlinear Dynamics: A concise introduction interlaced with code\" modeling astrophysical dynamics with minimal code while still being fast enough for industrial applications applications. Curtesy of George Datseris and DynamicalSystems.jl</code></p>",
        "id": 248464316,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628162759
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; perfect @ranocha, thanks!</p>",
        "id": 248464413,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628162847
    },
    {
        "content": "<p>[slack] &lt;ranocha&gt; &gt; this is for press release thing <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span><br>\nI'd like to see this press release when it's published</p>",
        "id": 248464489,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628162909
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Oh I will share once I can <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 248464538,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628162949
    },
    {
        "content": "<p>[slack] &lt;SebastianM-C&gt; In the case of the gif above, it is a nuclear surface model, but it doesn't really have practical applications. It was done to research the connections between classical and quantum chaos.</p>",
        "id": 248464566,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628162975
    },
    {
        "content": "<p>[slack] &lt;SebastianM-C&gt; And I also have some plots that will go in a future paper with Vlad Toma (&lt;<a href=\"https://github.com/toma-vlad\">https://github.com/toma-vlad</a>&gt;): <a href=\"https://files.slack.com/files-pri/T68168MUP-F02A38W2WH4/download/image_2021-08-05_14-31-09.png\">https://files.slack.com/files-pri/T68168MUP-F02A38W2WH4/download/image_2021-08-05_14-31-09.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02A38W2WH4/download/image_2021-08-05_14-31-09.png\"><img src=\"https://uploads.zulipusercontent.net/2b951c60bde01740a8b495adf35b2a15dfdb95c4/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303241333857325748342f646f776e6c6f61642f696d6167655f323032312d30382d30355f31342d33312d30392e706e67\"></a></div>",
        "id": 248464913,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628163221
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; okay cool, I got 5 and they will pick 2.</p>",
        "id": 248464918,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628163230
    },
    {
        "content": "<p>[slack] &lt;SebastianM-C&gt; (I can recreate some of them more aesthetically if it's needed): <a href=\"https://files.slack.com/files-pri/T68168MUP-F02AA1H20US/download/image_2021-08-05_14-28-38.png\">https://files.slack.com/files-pri/T68168MUP-F02AA1H20US/download/image_2021-08-05_14-28-38.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02AA1H20US/download/image_2021-08-05_14-28-38.png\"><img src=\"https://uploads.zulipusercontent.net/1b4174951fe4e4b426f4939b09809a30173ba0ac/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303241413148323055532f646f776e6c6f61642f696d6167655f323032312d30382d30355f31342d32382d33382e706e67\"></a></div>",
        "id": 248465036,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628163301
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; auto has energy drift there but looks cooler <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 248465094,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628163360
    },
    {
        "content": "<p>[slack] &lt;SebastianM-C&gt; And I also have some plots that will go in a future paper with Vlad Toma (@Petru-Vlad Toma)</p>",
        "id": 248465433,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628163594
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; Honestly not sure: keep getting dt &lt;dtmin warnings when using ad jacobian</p>",
        "id": 248497152,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628178906
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; But seems fine when provide our own</p>",
        "id": 248497190,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628178920
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Try putting ForwardDiff in nan-safe mode?</p>",
        "id": 248499675,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628180080
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Hi,</p>\n<p>In the pde example of MTK, how do I use the <code>pde_system</code> to solve the equation? use <code>ODEProblem</code>? But it seems u0 is already given in the <code>bcs</code></p>",
        "id": 248532445,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628195525
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you have to <code>discretize</code> to a solvable form</p>",
        "id": 248535146,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628196996
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; Question about Koopman paper: The paper uses this operator to get new insights into calculating expectations of dynamic systems.<br>\nBut in the end I don't understand why this would be better than an approach like <a href=\"https://www.sciencedirect.com/science/article/pii/S000925091830040X\">https://www.sciencedirect.com/science/article/pii/S000925091830040X</a><br>\nI also don't know if in high dimensions (of uncertain parameters / initial states) the method would still preform better than Monte-Carlo integration?</p>",
        "id": 248547183,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628203827
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Monte-Carlo integration is one form of cubature. We have it setup with other methods like VEGAS and MISER which converge faster than Monte-Carlo integration</p>",
        "id": 248547818,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628204367
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; In the form we have written the cubature and MC methods are adaptive to tolerance</p>",
        "id": 248547849,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628204401
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but indeed they are similar</p>",
        "id": 248547895,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628204407
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; to me it's just nicer to treat it as a continuous object and then allow for adaptive and fixed, differentiable, etc. solving methods</p>",
        "id": 248547958,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628204438
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Ok thank you</p>",
        "id": 248574979,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628230233
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I think the best thing to do is to see the JacVecOperator implementation itself. <a href=\"https://github.com/SciML/DiffEqOperators.jl/blob/master/src/jacvec_operators.jl\">https://github.com/SciML/DiffEqOperators.jl/blob/master/src/jacvec_operators.jl</a></p>",
        "id": 248590245,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628243234
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; however, can you beat the optimality of a single partial in this case? I'd like to see that. I haven't found a case <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 248590267,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628243251
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I want to make the jacvec more automatic</p>",
        "id": 248590282,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628243263
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah, that's what the observed function stuff does</p>",
        "id": 248590343,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628243296
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I want to do a change to saving where you give it a function of things to save, but making that work with interpolations in general is a little nasty.</p>",
        "id": 248590367,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628243317
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; It is kind of weird that to speed up stiff solvers for ODE you have to load a package that says:<br>\n<a href=\"https://github.com/search?q=DiffEqOperators.jl&amp;type=Repositories\">DiffEqOperators.jl</a> is a package for finite difference discretization of partial differential equations.</p>\n<p>Anyway, my goal here was not speed as for a single directional derivative ForwardDiff will work nicely for the type of ODE systems I'm interested in (reaction networks), but only if it works at all.<br>\nIf you have a bunch of nested derivatives (like for optimal experimental design with fisher information matrix), ForwardDiff working is not at all guaranteed.</p>\n<p>I also still think ForwardDiff could be beaten for systems of ODE that involve a lot of vector/matrix operations? I think ForwardDiff mostly has scalar rules. But that is not an issue of \"single partial\" but rather lack of <a href=\"https://github.com/search?q=ChainRules.jl&amp;type=Repositories\">ChainRules.jl</a>?</p>",
        "id": 248592238,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628244698
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; &gt; I also still think ForwardDiff could be beaten for systems of ODE that involve a lot of vector/matrix operations? I think ForwardDiff mostly has scalar rules. But that is not an issue of \"single partial\" but rather lack of <a href=\"https://github.com/search?q=ChainRules.jl&amp;type=Repositories\">ChainRules.jl</a>?<br>\nYeah that is true, but should be handled by the Diffractor version when that is all optimized</p>",
        "id": 248592529,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628244916
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I think the forward jvp should be really hard to beat in the compiler land because it can SIMD a lot of things you wouldn't want to by hand, and guaranteed to be an optimal 1-partial calculation so the rest is just code optimization. Not saying it can't be done, but I'm convinced enough that I plan to move JacVecOperator from something you have to do to something that is hardcoded, where if the linear solver satisfied some trait then it does that kind of thing automatically.</p>",
        "id": 248592625,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628244992
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I've been hesitant because of potential optimizations though <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> but I think we can keep the <code>jac_prototype</code> backend open for whatever weird case shows up.</p>",
        "id": 248592656,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628245018
    },
    {
        "content": "<p>[slack] &lt;dawbarton&gt; In case anyone has suggestions about quality-of-life improvements for the ModelingToolkit/DiffEq/SciML ecosystem, see <a href=\"https://discourse.julialang.org/t/quality-of-life-improvements-for-modelingtoolkit-diffeq-sciml-ecosystem/65939\">https://discourse.julialang.org/t/quality-of-life-improvements-for-modelingtoolkit-diffeq-sciml-ecosystem/65939</a></p>",
        "id": 248600886,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628250754
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah, it turns out I can reduce compile times by 5x in standard cases by expanding a few things out by hand, so I know how my weekend will be spent.</p>",
        "id": 248611709,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628257108
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/SciML/OrdinaryDiffEq.jl/pull/1465\">https://github.com/SciML/OrdinaryDiffEq.jl/pull/1465</a></p>",
        "id": 248611712,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628257109
    },
    {
        "content": "<p>[slack] &lt;mose&gt; is that because <a href=\"https://github.com/JuliaLang/julia/issues/28126\">https://github.com/JuliaLang/julia/issues/28126</a>?</p>",
        "id": 248612557,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628257517
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; no, because we use <a href=\"https://github.com/YingboMa/FastBroadcast.jl\">https://github.com/YingboMa/FastBroadcast.jl</a></p>",
        "id": 248612948,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628257721
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's related to a lack of precompilation of broadcast statements because of type ownership</p>",
        "id": 248613006,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628257750
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I've been talking with Tim Holy and Jameson about it, learned the compilation profiling tooling, and started digging in. Saw a lot of that.</p>",
        "id": 248613057,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628257781
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I'll do all of the most standard ODE solvers by hand for this (Vern7, Vern9, TRBDF2, etc.) and it should drop everyone's compile times by an order of magnitude</p>",
        "id": 248613150,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628257817
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; then start looking at a few other bits</p>",
        "id": 248613161,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628257822
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It looks like compile times can go to 100ms or so without too too much effort.</p>",
        "id": 248613176,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628257838
    },
    {
        "content": "<p>[slack] &lt;wsphillips&gt; @chrisrackauckas thank you so so much for putting in a focused effort on this</p>",
        "id": 248617163,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628259743
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah no problem. Thank Tim Holy for teaching me how to profile this.</p>",
        "id": 248617330,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628259839
    },
    {
        "content": "<p>[slack] &lt;wsphillips&gt; his workshop with Shuhei + listening in on you guys on GatherTown was incredibly helpful and valuable</p>",
        "id": 248617815,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628260039
    },
    {
        "content": "<p>[slack] &lt;wsphillips&gt; just in general</p>",
        "id": 248617851,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628260063
    },
    {
        "content": "<p>[slack] &lt;mose&gt; aka type piracy? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 248626214,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628264105
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; no</p>",
        "id": 248626270,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628264138
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; ```Hello Projects!</p>\n<p>NumFOCUS is pleased to invite proposals for our 3rd round of Small Development Grants for 2021! </p>\n<p>Apply Here: <a href=\"https://numfocus.typeform.com/to/mbtH7w\">https://numfocus.typeform.com/to/mbtH7w</a> </p>\n<p>Timeline:</p>\n<p>Deadline for Proposal Submission: September 3, 2021</p>\n<p>Projects will be Notified: October 15, 2021</p>\n<p>Available Funding:</p>\n<p>Up to $5,000 per proposal</p>\n<p>$53,000 total funding available </p>\n<p>Program information and application instructions can be found here: <a href=\"https://numfocus.org/programs/small-development-grants\">https://numfocus.org/programs/small-development-grants</a></p>\n<p>Please feel free to reach out if you have any questions.</p>\n<p>Best,<br>\nNicole```<br>\nGet in contact if you're interested in putting in a SciML application. Some things that come to mind? Getting a Makie recipe together.</p>",
        "id": 248672771,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628286487
    },
    {
        "content": "<p>[slack] &lt;SebastianM-C&gt; Hi! I am interested in working on a Makie recipe. I implemented some simple recipes for one of my packages(<a href=\"https://github.com/search?q=PICDataStructures.jl&amp;type=Repositories\">PICDataStructures.jl</a>), but right now there are some limitations on what can be done with recipes (and they are not as light as RecipesBase). I know that @simon is working on a redesign of the plot type which might change the recipe landscape.</p>",
        "id": 248675697,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628288806
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; what's the observed function stuff?</p>",
        "id": 248737072,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628372667
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the modelingtoolkit hooks for lazy reconstruction</p>",
        "id": 248739449,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628376275
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; (needs better docs for how it works though <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> )</p>",
        "id": 248739451,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628376284
    },
    {
        "content": "<p>[slack] &lt;currymj&gt; suppose I want to use a neural ODE and compute a path integral y(x) = y0 + integrate(J(t<em>x)</em>x, t from 0 to 1), where J, the Jacobian of y wrt x, is the output of neural network. (technique laid out in this workshop paper <a href=\"https://invertibleworkshop.github.io/INNF_2019/accepted_papers/pdfs/INNF_2019_paper_10.pdf\">https://invertibleworkshop.github.io/INNF_2019/accepted_papers/pdfs/INNF_2019_paper_10.pdf</a>).</p>\n<p>I can easily define an ODEProblem to compute y(x) for any given x. But I want to evaluate y(x) at lots of points, ideally batched on the GPU. What’s the right way to do this in the SciML ecosystem?</p>",
        "id": 248746941,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628388595
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Just make the initial condition a matrix, like is done in the image processing tutorials</p>",
        "id": 248747510,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628389355
    },
    {
        "content": "<p>[slack] &lt;currymj&gt; should have been obvious in hindsight! thanks!</p>",
        "id": 248748098,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628389978
    },
    {
        "content": "<p>[slack] &lt;ashton.bradley&gt; My variables I want to integrate through time are a complex valued 3d scalar field and 6 real valued scalars.  I was using views and storing everything in large complex array. It works and now I need speed. I want to use loop vectorization and structarrays to handle the complex to real side, but ideally I would set up a struct that also singles out my real scalars for dispatch. Is there a minimal set of operations I should define to have my struct play nice with ordinarydiffeq? Is there a \"right\" way to do this, or a good reference example I can learn from?</p>",
        "id": 248764713,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628420133
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; If you define broadcast it should all be fine</p>",
        "id": 248766185,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628422620
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; to be honest, we don't need interpolation</p>",
        "id": 248784540,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628450150
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; we only ever evaluate at given tstops</p>",
        "id": 248784583,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628450168
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; savingcallback?</p>",
        "id": 248786052,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628452335
    },
    {
        "content": "<p>[slack] &lt;ashton.bradley&gt; specifically, do you mean implement each of these methods for the struct <a href=\"https://docs.julialang.org/en/v1/manual/interfaces/#man-interfaces-broadcasting\">https://docs.julialang.org/en/v1/manual/interfaces/#man-interfaces-broadcasting</a></p>",
        "id": 248792381,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628462100
    },
    {
        "content": "<p>[slack] &lt;ashton.bradley&gt; or just the first two?</p>",
        "id": 248792394,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628462132
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it depends on the struct</p>",
        "id": 248792446,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628462176
    },
    {
        "content": "<p>[slack] &lt;ashton.bradley&gt; Looks like the <code>ArrayAndChar</code> example here <a href=\"https://docs.julialang.org/en/v1/manual/interfaces/#Selecting-an-appropriate-output-array\">https://docs.julialang.org/en/v1/manual/interfaces/#Selecting-an-appropriate-output-array</a> might be a place to start? The part I am unsure about is if I have something like</p>\n<div class=\"codehilite\" data-code-language=\"struct\"><pre><span></span><code>data::Array{T,N}\nvec::Vector{S}\nend```\nwhere T is going to be `Complex{Float64}`  (actually a StructArray, but I think I have the right supertype) and S is going to be `Float64` . Maybe there is already a package that will set out the minimal broadcasting etc?\n</code></pre></div>",
        "id": 248792990,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628463132
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/search?q=RecursiveArrayTools.jl&amp;type=Repositories\">RecursiveArrayTools.jl</a> and <a href=\"https://github.com/search?q=DEDataArrays.jl&amp;type=Repositories\">DEDataArrays.jl</a> have a few broadcasts to look at.</p>",
        "id": 248792995,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628463178
    },
    {
        "content": "<p>[slack] &lt;ashton.bradley&gt; I think RecursiveArrayTools may solve this for me directly. Thanks a lot</p>",
        "id": 248793128,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628463400
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; What is the point of the Base.@pure in places like:<br>\n<a href=\"https://github.com/SciML/DiffEqSensitivity.jl/blob/cb882f7a45045d9f39a3b8d528d1ada94829ff44/src/sensitivity_algorithms.jl#L94\">https://github.com/SciML/DiffEqSensitivity.jl/blob/cb882f7a45045d9f39a3b8d528d1ada94829ff44/src/sensitivity_algorithms.jl#L94</a> ?</p>",
        "id": 248810581,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628490684
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Well, in general, it allows for certain compiler optimizations, but I don't know why it would be on the constructor for <code>InterpolatingAdjoint</code> .</p>",
        "id": 248821487,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628500262
    },
    {
        "content": "<p>[slack] &lt;nathanaelbosch&gt; Hi, what does the <code>@cache</code> macro do in <a href=\"https://github.com/search?q=OrdinaryDiffEq.jl&amp;type=Repositories\">OrdinaryDiffEq.jl</a>? I find macros still difficult to read and I couldn't find anything in the docs.</p>",
        "id": 248825057,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628502782
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; at one point constant prop from kwargs failed so that would make that constructor type-stable.</p>",
        "id": 248832404,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628508334
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It defines the internal functions to list all of the cache variables for defining iterators like <code>cache_iter</code> for <code>resize!</code></p>",
        "id": 248832469,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628508366
    },
    {
        "content": "<p>[slack] &lt;hexaeder&gt; Is it possible to change the mass matrix inside a callback in addition to <code>resize!</code> the problem?</p>",
        "id": 248839833,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628513184
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; interesting. Maybe? I hadn't though about that one <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 248843017,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628514525
    },
    {
        "content": "<p>[slack] &lt;hexaeder&gt; Haha okay so i guess there is no straight forward solution in the iterator interface then :D Is it worth opening an issue/feature request once I came up with a nice small example?</p>",
        "id": 248844655,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628515201
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah, worth an issue.</p>",
        "id": 248844721,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628515213
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @yingbo_ma</p>",
        "id": 248851196,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628518104
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>InferenceTimingNode: 0.712305/0.977040 on Core.Compiler.Timings.ROOT() with 1 direct children</code></p>",
        "id": 248851198,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628518105
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 248851200,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628518107
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; @chrisrackauckas <a href=\"https://github.com/YingboMa/RecursiveFactorization.jl/pull/30\">https://github.com/YingboMa/RecursiveFactorization.jl/pull/30</a> did you run some tests with this PR?</p>",
        "id": 248862401,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628522541
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; If it’s tests on the DiffEq end as well, then I will do a new release</p>",
        "id": 248862457,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628522566
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah, it's well-ish</p>",
        "id": 248862881,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628522742
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; for some reason sometimes it doesn't compile all of the way with DiffEq though</p>",
        "id": 248862908,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628522753
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; RecursiveFactorization on its own though is great now though.</p>",
        "id": 248862931,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628522761
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Are there any caches or some kind of non-deterministic state in <code>OrdinaryDiffEq</code> when solving a plain ODE system? I'm seeing a weird bug where, for a certain set of parameters, it fails the first two times I run it (re-instantiating everything each time), and then the third time it works.</p>",
        "id": 248864172,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628523258
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; By \"fails\" I mean the integration falls of the rails, though <code>OrdinaryDiffEq</code>  still returns <code>retcode=:Success</code> .</p>",
        "id": 248864296,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628523320
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; in OrdinaryDiffEq itself? There shouldn't be.</p>",
        "id": 248864475,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628523393
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Lowering the initial <code>dt</code> fixes it, but that still doesn't explain the non-determinism...?</p>",
        "id": 248864786,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628523544
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Does the initial <code>dt</code> guessing algorithm have some kind of persistent state?</p>",
        "id": 248864811,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628523558
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; although I'm using <code>Euler</code> so....</p>",
        "id": 248864931,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628523604
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that shouldn't have any persistent state</p>",
        "id": 248865584,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628523921
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that needs an issue./</p>",
        "id": 248865596,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628523927
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I am not sure I can reproduce it in an MWE... I can try.</p>",
        "id": 248866191,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628524173
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I have a <code>StepsizeLimiter</code> which uses an in-place cache by default. Perhaps the perceived non-determinism just has something to do with allocation patterns in Julia? i.e. maybe the memory wasn't initialized the first couple times and then it was the third time?</p>",
        "id": 248868435,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628524972
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; It still doesn't really make sense to me, though, because that cache would be getting re-allocated on each run so...</p>",
        "id": 248868490,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628524993
    },
    {
        "content": "<p>I am trying to go through the example in NeuralPDE's <a href=\"https://neuralpde.sciml.ai/stable/pinn/2D/\">docs</a> but I am getting this error when I run this line of code</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">GalacticOptim</span><span class=\"o\">.</span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">prob</span><span class=\"p\">,</span><span class=\"n\">ADAM</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">);</span><span class=\"n\">cb</span><span class=\"o\">=</span><span class=\"n\">cb</span><span class=\"p\">,</span><span class=\"n\">maxiters</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 248871599,
        "sender_full_name": "Dale Black",
        "timestamp": 1628526252
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">res</span>\n<span class=\"kt\">DimensionMismatch</span><span class=\"p\">(</span><span class=\"s\">\"A has dimensions (16,2) but B has dimensions (3,6000)\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">gemm_wrapper!</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Char</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Char</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">LinearAlgebra</span><span class=\"o\">.</span><span class=\"kt\">MulAddMul</span><span class=\"p\">{</span><span class=\"kt\">true</span><span class=\"p\">,</span> <span class=\"kt\">true</span><span class=\"p\">,</span> <span class=\"kt\">Bool</span><span class=\"p\">,</span> <span class=\"kt\">Bool</span><span class=\"p\">})</span><span class=\"nd\">@matmul</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">643</span>\n<span class=\"n\">mul!</span><span class=\"nd\">@matmul</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">169</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"n\">mul!</span><span class=\"nd\">@matmul</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">275</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"o\">*</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">SubArray</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">ReshapedArray</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"kt\">UnitRange</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{}}},</span> <span class=\"kt\">true</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">})</span><span class=\"nd\">@matmul</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">160</span>\n<span class=\"n\">adjoint</span><span class=\"nd\">@fast_layers</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">63</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"n\">adjoint</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Zygote</span><span class=\"o\">.</span><span class=\"n\">Context</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"o\">::</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">})</span><span class=\"nd\">@none</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"n\">_pullback</span><span class=\"nd\">@adjoint</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">57</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"n\">_pullback</span><span class=\"nd\">@fast_layers</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">20</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"n\">_pullback</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Zygote</span><span class=\"o\">.</span><span class=\"n\">Context</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"n\">applychain</span><span class=\"p\">),</span> <span class=\"o\">::</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">identity</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}}},</span> <span class=\"o\">::</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">})</span><span class=\"nd\">@interface2</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"n\">_pullback</span><span class=\"nd\">@fast_layers</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">21</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"n\">_pullback</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Zygote</span><span class=\"o\">.</span><span class=\"n\">Context</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastChain</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">identity</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}}}},</span> <span class=\"o\">::</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">})</span><span class=\"nd\">@interface2</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"n\">_pullback</span><span class=\"nd\">@pinns_pde_solve</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">628</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"n\">_pullback</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Zygote</span><span class=\"o\">.</span><span class=\"n\">Context</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"sa\">var</span><span class=\"s\">\"#256#258\"</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastChain</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">identity</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}}}},</span> <span class=\"kt\">UnionAll</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">})</span><span class=\"nd\">@interface2</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"n\">_pullback</span><span class=\"nd\">@pinns_pde_solve</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">637</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"n\">_pullback</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Zygote</span><span class=\"o\">.</span><span class=\"n\">Context</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"sa\">var</span><span class=\"s\">\"#260#261\"</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"sa\">var</span><span class=\"s\">\"#256#258\"</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastChain</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">identity</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}}}},</span> <span class=\"kt\">UnionAll</span><span class=\"p\">})</span><span class=\"nd\">@interface2</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"n\">_pullback</span><span class=\"nd\">@pinns_pde_solve</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">656</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"n\">_pullback</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Zygote</span><span class=\"o\">.</span><span class=\"n\">Context</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"sa\">var</span><span class=\"s\">\"#262#263\"</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"sa\">var</span><span class=\"s\">\"#256#258\"</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastChain</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">identity</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}}}},</span> <span class=\"kt\">UnionAll</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"sa\">var</span><span class=\"s\">\"#260#261\"</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}},</span> <span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">})</span><span class=\"nd\">@interface2</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"k\">macro</span> <span class=\"n\">expansion</span><span class=\"nd\">@pinns_pde_solve</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">421</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"k\">macro</span> <span class=\"n\">expansion</span><span class=\"nd\">@RuntimeGeneratedFunctions</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">129</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"k\">macro</span> <span class=\"n\">expansion</span><span class=\"nd\">@none</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"n\">_pullback</span><span class=\"nd\">@none</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"n\">_pullback</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Zygote</span><span class=\"o\">.</span><span class=\"n\">Context</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">RuntimeGeneratedFunctions</span><span class=\"o\">.</span><span class=\"n\">generated_callfunc</span><span class=\"p\">),</span> <span class=\"o\">::</span><span class=\"kt\">RuntimeGeneratedFunctions</span><span class=\"o\">.</span><span class=\"kt\">RuntimeGeneratedFunction</span><span class=\"p\">{(</span><span class=\"ss\">:cord</span><span class=\"p\">,</span> <span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"s\">\"##θ#257\"</span><span class=\"p\">),</span> <span class=\"ss\">:phi</span><span class=\"p\">,</span> <span class=\"ss\">:derivative</span><span class=\"p\">,</span> <span class=\"ss\">:u</span><span class=\"p\">,</span> <span class=\"ss\">:p</span><span class=\"p\">),</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#_RGF_ModTag\"</span><span class=\"p\">,</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#_RGF_ModTag\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mh\">0xe0639b54</span><span class=\"p\">,</span> <span class=\"mh\">0x3f8d5296</span><span class=\"p\">,</span> <span class=\"mh\">0xf8e8af47</span><span class=\"p\">,</span> <span class=\"mh\">0xcc4de790</span><span class=\"p\">,</span> <span class=\"mh\">0xf16d7422</span><span class=\"p\">)},</span> <span class=\"o\">::</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"sa\">var</span><span class=\"s\">\"#256#258\"</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastChain</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">identity</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}}}},</span> <span class=\"kt\">UnionAll</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"sa\">var</span><span class=\"s\">\"#262#263\"</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"sa\">var</span><span class=\"s\">\"#260#261\"</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Nothing</span><span class=\"p\">)</span><span class=\"nd\">@interface2</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"n\">_apply</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Function</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Vararg</span><span class=\"p\">{</span><span class=\"kt\">Any</span><span class=\"p\">,</span> <span class=\"kt\">N</span><span class=\"p\">}</span> <span class=\"k\">where</span> <span class=\"kt\">N</span><span class=\"p\">)</span><span class=\"nd\">@boot</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">804</span>\n<span class=\"n\">adjoint</span><span class=\"nd\">@lib</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">200</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"n\">_pullback</span><span class=\"nd\">@adjoint</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">57</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"n\">_pullback</span><span class=\"nd\">@RuntimeGeneratedFunctions</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">117</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"n\">_pullback</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Zygote</span><span class=\"o\">.</span><span class=\"n\">Context</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">RuntimeGeneratedFunctions</span><span class=\"o\">.</span><span class=\"kt\">RuntimeGeneratedFunction</span><span class=\"p\">{(</span><span class=\"ss\">:cord</span><span class=\"p\">,</span> <span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"s\">\"##θ#257\"</span><span class=\"p\">),</span> <span class=\"ss\">:phi</span><span class=\"p\">,</span> <span class=\"ss\">:derivative</span><span class=\"p\">,</span> <span class=\"ss\">:u</span><span class=\"p\">,</span> <span class=\"ss\">:p</span><span class=\"p\">),</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#_RGF_ModTag\"</span><span class=\"p\">,</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#_RGF_ModTag\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mh\">0xe0639b54</span><span class=\"p\">,</span> <span class=\"mh\">0x3f8d5296</span><span class=\"p\">,</span> <span class=\"mh\">0xf8e8af47</span><span class=\"p\">,</span> <span class=\"mh\">0xcc4de790</span><span class=\"p\">,</span> <span class=\"mh\">0xf16d7422</span><span class=\"p\">)},</span> <span class=\"o\">::</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"sa\">var</span><span class=\"s\">\"#256#258\"</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastChain</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">identity</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}}}},</span> <span class=\"kt\">UnionAll</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"sa\">var</span><span class=\"s\">\"#262#263\"</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"sa\">var</span><span class=\"s\">\"#260#261\"</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Nothing</span><span class=\"p\">)</span><span class=\"nd\">@interface2</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"n\">_pullback</span><span class=\"nd\">@pinns_pde_solve</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">457</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"n\">_pullback</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Zygote</span><span class=\"o\">.</span><span class=\"n\">Context</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"sa\">var</span><span class=\"s\">\"#165#166\"</span><span class=\"p\">{</span><span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#256#258\"</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastChain</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">identity</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}}}},</span> <span class=\"kt\">UnionAll</span><span class=\"p\">},</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#262#263\"</span><span class=\"p\">,</span> <span class=\"kt\">RuntimeGeneratedFunctions</span><span class=\"o\">.</span><span class=\"kt\">RuntimeGeneratedFunction</span><span class=\"p\">{(</span><span class=\"ss\">:cord</span><span class=\"p\">,</span> <span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"s\">\"##θ#257\"</span><span class=\"p\">),</span> <span class=\"ss\">:phi</span><span class=\"p\">,</span> <span class=\"ss\">:derivative</span><span class=\"p\">,</span> <span class=\"ss\">:u</span><span class=\"p\">,</span> <span class=\"ss\">:p</span><span class=\"p\">),</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#_RGF_ModTag\"</span><span class=\"p\">,</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#_RGF_ModTag\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mh\">0xe0639b54</span><span class=\"p\">,</span> <span class=\"mh\">0x3f8d5296</span><span class=\"p\">,</span> <span class=\"mh\">0xf8e8af47</span><span class=\"p\">,</span> <span class=\"mh\">0xcc4de790</span><span class=\"p\">,</span> <span class=\"mh\">0xf16d7422</span><span class=\"p\">)},</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#260#261\"</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Matrix</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">})</span><span class=\"nd\">@interface2</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"n\">_pullback</span><span class=\"nd\">@pinns_pde_solve</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">730</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"o\">....</span>\n</code></pre></div>",
        "id": 248871668,
        "sender_full_name": "Dale Black",
        "timestamp": 1628526287
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"o\">...</span>\n<span class=\"n\">_pullback</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Zygote</span><span class=\"o\">.</span><span class=\"n\">Context</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"sa\">var</span><span class=\"s\">\"#285#288\"</span><span class=\"p\">{</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#165#166\"</span><span class=\"p\">{</span><span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#256#258\"</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastChain</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">identity</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}}}},</span> <span class=\"kt\">UnionAll</span><span class=\"p\">},</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#262#263\"</span><span class=\"p\">,</span> <span class=\"kt\">RuntimeGeneratedFunctions</span><span class=\"o\">.</span><span class=\"kt\">RuntimeGeneratedFunction</span><span class=\"p\">{(</span><span class=\"ss\">:cord</span><span class=\"p\">,</span> <span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"s\">\"##θ#257\"</span><span class=\"p\">),</span> <span class=\"ss\">:phi</span><span class=\"p\">,</span> <span class=\"ss\">:derivative</span><span class=\"p\">,</span> <span class=\"ss\">:u</span><span class=\"p\">,</span> <span class=\"ss\">:p</span><span class=\"p\">),</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#_RGF_ModTag\"</span><span class=\"p\">,</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#_RGF_ModTag\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mh\">0xe0639b54</span><span class=\"p\">,</span> <span class=\"mh\">0x3f8d5296</span><span class=\"p\">,</span> <span class=\"mh\">0xf8e8af47</span><span class=\"p\">,</span> <span class=\"mh\">0xcc4de790</span><span class=\"p\">,</span> <span class=\"mh\">0xf16d7422</span><span class=\"p\">)},</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#260#261\"</span><span class=\"p\">},</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Any</span><span class=\"p\">},</span> <span class=\"kt\">DataType</span><span class=\"p\">,</span> <span class=\"kt\">UnionAll</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">QuasiMonteCarlo</span><span class=\"o\">.</span><span class=\"kt\">UniformSample</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">})</span><span class=\"nd\">@interface2</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"n\">_pullback</span><span class=\"nd\">@pinns_pde_solve</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">930</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"n\">_pullback</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Zygote</span><span class=\"o\">.</span><span class=\"n\">Context</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"sa\">var</span><span class=\"s\">\"#317#333\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}},</span> <span class=\"o\">::</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"sa\">var</span><span class=\"s\">\"#285#288\"</span><span class=\"p\">{</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#165#166\"</span><span class=\"p\">{</span><span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#256#258\"</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastChain</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">identity</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}}}},</span> <span class=\"kt\">UnionAll</span><span class=\"p\">},</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#262#263\"</span><span class=\"p\">,</span> <span class=\"kt\">RuntimeGeneratedFunctions</span><span class=\"o\">.</span><span class=\"kt\">RuntimeGeneratedFunction</span><span class=\"p\">{(</span><span class=\"ss\">:cord</span><span class=\"p\">,</span> <span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"s\">\"##θ#257\"</span><span class=\"p\">),</span> <span class=\"ss\">:phi</span><span class=\"p\">,</span> <span class=\"ss\">:derivative</span><span class=\"p\">,</span> <span class=\"ss\">:u</span><span class=\"p\">,</span> <span class=\"ss\">:p</span><span class=\"p\">),</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#_RGF_ModTag\"</span><span class=\"p\">,</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#_RGF_ModTag\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mh\">0xe0639b54</span><span class=\"p\">,</span> <span class=\"mh\">0x3f8d5296</span><span class=\"p\">,</span> <span class=\"mh\">0xf8e8af47</span><span class=\"p\">,</span> <span class=\"mh\">0xcc4de790</span><span class=\"p\">,</span> <span class=\"mh\">0xf16d7422</span><span class=\"p\">)},</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#260#261\"</span><span class=\"p\">},</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Any</span><span class=\"p\">},</span> <span class=\"kt\">DataType</span><span class=\"p\">,</span> <span class=\"kt\">UnionAll</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">QuasiMonteCarlo</span><span class=\"o\">.</span><span class=\"kt\">UniformSample</span><span class=\"p\">})</span><span class=\"nd\">@interface2</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"c\">#585@array.jl:219[inlined]</span>\n<span class=\"n\">iterate</span><span class=\"nd\">@generator</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">47</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"n\">_collect</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#285#288\"</span><span class=\"p\">{</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#165#166\"</span><span class=\"p\">{</span><span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#256#258\"</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastChain</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">identity</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}}}},</span> <span class=\"kt\">UnionAll</span><span class=\"p\">},</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#262#263\"</span><span class=\"p\">,</span> <span class=\"kt\">RuntimeGeneratedFunctions</span><span class=\"o\">.</span><span class=\"kt\">RuntimeGeneratedFunction</span><span class=\"p\">{(</span><span class=\"ss\">:cord</span><span class=\"p\">,</span> <span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"s\">\"##θ#257\"</span><span class=\"p\">),</span> <span class=\"ss\">:phi</span><span class=\"p\">,</span> <span class=\"ss\">:derivative</span><span class=\"p\">,</span> <span class=\"ss\">:u</span><span class=\"p\">,</span> <span class=\"ss\">:p</span><span class=\"p\">),</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#_RGF_ModTag\"</span><span class=\"p\">,</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#_RGF_ModTag\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mh\">0xe0639b54</span><span class=\"p\">,</span> <span class=\"mh\">0x3f8d5296</span><span class=\"p\">,</span> <span class=\"mh\">0xf8e8af47</span><span class=\"p\">,</span> <span class=\"mh\">0xcc4de790</span><span class=\"p\">,</span> <span class=\"mh\">0xf16d7422</span><span class=\"p\">)},</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#260#261\"</span><span class=\"p\">},</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Any</span><span class=\"p\">},</span> <span class=\"kt\">DataType</span><span class=\"p\">,</span> <span class=\"kt\">UnionAll</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">QuasiMonteCarlo</span><span class=\"o\">.</span><span class=\"kt\">UniformSample</span><span class=\"p\">}},</span> <span class=\"o\">::</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">Generator</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#285#288\"</span><span class=\"p\">{</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#165#166\"</span><span class=\"p\">{</span><span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#256#258\"</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastChain</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">identity</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}}}},</span> <span class=\"kt\">UnionAll</span><span class=\"p\">},</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#262#263\"</span><span class=\"p\">,</span> <span class=\"kt\">RuntimeGeneratedFunctions</span><span class=\"o\">.</span><span class=\"kt\">RuntimeGeneratedFunction</span><span class=\"p\">{(</span><span class=\"ss\">:cord</span><span class=\"p\">,</span> <span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"s\">\"##θ#257\"</span><span class=\"p\">),</span> <span class=\"ss\">:phi</span><span class=\"p\">,</span> <span class=\"ss\">:derivative</span><span class=\"p\">,</span> <span class=\"ss\">:u</span><span class=\"p\">,</span> <span class=\"ss\">:p</span><span class=\"p\">),</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#_RGF_ModTag\"</span><span class=\"p\">,</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#_RGF_ModTag\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mh\">0xe0639b54</span><span class=\"p\">,</span> <span class=\"mh\">0x3f8d5296</span><span class=\"p\">,</span> <span class=\"mh\">0xf8e8af47</span><span class=\"p\">,</span> <span class=\"mh\">0xcc4de790</span><span class=\"p\">,</span> <span class=\"mh\">0xf16d7422</span><span class=\"p\">)},</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#260#261\"</span><span class=\"p\">},</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Any</span><span class=\"p\">},</span> <span class=\"kt\">DataType</span><span class=\"p\">,</span> <span class=\"kt\">UnionAll</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">QuasiMonteCarlo</span><span class=\"o\">.</span><span class=\"kt\">UniformSample</span><span class=\"p\">}},</span> <span class=\"kt\">Zygote</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#585#591\"</span><span class=\"p\">{</span><span class=\"kt\">Zygote</span><span class=\"o\">.</span><span class=\"kt\">Context</span><span class=\"p\">,</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#317#333\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}}},</span> <span class=\"o\">::</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"n\">EltypeUnknown</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">HasShape</span><span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">})</span><span class=\"nd\">@array</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">691</span>\n<span class=\"n\">collect_similar</span><span class=\"nd\">@array</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">606</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"n\">map</span><span class=\"nd\">@abstractarray</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">2294</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"n\">∇map</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Zygote</span><span class=\"o\">.</span><span class=\"n\">Context</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"sa\">var</span><span class=\"s\">\"#317#333\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}},</span> <span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#285#288\"</span><span class=\"p\">{</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#165#166\"</span><span class=\"p\">{</span><span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#256#258\"</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastChain</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">identity</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}}}},</span> <span class=\"kt\">UnionAll</span><span class=\"p\">},</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#262#263\"</span><span class=\"p\">,</span> <span class=\"kt\">RuntimeGeneratedFunctions</span><span class=\"o\">.</span><span class=\"kt\">RuntimeGeneratedFunction</span><span class=\"p\">{(</span><span class=\"ss\">:cord</span><span class=\"p\">,</span> <span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"s\">\"##θ#257\"</span><span class=\"p\">),</span> <span class=\"ss\">:phi</span><span class=\"p\">,</span> <span class=\"ss\">:derivative</span><span class=\"p\">,</span> <span class=\"ss\">:u</span><span class=\"p\">,</span> <span class=\"ss\">:p</span><span class=\"p\">),</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#_RGF_ModTag\"</span><span class=\"p\">,</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#_RGF_ModTag\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mh\">0xe0639b54</span><span class=\"p\">,</span> <span class=\"mh\">0x3f8d5296</span><span class=\"p\">,</span> <span class=\"mh\">0xf8e8af47</span><span class=\"p\">,</span> <span class=\"mh\">0xcc4de790</span><span class=\"p\">,</span> <span class=\"mh\">0xf16d7422</span><span class=\"p\">)},</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#260#261\"</span><span class=\"p\">},</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Any</span><span class=\"p\">},</span> <span class=\"kt\">DataType</span><span class=\"p\">,</span> <span class=\"kt\">UnionAll</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">QuasiMonteCarlo</span><span class=\"o\">.</span><span class=\"kt\">UniformSample</span><span class=\"p\">}})</span><span class=\"nd\">@array</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">219</span>\n<span class=\"n\">adjoint</span><span class=\"nd\">@array</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">244</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"n\">_pullback</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Zygote</span><span class=\"o\">.</span><span class=\"n\">Context</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">map</span><span class=\"p\">),</span> <span class=\"o\">::</span><span class=\"kt\">Function</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#285#288\"</span><span class=\"p\">{</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#165#166\"</span><span class=\"p\">{</span><span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#256#258\"</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastChain</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">identity</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}}}},</span> <span class=\"kt\">UnionAll</span><span class=\"p\">},</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#262#263\"</span><span class=\"p\">,</span> <span class=\"kt\">RuntimeGeneratedFunctions</span><span class=\"o\">.</span><span class=\"kt\">RuntimeGeneratedFunction</span><span class=\"p\">{(</span><span class=\"ss\">:cord</span><span class=\"p\">,</span> <span class=\"kt\">Symbol</span><span class=\"p\">(</span><span class=\"s\">\"##θ#257\"</span><span class=\"p\">),</span> <span class=\"ss\">:phi</span><span class=\"p\">,</span> <span class=\"ss\">:derivative</span><span class=\"p\">,</span> <span class=\"ss\">:u</span><span class=\"p\">,</span> <span class=\"ss\">:p</span><span class=\"p\">),</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#_RGF_ModTag\"</span><span class=\"p\">,</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#_RGF_ModTag\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mh\">0xe0639b54</span><span class=\"p\">,</span> <span class=\"mh\">0x3f8d5296</span><span class=\"p\">,</span> <span class=\"mh\">0xf8e8af47</span><span class=\"p\">,</span> <span class=\"mh\">0xcc4de790</span><span class=\"p\">,</span> <span class=\"mh\">0xf16d7422</span><span class=\"p\">)},</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#260#261\"</span><span class=\"p\">},</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Any</span><span class=\"p\">},</span> <span class=\"kt\">DataType</span><span class=\"p\">,</span> <span class=\"kt\">UnionAll</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">QuasiMonteCarlo</span><span class=\"o\">.</span><span class=\"kt\">UniformSample</span><span class=\"p\">}})</span><span class=\"nd\">@adjoint</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">57</span>\n<span class=\"n\">_pullback</span><span class=\"nd\">@pinns_pde_solve</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">930</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"n\">_pullback</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Zygote</span><span class=\"o\">.</span><span class=\"n\">Context</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"sa\">var</span><span class=\"s\">\"#316#332\"</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">})</span><span class=\"nd\">@interface2</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"n\">_pullback</span><span class=\"nd\">@pinns_pde_solve</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">932</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"n\">_pullback</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Zygote</span><span class=\"o\">.</span><span class=\"n\">Context</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"sa\">var</span><span class=\"s\">\"#320#336\"</span><span class=\"p\">{</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#318#334\"</span><span class=\"p\">,</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#316#332\"</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">})</span><span class=\"nd\">@interface2</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"n\">_pullback</span><span class=\"nd\">@pinns_pde_solve</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">936</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"n\">_pullback</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Zygote</span><span class=\"o\">.</span><span class=\"n\">Context</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"sa\">var</span><span class=\"s\">\"#loss_function_#337\"</span><span class=\"p\">{</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#320#336\"</span><span class=\"p\">{</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#318#334\"</span><span class=\"p\">,</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#316#332\"</span><span class=\"p\">},</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#256#258\"</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastChain</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">identity</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}}}},</span> <span class=\"kt\">UnionAll</span><span class=\"p\">},</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"n\">NullParameters</span><span class=\"p\">)</span><span class=\"nd\">@interface2</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"n\">_apply</span><span class=\"nd\">@boot</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">804</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"n\">adjoint</span><span class=\"nd\">@lib</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">200</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"n\">_pullback</span><span class=\"nd\">@adjoint</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">57</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"o\">...</span>\n</code></pre></div>",
        "id": 248871763,
        "sender_full_name": "Dale Black",
        "timestamp": 1628526337
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"o\">...</span>\n<span class=\"n\">_pullback</span><span class=\"nd\">@basic_problems</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">107</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"n\">_pullback</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Zygote</span><span class=\"o\">.</span><span class=\"n\">Context</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">OptimizationFunction</span><span class=\"p\">{</span><span class=\"kt\">true</span><span class=\"p\">,</span> <span class=\"kt\">GalacticOptim</span><span class=\"o\">.</span><span class=\"kt\">AutoZygote</span><span class=\"p\">,</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#loss_function_#337\"</span><span class=\"p\">{</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#320#336\"</span><span class=\"p\">{</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#318#334\"</span><span class=\"p\">,</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#316#332\"</span><span class=\"p\">},</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#256#258\"</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastChain</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">identity</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}}}},</span> <span class=\"kt\">UnionAll</span><span class=\"p\">},</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">},</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"n\">NullParameters</span><span class=\"p\">)</span><span class=\"nd\">@interface2</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"n\">_apply</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Function</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Vararg</span><span class=\"p\">{</span><span class=\"kt\">Any</span><span class=\"p\">,</span> <span class=\"kt\">N</span><span class=\"p\">}</span> <span class=\"k\">where</span> <span class=\"kt\">N</span><span class=\"p\">)</span><span class=\"nd\">@boot</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">804</span>\n<span class=\"n\">adjoint</span><span class=\"nd\">@lib</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">200</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"n\">adjoint</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Zygote</span><span class=\"o\">.</span><span class=\"n\">Context</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">Core</span><span class=\"o\">.</span><span class=\"n\">_apply_iterate</span><span class=\"p\">),</span> <span class=\"o\">::</span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">iterate</span><span class=\"p\">),</span> <span class=\"o\">::</span><span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">OptimizationFunction</span><span class=\"p\">{</span><span class=\"kt\">true</span><span class=\"p\">,</span> <span class=\"kt\">GalacticOptim</span><span class=\"o\">.</span><span class=\"kt\">AutoZygote</span><span class=\"p\">,</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#loss_function_#337\"</span><span class=\"p\">{</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#320#336\"</span><span class=\"p\">{</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#318#334\"</span><span class=\"p\">,</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#316#332\"</span><span class=\"p\">},</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#256#258\"</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastChain</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">identity</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}}}},</span> <span class=\"kt\">UnionAll</span><span class=\"p\">},</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">},</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">NullParameters</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Tuple</span><span class=\"p\">{})</span><span class=\"nd\">@none</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"n\">_pullback</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Zygote</span><span class=\"o\">.</span><span class=\"n\">Context</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">Core</span><span class=\"o\">.</span><span class=\"n\">_apply_iterate</span><span class=\"p\">),</span> <span class=\"o\">::</span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">iterate</span><span class=\"p\">),</span> <span class=\"o\">::</span><span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">OptimizationFunction</span><span class=\"p\">{</span><span class=\"kt\">true</span><span class=\"p\">,</span> <span class=\"kt\">GalacticOptim</span><span class=\"o\">.</span><span class=\"kt\">AutoZygote</span><span class=\"p\">,</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#loss_function_#337\"</span><span class=\"p\">{</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#320#336\"</span><span class=\"p\">{</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#318#334\"</span><span class=\"p\">,</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#316#332\"</span><span class=\"p\">},</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#256#258\"</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastChain</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">identity</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}}}},</span> <span class=\"kt\">UnionAll</span><span class=\"p\">},</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">},</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">NullParameters</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Tuple</span><span class=\"p\">{})</span><span class=\"nd\">@adjoint</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">57</span>\n<span class=\"n\">_pullback</span><span class=\"nd\">@zygote</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"n\">_pullback</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Zygote</span><span class=\"o\">.</span><span class=\"n\">Context</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">GalacticOptim</span><span class=\"o\">.</span><span class=\"sa\">var</span><span class=\"s\">\"#210#220\"</span><span class=\"p\">{</span><span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">OptimizationFunction</span><span class=\"p\">{</span><span class=\"kt\">true</span><span class=\"p\">,</span> <span class=\"kt\">GalacticOptim</span><span class=\"o\">.</span><span class=\"kt\">AutoZygote</span><span class=\"p\">,</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#loss_function_#337\"</span><span class=\"p\">{</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#320#336\"</span><span class=\"p\">{</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#318#334\"</span><span class=\"p\">,</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#316#332\"</span><span class=\"p\">},</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#256#258\"</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastChain</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">identity</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}}}},</span> <span class=\"kt\">UnionAll</span><span class=\"p\">},</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">},</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">},</span> <span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">NullParameters</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">})</span><span class=\"nd\">@interface2</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"n\">_apply</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Function</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Vararg</span><span class=\"p\">{</span><span class=\"kt\">Any</span><span class=\"p\">,</span> <span class=\"kt\">N</span><span class=\"p\">}</span> <span class=\"k\">where</span> <span class=\"kt\">N</span><span class=\"p\">)</span><span class=\"nd\">@boot</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">804</span>\n<span class=\"n\">adjoint</span><span class=\"nd\">@lib</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">200</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"n\">_pullback</span><span class=\"nd\">@adjoint</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">57</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"n\">_pullback</span><span class=\"nd\">@zygote</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">8</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"n\">_pullback</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Zygote</span><span class=\"o\">.</span><span class=\"n\">Context</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">GalacticOptim</span><span class=\"o\">.</span><span class=\"sa\">var</span><span class=\"s\">\"#213#223\"</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{},</span> <span class=\"kt\">GalacticOptim</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#210#220\"</span><span class=\"p\">{</span><span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">OptimizationFunction</span><span class=\"p\">{</span><span class=\"kt\">true</span><span class=\"p\">,</span> <span class=\"kt\">GalacticOptim</span><span class=\"o\">.</span><span class=\"kt\">AutoZygote</span><span class=\"p\">,</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#loss_function_#337\"</span><span class=\"p\">{</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#320#336\"</span><span class=\"p\">{</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#318#334\"</span><span class=\"p\">,</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#316#332\"</span><span class=\"p\">},</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#256#258\"</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastChain</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">identity</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}}}},</span> <span class=\"kt\">UnionAll</span><span class=\"p\">},</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">},</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">},</span> <span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">NullParameters</span><span class=\"p\">}},</span> <span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">})</span><span class=\"nd\">@interface2</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"n\">_pullback</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Function</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">})</span><span class=\"nd\">@interface</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">34</span>\n<span class=\"n\">pullback</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Function</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">})</span><span class=\"nd\">@interface</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">40</span>\n<span class=\"n\">gradient</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Function</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">})</span><span class=\"nd\">@interface</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">75</span>\n<span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">GalacticOptim</span><span class=\"o\">.</span><span class=\"sa\">var</span><span class=\"s\">\"#211#221\"</span><span class=\"p\">{</span><span class=\"kt\">GalacticOptim</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#210#220\"</span><span class=\"p\">{</span><span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">OptimizationFunction</span><span class=\"p\">{</span><span class=\"kt\">true</span><span class=\"p\">,</span> <span class=\"kt\">GalacticOptim</span><span class=\"o\">.</span><span class=\"kt\">AutoZygote</span><span class=\"p\">,</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#loss_function_#337\"</span><span class=\"p\">{</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#320#336\"</span><span class=\"p\">{</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#318#334\"</span><span class=\"p\">,</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#316#332\"</span><span class=\"p\">},</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#256#258\"</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastChain</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">identity</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}}}},</span> <span class=\"kt\">UnionAll</span><span class=\"p\">},</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">},</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">},</span> <span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">NullParameters</span><span class=\"p\">}})(</span><span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">})</span><span class=\"nd\">@zygote</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">8</span>\n<span class=\"k\">macro</span> <span class=\"n\">expansion</span><span class=\"nd\">@flux</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">43</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"k\">macro</span> <span class=\"n\">expansion</span><span class=\"nd\">@solve</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">35</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n<span class=\"sa\">var</span><span class=\"s\">\"#__solve#242\"</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Function</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Bool</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Bool</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"kt\">Pairs</span><span class=\"p\">{</span><span class=\"kt\">Union</span><span class=\"p\">{},</span> <span class=\"kt\">Union</span><span class=\"p\">{},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{},</span> <span class=\"kt\">NamedTuple</span><span class=\"p\">{(),</span> <span class=\"kt\">Tuple</span><span class=\"p\">{}}},</span> <span class=\"o\">::</span><span class=\"n\">typeof</span><span class=\"p\">(</span><span class=\"n\">SciMLBase</span><span class=\"o\">.</span><span class=\"n\">__solve</span><span class=\"p\">),</span> <span class=\"o\">::</span><span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">OptimizationProblem</span><span class=\"p\">{</span><span class=\"kt\">true</span><span class=\"p\">,</span> <span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">OptimizationFunction</span><span class=\"p\">{</span><span class=\"kt\">true</span><span class=\"p\">,</span> <span class=\"kt\">GalacticOptim</span><span class=\"o\">.</span><span class=\"kt\">AutoZygote</span><span class=\"p\">,</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#loss_function_#337\"</span><span class=\"p\">{</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#320#336\"</span><span class=\"p\">{</span><span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#318#334\"</span><span class=\"p\">,</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#316#332\"</span><span class=\"p\">},</span> <span class=\"kt\">NeuralPDE</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#256#258\"</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastChain</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">NNlib</span><span class=\"o\">.</span><span class=\"kt\">σ</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">FastDense</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">identity</span><span class=\"p\">),</span> <span class=\"kt\">DiffEqFlux</span><span class=\"o\">.</span><span class=\"kt\">var</span><span class=\"s\">\"#initial_params#90\"</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">}}}}},</span> <span class=\"kt\">UnionAll</span><span class=\"p\">},</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">},</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">},</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">},</span> <span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">NullParameters</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">Iterators</span><span class=\"o\">.</span><span class=\"kt\">Pairs</span><span class=\"p\">{</span><span class=\"kt\">Union</span><span class=\"p\">{},</span> <span class=\"kt\">Union</span><span class=\"p\">{},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{},</span> <span class=\"kt\">NamedTuple</span><span class=\"p\">{(),</span> <span class=\"kt\">Tuple</span><span class=\"p\">{}}}},</span> <span class=\"o\">::</span><span class=\"kt\">Flux</span><span class=\"o\">.</span><span class=\"n\">Optimise</span><span class=\"o\">.</span><span class=\"n\">ADAM</span><span class=\"p\">,</span> <span class=\"o\">::</span><span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"n\">Iterators</span><span class=\"o\">.</span><span class=\"kt\">Cycle</span><span class=\"p\">{</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">GalacticOptim</span><span class=\"o\">.</span><span class=\"kt\">NullData</span><span class=\"p\">}})</span><span class=\"nd\">@flux</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">41</span>\n<span class=\"c\">#solve#474@solve.jl:3[inlined]</span>\n<span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span><span class=\"nd\">@Local</span><span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n</code></pre></div>",
        "id": 248871785,
        "sender_full_name": "Dale Black",
        "timestamp": 1628526352
    },
    {
        "content": "<p>[slack] &lt;ashton.bradley&gt; Does it matter that vectorofarray has element type Any for my array? I could use ArrayPartition to get a concrete type by its slightly more syntax to access</p>",
        "id": 248902990,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628540561
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that matters for performance.</p>",
        "id": 248906734,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628542537
    },
    {
        "content": "<p>[slack] &lt;Dale-Black&gt; I actually am getting an error before the previous line. Should be simple I think<br>\n<code>pde_system = PDESystem(eq,bcs,domains,[t,x,y],[u])</code></p>\n<div class=\"codehilite\" data-code-language=\"pde_system\"><pre><span></span><code>Failed to show value:\n\ntype PDESystem has no field systems\n\nget_systems(::ModelingToolkit.PDESystem)@abstractsystem.jl:180\nequations(::ModelingToolkit.PDESystem)@abstractsystem.jl:419\nmacro expansion@abstractsystem.jl:779[inlined]\nvar\"#apply_recipe#70\"(::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, ::typeof(Latexify.apply_recipe), ::ModelingToolkit.PDESystem)@recipes.jl:164\napply_recipe(::ModelingToolkit.PDESystem)@recipes.jl:158\nvar\"#process_latexify#101\"(::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, ::typeof(Latexify.process_latexify), ::ModelingToolkit.PDESystem)@latexify_function.jl:18\nprocess_latexify(::ModelingToolkit.PDESystem)@latexify_function.jl:18\nvar\"#latexify#100\"(::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, ::typeof(Latexify.latexify), ::ModelingToolkit.PDESystem)@latexify_function.jl:3\nlatexify(::ModelingToolkit.PDESystem)@latexify_function.jl:2\nshow(::IOBuffer, ::MIME{Symbol(\"text/latex\")}, ::ModelingToolkit.PDESystem)@abstractsystem.jl:782\n__binrepr(::MIME{Symbol(\"text/latex\")}, ::ModelingToolkit.PDESystem, ::Nothing)@multimedia.jl:159\n_textrepr(::MIME{Symbol(\"text/latex\")}, ::ModelingToolkit.PDESystem, ::Nothing)@multimedia.jl:151\nvar\"#repr#1\"(::Nothing, ::typeof(repr), ::MIME{Symbol(\"text/latex\")}, ::ModelingToolkit.PDESystem)@multimedia.jl:147\nrepr(::MIME{Symbol(\"text/latex\")}, ::ModelingToolkit.PDESystem)@multimedia.jl:147\nshow_richest(::IOContext{IOBuffer}, ::Any)@PlutoRunner.jl:649\nvar\"#sprint_withreturned#28\"(::IOContext{Base.DevNull}, ::Int64, ::typeof(Main.PlutoRunner.sprint_withreturned), ::Function, ::ModelingToolkit.PDESystem)@PlutoRunner.jl:591\nformat_output_default(::Any, ::Any)@PlutoRunner.jl:515\n#format_output#17@PlutoRunner.jl:532[inlined]\nformatted_result_of(::Base.UUID, ::Bool, ::Nothing, ::Module)@PlutoRunner.jl:448\ntop-level scope@none:1```\n</code></pre></div>",
        "id": 248912030,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628545235
    },
    {
        "content": "<p>[slack] &lt;ashton.bradley&gt; ok, as an ArrayPartition, I am getting this interesting error. I can evaluate the equation of motion for a valid initial condition and it runs without error producing sensible <code>du</code>. Inside the function I access real and imag parts of complex field using the StructArrays interface, e.g. <code>http://A.re</code> . However, when I pass it to <code>solve</code> , I get</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"kt\">Float64</span> <span class=\"n\">has</span> <span class=\"n\">no</span> <span class=\"n\">field</span> <span class=\"sa\">re</span><span class=\"sb\">```</span>\n</code></pre></div>",
        "id": 248913736,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628546211
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; I guess your MTK version is &lt; 6.0.0 ?</p>",
        "id": 248914868,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628546774
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; with 6.0.0 I get a different error <code>PDESystem has no field depvars</code> which seems to be fixed already <a href=\"https://github.com/SciML/ModelingToolkit.jl/pull/1181\">https://github.com/SciML/ModelingToolkit.jl/pull/1181</a></p>",
        "id": 248914985,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628546844
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; BTW, I think it is better to post longer stacktraces as \"reply to thread\"</p>",
        "id": 248915121,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628546925
    },
    {
        "content": "<p>[slack] &lt;Dale-Black&gt; Oh okay, I will do that in the future. I will also download and install MTK from #main and see if that helps?</p>",
        "id": 248915715,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628547212
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; Sure, I guess you could give it a try and see if your code works.<br>\nThe <code>PDESystem</code> initialization does not fail any more with the current master branch at least.</p>",
        "id": 248916558,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628547747
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; But there is still an issue with REPL's autocompletion <a href=\"https://github.com/SciML/ModelingToolkit.jl/issues/1179\">https://github.com/SciML/ModelingToolkit.jl/issues/1179</a>.</p>",
        "id": 248916638,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628547812
    },
    {
        "content": "<p>[slack] &lt;Dale-Black&gt; Hmm, I am still getting the same error after updating to the newest MTK and NeuralPDE</p>\n<div class=\"codehilite\" data-code-language=\"begin\"><pre><span></span><code>    let\n        using Pkg\n        Pkg.activate(mktempdir())\n        Pkg.Registry.update()\n        using Pkg\n        Pkg.add(\"PlutoUI\")\n        Pkg.add(url=\"https://github.com/SciML/NeuralPDE.jl\")\n        Pkg.add(\"Flux\")\n        Pkg.add(url=\"https://github.com/SciML/ModelingToolkit.jl\")\n        Pkg.add(\"GalacticOptim\")\n        Pkg.add(\"Optim\")\n        Pkg.add(\"DiffEqFlux\")\n    end\n    using NeuralPDE, Flux, ModelingToolkit, GalacticOptim\n    using Optim, DiffEqFlux\n    import ModelingToolkit: Interval, infimum, supremum\n    using PlutoUI\nend```\n```pde_system = PDESystem(eq,bcs,domains,[x,y],[u])```\n```pde_system\nFailed to show value:\n\ntype PDESystem has no field systems\n\nget_systems(::ModelingToolkit.PDESystem)@abstractsystem.jl:194\nequations(::ModelingToolkit.PDESystem)@abstractsystem.jl:454\nmacro expansion@abstractsystem.jl:838[inlined]\nvar\"#apply_recipe#69\"(::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, ::typeof(Latexify.apply_recipe), ::ModelingToolkit.PDESystem)@recipes.jl:164\napply_recipe(::ModelingToolkit.PDESystem)@recipes.jl:158\nvar\"#process_latexify#101\"(::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, ::typeof(Latexify.process_latexify), ::ModelingToolkit.PDESystem)@latexify_function.jl:18\nprocess_latexify(::ModelingToolkit.PDESystem)@latexify_function.jl:18\nvar\"#latexify#100\"(::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, ::typeof(Latexify.latexify), ::ModelingToolkit.PDESystem)@latexify_function.jl:3\nlatexify(::ModelingToolkit.PDESystem)@latexify_function.jl:2\nshow(::IOBuffer, ::MIME{Symbol(\"text/latex\")}, ::ModelingToolkit.PDESystem)@abstractsystem.jl:841\n__binrepr(::MIME{Symbol(\"text/latex\")}, ::ModelingToolkit.PDESystem, ::Nothing)@multimedia.jl:159\n_textrepr(::MIME{Symbol(\"text/latex\")}, ::ModelingToolkit.PDESystem, ::Nothing)@multimedia.jl:151\nvar\"#repr#1\"(::Nothing, ::typeof(repr), ::MIME{Symbol(\"text/latex\")}, ::ModelingToolkit.PDESystem)@multimedia.jl:147\nrepr(::MIME{Symbol(\"text/latex\")}, ::ModelingToolkit.PDESystem)@multimedia.jl:147\nshow_richest(::IOContext{IOBuffer}, ::Any)@PlutoRunner.jl:649\nvar\"#sprint_withreturned#28\"(::IOContext{Base.DevNull}, ::Int64, ::typeof(Main.PlutoRunner.sprint_withreturned), ::Function, ::ModelingToolkit.PDESystem)@PlutoRunner.jl:591\nformat_output_default(::Any, ::Any)@PlutoRunner.jl:515\n#format_output#17@PlutoRunner.jl:532[inlined]\nformatted_result_of(::Base.UUID, ::Bool, ::Nothing, ::Module)@PlutoRunner.jl:448\ntop-level scope@none:1```\n</code></pre></div>",
        "id": 248917255,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628548105
    },
    {
        "content": "<p>[slack] &lt;Dale-Black&gt; I also moved to <a href=\"https://neuralpde.sciml.ai/stable/pinn/poisson/\">https://neuralpde.sciml.ai/stable/pinn/poisson/</a> example since it seems like the most straightforward example in the NeuralPDE docs</p>",
        "id": 248917481,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628548261
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; Oh, my bad. I didn't <code>using NeuralPDE</code> so I was using MTK.PDESystem</p>",
        "id": 248918013,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628548625
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; What happens if you <code>add NeuralPDE#master</code> ?</p>",
        "id": 248918047,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628548653
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; There's also an open PR regarding upgrading MTK</p>",
        "id": 248918225,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628548776
    },
    {
        "content": "<p>[slack] &lt;Dale-Black&gt; Does <code>Pkg.add(url=\"...\")</code> add the #master branch?</p>",
        "id": 248918342,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628548839
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; Can you use an older version of MTK?</p>",
        "id": 248918371,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628548861
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; It's probably better to wait for the next release</p>",
        "id": 248918428,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628548907
    },
    {
        "content": "<p>[slack] &lt;Dale-Black&gt; Okay, I can do that. Any way you like to track the releases for packages like MTK?</p>",
        "id": 248918515,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628548945
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; there was a patch today</p>",
        "id": 248918531,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628548963
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; for the MTK 6 release</p>",
        "id": 248918538,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628548968
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; hold on</p>",
        "id": 248918543,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628548969
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; The next release of NeuralPDE I meant</p>",
        "id": 248918609,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628549014
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; uhh</p>",
        "id": 248918622,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628549025
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; wat.</p>",
        "id": 248918626,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628549029
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Interesting, open an issue on that. I'd need to see what happens to the type information</p>",
        "id": 248918668,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628549044
    },
    {
        "content": "<p>[slack] &lt;Tor&gt; Hey! I'm trying to speed up a somewhat small ODE (+ its adjoint) and I see there's a section indicating that you can specify your own <code>vjp</code> by using <a href=\"https://github.com/search?q=ChainRules.jl&amp;type=Repositories\">ChainRules.jl</a>. Do I just define the <code>rrule</code> for the <code>f</code>, only having to specify the adjoint wrt. parameters <code>p</code>, and then use <code>ZygoteVJP</code>?</p>\n<p>EDIT: Or is the docs saying that I just need to specify <code>vjp</code> in the <code>ODEFunction</code> constructor but it should have same form as if you were defining a <code>rrule</code>?</p>",
        "id": 248949918,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628581952
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yeah just define the <code>rrule</code> of <code>f</code></p>",
        "id": 248965323,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628593808
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; we should expand that in the docs/.</p>",
        "id": 248965329,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628593811
    },
    {
        "content": "<p>[slack] &lt;Tor&gt; Just to clarify, we're talking about <code>problem.f.f</code>, i.e. <code>f</code> passed to the <code>ODEFunction</code>, not the <code>rrule</code> of <code>ODEFuntion{typeof(f)}</code>?</p>",
        "id": 248970129,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628597433
    },
    {
        "content": "<p>[slack] &lt;Tor&gt; Btw, then what does <code>vjp</code> passed to <code>ODEFunction</code> do?</p>",
        "id": 248970131,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628597433
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it ends up being the override in the rrule for the ODEFunction (if a ChainRules compatible vjp is chosen)</p>",
        "id": 248970462,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628597688
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; usually Enzyme should be fairly good performance wise though?</p>",
        "id": 248970473,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628597699
    },
    {
        "content": "<p>[slack] &lt;Tor&gt; Sorry, you mean I should define the <code>rrule</code> for the <code>ODEFunction</code>, not the function I pass to it, because the sensealg will override the <code>rrule</code> if I've set <code>autojacvec</code>?</p>",
        "id": 248970659,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628597847
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes</p>",
        "id": 248970679,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628597864
    },
    {
        "content": "<p>[slack] &lt;Tor&gt; Had forgotten to try Enzyme; will do check that!</p>",
        "id": 248970691,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628597873
    },
    {
        "content": "<p>[slack] &lt;Tor&gt; Aaah, okay so now things are making sense. Tried defining the <code>rrule</code> for the <code>f</code> I passed and as a be befuddled when it didn't work.</p>\n<p>Thanks, once again!</p>",
        "id": 248970812,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628597937
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; Not sure if I encountered a bug or just using it wrong, so I'll ask here first. I have an ODE problem with a state being <code>Matrix{ComplexF64}</code>. I want to adjust the internal norm for stepsize control. I do:</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    s = size(u)[1]\n    x = zero(eltype(u))\n    for i in 1:s; @inbounds x += u[i, 1]^2; end\n    return sqrt(x/length(x))\nend\ntannorm(u, t) = abs(u)\n\nprob = ODEProblem(kse_spectral_and_tangent!, w0, (0.0, 50.0), ksparams)\ninteg = init(prob, Tsit5(); save_everystep = false, internalnorm = tannorm)```\nbut I get error:\n```ERROR: LoadError: MethodError: no method matching isless(::ComplexF64, ::Rational{Int64})\nClosest candidates are:\n  isless(::Union{StatsBase.PValue, StatsBase.TestStat}, ::Real) at C:\\Users\\m300808\\.julia\\packages\\StatsBase\\IiL4F\\src\\statmodels.jl:514\n  isless(::ForwardDiff.Dual{Tx, V, N} where {V, N}, ::Rational) where Tx at C:\\Users\\m300808\\.julia\\packages\\ForwardDiff\\5gUap\\src\\dual.jl:139\n  isless(::ForwardDiff.Dual{Tx, V, N} where {V, N}, ::Real) where Tx at C:\\Users\\m300808\\.julia\\packages\\ForwardDiff\\5gUap\\src\\dual.jl:139\n  ...\nStacktrace:\n [1] &lt;(x::ComplexF64, y::Rational{Int64})\n   @ Base .\\operators.jl:279\n [2] ode_determine_initdt(u0::Matrix{ComplexF64}, .........)```\n</code></pre></div>",
        "id": 248974685,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628600198
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; is your norm returning a complex number?</p>",
        "id": 248974878,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628600293
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; Oh yeah that was pretty stupid lol</p>",
        "id": 248975023,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628600372
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; Hey! I've run into another error using zygote with ensemble problems: it's giving errors depending on when i evaluate the ODE (using <code>saveat</code>). I've tried to make a mwe and have added it to the previous discourse post: <a href=\"https://discourse.julialang.org/t/zygote-gradients-with-ensemble-odes/65062/6\">https://discourse.julialang.org/t/zygote-gradients-with-ensemble-odes/65062/6</a></p>\n<p>If anyone has any idea what's going on / can advise on the best place to make an issue, please let me know <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 248999131,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628611539
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I have it bookmarked for the weekend if no one else takes a look, but time is <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 249000817,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628612340
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; No worries — thanks! I’ll also keep working on it :)</p>",
        "id": 249001820,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628612813
    },
    {
        "content": "<p>[gitter] &lt;Gregstrq&gt; Hi, guys. I asked a question on discourse, but there has been no response, so I decided to duplicate it here. The question is about Ensemble simulations (<code>EnsembleProblem</code> related stuff). Currently, they are setup such that the data from all trajectories is stored independently. On the other hand, one can use Welford's online algorithm to compute mean and variance over trajectories on the go. I am interested in creating the PR if you think this is a nice feature to have.</p>",
        "id": 249008533,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628615868
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; like implementing some premade reduction functions @gregstrq?</p>",
        "id": 249013653,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628618390
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; Would</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">52.77701332434692</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">30.153033281214668</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.99354358732577</span><span class=\"p\">,</span> <span class=\"mf\">1.7853033286371376</span><span class=\"p\">,</span> <span class=\"mf\">1.1880169668093559</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.9661386609719034</span><span class=\"p\">,</span> <span class=\"mf\">2.1566253093072723</span><span class=\"p\">,</span> <span class=\"mf\">0.3764126736164095</span><span class=\"p\">])</span><span class=\"sb\">```</span>\n<span class=\"sb\">be a correct result?</span>\n</code></pre></div>",
        "id": 249017750,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628620265
    },
    {
        "content": "<p>[gitter] &lt;Gregstrq&gt; @ChrisRackauckas In some sense, yes. But the majour idea is to perform reduction on the fly, in place. Let's say each trajectory produces <code>n</code>-element array, and you need to average over <code>M</code> trajectories. Currently, you reserve memory for <code>n*M</code> elements, and then fill it slice by slice. The mean and the variance are calculated after the computation is done. With Welford's online algorithm, you create two <code>n</code> element arrays --- one for mean and one for variance. Then, after you run a trajectory, these two arrays are updated in place.</p>",
        "id": 249026678,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628624557
    },
    {
        "content": "<p>[gitter] &lt;Gregstrq&gt; @ChrisRackauckas If you process trajectories in <code>b</code> parallel batches, you simply create a mean and a variance array for each of the batches. Then, there are standard ways to merge the results.</p>",
        "id": 249026955,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628624691
    },
    {
        "content": "<p>[gitter] &lt;Gregstrq&gt; @ChrisRackauckas Here is the link to the wikipedia page for <a href=\"https://en.m.wikipedia.org/wiki/Algorithms_for_calculating_variance#Welford's_online_algorithm\">Welford's online algorithm</a> and for <a href=\"https://en.m.wikipedia.org/wiki/Algorithms_for_calculating_variance#Parallel_algorithm\">merging</a>. (They discuss the merging of two parallel streams. However, it can be generalized to arbitrary number of parallel streams. I can send the equations if you are interested.)</p>",
        "id": 249027769,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628625047
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes, that's already implemented for ensembles as timeseries_meanvar</p>",
        "id": 249027868,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628625113
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I've wanted to set it up in a online fashion though</p>",
        "id": 249027961,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628625152
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what I'm saying is that the ensembles has a function <code>reduction</code> which is called on batches</p>",
        "id": 249027992,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628625166
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/SciML/DiffEqBase.jl/blob/master/test/downstream/ensemble.jl#L96-L102\">https://github.com/SciML/DiffEqBase.jl/blob/master/test/downstream/ensemble.jl#L96-L102</a></p>",
        "id": 249028058,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628625202
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; so for example, that solves in batches of 20 and then just carries forward the summation</p>",
        "id": 249028093,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628625220
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; If there's some premade reduction functions for Wellford's algorithm then that would be easy to swap in</p>",
        "id": 249028143,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628625239
    },
    {
        "content": "<p>[gitter] &lt;Gregstrq&gt; @ChrisRackauckas So, what you mean by <code>reduction</code> is about merging the data from different batches, right?</p>",
        "id": 249028301,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628625306
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes exactly</p>",
        "id": 249028392,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628625353
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and here's an implementation of Wellford</p>",
        "id": 249028403,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628625360
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/SciML/SciMLBase.jl/blob/master/src/ensemble/ensemble_analysis.jl#L177-L218\">https://github.com/SciML/SciMLBase.jl/blob/master/src/ensemble/ensemble_analysis.jl#L177-L218</a></p>",
        "id": 249028405,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628625361
    },
    {
        "content": "<p>[slack] &lt;frankschae&gt; Not sure if it helps.. but I have some codes around which might help you as a starter for that:</p>\n<div class=\"codehilite\" data-code-language=\"#\"><pre><span></span><code>function reduction(u,batch,I)\n  # use (parallel) version of Welford algorithm to online update statistics\n  # https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Parallel_algorithm\n\n  # currently hard coded wrt trajectory length\n  na = u[1]\n  xa = @view u[2:1001]\n  M2 = @view u[1002:end]\n\n  nb = length(batch)\n\n  if nb == 1\n    b = batch[1]\n    u[1] += one(na) # increase counter\n    δ =  @. b - xa # difference of new value and mean\n    @. xa = xa + δ/u[1] # update mean\n\n    δ2 = @. b - xa # difference new value and updated mean\n    @. M2 = M2 + δ*δ2 # sum of squares\n  else\n    # This must have an error (from comparison with nb=1 and no reduction)\n    n = na + nb\n    #@show length(batch), length(mean(batch))\n    xb = mean(batch)\n    M2b = var(batch)*(nb-1)\n    δ =  @. xa - xb\n    @. M2 = M2 + M2b + δ^2 * na*nb/n\n\n    u[1] += nb*one(na)\n    @. xa = xa + δ*nb/n\n  end\n\n  u,false\nend```\n</code></pre></div>",
        "id": 249028451,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628625366
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh cool</p>",
        "id": 249028603,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628625426
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; so in that <code>u</code> is a tuple of the <code>(counter,mean,var)</code>?</p>",
        "id": 249028626,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628625436
    },
    {
        "content": "<p>[slack] &lt;frankschae&gt; yup.. but there must be some issues. I made a note (which is why it never got public):</p>\n<div class=\"codehilite\" data-code-language=\"ensembleprob\"><pre><span></span><code>  prob_func = prob_func,\n  output_func = output_func,\n  #reduction = reduction, # somehow reduction doesn't seem to be faster and even has more allocations\n  ##\n  ##16.859 s (213700121 allocations: 23.49 GiB)\n  ##18.482 s (214200122 allocations: 27.27 GiB)\n  #u_init=Vector{eltype(prob.u0)}(vcat([0,zeros(1000),zeros(1000)]...))\n  )```\n</code></pre></div>",
        "id": 249028905,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628625531
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; IMO the best thing to do would be to find out how to integrate this with <a href=\"https://github.com/search?q=OnlineStats.jl&amp;type=Repositories\">OnlineStats.jl</a></p>",
        "id": 249028959,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628625549
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but I never got around to it, so that's why I never really put tutorials on doing online statistics from the ensembles since I would want to deprecate it \"too fast\"</p>",
        "id": 249029039,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628625575
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; \"too fast\" as in, I would think to deprecate that in a month, but now I haven't gotten to it in 4 years <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 249029089,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628625596
    },
    {
        "content": "<p>[gitter] &lt;Gregstrq&gt; @ChrisRackauckas There are some cases where one needs to access the data from all trajectories. (Debugging, computation of complex correlations). However, oftentimes, one simply needs to compute the mean and the variance, in which case you don't really need to store everything. I think it is good to have both options available.</p>",
        "id": 249029872,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628625878
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah, and reduction is for implementing the latter, but you just have to define reductions by hand right now</p>",
        "id": 249032238,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628626844
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; having a few common ones would be really good</p>",
        "id": 249032263,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628626852
    },
    {
        "content": "<p>[gitter] &lt;Gregstrq&gt; Ok. I don't understand the syntax of <code>reduction</code>, but suppose we operate with the tuples <code>u = (n, xa, M)</code>, where <code>n</code> is the number of trajectories in a batch, <code>xa</code> is the average and <code>M</code> is the sum of squared distances from average. Suppose also, we want to merge the second batch into the first one.</p>",
        "id": 249039802,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628630610
    },
    {
        "content": "<p>[gitter] &lt;Gregstrq&gt; ```<br>\nreduction!(u1, u2)</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code>\n</code></pre></div>",
        "id": 249039827,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628630625
    },
    {
        "content": "<p>[gitter] &lt;Gregstrq&gt; This variant should be non-allocating:</p>",
        "id": 249040672,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628631115
    },
    {
        "content": "<p>[gitter] &lt;Gregstrq&gt; ```<br>\nfunction reduction!(u1, u2)<br>\n    n1, xa1, M1 = u1<br>\n    n2, xa2, M2 = u2<br>\n    n = n1+n2<br>\n    M1 .+= M2 .+ n1<em>n2/n.</em>(xa1 .- xa2).^2<br>\n    xa1 .= (n1.<em>xa1 .+ n2.</em>xa2)./n<br>\n    return (n, xa1, M1)<br>\nend</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code>\n</code></pre></div>",
        "id": 249040746,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628631150
    },
    {
        "content": "<p>[gitter] &lt;Gregstrq&gt; @ChrisRackauckas You are using the Welford's algorithm to compute mean and var from the data for all trajectories. What I am suggesting is an option not to store the data for trajectories at all and just compute mean and variance on the go.</p>",
        "id": 249041475,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628631545
    },
    {
        "content": "<p>[gitter] &lt;Gregstrq&gt; @ChrisRackauckas I think it might be especially relevant for GPUs, where you don't have much RAM to begin with.</p>",
        "id": 249041778,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628631724
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @gregstrq, yes, see what I am saying</p>",
        "id": 249058001,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628643819
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you want to do Wellford + reduction</p>",
        "id": 249058008,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628643824
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; so it should match the reduction sytnax</p>",
        "id": 249058014,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628643830
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>reduction = function (u,batch,I)\n  n1, xa1, M1 = u1\n  n2, xa2, M2 = length(batch), mean(batch,dims=1), var(batch,dims=1) \n  n = n1+n2\n  M1 .+= M2 .+ n1*n2/n.*(xa1 .- xa2).^2\n  xa1 .= (n1.**xa1 .+ n2.**xa2)./n\n  (n, xa1, M1),false\nend</code></p>",
        "id": 249058122,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628643943
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; That should be the reduction function</p>",
        "id": 249058125,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628643949
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>prob2 = EnsembleProblem(prob,prob_func=prob_func,output_func=output_func,reduction=reduction,u_init=0.0)\nsim2 = solve(prob2,Tsit5(),trajectories=100,batch_size=20)</code></p>",
        "id": 249058156,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628643964
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; so if you do that</p>",
        "id": 249058170,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628643967
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>(length,mean,var) = sim.u</code></p>",
        "id": 249058180,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628643982
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; should work, and that won't ever have hold more than <code>batch_size = 20</code> in memory.</p>",
        "id": 249058192,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628643997
    },
    {
        "content": "<p>[slack] &lt;Roger&gt; is there a LSODA similar method for complex domain, or is there something like python’s <code>odeintw</code> package? currently when I use LSODA, I got the following because LSODA package requires <code>Float64</code></p>\n<div class=\"codehilite\" data-code-language=\"error\"><pre><span></span><code>  Got exception outside of a @test\n  MethodError: Cannot `convert` an object of type Vector{ComplexF64} to an object of type Float64\n  Closest candidates are:\n    convert(::Type{T}, ::Base.TwicePrecision) where T&lt;:Number at twiceprecision.jl:250\n    convert(::Type{T}, ::AbstractChar) where T&lt;:Number at char.jl:180\n    convert(::Type{T}, ::CartesianIndex{1}) where T&lt;:Number at multidimensional.jl:136\n    ...\n  Stacktrace:\n    [1] Base.RefValue{Float64}(x::Vector{ComplexF64})\n      @ Base ./refvalue.jl:8\n    [2] convert(#unused#::Type{Ref{Float64}}, x::Vector{ComplexF64})\n      @ Base ./refpointer.jl:104\n    [3] cconvert(T::Type, x::Vector{ComplexF64})\n      @ Base ./essentials.jl:396\n    [4] LSODA.lsoda(ctx::LSODA.lsoda_context_t, y::Vector{ComplexF64}, t::Vector{Float64}, tout::Float64)\n      @ LSODA ~/.julia/packages/LSODA/En9TK/src/types_and_consts.jl:94\n    [5] __solve(prob::SciMLBase.ODEProblem{Vector{ComplexF64}, Tuple{Float64, Float64}, true, XTerm{Float64, typeof(sin)}, SciMLBase.ODEFunction{true, ContinuousEmulator.var\"#equation#2\"{SparseArrays.SparseMatrixCSC{ComplexF64, Int64}, Subspace{Vector{Int64}}}, LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:save_everystep, :save_start, :alias_u0), Tuple{Bool, Bool, Bool}}}, SciMLBase.StandardODEProblem}, alg::LSODA.lsoda, timeseries::Vector{Any}, ts::Vector{Any}, ks::Vector{Any}; verbose::Bool, abstol::Float64, reltol::Float64, tstops::Vector{Float64}, saveat::Vector{Float64}, maxiter::Int64, callback::Nothing, timeseries_errors::Bool, save_everystep::Bool, save_start::Bool, userdata::Nothing, alias_u0::Bool, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n      @ LSODA ~/.julia/packages/LSODA/En9TK/src/common.jl:181```\n</code></pre></div>",
        "id": 249058901,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628644851
    },
    {
        "content": "<p>[slack] &lt;Roger&gt; My system is quite large, it is usually over 3000, so I assume LSODA is the only method recommended here?</p>",
        "id": 249058979,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628644927
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; LSODA is definitely not the recommended there.</p>",
        "id": 249059173,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628645158
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It's kind of the opposite <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 249059219,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628645170
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; is it stiff or non-stiff?</p>",
        "id": 249059228,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628645174
    },
    {
        "content": "<p>[slack] &lt;Roger&gt; ah ok, I think it’s stiff, I was trying LSODA because this line of doc: <a href=\"https://diffeq.sciml.ai/latest/solvers/ode_solve/#Unknown-Stiffness-Problems\">https://diffeq.sciml.ai/latest/solvers/ode_solve/#Unknown-Stiffness-Problems</a></p>",
        "id": 249059705,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628645739
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; You don't want to use Rosenbrock for that either</p>",
        "id": 249059712,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628645758
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; straight QNDF, or TRBDF2, or AutoTsit5(TRBDF2())</p>",
        "id": 249059749,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628645771
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the automatic algorithm chooser should handle that BTW <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 249059760,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628645786
    },
    {
        "content": "<p>[slack] &lt;Roger&gt; ah ok, should I update that line of doc then? so if I don’t specify the algorithm, then it will hit the automatic algorithm chooser?</p>",
        "id": 249059794,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628645869
    },
    {
        "content": "<p>[slack] &lt;Roger&gt; thanks btw</p>",
        "id": 249059796,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628645874
    },
    {
        "content": "<p>[slack] &lt;Roger&gt; I’m getting this with <code>AutoTsit5(TRBDF2())</code> tho…</p>\n<div class=\"codehilite\" data-code-language=\"error\"><pre><span></span><code>Stacktrace:\n  [1] throw_cannot_dual(V::Type)\n    @ ForwardDiff ~/.julia/packages/ForwardDiff/5gUap/src/dual.jl:36\n  [2] ForwardDiff.Dual{ForwardDiff.Tag{SciMLBase.UJacobianWrapper{ODEFunction{true, ContinuousEmulator.var\"#equation#2\"{SparseArrays.SparseMatrixCSC{ComplexF64, Int64}, Subspace{Vector{Int64}}}, LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Float64, Hamiltonian{Tuple{XTerm{var\"#19#21\"{Float64}, Nothing}, NTerm{var\"#20#22\"{Float64}}}}}, ComplexF64}, ComplexF64, 12}(value::ComplexF64, partials::ForwardDiff.Partials{12, ComplexF64})\n    @ ForwardDiff ~/.julia/packages/ForwardDiff/5gUap/src/dual.jl:18\n  [3] Dual\n    @ ~/.julia/packages/ForwardDiff/5gUap/src/dual.jl:55 [inlined]\n  [4] Dual\n    @ ~/.julia/packages/ForwardDiff/5gUap/src/dual.jl:59 [inlined]\n  [5] Dual```\n</code></pre></div>",
        "id": 249059864,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628645984
    },
    {
        "content": "<p>[slack] &lt;Roger&gt; same for TRBDF2 and QNDF…</p>",
        "id": 249059950,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628646096
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; with autodiff=false of course.</p>",
        "id": 249059959,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628646109
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; We should make SparseDiffTools support complex though. I think ForwardDiff already got fixed for that, so it should be trivial? Worth an issue.</p>",
        "id": 249060627,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628646913
    },
    {
        "content": "<p>[slack] &lt;or.dicker&gt; In MTK, how do I know the are the breaking changes when moving from 5.x to 6.x?</p>",
        "id": 249073438,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628664229
    },
    {
        "content": "<p>[slack] &lt;Pieter Gunnink&gt; When developing a new ODE algorithm, is there a convenient to target both ODE and SDEs? Or is the only way to just create two separate algorithms, one with type <code>StochasticDiffEqAlgorithm</code> and one with type <code>OrdinaryDiffEqAlgorithm</code> ? The changes from ODE to SDE are just one or two lines, and stuff like the cache is shared, so it is annoying to have to duplicate everything between the two variations</p>",
        "id": 249089028,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628676600
    },
    {
        "content": "<p>[gitter] &lt;Gregstrq&gt; @ChrisRackauckas I understood what my problem was: I thought that batches correspond to the independent parallel streams, and they are merged after the end of the computation. Instead, all trajectories are split in batches, and the batches are executed in parallel.</p>",
        "id": 249090961,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628678177
    },
    {
        "content": "<p>[gitter] &lt;Gregstrq&gt; I mean, the batches are actually processed sequentially.</p>",
        "id": 249090992,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628678210
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's just that <code>@named</code> is required, which is basically a bugfix but was made a major because we know there was a lot of incorrect code out there.</p>",
        "id": 249093987,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628680735
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; They are two separate repos because the integrator objects actually work fairly differently (because of the adaptivity changes). Maybe there's a way to make a <code>perform_step!</code> do both, but I've never ran into a case for that.</p>",
        "id": 249094029,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628680795
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yup exactly.</p>",
        "id": 249094081,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628680810
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what's the algorithm? I'm curious what could have this sharing</p>",
        "id": 249096056,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628682553
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the way I would do it is define an SDE algorithm which uses OrdinaryDiffEq's ODE algorithm cache as a piece of its cache struct, and then inside of its perform_step! it calls the ODE perform_step! and then does the finishing.</p>",
        "id": 249096086,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628682585
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; There is also a change with collecting array variables no longer using unicode subscripts that occurred recently.</p>",
        "id": 249106198,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628688243
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; @frankschae Say, this code looks very much like a Kalman filter. Is this algorithm just a variation on a Kalman filter?</p>",
        "id": 249108864,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628689472
    },
    {
        "content": "<p>[slack] &lt;frankschae&gt; interesting.. never thought about it that way (since Welford's algorithm is usually just the first thing that comes up when you google for online updates of a mean and variance). Maybe @mschauer has some insights on this as well.</p>",
        "id": 249109574,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628689795
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh yes, that's the 5.x though IIRC</p>",
        "id": 249110008,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628689984
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Interestingly enough, Kalman filters were also developed for low memory consumption too, since those early rockets and other mechanical devices did not have a lot of memory.</p>",
        "id": 249110127,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628690039
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that's not necessarily about unicode subscripts, it's that <code>x[5]</code> is now a <code>getindex(x,5)</code> where <code>x</code> is an symbolic array, while <code>x_5</code> was a symbolic scalar. So it's a change from indexing an array of symbolics returning a new symbolic scalar vs being a function call over a symbolic array. It's a rather big conceptual change under the hood, even though at a higher level it presents itself as a smaller printing change.</p>",
        "id": 249110230,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628690067
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; This is all part of the plan of keeping array variables intact so that way they never scalarize, since that's how we'll get to the point of building symbolic models with loops and maps, etc.</p>",
        "id": 249110286,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628690096
    },
    {
        "content": "<p>[slack] &lt;Pieter Gunnink&gt; It's integration of the Landau Lifshitz Gilbert equation, so there are some physical constraints on what your problem actually looks like</p>",
        "id": 249113915,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628691386
    },
    {
        "content": "<p>[slack] &lt;Pieter Gunnink&gt; But I was mainly trying to find some way do make it look like from the outside that there is just one problem, where you set the temperature. If the temperature is zero it will treat it as a ODE, but with a non-zero temperature it will become a SDE. Because the algorithms are so similar I thought I could get away with a lot of code sharing</p>",
        "id": 249114391,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628691594
    },
    {
        "content": "<p>[slack] &lt;Pieter Gunnink&gt; I'll try what you suggested, thanks!</p>",
        "id": 249114486,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628691612
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; @lungd thanks for trying it out! The output looks like the correct type. Which <code>saveat</code> values did you use? Did you have to change anything or did it just work?</p>",
        "id": 249117701,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628692974
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; post in the discorse @lungd? Sounds like you may have solved one of my bookmarks <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 249117916,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628693082
    },
    {
        "content": "<p>[slack] &lt;or.dicker&gt; Thanks!</p>",
        "id": 249122172,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628694899
    },
    {
        "content": "<p>[gitter] &lt;Gregstrq&gt; @ChrisRackauckas I also wanted to ask if there is a way to save the data to disk after some part of trajectories is processed. But it seems one can simply redefine <code>reduce</code> function to perform the save right after the batch is merged.</p>",
        "id": 249132954,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628699493
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Sure, I just mention it as it broke a bunch of tests in Catalyst/ReactionNetworkImporters that compared hand-generated networks that used array variables to the DSL (where the user used unicode subscripts).</p>",
        "id": 249133808,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628699910
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; So it is another recent change to be aware of for users.</p>",
        "id": 249133879,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628699963
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; @chrisrackauckas Now that <a href=\"https://github.com/JuliaDiff/ForwardDiff.jl/pull/535\">https://github.com/JuliaDiff/ForwardDiff.jl/pull/535</a> is merged is there a change to the recommendations in <a href=\"https://diffeq.sciml.ai/stable/basics/faq/#Autodifferentiation-and-Dual-Numbers\">https://diffeq.sciml.ai/stable/basics/faq/#Autodifferentiation-and-Dual-Numbers</a> to handle dual number issues?</p>",
        "id": 249134113,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628700068
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; no, that shouldn't do anything differently @Jose Daniel Lara</p>",
        "id": 249134909,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628700450
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; Thanks</p>",
        "id": 249134943,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628700467
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/SciML/PreallocationTools.jl\">https://github.com/SciML/PreallocationTools.jl</a> is the repo to look at though.</p>",
        "id": 249134946,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628700467
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @gregstrq yeah, you just define a <code>reduction</code> function that saves to disk. I don't have an example of that though.</p>",
        "id": 249135034,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628700500
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; Thanks a lot, this is pretty useful I am back to building the custom cache for PowerSimulationsDynamics</p>",
        "id": 249135069,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628700523
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @yingbo_ma hey, at least this means that <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a> users who use the default solver methods will already be at 1.5 second compile times <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n<p><a href=\"https://github.com/SciML/DiffEqBase.jl/pull/698#issuecomment-896984234\">https://github.com/SciML/DiffEqBase.jl/pull/698#issuecomment-896984234</a></p>",
        "id": 249135296,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628700649
    },
    {
        "content": "<p>[slack] &lt;lungd&gt; There's probably no truth in this rumor. We'll see, I will post my findings on discourse.</p>",
        "id": 249137523,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628701591
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; @chrisrackauckas I finally found a paper from 1979 that explain the main method used in the commercial simulation software in PowerSystems and how they handle the DAE using Adams-Bashforth. The solve the ODE system separate from the Algebraic system. So they do an AB step, solve the Algebraic equations and then do another AB step.</p>",
        "id": 249138601,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628702084
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; It is like a partition method assuming that AB can solve the continuous part accurately</p>",
        "id": 249139425,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628702434
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; so that's like ODAEProblem</p>",
        "id": 249140609,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628702945
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; Yeah, it is like this from also another weird book on that</p>",
        "id": 249141978,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628703504
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; <a href=\"https://files.slack.com/files-pri/T018DC9RCDV-F02AFLQ0HLN/image.png\">https://files.slack.com/files-pri/T018DC9RCDV-F02AFLQ0HLN/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T018DC9RCDV-F02AFLQ0HLN/image.png\"><img src=\"https://uploads.zulipusercontent.net/576439c8c9be09cf896a1668a79991e6a2751514/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f54303138444339524344562d46303241464c5130484c4e2f696d6167652e706e67\"></a></div>",
        "id": 249141979,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628703505
    },
    {
        "content": "<p>[slack] &lt;Dale-Black&gt; If I have a simple PDE <code>ϕₜ = F|∇ϕ|</code> where <code>ϕ</code> is some 2D matrix and <code>F</code> is some force derived from <code>ϕ</code> , what is the absolute simplest approach to solving this using <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a>?</p>",
        "id": 249142500,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628703747
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; nope, this doesn't work. If you could point me to where the index functions are located, I could try to add this and make a PR.</p>",
        "id": 249346627,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628852488
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; oh the stacktrace points to SciML Base, solution_interface.jl. Not sure if this is where the component array sol indexing would live too</p>",
        "id": 249346739,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628852564
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; @lungd thanks for your notes on discourse! I havent had time to test them on my end yet but will try today <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 249346780,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628852608
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that's not going to be the right way to handle it. Hold on.</p>",
        "id": 249346895,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628852686
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>keys(u₀)</code></p>",
        "id": 249347463,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628853109
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what does a component array say its keys are?</p>",
        "id": 249347520,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628853128
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; <code>julia&gt; keys(lotka_ic)\n(:x, :y)</code><br>\n(i just copied the example from the componentarrays <a href=\"https://github.com/jonniedie/ComponentArrays.jl#differential-equation-example\">https://github.com/jonniedie/ComponentArrays.jl#differential-equation-example</a> where <code>u0</code> is <code>lotka_ic</code>)</p>",
        "id": 249348391,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628853841
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; interesting</p>",
        "id": 249348536,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628853939
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the indexing should catch that</p>",
        "id": 249348539,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628853945
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; hold on</p>",
        "id": 249348543,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628853946
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>sym_to_index(sym,sol::SciMLSolution) = sym_to_index(sym,getsyms(sol))\nsym_to_index(sym,syms) = findfirst(isequal(Symbol(sym)),syms)</code></p>",
        "id": 249350898,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628855782
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah I see</p>",
        "id": 249350899,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628855782
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the sym_to_index and getsyms handling needs to be fixed up for ComponentArrays</p>",
        "id": 249350909,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628855796
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; if you can handle that it would be great. For some reason it's returning strings for the keys, even those its fallback is <code>keys(sol[1])</code></p>",
        "id": 249350950,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628855824
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but even if that gets fixed, the <code>findfirst</code> will make it grab <code>sol[1,1]</code> which isn't what you want here.</p>",
        "id": 249350965,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628855840
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; So we need something to say, hey if it's a ComponentArray, just keep the symbol.</p>",
        "id": 249350983,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628855857
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I think it would be good to just take the dependency and fix this stuff up in DiffEqBase. Also upstream <a href=\"https://github.com/jonniedie/ComponentArrays.jl/blob/master/src/compat/scimlbase.jl\">https://github.com/jonniedie/ComponentArrays.jl/blob/master/src/compat/scimlbase.jl</a> to here. @Jonnie</p>",
        "id": 249351099,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628855926
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Making that not use Requires will decrease compile times.</p>",
        "id": 249351105,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628855934
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; @Vasily Ilin after you watch the video you'll hopefully see how you can create new package environments. Just make a new one in the spatial jump tutorial folder, and use it as the activated environment for running/developing the jmd-based tutorials by adding the needed libraries into that environment. That will ensure that a user who activates that Project.toml and Manifest.toml environment has the correct packages and versions to run the tutorials.</p>",
        "id": 249354372,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628858090
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; @chrisrackauckas is there any setup for having tutorials in SciMLTutorials and then pulling them into package docs too? It'd be nice to cleanup the Catalyst tutorials and move them into SciMLTutorials but still have them appear in the docs.</p>",
        "id": 249354553,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628858196
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; not yet. That's one of the things I want to put a bounty on. I think we want them to have the auto-updating with BuildKite etc., but have some Documenter plugin that let's us take the generate .md files.</p>",
        "id": 249354634,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628858261
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; ok cool -- I will take a look later to see if I can fix things up! Thanks for your help, as always <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 249365431,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628864118
    },
    {
        "content": "<p>[slack] &lt;Kirill Zubov&gt; @Dale-Black</p>",
        "id": 249366861,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628864810
    },
    {
        "content": "<p>[slack] &lt;Matt Bossart&gt; From the docs:<br>\n• <code>Rodas5</code> - A 5th order A-stable stiffly stable Rosenbrock method. Currently has a Hermite interpolant because its stiff-aware 3rd order interpolant is not yet implemented. This means the interpolation is unstable on algebraic variables, meaning this algorithm should not be used with <code>saveat</code> or post-solution interpolation on DAEs.<br>\nI've been using <code>Rodas5</code>  of a DAE with <code>saveat</code> with no apparent problems. Is it possible this has been fixed but not updated in the docs?</p>",
        "id": 249376472,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628869283
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; on a DAE?</p>",
        "id": 249376595,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628869331
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Did you check that the solution actually satisfies the algebraic constraints?</p>",
        "id": 249376686,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628869384
    },
    {
        "content": "<p>[slack] &lt;Matt Bossart&gt; Yes, on an DAE in mass matrix form. Does unstable on algebraic variables mean it won't solve or that the interpolation won't be accurate</p>",
        "id": 249377136,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628869629
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it won't satisfy the algebraic equations between the time points.</p>",
        "id": 249377321,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628869726
    },
    {
        "content": "<p>[slack] &lt;Matt Bossart&gt; Ok and that is only an issue with Rodas5?</p>",
        "id": 249377620,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628869893
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yes, it's specifically not a property that is handled in the interpolation scheme of Rodas5, which is why for all of the examples and such in say <a href=\"https://github.com/search?q=ModelingToolkit.jl&amp;type=Repositories\">ModelingToolkit.jl</a> we use Rodas4 instead of Rodas5</p>",
        "id": 249377869,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628870017
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; So Rodas5 is very nice and very efficient, great for stiff ODEs, but on DAEs should only be used if you aren't interpolating.</p>",
        "id": 249377908,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628870042
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Unstable is not the right word. Rodas5’s interpolation is more stable, although less accurate.</p>",
        "id": 249378356,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628870277
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Stable in the sense that it uses Fejer-Hermite interpolation. Which can literally be used as a construction for proving the Stone-Weierstrass theorem. If that’s not stable, nothing is stable.</p>",
        "id": 249378612,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628870399
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah we should change that to just say <code>inaccurate on algebraic variables</code></p>",
        "id": 249378679,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628870413
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; I’ll file a PR</p>",
        "id": 249380021,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628871089
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; Hi! I am trying to solve an ODE in which the variable is a <code>Quaternion</code>. I am doing this:</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>using OrdinaryDiffEq\nusing ReferenceFrameRotations\nimport Base: zero\n\nzero(::Type{Quaternion{T}}) where T = Quaternion{T}(0, 0, 0, 0)\n\n@variables t x(t)\nD = Differential(t)\n@named quat_model = ODESystem(D(x) ~ Quaternion{Float64}(0, 0, 0, 0))\nprob = ODEProblem(quat_model, [x =&gt; Quaternion(1.0, 0.0, 0.0, 0.0)], (0.0, 10.0))\nsol = solve(prob, Tsit5())```\nHowever, I am getting this error:\n\n```ERROR: LoadError: setindex! not defined for Quaternion{Float64}```\n`Quaternion` is immutable. Thus, I just cannot set `setindex!`. Is there any work around? I could not find an example similar to this case.\n</code></pre></div>",
        "id": 249414790,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628888961
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; You'll need to open an issue. We haven't worked on symbolic quaternions at alll.</p>",
        "id": 249415819,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628889522
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; Hum, actually <code>Quaternion</code> is a type of <a href=\"https://github.com/search?q=ReferenceFrameRotations.jl&amp;type=Repositories\">ReferenceFrameRotations.jl</a>. I thought I could use any user-defined type as long as I also define all the operations. I will open an issue. Thanks</p>",
        "id": 249415934,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628889604
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you can trace through it</p>",
        "id": 249416040,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628889684
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and then generate flat code</p>",
        "id": 249416053,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628889693
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that is probably the right thing to do</p>",
        "id": 249416057,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628889699
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but then the initial condition wouldn't work out like this</p>",
        "id": 249416067,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628889707
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; this is an interesting question to open an issue for. It's rather deep actually</p>",
        "id": 249416079,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628889722
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; Hum ok! I think I did not understand what I really should do, but I will open an issue so that we can discuss <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 249416132,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628889745
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Quaternion with MTK. Fun <span aria-label=\"beach\" class=\"emoji emoji-1f3d6\" role=\"img\" title=\"beach\">:beach:</span></p>",
        "id": 249416170,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628889783
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; @chrisrackauckas can you please point me out where to look to implement those steps you mentioned? \"trace thought it and generate flat code\" ?</p>",
        "id": 249416499,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628889995
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; through it</p>",
        "id": 249416538,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628890018
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I could try it out</p>",
        "id": 249416555,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628890031
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; just do it in an issue though, I'm on my laptop and don't intend to run code right now <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 249416575,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628890046
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; I am pretty sure that’s a bug with ReferenceFrameRotations</p>",
        "id": 249416584,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628890050
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; ```julia&gt; using Quaternions, ModelingToolkit, OrdinaryDiffEq</p>\n<p>julia&gt; @variables t x(t)<br>\n2-element Vector{Num}:<br>\n    t<br>\n x(t)</p>\n<p>julia&gt; D = Differential(t)<br>\n(::Differential) (generic function with 2 methods)</p>\n<p>julia&gt; @named quat_model = ODESystem(D(x) ~ Quaternion(0.0));</p>\n<p>julia&gt; prob = ODEProblem(quat_model, [x =&gt; Quaternion(1.0, 0.0, 0.0, 0.0)], (0.0, 10.0));</p>\n<p>julia&gt; solve(prob, Tsit5())<br>\nretcode: Success<br>\nInterpolation: specialized 4th order \"free\" interpolation<br>\nt: 7-element Vector{Float64}:<br>\n  0.0<br>\n  9.999999999999999e-5<br>\n  0.0010999999999999998<br>\n  0.011099999999999997<br>\n  0.11109999999999996<br>\n  1.1110999999999995<br>\n 10.0<br>\nu: 7-element Vector{Vector{Quaternion{Float64}}}:<br>\n [Quaternion{Float64}(1.0, 0.0, 0.0, 0.0, false)]<br>\n [Quaternion{Float64}(1.0, 0.0, 0.0, 0.0, false)]<br>\n [Quaternion{Float64}(1.0, 0.0, 0.0, 0.0, false)]<br>\n [Quaternion{Float64}(1.0, 0.0, 0.0, 0.0, false)]<br>\n [Quaternion{Float64}(1.0, 0.0, 0.0, 0.0, false)]<br>\n [Quaternion{Float64}(1.0, 0.0, 0.0, 0.0, false)]<br>\n [Quaternion{Float64}(1.0, 0.0, 0.0, 0.0, false)]```</p>",
        "id": 249416586,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628890052
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; It works with the Quaternions package</p>",
        "id": 249416602,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628890068
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; Hum interesting, it seems I need to define a function, I just do not know what</p>",
        "id": 249416830,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628890229
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; Funny that <code>Quaternion</code> for <code>Quaternions</code> is also immutable</p>",
        "id": 249416928,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628890310
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; @yingbo_ma maybe it is caused because in <a href=\"https://github.com/search?q=Quaternions.jl&amp;type=Repositories\">Quaternions.jl</a>, <code>Quaternion &lt;: Number</code> whereas in ReferenceFrameRotations <code>Quaternion &lt;: AbstractVector</code></p>",
        "id": 249417165,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628890445
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; However, I do not think this is wrong because <code>AbstractVector</code> can be immutable.</p>",
        "id": 249417321,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628890568
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; yeah, that’s the cause</p>",
        "id": 249418142,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628891193
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; Yes, if I change to <code>&lt;: Number</code> everything works.</p>",
        "id": 249418145,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628891195
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; oops, you were faster <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 249418150,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628891202
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; but Quaternion should be &lt;: Number</p>",
        "id": 249418154,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628891205
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; In reference frame rotations, we usually treat quaternions as 4x1 vector</p>",
        "id": 249418175,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628891226
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; at least for satellite applications</p>",
        "id": 249418182,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628891232
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; but I know a quaternion is an extension of a complex number. However, when you propagate the attitude, the equation is A.q if q is a 4x1 vector</p>",
        "id": 249418238,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628891283
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; That's why we selected a quaternion to be an abstract vector</p>",
        "id": 249418280,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628891303
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; So, dq/dt = A * q, if q is a 4x1 vector which contains the components of the quaternion</p>",
        "id": 249418362,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628891371
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; Thus, probably I can treat the quaternion as a 4x1 vector in MTK and convert it when I want to perform operations.</p>",
        "id": 249418446,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628891410
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; I had this problem before. Using OrdinaryDiffEq, I needed to add:</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>ArrayInterface.ismutable(::Type{&lt;:Quaternion}) = false```\n</code></pre></div>",
        "id": 249418514,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628891467
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; Nevertheless, I opened an issue to discuss those things. In the mean time, I will continue to use the <code>DEDataArrays</code>.</p>",
        "id": 249419946,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628892365
    },
    {
        "content": "<p>[slack] &lt;Dale-Black&gt; Do you know what version of Flux or DiffEqFlux you are using for that?</p>",
        "id": 249427404,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628899387
    },
    {
        "content": "<p>[slack] &lt;Dale-Black&gt; I am now getting a new error which I think is related to <a href=\"https://github.com/FluxML/Flux.jl/pull/1661\">https://github.com/FluxML/Flux.jl/pull/1661</a> so I tried using the newest release of both <a href=\"https://github.com/search?q=Flux.jl&amp;type=Repositories\">Flux.jl</a> and <a href=\"https://github.com/search?q=DiffEqFlux.jl&amp;type=Repositories\">DiffEqFlux.jl</a> and the #master version of both to see if that fixes the problem, but I am still getting this error</p>\n<div class=\"codehilite\" data-code-language=\"begin\"><pre><span></span><code>    ## NEURAL NETWORK\n    nrns = 16   #neuron number\n    chain = FastChain(\n        FastDense(3,nrns,Flux.σ),\n        FastDense(nrns,nrns,Flux.σ),\n        FastDense(nrns,1)\n        )   #Neural network from Flux library\n    initθ = Float64.(DiffEqFlux.initial_params(chain))\nend```\n```UndefVarError: zeros32 not defined\n\nDiffEqFlux.FastDense(::Int64, ::Int64, ::Function)@fast_layers.jl:45\ntop-level scope@Local: 4```\n</code></pre></div>",
        "id": 249427481,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628899491
    },
    {
        "content": "<p>[slack] &lt;Dale-Black&gt; I also tried adding previous versions of DiffEqFlux and Flux before that PR above</p>\n<div class=\"codehilite\" data-code-language=\"pkg.add\"><pre><span></span><code>        Pkg.PackageSpec(name=\"Flux\", version=\"0.12.4\")\n        Pkg.PackageSpec(name=\"DiffEqFlux\", version=\"1.38.0\")\n        ])```\nBut I still get the same error, so I am not sure\n</code></pre></div>",
        "id": 249428339,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628900598
    },
    {
        "content": "<p>[slack] &lt;Dale-Black&gt; Also, forgive me if this is rude as I am not sure what the typical slack etiquette is when it comes to pinging @Kirill Zubov (let me know if it's not recommended to ping)</p>",
        "id": 249428651,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628900948
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; I've got a more theoretical question. I have a system of ODEs that's essentially <code>y_1'=f_1(y), y_2'+g(y)y_1'=f_2(y)</code> . I'm wondering about if I need to use a mass matrix here. Analytically, I could simply substitute <code>f_1</code>  for <code>y_1'</code>  in the second equation and avoid a mass matrix entirely (it's the identity matrix). Is there anything wrong with this approach for a numerical solution that using a mass matrix solves?</p>",
        "id": 249446030,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628925210
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Using dependent mass matrices is terrible. Please do perform the transformation</p>",
        "id": 249447091,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628927016
    },
    {
        "content": "<p>[slack] &lt;or.dicker&gt; Hi, I have a ODEsystem and I want to add Gaussian noise to a sensor (now it’s just lowpass filter). How do I do it? SDEsystem(is it possible to connect it to ODEsystem) or register rand function (seem wrong)</p>",
        "id": 249451774,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628934946
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; do not register a rand function for that <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 249451849,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628935062
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's an SDESystem</p>",
        "id": 249451850,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628935063
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and you can convert the ODESystem to an SDESystem with <code>SDESystem(sys,noise)</code> adding the noise terms.</p>",
        "id": 249451857,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628935081
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Anand's JuliaCon video actually shows this BTW, the sysbio one.</p>",
        "id": 249451899,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628935094
    },
    {
        "content": "<p>[slack] &lt;or.dicker&gt; Thanks!</p>",
        "id": 249451921,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628935125
    },
    {
        "content": "<p>[slack] &lt;or.dicker&gt; Do you have a link to that video?</p>",
        "id": 249451928,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628935143
    },
    {
        "content": "<p>[slack] &lt;Ronny Bergmann&gt; We just released a first version of <a href=\"https://github.com/search?q=ManifoldsDiffEq.jl&amp;type=Repositories\">ManifoldsDiffEq.jl</a> to solve differential equations on manifolds, or for example also on Lie groups. See <a href=\"https://discourse.julialang.org/t/differential-equations-on-manifolds-manifolddiffeq-jl/66385\">https://discourse.julialang.org/t/differential-equations-on-manifolds-manifolddiffeq-jl/66385</a> for the full announcement.</p>",
        "id": 249453388,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628937306
    },
    {
        "content": "<p>[slack] &lt;mose&gt; Can we now solve Einstein's equations on any curvature?</p>",
        "id": 249453671,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628937799
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; I think this should be possible even in DiffEq ecosystem. The benefit of <a href=\"https://github.com/search?q=ManifoldDiffEq.jl&amp;type=Repositories\">ManifoldDiffEq.jl</a> is working on embedded manifolds.</p>",
        "id": 249454002,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628938393
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; (so that you don't have to pick a chart)</p>",
        "id": 249454069,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628938507
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; I don't know if this is of any benefit to solving Einstein's equations</p>",
        "id": 249454091,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628938544
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://www.youtube.com/watch?v=DL0Xw7ETZsE\">https://www.youtube.com/watch?v=DL0Xw7ETZsE</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"DL0Xw7ETZsE\" href=\"https://www.youtube.com/watch?v=DL0Xw7ETZsE\"><img src=\"https://uploads.zulipusercontent.net/8e37c3c4b98679664d6ce7fb02720e44e56a37f4/68747470733a2f2f692e7974696d672e636f6d2f76692f444c3058773745545a73452f64656661756c742e6a7067\"></a></div>",
        "id": 249454164,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628938621
    },
    {
        "content": "<p>[slack] &lt;Ronny Bergmann&gt; also on not-embedded manifolds or non-embedded LIe groups, as long as you follow the <a href=\"https://github.com/search?q=ManifoldsBase.jl&amp;type=Repositories\">ManifoldsBase.jl</a> interface. The goal is to have intrinsic algorithms, that do not depoend in the embedding (or a projection)</p>",
        "id": 249454544,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628939192
    },
    {
        "content": "<p>[slack] &lt;or.dicker&gt; Thanks again</p>",
        "id": 249454705,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628939461
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; Hi! Going back to quaternions, I managed to simulate an attitude propagation system by assuming that the quaternions are 4x1 vectors. The code is:</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>using OrdinaryDiffEq\nusing ReferenceFrameRotations\nusing StaticArrays\n\nfunction vectdquat(vq, w)\n    q = Quaternion(vq)\n    dq = dquat(q, w)\n    return @SVector [dq[1], dq[2], dq[3], dq[4]]\nend\n\n@variables t vq[1:4](t)\n@parameters w[1:3]\nD = Differential(t)\n@named att_prop = ODESystem(D.(vq) .~ vectdquat(vq, w))\nprob = ODEProblem(\n    att_prop,\n    [vq[1] =&gt; 1.0, vq[2] =&gt; 0.0, vq[3] =&gt; 0.0, vq[4] =&gt; 0.0],\n    (0.0, 100.0),\n    [w[1] =&gt; 0.05, w[2] =&gt; 0.0, w[3] =&gt; 0.0]\n)\nsol = solve(prob, Tsit5())```\nIt seems to work very nice! I have two questions:\n\n1. In my use case, I have a lot of vectors. Is there an easy way to initialize then? Something like `vq =&gt; [1.0, 0.0, 0.0, 0.0]`?\n2. What is the best practice to add the restriction equation to force the quaternions to be in a unitary sphere `vq ~ vq / norm(vq)`?\n</code></pre></div>",
        "id": 249463642,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628953128
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>@variables vq[1:4](t) = [1.0,0.0,0.0,0.0]</code>, etc.</p>",
        "id": 249464337,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628954252
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; if you write 3 equations, then add the restriction and use structural simplify.</p>",
        "id": 249464388,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628954289
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; Nice! Thanks!</p>",
        "id": 249464558,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628954397
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; Can anyone tell me why this is not working? It seems exactly the same from the example in the docs except that I am using vectors:</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    q = Quaternion(vq)\n    dq = dquat(q, w)\n    return @SVector [dq[1], dq[2], dq[3], dq[4]]\nend\n\n@variables t vq[1:4](t) RHS[1:4](t)\n@parameters w[1:3]\n@register vectdquat(vq, w)\nD = Differential(t)\n\n@named att_prop = ODESystem([\n    RHS .~ vectdquat(vq, w),\n    D.(vq) .~ RHS\n])```\nThe error is:\n```ERROR: LoadError: type Arr has no field lhs```\n</code></pre></div>",
        "id": 249465880,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628956100
    },
    {
        "content": "<p>[slack] &lt;Dale-Black&gt; Actually, once I restarted Pluto and then reinstalled those packages it seems to be fixed. So maybe an issue with <a href=\"https://github.com/search?q=DiffEqFlux.jl&amp;type=Repositories\">DiffEqFlux.jl</a> not matching Flux?</p>",
        "id": 249471108,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628964192
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; I think I will open an issue</p>",
        "id": 249471117,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1628964228
    },
    {
        "content": "<p>[slack] &lt;or.dicker&gt; I have 47 equations and only one have additive Gaussian noise, it’s feels like moving to SDEsystem is a bit over kill, is there a trick to avoid that? (Maybe RODE? callback?) I also want to optimize some parameter with <a href=\"https://github.com/search?q=DiffEqUncertainty.jl&amp;type=Repositories\">DiffEqUncertainty.jl</a> and I don’t think SDEproblam plays nicely with that.</p>",
        "id": 249498735,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629014008
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; What does NILSS functionality do in DiffEqSensitivity?</p>",
        "id": 249507121,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629026301
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; In particular if I make PRs about ForwardSensitivity should I also change things like <a href=\"https://github.com/SciML/DiffEqSensitivity.jl/blob/b2d33c3e62fd8571e0d0028360f8534352c2af59/src/nilss.jl#L182\">https://github.com/SciML/DiffEqSensitivity.jl/blob/b2d33c3e62fd8571e0d0028360f8534352c2af59/src/nilss.jl#L182</a></p>",
        "id": 249507255,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629026542
    },
    {
        "content": "<p>[slack] &lt;Jose Storopoli&gt; Folks, this is not a software-specific question, but I would like some opinions.</p>\n<p>I have an ongoing project on COVID-19 modeling in Brazil and my epidemiologist colleague is not so math-friendly so I accumulate the role as \"computational epidemiologist\" and \"model builder\" (using mostly Bayesian tools like Stan and Turing).</p>\n<p>We want to have a <em>varying beta</em> (infection rate) and possibly also a varying mean time for which individuals are terminally-ill (to model ICU beds occupancy).</p>\n<p>We currently have a model which we treat anything downstream of <code>S</code> as linear with a fixed transition matrix with the parameters and perform a <code>matrix_exp</code> for each time t (or in Stan/Turing each leapfrog iteration of NUTS sampler).</p>\n<p>How could I code this in <code>DifferentialEquations</code> ecosystem? Mainly I am looking for a <em>vector of parameters <code>beta</code></em> with different lengths (daily, weekly or every 10 days). I was scanning the literature and found some recent papers (one worthy to mention is Jagan et al. (2020)) but I think that someone could help me by giving technical name of what I am trying to accomplish so I can better search the <code>DifferentialEquations</code> documentation and tutorials and also more scientific literature.</p>\n<p>Jagan, M., deJonge, M. S., Krylova, O., &amp; Earn, D. J. D. (2020). Fast estimation of time-varying infectious disease transmission rates. _PLOS Computational Biology_, _16_(9), e1008124. &lt;<a href=\"https://doi.org/10/gmg75f\">https://doi.org/10/gmg75f</a>&gt;: <a href=\"https://files.slack.com/files-pri/T68168MUP-F02B8CR74N7/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F02B8CR74N7/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02B8CR74N7/download/image.png\"><img src=\"https://uploads.zulipusercontent.net/2bbc0d15d93ffa1577017cea937d249c8f874519/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d4630324238435237344e372f646f776e6c6f61642f696d6167652e706e67\"></a></div>",
        "id": 249509855,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629030257
    },
    {
        "content": "<p>[slack] &lt;Jose Storopoli&gt; <a href=\"https://files.slack.com/files-pri/T68168MUP-F02B1EFN4KY/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F02B1EFN4KY/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02B1EFN4KY/download/image.png\"><img src=\"https://uploads.zulipusercontent.net/7f84a94f83c9abcc01fb3c6a0695752088616225/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d463032423145464e344b592f646f776e6c6f61642f696d6167652e706e67\"></a></div>",
        "id": 249509856,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629030257
    },
    {
        "content": "<p>[slack] &lt;Jose Storopoli&gt; Folks, this is not a software-specific question, but I would like some opinions.</p>\n<p>I have an ongoing project on COVID-19 modeling in Brazil and my epidemiologist colleague is not so math-friendly so I accumulate the role as \"computational epidemiologist\" and \"model builder\" (using mostly Bayesian tools like Stan and Turing).</p>\n<p>We want to have a <strong>varying beta</strong> (infection rate) and possibly also a varying mean time for which individuals are terminally-ill (to model ICU beds occupancy).</p>\n<p>We currently have a model which we treat anything downstream of <code>S</code> as linear with a fixed transition matrix with the parameters and perform a <code>matrix_exp</code> and just iteratively (per day) compute a single matrix vector product (or in Stan/Turing each leapfrog iteration of NUTS sampler).</p>\n<p>How could I code this in <code>DifferentialEquations</code> ecosystem? Mainly I am looking for a <strong>vector of parameters <code>beta</code></strong> with different lengths (daily, weekly or every 10 days). I was scanning the literature and found some recent papers (one worthy to mention is Jagan et al. (2020)) but I think that someone could help me by giving technical name of what I am trying to accomplish so I can better search the <code>DifferentialEquations</code> documentation and tutorials and also more scientific literature.</p>\n<p>Jagan, M., deJonge, M. S., Krylova, O., &amp; Earn, D. J. D. (2020). Fast estimation of time-varying infectious disease transmission rates. _PLOS Computational Biology_, _16_(9), e1008124. <a href=\"https://doi.org/10/gmg75f\">https://doi.org/10/gmg75f</a></p>",
        "id": 249510102,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629030692
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Just use <a href=\"https://github.com/search?q=DataInterpolations.jl&amp;type=Repositories\">DataInterpolations.jl</a> to define an interpolant from the data and then use it in the rhs</p>",
        "id": 249511847,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629033227
    },
    {
        "content": "<p>[slack] &lt;Jose Storopoli&gt; Thanks</p>",
        "id": 249514641,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629036542
    },
    {
        "content": "<p>[slack] &lt;Jose Storopoli&gt; Can I use it inside a Turing model?</p>",
        "id": 249514651,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629036584
    },
    {
        "content": "<p>[slack] &lt;Jose Storopoli&gt; This solves the weekly beta with matrix exponentiation. But how could I add a time-variable <code>beta</code> vector of parameters or a time-variable <code>d_T</code> vector of parameters in the ODE system?</p>",
        "id": 249514935,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629036972
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; You can use it in a Turing model</p>",
        "id": 249515243,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629037414
    },
    {
        "content": "<p>[slack] &lt;Jose Storopoli&gt; So can I code an ODE equation with a binary search that would grab a weekly or daily parameter from a vector of parameters corresponding do that time in the solving computation (either day or week)? Or am I missing something obvious that would be much simpler?</p>",
        "id": 249515891,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629038179
    },
    {
        "content": "<p>[slack] &lt;frankschae&gt; It’s a method to compute the forward sensitivities of chaotic systems: <a href=\"https://frankschae.github.io/post/shadowing/\">https://frankschae.github.io/post/shadowing/</a><br>\nIn one of the steps, the method uses standard tangent solvers (i.e., ForwardSensitivity). So, I would say in principle yes, if there are adjustments/improvements to ForwardSensitivity, we would like to have them there as well. (I can help you with that — I think if tests on your PR are passing, i.e., if your changes are not directly affecting NILSS, we can also do that in a follow up PR.)</p>",
        "id": 249526953,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629055571
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @frankschae you still need to add docs.</p>",
        "id": 249545634,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629086279
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; Does this only work for long time averages as the loss?</p>",
        "id": 249549946,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629090936
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes</p>",
        "id": 249556496,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629098227
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; (and those are the only well-defined quantities of a chaotic solution)</p>",
        "id": 249556502,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629098240
    },
    {
        "content": "<p>[slack] &lt;frankschae&gt; yup, should those be added to a new section of <a href=\"https://diffeq.sciml.ai/stable/analysis/sensitivity/\">https://diffeq.sciml.ai/stable/analysis/sensitivity/</a> or should we start filling <a href=\"http://scimlbase.sciml.ai/dev/fundamentals/Differentiation/\">http://scimlbase.sciml.ai/dev/fundamentals/Differentiation/</a> (or both)?</p>",
        "id": 249557528,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629099116
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; First one</p>",
        "id": 249572921,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629110724
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; The letter should be more general</p>",
        "id": 249572927,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629110731
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; Anyway, there recently were quite a few bug/performance PRs for ForwardSensitivity that maybe should be mirrored for NILSS.<br>\nTo me it looks bugged for dynamic systems that explicitly depend on t.</p>",
        "id": 249581185,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629116626
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; @chrisrackauckas I was thinking about that problem you mentioned about <code>DEDataArrays</code> and the cache. Would it be too bad to do the following: if the user wants to use <code>DEDataArrays</code>, then they must define a function <code>copy_cache!(u, cache::MyStructure)</code> which copies all the \"discrete\" fields of <code>cache</code> into <code>u</code>. This function would then be called after the update step in the solvers. Inside DifferentialEquations (I am not sure which package), we define a dummy method <code>copy_cache!(u, cache) = nothing</code>. Thus, if the user did not define <code>copy_cache!</code> , then it will not fail. With this scheme, I think we can avoid those problems with cache updates inside callbacks you mentioned in the Discourse post.</p>",
        "id": 249596291,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629124379
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; no, the callback stuff is fine</p>",
        "id": 249596740,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629124590
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's a little hacky, but that all works</p>",
        "id": 249596744,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629124594
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's the broadcast handling that is not so well-defined, and linear algebra.</p>",
        "id": 249596751,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629124602
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; but using this <code>copy_cache!</code> after the broadcast, can't we solve everything?</p>",
        "id": 249596826,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629124644
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; even if is somewhat unpredictable during the update?</p>",
        "id": 249596856,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629124661
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; I mean, the state <code>u</code> at instant <code>t</code> will have the latest discrete variables as computed by the most recent callback call?</p>",
        "id": 249597053,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629124747
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; ok, but the caches will not. I think I understood</p>",
        "id": 249597133,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629124795
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; If i want to optimize the shape of a boundary of  water tubes to build a water rectifier (sinoidal water pressure comes and that powers a pump which has a higher pressure at the outlet then at the intel without moving parts how would i go about that?</p>",
        "id": 249605180,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629128248
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; My first intuitive design is to take a rectifier circuit and replace all diods with tesla valves.</p>",
        "id": 249605299,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629128296
    },
    {
        "content": "<p>[slack] &lt;Gabriel Baraldi&gt; You want something like this <a href=\"https://en.wikipedia.org/wiki/Hydraulic_ram\">https://en.wikipedia.org/wiki/Hydraulic_ram</a></p>",
        "id": 249605502,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629128405
    },
    {
        "content": "<p>[slack] &lt;Gabriel Baraldi&gt; But with no moving parts</p>",
        "id": 249605511,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629128411
    },
    {
        "content": "<p>[slack] &lt;Gabriel Baraldi&gt; <a href=\"https://en.wikipedia.org/wiki/Pulser_pump\">https://en.wikipedia.org/wiki/Pulser_pump</a></p>",
        "id": 249605751,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629128544
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; This would be a water source that needs to rectictified...</p>",
        "id": 249634822,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629141695
    },
    {
        "content": "<p>[slack] &lt;David Millard&gt; I came across a paper recommending an implicit Newmark integrator for a specific problem (related to time-integration of elastic FEM). Is this supported in <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a>? Searching the dev docs site doesn't turn anything up, but maybe it has another name or better alternative someone could point me to. Thanks!</p>",
        "id": 249653057,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629150818
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's not implemented yet. It's an odd one: specific to certain second order ODEs</p>",
        "id": 249653459,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629151057
    },
    {
        "content": "<p>[slack] &lt;David Millard&gt; Thanks for the info! Do you know of a good alternative for the same category? (I know implicit euler is also quite popular, but has some nonphysical effects for large-enough-to-be-useful-timesteps)</p>\n<p>Is it worth trying to implement Newmark integrators in <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a>? I could have time after an imminent deadline.</p>",
        "id": 249653842,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629151237
    },
    {
        "content": "<p>[slack] &lt;David Millard&gt; I don't know much about Newmark integrators <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 249653879,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629151269
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It could be worth it</p>",
        "id": 249653921,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629151298
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; just converting to first order and using a BDF or SDIRK method is rather good though,</p>",
        "id": 249653944,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629151312
    },
    {
        "content": "<p>[slack] &lt;David Millard&gt; Thanks for the pointers. I'll give those a look too!</p>",
        "id": 249654013,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629151333
    },
    {
        "content": "<p>[slack] &lt;Vasily Ilin&gt; @chrisrackauckas, what hardware are scripts in SciMLBenchmarks run on? I'm especially interested in the amount of RAM.</p>",
        "id": 249668257,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629163175
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 249678342,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629175728
    },
    {
        "content": "<p>[slack] &lt;Pieter Gunnink&gt; Can someone point me towards where the analytical stuff is defined? I want to know what happens with <code>plot(sol, plot_analytic=true)</code>, since I have defined a custom <code>DEProblem</code> and I cannot get the analytical support to work properly.</p>",
        "id": 249703100,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629198350
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/SciML/SciMLBase.jl/blob/master/src/solutions/ode_solutions.jl#L112-L142\">https://github.com/SciML/SciMLBase.jl/blob/master/src/solutions/ode_solutions.jl#L112-L142</a></p>",
        "id": 249703844,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629198945
    },
    {
        "content": "<p>[slack] &lt;boutor2&gt; Hey guys,<br>\nI have been very inspired by the paper of Chris Rackauckas et al. on Universal Differential Equations, and I would love to get opinions on <strong>the best approach to infer parameters in a somewhat “large” ODE system (100 equations).</strong> The model has a total of <strong>202 parameters</strong> to tune. The objective is to find the combination of parameters that explains best the data, with <strong>the end goal of interpreting the values of the parameters.</strong><br>\nThe data is a time series of the 100 variables with 60 time steps. It is rather noisy. I have already tried to train the ODE model with <a href=\"https://github.com/search?q=DiffEqFlux.jl&amp;type=Repositories\">DiffEqFlux.jl</a>, and the loss function is reasonably good for the data quality. The problem is that from one training to the other, the parameters change a lot, which means that we cannot really interpret their values... I think that somehow this is due to the fact that there are several local minima. Would you have a workaround or some specific strategies to get meaningful and robust parametrisation?<br>\nHere are some directions, but I am not so sure which one to choose first</p>\n<ol>\n<li>Try to set the initial parameters with a more “sensible” value - right now they are initialised randomly.</li>\n<li>Try to first fit the data with a neural ODE, to remove the noise and get more points to train the ODE model.</li>\n<li>Using Bayesian inference with <a href=\"https://github.com/search?q=Turing.jl&amp;type=Repositories\">Turing.jl</a>, to get some posterior distribution - although I am not familiar with such paradigm. Intuition leads me to think this would be a more robust approach to interpret the parameters, but I am wondering whether there would be any drawbacks in comparision to a straighforward gradient descent - <code>sciml_train</code> in DiffEqFlux?</li>\n<li>???<br>\nThanks a lot!</li>\n</ol>",
        "id": 249707929,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629201651
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://arxiv.org/abs/1812.01892\">https://arxiv.org/abs/1812.01892</a></p>",
        "id": 249734296,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629213672
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; That has some good benchmarks</p>",
        "id": 249734308,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629213677
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; QuadratureAdjoint with EnzymeVJP is probably the right route, especially if it's stiff</p>",
        "id": 249734437,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629213731
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the automated sensealg detector should choose that for you though</p>",
        "id": 249734463,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629213744
    },
    {
        "content": "<p>[slack] &lt;mforets&gt; Here's a textbook implementation of Newmark: <a href=\"https://github.com/ONSAS/StructuralDynamicsODESolvers.jl/blob/master/src/Algorithms/Newmark.jl\">https://github.com/ONSAS/StructuralDynamicsODESolvers.jl/blob/master/src/Algorithms/Newmark.jl</a></p>",
        "id": 249743385,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629217610
    },
    {
        "content": "<p>[slack] &lt;David Millard&gt; Wow, thanks @mforets! Good to hear from you again <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 249749829,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629220667
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; @chrisrackauckas Just wondering if you've had a chance to check this out? Still have not been able to get it working. Let me know if there's anything I can do.</p>",
        "id": 249775499,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629232607
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I haven't yety</p>",
        "id": 249775687,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629232715
    },
    {
        "content": "<p>[slack] &lt;boutor2&gt; Great, thanks a lot !</p>",
        "id": 249816281,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629271692
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; Hm, I may have identified a bug / breaking change. I have</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"mi\">3</span><span class=\"o\">-</span><span class=\"n\">dimensional</span> <span class=\"n\">continuous</span> <span class=\"n\">dynamical</span> <span class=\"n\">system</span>\n <span class=\"n\">state</span><span class=\"o\">:</span>       <span class=\"p\">[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">10.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">]</span>\n <span class=\"n\">rule</span> <span class=\"n\">f</span><span class=\"o\">:</span>      <span class=\"n\">loop</span>\n <span class=\"k\">in</span><span class=\"o\">-</span><span class=\"n\">place</span><span class=\"o\">?</span>    <span class=\"nb\">false</span>\n <span class=\"n\">jacobian</span><span class=\"o\">:</span>    <span class=\"n\">loop_jac</span>\n <span class=\"n\">parameters</span><span class=\"o\">:</span>  <span class=\"p\">[</span><span class=\"mf\">10.0</span><span class=\"p\">,</span> <span class=\"mf\">28.0</span><span class=\"p\">,</span> <span class=\"mf\">2.66667</span><span class=\"p\">]</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">u0s</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">u0</span><span class=\"p\">,</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">u0</span><span class=\"p\">];</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">pinteg</span> <span class=\"o\">=</span> <span class=\"n\">parallel_integrator</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">,</span> <span class=\"n\">u0s</span><span class=\"p\">)</span> <span class=\"c\"># Uses SimpleATsit5</span>\n<span class=\"n\">t</span><span class=\"o\">:</span> <span class=\"mf\">0.0</span>\n<span class=\"n\">u</span><span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">SVector</span><span class=\"p\">{</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">}}</span><span class=\"o\">:</span>\n <span class=\"p\">[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">10.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">10.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">]</span><span class=\"sb\">```</span>\n<span class=\"sb\">but</span>\n<span class=\"sb\">```</span><span class=\"sa\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">pinteg</span> <span class=\"o\">=</span> <span class=\"n\">parallel_integrator</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">,</span> <span class=\"n\">u0s</span><span class=\"p\">;</span> <span class=\"n\">alg</span> <span class=\"o\">=</span> <span class=\"n\">Vern9</span><span class=\"p\">())</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">MethodError</span><span class=\"o\">:</span> <span class=\"n\">Cannot</span> <span class=\"sb\">`convert`</span> <span class=\"n\">an</span> <span class=\"n\">object</span> <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"kt\">SVector</span><span class=\"p\">{</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">}</span>\n<span class=\"n\">to</span> <span class=\"n\">an</span> <span class=\"n\">object</span> <span class=\"n\">of</span> <span class=\"n\">type</span> <span class=\"sa\">Float64</span><span class=\"sb\">```</span>\n<span class=\"sb\">I understand that this is not a MWE so don't eat me alive. Nevertheless what DynamicalSystems.jl does under the hood is make a new `f` function that has as state `u` a `Vector{SVector}`. I'll start digging deeper, the above error message stacktraces to  `ode_determine_initdt`  at `@ OrdinaryDiffEq ~\\.julia\\packages\\OrdinaryDiffEq\\bLep9\\src\\initdt.jl:49`. Given that with SimpleATsit5 things work, this may come indeed from DiffEq or specifically Vern9. In any case, I'll try to reduce to a MWE and open an issue, but if anyone has some clue to make my life easier please do go ahead 😄</span>\n</code></pre></div>",
        "id": 249900413,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629314991
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I can take that as MWE enough</p>",
        "id": 249900839,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629315216
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that's... odd</p>",
        "id": 249900848,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629315219
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Maybe it's from one of the callback things I just did</p>",
        "id": 249900868,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629315232
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; is there PSOS callback in there or something?</p>",
        "id": 249900884,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629315239
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; can you give it with all of the <code>using</code> s at top to copy-paste?</p>",
        "id": 249900943,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629315253
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; Sure thing, :</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>ds = Systems.lorenz()\nu0s = [ds.u0, ds.u0] # isa Vector{SVector}\npinteg = parallel_integrator(ds, u0s) # alg = SimpleATsit5()\n\n# error:\npinteg = parallel_integrator(ds, u0s; alg = Vern9())```\n</code></pre></div>",
        "id": 249901187,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629315382
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; @chrisrackauckas this doesn't have any callbacks.</p>",
        "id": 249901207,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629315396
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that's not good.</p>",
        "id": 249901228,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629315407
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; It transforms the original <code>f</code> to act on a vector of states (here <code>Vector{SVector}</code>)  as done here: <a href=\"https://github.com/JuliaDynamics/DynamicalSystemsBase.jl/blob/master/src/core/create_dynamics.jl#L77-L88\">https://github.com/JuliaDynamics/DynamicalSystemsBase.jl/blob/master/src/core/create_dynamics.jl#L77-L88</a></p>",
        "id": 249901284,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629315443
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh Vector{SVector}? Ahh, maybe we were missing a case</p>",
        "id": 249901310,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629315453
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; and it then creates a new ODEProblem that simply uses this new <code>f</code> and the new state <code>Vector{SVector}</code>.</p>",
        "id": 249901316,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629315457
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I know we have a few tests on it, but not too many.</p>",
        "id": 249901322,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629315460
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; ah okay yeah this is probably it, I also checked the source at diffeq and I saw an <code>Array</code> clause</p>",
        "id": 249901379,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629315483
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; <code>    # TODO: use more caches\n    if u0 isa Array\n      T = eltype(first(u0)/t)\n      f₀ = similar(u0,T)\n      fill!(f₀,zero(T))\n    else\n      f₀ = zero.(u0./t)\n    end\n    f(f₀,u0,p,t)\n  end</code></p>",
        "id": 249901442,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629315501
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; <code>~\\.julia\\packages\\OrdinaryDiffEq\\bLep9\\src\\initdt.jl:49</code></p>",
        "id": 249901485,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629315528
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh right</p>",
        "id": 249901718,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629315645
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; from the compile time fixes</p>",
        "id": 249901730,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629315649
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I'll just opt you out of the quicker compile branch for now? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 249901750,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629315663
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; haha</p>",
        "id": 249901769,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629315679
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you'll still get most of the benefit</p>",
        "id": 249901798,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629315695
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; But how do I do this on my end...?</p>",
        "id": 249901824,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629315709
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the issue is that generic things like broadcast just naturally have to do more computations at compile time</p>",
        "id": 249901832,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629315712
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I have a patch fix going in very soon</p>",
        "id": 249901938,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629315750
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; Okay that's fine, I'm definitely not on a rush on this, for now I'm using SimpleATsit5</p>",
        "id": 249901984,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629315773
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh I see why the test didn't catch it</p>",
        "id": 249902059,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629315819
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>f = (du,u,p,t) -&gt; du .= u</code></p>",
        "id": 249902064,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629315822
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the array type changed, but that <code>f</code> still works on the other array type <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 249902077,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629315833
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @Datseris <a href=\"https://github.com/SciML/OrdinaryDiffEq.jl/pull/1476\">https://github.com/SciML/OrdinaryDiffEq.jl/pull/1476</a></p>",
        "id": 249903832,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629316738
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 249913093,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629321456
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; ```using OrdinaryDiffEq, ComponentArrays, LinearAlgebra</p>\n<p>eom_mass(du, u, p, t) = nothing<br>\nmm(A, u, p, t) = nothing<br>\nop = DiffEqArrayOperator(Diagonal(fill(1,30)); update_func=mm)<br>\nF = ODEFunction(eom_mass; mass_matrix= op)<br>\nprobM = ODEProblem(F, zeros(30), (0.0, 1.0), [])<br>\nsolM = solve(probM,  Rosenbrock23())</p>\n<p>probM = ODEProblem(F, ComponentArray(x=zeros(30)), (0.0, 1.0), [])<br>\nsolM = solve(probM,  Rosenbrock23())```</p>",
        "id": 249913116,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629321470
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; @Jonnie</p>",
        "id": 249913332,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629321577
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; Calling <code>axes</code> on ComponentArrays now returns a special &lt;:AbstractUnitRange type that holds the underlying array axis and the ComponentArray Axis for each dimension. So it looks like however equality is calculated between the ranges isn’t working. Which is strange. I’m pretty sure I test for that somewhere. I’ll have to take a look.</p>",
        "id": 249914328,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629322101
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; Now when I run the MWE it is working. I'll need to try to do more testing to make sure I have the problem isolated. The error is thrown when doing a <code>axes(W) === axes(M)</code> , so the types are possibly the issue.</p>",
        "id": 249914506,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629322220
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; actually all looks good after restart REPL. Weird. Thanks for your help @Jonnie</p>",
        "id": 249914859,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629322456
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; Haha, I love/hate it when that happens. If it shows up again, let me know.</p>",
        "id": 249915505,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629322920
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; is adjoint_sensitivities known to be broken on 1.7?</p>",
        "id": 250128391,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629471341
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I've been using it on v1.7 and it's been fine?</p>",
        "id": 250128562,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629471398
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; With tape compilation, yes.</p>",
        "id": 250128567,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629471402
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/SciML/DiffEqFlux.jl/issues/586#issuecomment-893363469\">https://github.com/SciML/DiffEqFlux.jl/issues/586#issuecomment-893363469</a></p>",
        "id": 250128622,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629471426
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/JuliaLang/julia/pull/41516\">https://github.com/JuliaLang/julia/pull/41516</a> should be in the v1.7 release version and should be the fix.</p>",
        "id": 250128672,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629471448
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; does it tape compile by default?</p>",
        "id": 250128710,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629471466
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it can, the default is complicated.</p>",
        "id": 250128792,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629471488
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/SciML/DiffEqSensitivity.jl/blob/master/src/concrete_solve.jl#L5-L67\">https://github.com/SciML/DiffEqSensitivity.jl/blob/master/src/concrete_solve.jl#L5-L67</a></p>",
        "id": 250128836,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629471514
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; \"most\" of the time, it should be hitting Enzyme though?</p>",
        "id": 250128859,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629471522
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; I crash to desktop or even blue screen</p>\n<p><a href=\"https://gist.github.com/ArnoStrouwen/fa56708b4081f3f6a374ebb35208577c\">https://gist.github.com/ArnoStrouwen/fa56708b4081f3f6a374ebb35208577c</a></p>",
        "id": 250129574,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629471816
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah, on v1.7-beta3?</p>",
        "id": 250130125,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629472048
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that's what I linked to above</p>",
        "id": 250130134,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629472054
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; but it still does that when I do autodiff=false</p>",
        "id": 250130176,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629472076
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; okay, that's weird.</p>",
        "id": 250130246,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629472091
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/SciML/DiffEqSensitivity.jl/blob/master/src/adjoint_common.jl#L144-L170\">https://github.com/SciML/DiffEqSensitivity.jl/blob/master/src/adjoint_common.jl#L144-L170</a></p>",
        "id": 250130347,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629472140
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah it's during tape compilation</p>",
        "id": 250130358,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629472144
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/SciML/DiffEqSensitivity.jl/blob/master/src/adjoint_common.jl#L125\">https://github.com/SciML/DiffEqSensitivity.jl/blob/master/src/adjoint_common.jl#L125</a></p>",
        "id": 250130408,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629472166
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but it shouldn't be in that branch?</p>",
        "id": 250130416,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629472170
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; figure out how you got to that branch, because that should make that false./</p>",
        "id": 250130467,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629472198
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; I don't know the adjoint code as well as the forward, but I can't fin the code for a finite diff jac</p>",
        "id": 250130559,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629472220
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; I think autodiff=false does nothing, and it does try to use autodiff</p>",
        "id": 250130581,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629472238
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you put that into the sensealg choice, right?</p>",
        "id": 250130751,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629472313
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; <code>_,easy_res3 = adjoint_sensitivities(sol,Tsit5(),dg,t,abstol=1e-14,\n                                  reltol=1e-14,\n                                  sensealg=InterpolatingAdjoint(autodiff=false))</code><br>\nand</p>\n<div class=\"codehilite\" data-code-language=\"_,easy_res3\"><pre><span></span><code>                                  reltol=1e-14,\n                                  sensealg=InterpolatingAdjoint()```\nGive the same error\n</code></pre></div>",
        "id": 250130870,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629472362
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; <code>julia&gt; _,easy_res3 = adjoint_sensitivities(sol,Tsit5(),dg,t,abstol=1e-14,\n                                         reltol=1e-14,\n                                                                           sensealg=InterpolatingAdjoint(autojacvec=DiffEqSensitivity.EnzymeVJP()))       \n([0.2119656697923502, -17.191005070736605], [13.156719526765952 -16.810514043535143 7.7027081314139405 -25.639475859683984])</code></p>",
        "id": 250132561,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629473145
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; interesting</p>",
        "id": 250134863,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629474167
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that's not expected</p>",
        "id": 250134867,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629474169
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; open an issue</p>",
        "id": 250134877,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629474172
    },
    {
        "content": "<p>[gitter] &lt;SiFTW&gt;  Can you think of anything that would have hit performance following a `Pkg.update(), or how to track down the problem? I  went from 6.17.2 to 6.19.0. My (193 equation) DDE system with 3 callbacks (solved to t=5760) used to take about 60 seconds to solve, now it seems to take 30 mins plus on the same machine, it is 100%ing the CPU. Running smaller time courses shows I  now only solve a for t=100 in 6 minutes.</p>",
        "id": 250145017,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629479137
    },
    {
        "content": "<p>[gitter] &lt;SiFTW&gt; <code>@profile sol = solve(prob,callback=cbNoDivision)</code> shows a lot of calls to <code>@Base/task.jl</code> then the first <a href=\"https://github.com/search?q=DiffEq.jl&amp;type=Repositories\">DiffEq.jl</a> related calls are:<br>\n<code> 24244         0 ...EqBase/src/solve.jl    48 (::DiffEqBase.var\"#solve_call##...\n 25754        42 ...EqBase/src/solve.jl    90 solve_up(::DDEProblem{Vector{Fl...\n 25931         5 ...EqBase/src/solve.jl    78 solve_up##kw\n 25931         0 ...EqBase/src/solve.jl    73 #solve#45\n 25931         0 ...EqBase/src/solve.jl    68 (::CommonSolve.var\"#solve##kw\")...</code></p>",
        "id": 250145282,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629479274
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @SiFTW VectorContinuousCallback?</p>",
        "id": 250145439,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629479349
    },
    {
        "content": "<p>[gitter] &lt;SiFTW&gt; yes:<br>\n<code>cb = ContinuousCallback(condition,affect!,affectNeg!)</code><br>\n<code>cb4 = ContinuousCallback(conditionCdh,affectCdhNoNewCells!,nothing)</code><br>\n<code>cbSteadyState=CallbackSet(cb,cb4)</code></p>",
        "id": 250145596,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629479433
    },
    {
        "content": "<p>[gitter] &lt;SiFTW&gt; sorry, not vectorContinuous no.</p>",
        "id": 250145828,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629479547
    },
    {
        "content": "<p>[gitter] &lt;SiFTW&gt; callbacks are like this:<br>\n<code>function conditionCdh(cellcycle,t,integrator)</code><br>\n<code>      cellcycle[indexOfCdh1]-0.2</code><br>\n<code>end</code></p>",
        "id": 250145934,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629479608
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh no, that's not vcc</p>",
        "id": 250146578,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629479936
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I don't know why it would slow down, open an issue with a code to run</p>",
        "id": 250146611,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629479951
    },
    {
        "content": "<p>[gitter] &lt;SiFTW&gt; alright, I'll try and reduce down and see what I can post as an issue.</p>",
        "id": 250146779,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629480031
    },
    {
        "content": "<p>[slack] &lt;mschauer&gt; What is the sensitivity of an ODE solution <code>x(t) = solve(t0, x0, tend)</code> with respect to the start time <code>t0</code>? <code>-f(x0, p, t0)</code>?</p>",
        "id": 250167034,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629490415
    },
    {
        "content": "<p>[slack] &lt;Gabriel Baraldi&gt; I imagine it’s a time dependent ODE?</p>",
        "id": 250167558,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629490715
    },
    {
        "content": "<p>[slack] &lt;mschauer&gt; yes, with <code>f(x, p, t)</code></p>",
        "id": 250167594,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629490740
    },
    {
        "content": "<p>[slack] &lt;mschauer&gt; The important bits are that <code>tend</code> is fix (doesn’t change with <code>t0</code> ) and that <code>x0</code> is fix (doesn’t change with <code>t0)</code></p>",
        "id": 250167911,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629490921
    },
    {
        "content": "<p>[slack] &lt;Gabriel Baraldi&gt; I saw this in a class once but I can’t remember it</p>",
        "id": 250168008,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629490959
    },
    {
        "content": "<p>[gitter] &lt;Nicholaswogan&gt; Is it OK to ask Qs here about <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a>, or should that be done on julia lang or elsewhere?</p>",
        "id": 250168082,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629491003
    },
    {
        "content": "<p>[slack] &lt;mschauer&gt; So if change <code>t0</code>  to <code>t0 + h</code> and <code>x0</code> to <code>x(t0 + h)</code> nothings happens</p>",
        "id": 250168086,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629491005
    },
    {
        "content": "<p>[gitter] &lt;Nicholaswogan&gt; I was wondering how Steady State Problems, are determined to be in a steady state. Is there some relative tolerance that determines this?</p>",
        "id": 250168467,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629491196
    },
    {
        "content": "<p>[slack] &lt;Ramiro Vignolo&gt; is anyone having troubles with OrdinaryDiffEq precompilation? I am not able to compile it since yesterday, when I updated it. I hangs forever. Starting a new fresh environment and adding this only package seems to also have the same problem for me. Any tips?</p>",
        "id": 250171804,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629493187
    },
    {
        "content": "<p>[slack] &lt;Ramiro Vignolo&gt; never mind, changing julia from 1.6.0 to 1.6.2 fixed everything</p>",
        "id": 250176869,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629496233
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah it's just <code>f</code></p>",
        "id": 250188077,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629507546
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; even if time independent</p>",
        "id": 250188078,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629507560
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @nicholaswogan yes, for steadystateproblem reltol and abstol are for the tolerances to the steady state, determined by the derivative from zero</p>",
        "id": 250188123,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629507606
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; interesting</p>",
        "id": 250188161,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629507626
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; @chrisrackauckas @Jonnie having a little look at this now. Changing the <code>SciMLBase.getsyms</code> method for <code>ComponentArrays</code> to just return <code>keys(sol.prob.u0)</code> fixes this. This also maintains the plotting functionality of labelling the lines with the corresponding symbols. I'm not sure if the existing code has any other functionality? Should I make a PR with this?</p>",
        "id": 250228332,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629567044
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; Also, I think something like the following would be nice:  <code>plot(sol, vars=(:x))</code> . But i'm not sure how to implement it? I've tried some other variations of this but doesnt seem like it's implemented(?)</p>",
        "id": 250228411,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629567174
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Say, @chrisrackauckas or @ranocha perhaps you can answer this. I was trying to understand the difference between <code>Trixi</code> and <code>Gridap</code>. Both of the packages seem to use discontinuous galerkin methods, though I think Trixi does the automated mesh refinement. But I was not sure if one package was better for some problems while the other package is better for other problems?</p>",
        "id": 250231323,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629571429
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I thought that would work with a getsyms change?</p>",
        "id": 250233257,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629574222
    },
    {
        "content": "<p>[slack] &lt;Clement Lee&gt; I had a quick question about <a href=\"https://diffeq.sciml.ai/stable/solvers/dynamical_solve/\">https://diffeq.sciml.ai/stable/solvers/dynamical_solve/</a> — it states that we expect “<code>f1</code> is independent of <code>v</code>”, but if I create a <code>SecondOrderODEProblem</code>  defined by <code>u'' = f(u',u,p,t))</code> (which then creates an equivalent <code>DynamicalODEProblem</code>) it seems that <code>f</code> will <strong>not</strong> be independent of <code>u'</code> as demanded. Is that expected? Is <code>f1</code> actually allowed to depend on <code>v</code>?</p>",
        "id": 250243087,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629588658
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; The solvers define what's required for each solver.</p>",
        "id": 250243821,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629589831
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; It may depend on what problem you’re trying to solve. In addition to adaptive mesh refinement, Trixi is focused almost entirely on solving convection-dominated hyperbolic PDEs using high order spatial discretizations and explicit time stepping methods. Because of the focus on explicit time stepping, our implementations are all matrix-free, which allows us to optimize ODE derivative evaluations using some more specific tricks. </p>\n<p>There’s also a cultural aspect to each codebase. All of the Trixi devs work in CFD, and most focus on high order methods. We also tend to work in “entropy stable” discretizations, which address a lot of the long-standing stability issues with high order spatial discretizations. </p>\n<p>If you could describe your problem setup, it might help us to figure out if Trixi would be a good fit</p>",
        "id": 250250874,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629601055
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; If i set a some state with a callback is the quality of interpolation compromised since there exist no f(t)/dt that can be used interpolation?</p>",
        "id": 250262831,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629621033
    },
    {
        "content": "<p>[slack] &lt;ranocha&gt; To complement the great answer of @Jesse Chan: From my understanding, <a href=\"https://github.com/search?q=Gridap.jl&amp;type=Repositories\">Gridap.jl</a> should be your package of choice if you are interested in elliptic problems (Poisson equation). If you are interested in hyperbolic problems (magnetohydrodynamics, compressible Euler equations, Burgers' equation, linear transport), I would of course choose <a href=\"https://github.com/search?q=Trixi.jl&amp;type=Repositories\">Trixi.jl</a>, but that's certainly a biased decision <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 250266861,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629627387
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; a continuous callback needs it, otherwise how is it defined continuously?</p>",
        "id": 250270351,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629633155
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; Ok, let me rephrase: is the interpolation piecewise if a state is changed during integration by a callback?<br>\nHow is the interpolation defined around discountinous change at time point t_j?</p>",
        "id": 250275789,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629641048
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; @Jesse Chan @ranocha Thanks so much for the explanation. This is very helpful. I did not realize that Gridap was more oriented towards elliptic problems. In terms of my own particular interests, I was looking at problems like flooding simulation and forest fire simulation, which are hyperbolic problems. So that is a place where Trixi seems like it might work best. But I am still just trying to understand the julia landscape for PDE solving tools.</p>",
        "id": 250288444,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629659148
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; nooo, I guess something is still missing. If you're able to point me in the right direction, id be happy to take a look. Here's the error:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">LoadError</span><span class=\"o\">:</span> <span class=\"kt\">BoundsError</span><span class=\"o\">:</span> <span class=\"n\">attempt</span> <span class=\"n\">to</span> <span class=\"n\">access</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">}</span> <span class=\"n\">at</span> <span class=\"n\">index</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">getindex</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">::</span><span class=\"kt\">Tuple</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"o\">::</span><span class=\"kt\">Int64</span><span class=\"p\">)</span>\n   <span class=\"err\">@</span> <span class=\"n\">Base</span> <span class=\"o\">./</span><span class=\"n\">tuple</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">29</span>\n <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"n\">interpret_vars</span><span class=\"p\">(</span><span class=\"n\">vars</span><span class=\"o\">::</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Symbol</span><span class=\"p\">},</span> <span class=\"n\">sol</span><span class=\"o\">::</span><span class=\"kt\">ODESolution</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">ComponentVector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Axis</span><span class=\"p\">{(</span><span class=\"kt\">x</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">y</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">)}}}},</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">ComponentVector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Axis</span><span class=\"p\">{(</span><span class=\"kt\">x</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">y</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">)}}}}},</span> <span class=\"kt\">ODEProblem</span><span class=\"p\">{</span><span class=\"kt\">ComponentVector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Axis</span><span class=\"p\">{(</span><span class=\"kt\">x</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">y</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">)}}},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">true</span><span class=\"p\">,</span> <span class=\"kt\">NamedTuple</span><span class=\"p\">{(</span><span class=\"ss\">:α</span><span class=\"p\">,</span> <span class=\"ss\">:β</span><span class=\"p\">,</span> <span class=\"ss\">:γ</span><span class=\"p\">,</span> <span class=\"ss\">:δ</span><span class=\"p\">),</span> <span class=\"kt\">NTuple</span><span class=\"p\">{</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">}},</span> <span class=\"kt\">ODEFunction</span><span class=\"p\">{</span><span class=\"kt\">true</span><span class=\"p\">,</span> <span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">lotka!</span><span class=\"p\">),</span> <span class=\"kt\">LinearAlgebra</span><span class=\"o\">.</span><span class=\"kt\">UniformScaling</span><span class=\"p\">{</span><span class=\"kt\">Bool</span><span class=\"p\">},</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">DEFAULT_OBSERVED</span><span class=\"p\">),</span> <span class=\"kt\">Nothing</span><span class=\"p\">},</span> <span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">Iterators</span><span class=\"o\">.</span><span class=\"kt\">Pairs</span><span class=\"p\">{</span><span class=\"kt\">Union</span><span class=\"p\">{},</span> <span class=\"kt\">Union</span><span class=\"p\">{},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{},</span> <span class=\"kt\">NamedTuple</span><span class=\"p\">{(),</span> <span class=\"kt\">Tuple</span><span class=\"p\">{}}},</span> <span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">StandardODEProblem</span><span class=\"p\">},</span> <span class=\"kt\">Tsit5</span><span class=\"p\">,</span> <span class=\"kt\">OrdinaryDiffEq</span><span class=\"o\">.</span><span class=\"kt\">InterpolationData</span><span class=\"p\">{</span><span class=\"kt\">ODEFunction</span><span class=\"p\">{</span><span class=\"kt\">true</span><span class=\"p\">,</span> <span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">lotka!</span><span class=\"p\">),</span> <span class=\"kt\">LinearAlgebra</span><span class=\"o\">.</span><span class=\"kt\">UniformScaling</span><span class=\"p\">{</span><span class=\"kt\">Bool</span><span class=\"p\">},</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">DEFAULT_OBSERVED</span><span class=\"p\">),</span> <span class=\"kt\">Nothing</span><span class=\"p\">},</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">ComponentVector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Axis</span><span class=\"p\">{(</span><span class=\"kt\">x</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">y</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">)}}}},</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">ComponentVector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Axis</span><span class=\"p\">{(</span><span class=\"kt\">x</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">y</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">)}}}}},</span> <span class=\"kt\">OrdinaryDiffEq</span><span class=\"o\">.</span><span class=\"kt\">Tsit5Cache</span><span class=\"p\">{</span><span class=\"kt\">ComponentVector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Axis</span><span class=\"p\">{(</span><span class=\"kt\">x</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">y</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">)}}},</span> <span class=\"kt\">ComponentVector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Axis</span><span class=\"p\">{(</span><span class=\"kt\">x</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">y</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">)}}},</span> <span class=\"kt\">ComponentVector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Axis</span><span class=\"p\">{(</span><span class=\"kt\">x</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"kt\">y</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">)}}},</span> <span class=\"kt\">OrdinaryDiffEq</span><span class=\"o\">.</span><span class=\"kt\">Tsit5ConstantCache</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">}}},</span> <span class=\"kt\">DiffEqBase</span><span class=\"o\">.</span><span class=\"kt\">DEStats</span><span class=\"p\">},</span> <span class=\"n\">syms</span><span class=\"o\">::</span><span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Symbol</span><span class=\"p\">,</span> <span class=\"kt\">Symbol</span><span class=\"p\">})</span>\n   <span class=\"err\">@</span> <span class=\"n\">SciMLBase</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">SciMLBase</span><span class=\"o\">/</span><span class=\"n\">UIp7W</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">solutions</span><span class=\"o\">/</span><span class=\"n\">solution_interface</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">454</span>\n <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"k\">macro</span> <span class=\"n\">expansion</span>\n   <span class=\"err\">@</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">SciMLBase</span><span class=\"o\">/</span><span class=\"n\">UIp7W</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">solutions</span><span class=\"o\">/</span><span class=\"n\">solution_interface</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">171</span> <span class=\"p\">[</span><span class=\"n\">inlined</span><span class=\"p\">]</span>\n <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"n\">apply_recipe</span><span class=\"p\">(</span><span class=\"n\">plotattributes</span><span class=\"o\">::</span><span class=\"kt\">AbstractDict</span><span class=\"p\">{</span><span class=\"kt\">Symbol</span><span class=\"p\">,</span> <span class=\"kt\">Any</span><span class=\"p\">},</span> <span class=\"n\">sol</span><span class=\"o\">::</span><span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"n\">AbstractTimeseriesSolution</span><span class=\"p\">)</span>\n   <span class=\"err\">@</span> <span class=\"n\">SciMLBase</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">RecipesBase</span><span class=\"o\">/</span><span class=\"mi\">3</span><span class=\"n\">fzVq</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">RecipesBase</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">283</span>\n <span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span> <span class=\"n\">_process_userrecipes!</span><span class=\"p\">(</span><span class=\"n\">plt</span><span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">,</span> <span class=\"n\">plotattributes</span><span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">)</span>\n   <span class=\"err\">@</span> <span class=\"n\">RecipesPipeline</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">RecipesPipeline</span><span class=\"o\">/</span><span class=\"n\">BY2Dd</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">user_recipe</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">36</span>\n <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">]</span> <span class=\"n\">recipe_pipeline!</span><span class=\"p\">(</span><span class=\"n\">plt</span><span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">,</span> <span class=\"n\">plotattributes</span><span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">)</span>\n   <span class=\"err\">@</span> <span class=\"n\">RecipesPipeline</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">RecipesPipeline</span><span class=\"o\">/</span><span class=\"n\">BY2Dd</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">RecipesPipeline</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">70</span>\n <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">]</span> <span class=\"n\">_plot!</span><span class=\"p\">(</span><span class=\"n\">plt</span><span class=\"o\">::</span><span class=\"kt\">Plots</span><span class=\"o\">.</span><span class=\"n\">Plot</span><span class=\"p\">,</span> <span class=\"n\">plotattributes</span><span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">)</span>\n   <span class=\"err\">@</span> <span class=\"n\">Plots</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">Plots</span><span class=\"o\">/</span><span class=\"n\">HcxwM</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">208</span>\n <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]</span> <span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">;</span> <span class=\"n\">kw</span><span class=\"o\">::</span><span class=\"kt\">Any</span><span class=\"p\">)</span>\n   <span class=\"err\">@</span> <span class=\"n\">Plots</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">Plots</span><span class=\"o\">/</span><span class=\"n\">HcxwM</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">plot</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">91</span>\n <span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n   <span class=\"err\">@</span> <span class=\"o\">~/</span><span class=\"n\">Projects</span><span class=\"o\">/</span><span class=\"n\">carray</span><span class=\"o\">-</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">carray</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">32</span>\n<span class=\"k\">in</span> <span class=\"n\">expression</span> <span class=\"n\">starting</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">pavanchaggar</span><span class=\"o\">/</span><span class=\"n\">Projects</span><span class=\"o\">/</span><span class=\"n\">carray</span><span class=\"o\">-</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">carray</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">32</span><span class=\"sb\">```</span>\n</code></pre></div>",
        "id": 250290640,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629662401
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; ehh, it would be good to fully rewrite that plot recipe soon</p>",
        "id": 250291711,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629663997
    },
    {
        "content": "<p>[slack] &lt;Clement Lee&gt; On <a href=\"https://diffeq.sciml.ai/stable/solvers/dynamical_solve/\">https://diffeq.sciml.ai/stable/solvers/dynamical_solve/</a>, <code>Nystrom4</code> says “Allows acceleration to depend on velocity”, but I don’t see that in any other method — should I assume that it’s the only one where <code>f1</code> can depend on <code>v</code>?</p>",
        "id": 250292403,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629665186
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes</p>",
        "id": 250293079,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629666283
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Double checking: is anyone putting in a NumFOCUS small grants proposal for SciML?</p>",
        "id": 250295037,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629669594
    },
    {
        "content": "<p>[slack] &lt;ranocha&gt; Sounds interesting. If you want to use <a href=\"https://github.com/search?q=Trixi.jl&amp;type=Repositories\">Trixi.jl</a> for your problems and you don't know where to start or need any other help, please ask - and join our Slack workspace for <a href=\"https://github.com/search?q=Trixi.jl&amp;type=Repositories\">Trixi.jl</a> (linked from our repo)</p>",
        "id": 250313547,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629698106
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; @Jose Storopoli say one thing I noticed is that solving this system in turing can be very slow. In my case, I was running a lot of ODE solves and then creating an Ensemble of the results, as a basis for parameter estimation. Are you trying something similar. I found a couple of ways to make this faster, LMK if you are interested.</p>",
        "id": 250384250,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629739817
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; SteadyStateAdjoint still crashes on the nightly</p>",
        "id": 250402014,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629748022
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; The tests made it to one of these before crashing</p>\n<div class=\"codehilite\" data-code-language=\"res1a\"><pre><span></span><code>    res1b = adjoint_sensitivities(sol1,DynamicSS(Rodas5()),sensealg=SteadyStateAdjoint(),g,nothing)\n    res1c = adjoint_sensitivities(sol1,DynamicSS(Rodas5()),sensealg=SteadyStateAdjoint(autodiff=false),g,nothing)\n    res1d = adjoint_sensitivities(sol1,DynamicSS(Rodas5()),sensealg=SteadyStateAdjoint(autojacvec=TrackerVJP()),g,nothing)\n    res1e = adjoint_sensitivities(sol1,DynamicSS(Rodas5()),sensealg=SteadyStateAdjoint(autojacvec=ReverseDiffVJP()),g,nothing)\n    res1f = adjoint_sensitivities(sol1,DynamicSS(Rodas5()),sensealg=SteadyStateAdjoint(autojacvec=ZygoteVJP()),g,nothing)\n    res1g = adjoint_sensitivities(sol1,DynamicSS(Rodas5()),sensealg=SteadyStateAdjoint(autodiff=false,autojacvec=false),g,nothing)```\n</code></pre></div>",
        "id": 250402105,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629748078
    },
    {
        "content": "<p>[slack] &lt;gregorykimmel&gt; Hey all, quick question about callbacks. Say I have a continuous callback that occurs when a compartment of the ODE model goes below a threshold and terminates the solver. The resulting sol object seems to have two copies of the final time point. Is this behavior expected?</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"mf\">0.0</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">sum</span><span class=\"p\">((</span><span class=\"n\">soln</span><span class=\"o\">.</span><span class=\"n\">t</span><span class=\"p\">[</span><span class=\"k\">end</span><span class=\"p\">]</span> <span class=\"o\">.-</span> <span class=\"n\">soln</span><span class=\"o\">.</span><span class=\"n\">t</span><span class=\"p\">[</span><span class=\"k\">end</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"o\">.^</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"mf\">0.0</span><span class=\"sb\">```</span>\n</code></pre></div>",
        "id": 250507938,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629821408
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you must have <code>save_positions = (true,true)</code>?</p>",
        "id": 250508292,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629821558
    },
    {
        "content": "<p>[gitter] &lt;SiFTW&gt; Any advice on the best solver/parameters for an ODE system that the solver seems to really struggle with? It's a biochemical mass action system stuff but likely extremely stiff. Getting random oscillations even in fixed variables hard coded to not change with dy[1]=0. The chaotic behavior is close to zero but high enough that it does impact the system. ![bax4Graph](<a href=\"https://i.imgur.com/tG7tHgo.png\">https://i.imgur.com/tG7tHgo.png</a>)</p>\n<div class=\"message_inline_image\"><a href=\"https://i.imgur.com/tG7tHgo.png\"><img src=\"https://uploads.zulipusercontent.net/7afb05dadf556328553d6f79eda23c34225ceaf8/68747470733a2f2f692e696d6775722e636f6d2f7447377448676f2e706e67\"></a></div>",
        "id": 250510438,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629822555
    },
    {
        "content": "<p>[slack] &lt;gregorykimmel&gt; ```prob = ODEProblem(dm.ODEmodel,dm.initial_population,dm.time_domain,dm.params,callback=cbset)</p>\n<p>sol = solve(prob,Tsit5(),callback=cbset,abstol=1e-9,reltol=1e-6)```<br>\nIs it done by default?</p>",
        "id": 250512510,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629823462
    },
    {
        "content": "<p>[slack] &lt;pmyers&gt; <code>Rosenbrock23()</code> is usually a good place to start. If you still run into issues <code>Rodas4()</code>  is usually the next best bet. @chrisrackauckas has mentioned the latter in #sciml-sysbio for very stiff and/or low-tolerance problems.</p>",
        "id": 250512536,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629823476
    },
    {
        "content": "<p>[slack] &lt;gregorykimmel&gt; The callback fwiw</p>\n<div class=\"codehilite\" data-code-language=\"#\"><pre><span></span><code>    enter_stochastic_region(u,t,integrator) = dm.stochastic_threshold-u[3]\n    affect!(integrator) = terminate!(integrator)\n    cb1 = ContinuousCallback(enter_stochastic_region,affect!,nothing,abstol=1e-9)\n\n    # Check to see when the tumor exceeds some c*original size. We define\n    # this as progression and assume the third compartment is the tumor compartment...\n    # Potentially we can use a component array instead so we don't need to track the compartment\n    progression(u,t,integrator) = u[3] - dm.progression_threshold*dm.initial_population[3]\n    affect2!(integrator) = terminate!(integrator)\n    cb2 = ContinuousCallback(progression,affect2!)\n    cbset = CallbackSet(cb1,cb2)```\n</code></pre></div>",
        "id": 250513253,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629823763
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Are you violating any of the rules? I.e. mutating <code>u</code>, etc.</p>",
        "id": 250518492,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629825948
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://discourse.julialang.org/t/psa-how-to-help-yourself-debug-differential-equation-solving-issues/62489\">https://discourse.julialang.org/t/psa-how-to-help-yourself-debug-differential-equation-solving-issues/62489</a></p>",
        "id": 250518500,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629825960
    },
    {
        "content": "<p>[slack] &lt;gregorykimmel&gt; @chrisrackauckas any other thoughts?</p>",
        "id": 250539527,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629834914
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>ContinuousCallback(enter_stochastic_region,affect!,nothing,abstol=1e-9,save_psotions=(false,true))</code></p>",
        "id": 250540555,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629835334
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah, you are doing a double save there.</p>",
        "id": 250540580,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629835343
    },
    {
        "content": "<p>[slack] &lt;gregorykimmel&gt; Ah shoot</p>",
        "id": 250541841,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629835908
    },
    {
        "content": "<p>[slack] &lt;gregorykimmel&gt; I was looking for it in the wrong place</p>",
        "id": 250541856,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629835921
    },
    {
        "content": "<p>[slack] &lt;gregorykimmel&gt; Thanks.</p>",
        "id": 250541900,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629835929
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Hi,</p>\n<p>I am solving an ODE with a Mass matrix by using the following options. I thought it would continue to step regardless of the error but it does not. Can you tell me why please?</p>\n<p><code>solve(probFreez_ode, Trapezoid(), progress = true; reltol = 1e-0, dt = .0001, adaptive = false, force_dtmin = true)</code><br>\ngives:</p>\n<p><code>┌ Warning: Instability detected. Aborting\n└ @ SciMLBase ~/.julia/packages/SciMLBase/UIp7W/src/integrator_interface.jl:351\n  0.090108 seconds (74.06 k allocations: 26.412 MiB)</code></p>",
        "id": 250595691,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629882529
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; The solution would just be infinity then so it wouldn't be so interesting</p>",
        "id": 250600053,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629885631
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; You almost certainly want to use adaptivity with implicit methods</p>",
        "id": 250600078,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629885650
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://sciml.ai/showcase/\">https://sciml.ai/showcase/</a> Let me know if any posts are missing from the showcase that I should be including!</p>",
        "id": 250605982,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629890158
    },
    {
        "content": "<p>[slack] &lt;ranocha&gt; Is the press release for which you collected some visualizations a few days ago already included/published?</p>",
        "id": 250614266,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629895625
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; no, it should be very close <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 250615607,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629896370
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @Datseris is your book out now? I can add that</p>",
        "id": 250618606,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629897723
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; Nope, we submit it to the editors next week, but I guess it will take a couple of months to be printed</p>",
        "id": 250632575,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629903731
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; In the external application libraries <a href=\"https://github.com/search?q=DynamicalSystems.jl&amp;type=Repositories\">DynamicalSystems.jl</a> is missing but could be worth highlighting independently of the book</p>",
        "id": 250632804,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629903829
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; okay, when it's out there let me know to add it to the showcase (and start using all of your beautiful figures everywhere <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 250633163,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629903981
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; yes but I want to see what is failing. Nothing is returned. But, like you said on discourse, most of these issues come from the PDE formulation, I tracked the bug|</p>\n<p>Thank you</p>",
        "id": 250639681,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629907010
    },
    {
        "content": "<p>[slack] &lt;mforets&gt; @David Millard did you find the package useful? Comments are welcome if you have any. We work in wave propagation problems. In our recent article (<a href=\"https://arxiv.org/abs/2105.05841\">https://arxiv.org/abs/2105.05841</a>) we have added tables comparing our approach (set propagation) with Newmark and Bathe methods. I haven't compared with the algorithms for second order ODEs implemented in DiffEq, or Gridap (I think that library also has Newmark).</p>",
        "id": 250705899,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629939882
    },
    {
        "content": "<p>[slack] &lt;David Millard&gt; Hi @mforets! I did check out the implementation but ended up implementing my own, since my problem is nonlinear and I take advantage of sparsity through Kyrlov methods. Missing nonlinearity in the second order problems was the major blocker for me with the package.</p>",
        "id": 250709846,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629943759
    },
    {
        "content": "<p>[gitter] &lt;liushang0322&gt; Can someone tell me the calculation method of the decic function in the corresponding matlab in the differential equation or the method of solving the compatible first derivative with u0 in the implicit differential equation?</p>",
        "id": 250732151,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629961682
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you mean the initialization?</p>",
        "id": 250735079,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629963409
    },
    {
        "content": "<p>[gitter] &lt;liushang0322&gt; Yes, you can directly use decic in matlab to use u0 to get the compatible du0 value. How can I get it in DifferentialEquations? If you can give me an example, it would be better, thank you!</p>",
        "id": 250736391,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629964465
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's currently not too accessible</p>",
        "id": 250736452,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629964515
    },
    {
        "content": "<p>[gitter] &lt;liushang0322&gt; I can wait for you, any time, if you want</p>",
        "id": 250736739,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629964723
    },
    {
        "content": "<p>[slack] &lt;Roger&gt; is there a norm preserving integrator implemented in DiffEq for non-stiff ODEs? e.g I have <code>dx/dt = -im * H(t) x</code> where H is a time-dependent hermitian</p>",
        "id": 250770529,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629984098
    },
    {
        "content": "<p>[slack] &lt;nathanaelbosch&gt; Maybe you could try using some standard non-stiff ODE solver together with a <code>ManifoldProjection</code> callback (<a href=\"https://diffeq.sciml.ai/stable/features/callback_library/#Manifold-Conservation-and-Projection\">https://diffeq.sciml.ai/stable/features/callback_library/#Manifold-Conservation-and-Projection</a>)?</p>",
        "id": 250788308,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629990754
    },
    {
        "content": "<p>[slack] &lt;PhilipVinc&gt; what are norm preserving integrators for the schredinger's equation? Stuff like symplectic solvers?</p>",
        "id": 250791619,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629992046
    },
    {
        "content": "<p>[slack] &lt;mforets&gt; Ok, I see. Yeah, we may add nonlinear Newmark schemes and related ones for second order problems this semester (as coursework). For Krylov methods, I've used <a href=\"https://github.com/search?q=ExponentialUtilities.jl&amp;type=Repositories\">ExponentialUtilities.jl</a> and it worked very well (unless for one example that I still don't know why it fails, giving all zeros).</p>",
        "id": 250801115,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629995606
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; You should also be able to use Crouch-Grossmann or RKMK methods as norm preserving integrators... not sure which one would be the best.</p>",
        "id": 250802623,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629996152
    },
    {
        "content": "<p>[slack] &lt;Roger&gt; Yeah I think I’m looking for some kind of simplectic solver but not sure which algorithm should I use and if there’s an implementation already</p>",
        "id": 250810845,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629999532
    },
    {
        "content": "<p>[slack] &lt;Roger&gt; Thanks guys! This is very helpful!</p>",
        "id": 250810897,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1629999556
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Some tests are failing in my package <code>BifurcationKit.jl</code>  You can see that here <a href=\"https://github.com/rveltz/BifurcationKit.jl/runs/3437941477\">https://github.com/rveltz/BifurcationKit.jl/runs/3437941477</a>. It used to pass by for a lower version of DiffEqBase and OrdinaryDiffEq.<br>\nI feel there is an issue with callbacks. The error reported is the following. Do you think the issue is from my callback specification (see <a href=\"https://github.com/rveltz/BifurcationKit.jl/blob/master/src/periodicorbit/PoincareShooting.jl#L66\">https://github.com/rveltz/BifurcationKit.jl/blob/master/src/periodicorbit/PoincareShooting.jl#L66</a>) which used to work?</p>\n<div class=\"codehilite\" data-code-language=\"error\"><pre><span></span><code>Stacktrace:\n  [1] throw_boundserror(A::SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, I::Tuple{Int64})\n    @ Base ./abstractarray.jl:651\n  [2] checkbounds\n    @ ./abstractarray.jl:616 [inlined]\n  [3] getindex\n    @ ./subarray.jl:308 [inlined]\n  [4] allowed_getindex\n    @ ~/.julia/packages/ArrayInterface/PkAqU/src/ArrayInterface.jl:200 [inlined]\n  [5] find_callback_time(integrator::OrdinaryDiffEq.ODEIntegrator{Rodas4{2, true, DefaultLinSolve, Val{:forward}}, true, Vector{Float64}, Nothing, Float64, NamedTuple{(:r, :μ, :ν, :c3, :c5), NTuple{5, Float64}}, Float64, Float64, Float64, Float64, Vector{Vector{Float64}}, ODESolution{Float64, 2, Vector{Vector{Float64}}, Nothing, Nothing, Vector{Float64}, Vector{Vector{Vector{Float64}}}, ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, NamedTuple{(:r, :μ, :ν, :c3, :c5), NTuple{5, Float64}}, ODEFunction{true, typeof(Fode), UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SciMLBase.StandardODEProblem}, Rodas4{2, true, DefaultLinSolve, Val{:forward}}, OrdinaryDiffEq.InterpolationData{ODEFunction{true, typeof(Fode), UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Vector{Vector{Float64}}, Vector{Float64}, Vector{Vector{Vector{Float64}}}, OrdinaryDiffEq.Rodas4Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, Matrix{Float64}, Matrix{Float64}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, SciMLBase.TimeGradientWrapper{ODEFunction{true, typeof(Fode), UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Vector{Float64}, NamedTuple{(:r, :μ, :ν, :c3, :c5), NTuple{5, Float64}}}, SciMLBase.UJacobianWrapper{ODEFunction{true, typeof(Fode), UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Float64, NamedTuple{(:r, :μ, :ν, :c3, :c5), NTuple{5, Float64}}}, DefaultLinSolve,\n    @ DiffEqBase ~/.julia/packages/DiffEqBase/WKucm/src/callbacks.jl:789\n  [6] find_first_continuous_callback\n    @ ~/.julia/packages/DiffEqBase/WKucm/src/callbacks.jl:466 [inlined]\n  [7] handle_callbacks!\n    @ ~/.julia/packages/OrdinaryDiffEq/ajk4M/src/integrators/integrator_utils.jl:249 [inlined]\n  [8] _loopfooter!(integrator::OrdinaryDiffEq.ODEIntegrator{Rodas4{2, true, DefaultLinSolve, Val{:forward}}, true, Vector{Float64}, Nothing, Float64, NamedTuple{(:r, :μ, :ν, :c3, :c5), NTuple{5, Float64}}, Float64, Float64, Float64, Float64, Vector{Vector{Float64}}, ODESolution{Float64, 2, Vector{Vector{Float64}}, Nothing, Nothing, Vector{Float64}, Vector{Vector{Vector{Float64}}}, ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, NamedTuple{(:r, :μ, :ν, :c3, :c5), NTuple{5, Float64}}, ODEFunction{true, typeof(Fode), UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SciMLBase.StandardODEProblem}, Rodas4{2, true, DefaultLinSolve, Val{:forward}}, OrdinaryDiffEq.InterpolationData{ODEFunction{true, typeof(Fode), UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Vector{Vector{Float64}}, Vector{Float64}, Vector{Vector{Vector{Float64}}}, OrdinaryDiffEq.Rodas4Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, Matrix{Float64}, Matrix{Float64}, OrdinaryDiffEq.RodasTableau{Float64, Float64}, SciMLBase.TimeGradientWrapper{ODEFunction{true, typeof(Fode), UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Vector{Float64}, NamedTuple{(:r, :μ, :ν, :c3, :c5), NTuple{5, Float64}}}, SciMLBase.UJacobianWrapper{ODEFunction{true, typeof(Fode), UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Float64, NamedTuple{(:r, :μ, :ν, :c3, :c5), NTuple{5, Float64}}}, DefaultLinSolve,\n    @ OrdinaryDiffEq ~/.julia/packages/OrdinaryDiffEq/ajk4M/src/integrators/integrator_utils.jl:204\n  [9] loopfooter!\n    @ ~/.julia/packages/OrdinaryDiffEq/ajk4M/src/integrators/integrator_utils.jl:168 [inlined]\n [10] solve!(integrator::OrdinaryDiffEq.ODEIntegrator{Rodas4{2, true, DefaultLinSolve, Val{:forward}}, true, Vector{Float64}, Nothing, Float64, NamedTuple{(:r, :μ, :ν, :c3, :c5), NTuple{5, Float64}}, Float64, Float64, Float64, Float64, Vector{Vector{Float64}}, ODESolution{Float64, 2, Vector{Vector{Float64}}, Nothing, Nothing, Vector{Float64}, Vector{Vector{Vector{Float64}}}, ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, NamedTuple{(:r, :μ, :ν, :c3, :c5), NTuple{5, Float64}}, ODEFunction{true, typeof(Fode), UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing,\n    @ OrdinaryDiffEq ~/.julia/packages/OrdinaryDiffEq/ajk4M/src/solve.jl:479\n [11] #__solve#471\n    @ ~/.julia/packages/OrdinaryDiffEq/ajk4M/src/solve.jl:5 [inlined]\n [12] #solve_call#42\n    @ ~/.julia/packages/DiffEqBase/WKucm/src/solve.jl:61 [inlined]\n [13] solve_up(prob::ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, NamedTuple{(:r, :μ, :ν, :c3, :c5), NTuple{5, Float64}}, ODEFunction{true, typeof(Fode), UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SciMLBase.StandardODEProblem}, sensealg::Nothing, u0::Vector{Float64}, p::NamedTuple{(:r, :μ, :ν, :c3, :c5), NTuple{5, Float64}}, args::Rodas4{0, true, DefaultLinSolve, Val{:forward}}; kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:save_everystep, :callback, :rtol), Tuple{Bool, VectorContinuousCallback{BifurcationKit.var\"#pSection#778\"{SectionPS{Vector{Vector{Float64}}, Vector{Vector{Float64}}, Vector{Vector{Float64}}, Vector{Vector{Float64}}}}, BifurcationKit.var\"#affect!#779\", Nothing, typeof(DiffEqBase.INITIALIZE_DEFAULT), typeof(DiffEqBase.FINALIZE_DEFAULT), Float64, Int64, Rational{Int64}, Nothing, Int64}, Float64}}})\n    @ DiffEqBase ~/.julia/packages/DiffEqBase/WKucm/src/solve.jl:87\n [14] #solve#43\n    @ ~/.julia/packages/DiffEqBase/WKucm/src/solve.jl:73 [inlined]\n [15] flowTimeSol(x::Vector{Float64}, p::NamedTuple{(:r, :μ, :ν, :c3, :c5), NTuple{5, Float64}}, tm::Float64, pb::ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, NamedTuple{(:r, :μ, :ν, :c3, :c5), NTuple{5, Float64}}, ODEFunction{true, typeof(Fode), UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SciMLBase.StandardODEProblem}; alg::Rodas4{0, true, DefaultLinSolve, Val{:forward}}, kwargs::Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:callback, :rtol), Tuple{VectorContinuousCallback{BifurcationKit.var\"#pSection#778\"{SectionPS{Vector{Vector{Float64}}, Vector{Vector{Float64}}, Vector{Vector{Float64}}, Vector{Vector{Float64}}}}, BifurcationKit.var\"#affect!#779\", Nothing, typeof(DiffEqBase.INITIALIZE_DEFAULT), typeof(DiffEqBase.FINALIZE_DEFAULT), Float64, Int64, Rational{Int64}, Nothing, Int64}, Float64}}})\n    @ BifurcationKit ~/work/prog_gd/julia/dev/dev1/BifurcationKit/src/periodicorbit/Flow.jl:9\n [16] #flow#668\n    @ ~/work/prog_gd/julia/dev/dev1/BifurcationKit/src/periodicorbit/Flow.jl:24 [inlined]\n [17] #699#700\n    @ ~/work/prog_gd/julia/dev/dev1/BifurcationKit/src/periodicorbit/Flow.jl:148 [inlined]\n [18] #699\n    @ ~/work/prog_gd/julia/dev/dev1/BifurcationKit/src/periodicorbit/Flow.jl:148 [inlined]\n [19] #_#692\n    @ ~/work/prog_gd/julia/dev/dev1/BifurcationKit/src/periodicorbit/Flow.jl:134 [inlined]\n  SciMLBase.StandardODEProblem}}}})(x::Vector{Float64}, p::NamedTuple{(:r, :μ, :ν, :c3, :c5), NTuple{5, Float64}}, t::Float64)\n    @ BifurcationKit ~/work/prog_gd/julia/dev/dev1/BifurcationKit/src/periodicorbit/Flow.jl:134\n [21] top-level scope\n    @ none:1```\n</code></pre></div>",
        "id": 250904822,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630056051
    },
    {
        "content": "<p>[slack] &lt;Simon Welker&gt; hi, is there anything available for second-order SDEs in <code>DifferentialEquations.jl</code>? i'm currently manually transferring <code>du.x = u.vx</code> in my derivative function, and leave the rest up to the SDE integrator (<code>EulerHeun</code> at the moment). i don't know what the exact update formulae of the integrator boil down to in this case, so it seems a little hacked together, like it's probably not formally correct. i found this paper <a href=\"https://www1.maths.leeds.ac.uk/~grant/BLL.pdf\">https://www1.maths.leeds.ac.uk/~grant/BLL.pdf</a>, but couldn't find anything in the <code>DifferentialEquations.jl</code> docs mentioning such methods</p>",
        "id": 250920844,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630065627
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Can you open an issue with which test to run? I can take a look over the weekend. elType Float64 at index -1 looks... bad haha</p>",
        "id": 250934401,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630072250
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; your callback looks fine.</p>",
        "id": 250934451,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630072270
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 251091038,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630194618
    },
    {
        "content": "<p>[slack] &lt;gregorykimmel&gt; Hello, How can I print to terminal when the solver time <code>sol.t</code> first goes past integer values? That is, if the solver is at t= 0.935 and then steps to t = 1.05 , to have it print that <code>t = 1</code> has been reached, and do the same thing for <code>t = 2,3,...</code> until completion what should I do? I don’t want/need to force the solver to go through integer values, it is just to check-in on the progress of the solver.</p>",
        "id": 251270628,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630347322
    },
    {
        "content": "<p>[slack] &lt;gregorykimmel&gt; A second, but not quite related question. Say my simulation is killed (for whatever reason), is there somewhere in the doc that shows how I can save state at random (or fixed) points in the simulation that I can then restart the solver from that point. I was looking here, but didn’t see any info about restarting (<a href=\"https://diffeq.sciml.ai/stable/features/io/\">https://diffeq.sciml.ai/stable/features/io/</a>).</p>",
        "id": 251270843,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630347408
    },
    {
        "content": "<p>[slack] &lt;Atiyo Ghosh&gt; I think both your questions can be addressed using callbacks.</p>\n<p>For example, for the first question, I believe something like the following should work:</p>\n<div class=\"codehilite\" data-code-language=\"callback_func\"><pre><span></span><code>cb = PeriodicCallback(callback_func, 1.0)\nsol = solve(..., callback=cb)```\n</code></pre></div>",
        "id": 251282816,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630352364
    },
    {
        "content": "<p>[slack] &lt;gregorykimmel&gt; Better than my workaround solution:</p>\n<div class=\"codehilite\" data-code-language=\"print_time_condition\"><pre><span></span><code>        print_time!(integrator) = begin\n            println(\"At time t = $(integrator.p.progress_checker[1])\")\n            integrator.p.progress_checker[1] += 1.0\n        end\n        cb2 = DiscreteCallback(print_time_condition,print_time!,save_positions=(false,false))```\n😄\n</code></pre></div>",
        "id": 251285359,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630353390
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; save the integrator.</p>",
        "id": 251286011,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630353611
    },
    {
        "content": "<p>[slack] &lt;gregorykimmel&gt; Any particular format? Is it in the doc? What is the syntax to restart it with the saved integrator</p>",
        "id": 251292492,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630356391
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>solve!(integrator)</code></p>",
        "id": 251292512,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630356405
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; see the integrator interface docs</p>",
        "id": 251292525,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630356409
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; Progress bar usage in DiffEq is a bit complicated and no longer works automatically since Juno is deprecated. Why didn't you just use <a href=\"https://github.com/timholy/ProgressMeter.jl\">timholy/ProgressMeter.jl</a>? I did this in e.g. Lyapunov exponent calculations and the process was very smooth: <a href=\"https://github.com/JuliaDynamics/ChaosTools.jl/blob/master/src/chaosdetection/lyapunovs.jl#L87-L89\">https://github.com/JuliaDynamics/ChaosTools.jl/blob/master/src/chaosdetection/lyapunovs.jl#L87-L89</a> and <a href=\"https://github.com/JuliaDynamics/ChaosTools.jl/blob/master/src/chaosdetection/lyapunovs.jl#L110\">https://github.com/JuliaDynamics/ChaosTools.jl/blob/master/src/chaosdetection/lyapunovs.jl#L110</a></p>",
        "id": 251373723,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630411707
    },
    {
        "content": "<p>[slack] &lt;pfitzseb&gt; DiffEq should just depend on <a href=\"https://github.com/search?q=ProgressLogging.jl&amp;type=Repositories\">ProgressLogging.jl</a></p>",
        "id": 251374075,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630411919
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; Ugh, what's the difference with this and <a href=\"https://github.com/search?q=ProgressMeter.jl&amp;type=Repositories\">ProgressMeter.jl</a>?</p>",
        "id": 251374190,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630411958
    },
    {
        "content": "<p>[slack] &lt;pfitzseb&gt; ProgressLogging is frontend agnostic</p>",
        "id": 251374262,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630411997
    },
    {
        "content": "<p>[slack] &lt;pfitzseb&gt; so it works in the REPL, Juno, VSCode etc</p>",
        "id": 251374275,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630412005
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; But does it work from the user side without having to install new packages?</p>",
        "id": 251374309,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630412023
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; at the moment I have to do</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>using TerminalLoggers: TerminalLogger\nglobal_logger(TerminalLogger())```\nto get diff eq to log progress\n</code></pre></div>",
        "id": 251374401,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630412049
    },
    {
        "content": "<p>[slack] &lt;pfitzseb&gt; only in a plain REPL though</p>",
        "id": 251374422,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630412063
    },
    {
        "content": "<p>[slack] &lt;pfitzseb&gt; but yes, that's a bit unfortunate</p>",
        "id": 251374430,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630412069
    },
    {
        "content": "<p>[slack] &lt;ericphanson&gt; I wonder if there should be a stack like the display stack where code can coordinate about what logger to use</p>",
        "id": 251375711,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630412771
    },
    {
        "content": "<p>[slack] &lt;pfitzseb&gt; that'd be nice, but you can implement that behaviour in the logger</p>",
        "id": 251375747,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630412798
    },
    {
        "content": "<p>[slack] &lt;pfitzseb&gt; which is what all those ProgressLogging frontends do</p>",
        "id": 251375779,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630412814
    },
    {
        "content": "<p>[slack] &lt;ericphanson&gt; What do you mean?</p>",
        "id": 251375803,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630412826
    },
    {
        "content": "<p>[slack] &lt;pfitzseb&gt; They pass non-progress log events along to another logger</p>",
        "id": 251375878,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630412872
    },
    {
        "content": "<p>[slack] &lt;pfitzseb&gt; And I'm sure there's some sort of CompositeLogger in LoggingExtras</p>",
        "id": 251375962,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630412901
    },
    {
        "content": "<p>[slack] &lt;ericphanson&gt; Yeah, true. What I mean though is if DiffEq works best in the REPL with a TerminalLogger, ideally the user wouldn’t have to do anything and DiffEq could just set the logger. But if 2 packages do that they will clash and it will depend on load order or something</p>",
        "id": 251376115,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630412988
    },
    {
        "content": "<p>[slack] &lt;pfitzseb&gt; Right. Same issue with the display stack, in fact <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 251376203,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630413012
    },
    {
        "content": "<p>[slack] &lt;pfitzseb&gt; Since that doesn't have a priority system, so it's first come first serve</p>",
        "id": 251376247,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630413031
    },
    {
        "content": "<p>[slack] &lt;ericphanson&gt; ah ok, didn’t know the display stack had that issue aha. I thought it was a solution to that problem</p>",
        "id": 251376295,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630413065
    },
    {
        "content": "<p>[slack] &lt;pfitzseb&gt; <a href=\"https://github.com/JuliaLang/julia/pull/30922\">https://github.com/JuliaLang/julia/pull/30922</a></p>",
        "id": 251376327,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630413091
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; So the issue is that VS Code doesn't set a logger by default.</p>",
        "id": 251377036,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630413483
    },
    {
        "content": "<p>[slack] &lt;pfitzseb&gt; No it does</p>",
        "id": 251377075,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630413494
    },
    {
        "content": "<p>[slack] &lt;pfitzseb&gt; the issue is that it only works when ProgressLogging is loaded</p>",
        "id": 251377103,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630413513
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Why?\\</p>",
        "id": 251377116,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630413521
    },
    {
        "content": "<p>[slack] &lt;pfitzseb&gt; Because ProgressLogging defines a bunch of structs the logger needs to process</p>",
        "id": 251377180,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630413557
    },
    {
        "content": "<p>[slack] &lt;pfitzseb&gt; and loading two copies of ProgressLogging means that you need to convert the two different <code>Progress</code>s into each other based on fields names or something like that</p>",
        "id": 251377240,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630413589
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; so why doesn't VS Code do using on that given that it's needed for it's standard progress monitoring functionality?</p>",
        "id": 251377251,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630413594
    },
    {
        "content": "<p>[slack] &lt;pfitzseb&gt; Because we don't want the dependency <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 251377318,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630413613
    },
    {
        "content": "<p>[slack] &lt;pfitzseb&gt; and to avoid the issues with incompatible versions</p>",
        "id": 251377331,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630413625
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 251377336,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630413631
    },
    {
        "content": "<p>[slack] &lt;pfitzseb&gt; in general we <strong>never</strong> load actual packages into the REPL process</p>",
        "id": 251377348,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630413637
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; do a PR to SciMLBase for the thing that I need then? I'll just do it.</p>",
        "id": 251377380,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630413661
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; We should just add it to like, <a href=\"https://github.com/search?q=ArrayInterface.jl&amp;type=Repositories\">ArrayInterface.jl</a> or <a href=\"https://github.com/search?q=Requires.jl&amp;type=Repositories\">Requires.jl</a> to just silently fix everyone's install</p>",
        "id": 251377404,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630413674
    },
    {
        "content": "<p>[slack] &lt;pfitzseb&gt; Haha</p>",
        "id": 251377412,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630413680
    },
    {
        "content": "<p>[slack] &lt;pfitzseb&gt; Yeah I'll look into it today or tomorrow</p>",
        "id": 251377464,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630413710
    },
    {
        "content": "<p>[slack] &lt;pfitzseb&gt; maybe I'll go back to the original field-name-based integration</p>",
        "id": 251377552,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630413730
    },
    {
        "content": "<p>[slack] &lt;devmotion&gt; Didn't we add something similar to <a href=\"https://github.com/TuringLang/AbstractMCMC.jl/blob/56431bd4298bac6ad324dd47dc3162cf49c45626/src/logging.jl#L1-L4\">https://github.com/TuringLang/AbstractMCMC.jl/blob/56431bd4298bac6ad324dd47dc3162cf49c45626/src/logging.jl#L1-L4</a> to SciML at some point but removed it again because it broke inference?</p>",
        "id": 251377831,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630413863
    },
    {
        "content": "<p>[slack] &lt;pfitzseb&gt; Yeah I remember that discussion</p>",
        "id": 251377998,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630413953
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes, we just need IDEs to hardcode the logger they want.</p>",
        "id": 251378558,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630414218
    },
    {
        "content": "<p>[slack] &lt;pfitzseb&gt; That works fine for IDEs, but you still won't get nice output in the REPL, right?</p>",
        "id": 251378606,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630414248
    },
    {
        "content": "<p>[slack] &lt;pfitzseb&gt; because TerminalLoggers needs to be set as the global logger</p>",
        "id": 251378628,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630414260
    },
    {
        "content": "<p>[slack] &lt;devmotion&gt; It works in AbstractMCMC but there nobody cares about type inference <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> We just wrap the sampling algorithm in a local logger if the current logger does not handle progress logs; only progress logs are forwarded to this logger though, everything else is handled by whatever logger the user set (to avoid that we mess up users' environment too much)</p>",
        "id": 251380351,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630414949
    },
    {
        "content": "<p>[slack] &lt;termi-official&gt; Hi, I need some help understanding how the internals for the nonlinear solvers work. I am working on an integration of a FEM toolbok with the DiffEq ecosystem. However I am stuck understanding how the DAE initialization works and what the intended way to hook into the nonlinear solver is.<br>\nFor a short background: I plumbered together a simple incompressible Stokes flow as a first example, where I simply override the Newton initialization with my custom initalization to properly enforce Dirichlet BCs (see <a href=\"https://github.com/Ferrite-FEM/Ferrite.jl/blob/do/navier-stokes-diffeq-example/docs/src/literate/ns_vs_diffeq.jl#L240-L253\">https://github.com/Ferrite-FEM/Ferrite.jl/blob/do/navier-stokes-diffeq-example/docs/src/literate/ns_vs_diffeq.jl#L240-L253</a>). For the linear solve I can nicely integrate with the existing infrastucture (see <a href=\"https://github.com/Ferrite-FEM/Ferrite.jl/blob/do/navier-stokes-diffeq-example/docs/src/literate/ns_vs_diffeq.jl#L255-L275\">https://github.com/Ferrite-FEM/Ferrite.jl/blob/do/navier-stokes-diffeq-example/docs/src/literate/ns_vs_diffeq.jl#L255-L275</a>). However, I have an issue to properly initializing the DAE, which results from the FEM discretization of the instationary incompressible Stokes problem. Choosing anything else than <code>NoInit</code> for the <code>initializealg</code> results in failure of the first time step (if I understand the error correctly: Warning: Instability detected. Aborting). Digging into the backend I see that a different nlsolve than the internal one is utilized, namely the one from <a href=\"https://github.com/search?q=NLSolve.jl&amp;type=Repositories\">NLSolve.jl</a> (<a href=\"https://github.com/SciML/OrdinaryDiffEq.jl/blob/9d018d1cd6ef3295796395344ade3616497e05ec/src/initialize_dae.jl#L311\">https://github.com/SciML/OrdinaryDiffEq.jl/blob/9d018d1cd6ef3295796395344ade3616497e05ec/src/initialize_dae.jl#L311</a>) .</p>\n<p>Now to my questions:<br>\n• Is there a better/intended way to hook into the nlsolver to apply non-zero Dirichlet BCs? (Edit: What is the intended way to apply time-varying Dirichlet BCs for problems in mass matrix form anyway?)<br>\n• Is there a reason why a different nonlinear solver is utilized for the DAE initialization than for the time stepper?<br>\n• If I understand everything correctly, then the pressure variables of the problem are the algebraic variables of the DAE. Since I am not applying Dirichlet BCs to these variables I do not understand why the Brown initialization fails. Other than that I am also not sure how to integrate the application of the Dirichlet BCs into the initialization.<br>\nThanks in advance for taking the time reading through this. :)</p>",
        "id": 251440804,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630437156
    },
    {
        "content": "<p>[slack] &lt;Chaitanya Sai&gt; Is there any way we could solve Poission equation with Initial and Boundary conditions using Flux, DiffEqFlux, and <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a> libraries? without using <a href=\"https://github.com/search?q=ModellingToolkits.jl&amp;type=Repositories\">ModellingToolkits.jl</a> and <a href=\"https://github.com/search?q=NeuralPDE.jl&amp;type=Repositories\">NeuralPDE.jl</a> library?</p>",
        "id": 251507267,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630476421
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Poisson equation doesn't have initial conditions.</p>",
        "id": 251529123,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630488644
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/search?q=DiffEqOperators.jl&amp;type=Repositories\">DiffEqOperators.jl</a> would be the easiest way to do it</p>",
        "id": 251529133,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630488653
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Writing it by hand into DiffEqFlux is pretty straightforward.</p>",
        "id": 251529160,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630488667
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; What did you try? Did you try DiffEqOperators?</p>",
        "id": 251529176,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630488674
    },
    {
        "content": "<p>[slack] &lt;tabitaCatalan&gt; Hi! I'm trying to add a matrix multiplication to the dynamics,  with a time varying matrix. I'm defining an array with the data matrix</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>interactions_in_time = @SArray rand(2,2,10)\n\nfunction interaction_matrix(t) #::Array{Float64, 2}\n    interactions_in_time[:,:, floor(Int, t) + 1]\nend\n\n@register interaction_matrix(t)```\ndefining the variables\n\n```@variables t X[1:2](t) IM[1:2,1:2](t)\nD = Differential(t)```\nand I want to define equations `IM .~ interaction_matrix(t)` and `D.(X) .~ (IM * X)`.\n\nThis works\n```julia&gt; IM .~ interaction_matrix(t)\n(broadcast(~, map(Symbolics.CallWith((t,)), IM), interaction_matrix(t)))[1:2,1:2]```\nBut when I try to collect the equations\n```julia&gt; collect(IM .~ interaction_matrix(t))```\nI get a big error (these are only the red parts):\n```ERROR: Failed to apply rule getindex(~x, ~(~i)) =&gt; scalarize(~x, (map((j-&gt;begin\n                        #= C:\\Users\\Tabita\\.julia\\packages\\Symbolics\\fd3w9\\src\\arrays.jl:502 =#\n                        if haskey(dict, j)\n                            dict[j]\n                        else\n                            j\n                        end\n                    end), ~(~i))...,)) on expression (interaction_matrix(t))[i, j]\n...\ncaused by: ArgumentError: interaction_matrix(t) does not have metadata for Symbolics.ScalarizeCache\n...```\nI tried also registering `interaction_matrix(t)` with an output type\n```@register interaction_matrix(t)::SArray{Tuple{2,2},Float64,2,4}```\nBut I get the same results. How should I approach this? Thanks in advance!\n</code></pre></div>",
        "id": 251573603,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630508264
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; This is a @yingbo_ma @shashi symbolic array issue.</p>",
        "id": 251574730,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630508589
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I am not sure it can do static arrays.</p>",
        "id": 251574748,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630508594
    },
    {
        "content": "<p>[slack] &lt;tabitaCatalan&gt; I change to static arrays thinking it would work, but with normal arrays I have the same issue</p>",
        "id": 251574959,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630508652
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Yeah, that’s not gonna work</p>",
        "id": 251575045,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630508687
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Could you give me a MWE of what you are trying to do?</p>",
        "id": 251575102,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630508706
    },
    {
        "content": "<p>[slack] &lt;tabitaCatalan&gt; Not sure what MWE means <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>, but I wanted to do this:</p>\n<div class=\"codehilite\" data-code-language=\"eqs\"><pre><span></span><code>    [IM .~ interaction_matrix(t)];\n    [D.(X) .~ (IM * X)];\n]\n@named system = ODESystem(eqs)\nu0 = [ X[1] =&gt; 1., X[2] =&gt; 2.]\np = []\nprob = ODEProblem(structural_simplify(system), u0, (0.0,9.0), p)\nsol = solve(prob)```\nI only want to use a matrix multiplication, varying the matrix in time.\n</code></pre></div>",
        "id": 251575941,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630509018
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Do you have something that’s copy-paste-able</p>",
        "id": 251576038,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630509061
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; I don’t think you should register a SMatrix. It’s also just scalarizing everything. Cannot you trace the <code>interaction_matrix</code> function directly?</p>",
        "id": 251576169,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630509107
    },
    {
        "content": "<p>[slack] &lt;tabitaCatalan&gt; ```using StaticArrays, ModelingToolkit </p>\n<p>interactions_in_time = @SArray rand(2,2,10)</p>\n<p>function interaction_matrix(t) #::Array{Float64, 2}<br>\n    interactions_in_time[:,:, floor(Int, t) + 1] <br>\nend</p>\n<p>@register interaction_matrix(t)::SArray{Tuple{2,2},Float64,2,4}</p>\n<p>@variables t X<a href=\"http://t\">1:2</a> IM<a href=\"http://t\">1:2,1:2</a></p>\n<p>D = Differential(t)</p>\n<p>IM .~ interaction_matrix(t) # this works <br>\ncollect(IM .~ interaction_matrix(t)) # this fails</p>\n<p>eqs = [<br>\n    [IM .~ interaction_matrix(t)];<br>\n    [D.(X) .~ (IM * X)];<br>\n]</p>\n<p>collect.(eqs) # this fails </p>\n<h1>v1</h1>\n<p>@named system = ODESystem(eqs) # ERROR: type Arr has no field lhs</p>\n<h1>v2</h1>\n<p>@named system = ODESystem(collect.(eqs)) # collect fails </p>\n<p>u0 = [ X[1] =&gt; 1., X[2] =&gt; 2.]<br>\np = []<br>\nprob = ODEProblem(structural_simplify(system), u0, (0.0,9.0), p)<br>\nsol = solve(prob)```</p>",
        "id": 251577483,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630509593
    },
    {
        "content": "<p>[slack] &lt;tabitaCatalan&gt; &gt; Cannot you trace the <code>interaction_matrix</code> function directly? <br>\nI don't know how <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 251577775,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630509696
    },
    {
        "content": "<p>[slack] &lt;tabitaCatalan&gt; &gt; I don’t think you should register a SMatrix.<br>\nThis was my initial approach</p>\n<div class=\"codehilite\" data-code-language=\"interactions_in_time\"><pre><span></span><code>function interaction_matrix(t) #::Array{Float64, 2}\n    interactions_in_time[:,:, floor(Int, t) + 1]\nend\n\n@register interaction_matrix(t)::Array{Float64,2}```\n</code></pre></div>",
        "id": 251579138,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630510203
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; What's the index of the DAE in your discretization?</p>",
        "id": 251583345,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630511797
    },
    {
        "content": "<p>[slack] &lt;termi-official&gt; The (Hessenberg) index is 2.</p>",
        "id": 251587859,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630513446
    },
    {
        "content": "<p>[slack] &lt;termi-official&gt; I guess the documentation tells me that Brown and Shampine init only works on index 1 DAEs, no matter if I give it implicitly or in semi-explicit form?</p>",
        "id": 251589221,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630513973
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yes, it will probably fail to initialize.</p>",
        "id": 251591181,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630514717
    },
    {
        "content": "<p>[slack] &lt;termi-official&gt; Thanks for the pointer Chris, I will look further into this. Do you know who I could ask on the remaining two questions?</p>",
        "id": 251593742,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630515713
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the second is something that's planned to change, maybe</p>",
        "id": 251597128,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630517045
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it has to do with Jacobian reuse</p>",
        "id": 251597135,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630517049
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the first, so it's a time-varying mass matrix?</p>",
        "id": 251597163,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630517068
    },
    {
        "content": "<p>[slack] &lt;Chaitanya Sai&gt; I have used flux and differentialEquations.jl. I have created </p>\n<ol>\n<li>neural network using flux</li>\n<li>Defined x and y into a new variable C. Thinking d/dC will give me d/dx and d/dy. But that method didn't work.<br>\nI guess I have to look into DiffEqOperators.</li>\n</ol>",
        "id": 251597559,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630517252
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Poisson should be very straightforward with DiffEqOperators</p>",
        "id": 251598114,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630517475
    },
    {
        "content": "<p>[slack] &lt;termi-official&gt; Thanks again!</p>\n<p>On paper I can express the problem (assuming just implicit Euler for simplicity for now) without varying the mass matrix over time.<br>\nTo give more details, I have a linear DAE for testing purposes (FEM discretization of an incompressible Stokes operator), namely <code>Mdu/dt = Ku</code> where M is singular. Manually applying the Implicit Euler results in the linear system <code>(M-\\Delta t K)u^{t+1} = -Mu^t</code> (+- sign errors). Dirichlet boundary conditions are applied by mutating the matrix (M-\\Delta t K) and the vector -M u^t accordingly. I tested this one and it works.<br>\nNow when utilizing diffeq I assume that I get for implicit RK methods a comparable linear problem in the linear iteration of the Newton solver, hence I apply the Dirichlet condition there by injecting a custom linear solver before factorizing it. However, since it is a Newton I have to zero out the entries in the rhs such that the Newton increments of the constrained variables become zero. I currently apply the actual Dirichlet value at the nodes in the initialization of the Newton by overriding internal methods of diffeq (namely OrdinaryDiffEq.initialize!), assigning the corresponding values to <code>nlsolver.z</code>.</p>",
        "id": 251600955,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630518610
    },
    {
        "content": "<p>[slack] &lt;termi-official&gt; However using the ImplicitEuler without adaptivity seems to only work if I overwrite uprev instead of z.</p>",
        "id": 251603260,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630519536
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; how do i disable adaptive timestepping?</p>",
        "id": 251606818,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630520911
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>adaptive=false</code></p>",
        "id": 251608137,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630521463
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; We're using a Rosenbrock23 solver, but find that if we use our own linear solver (at the moment, just the lu solver example at <a href=\"https://diffeq.sciml.ai/stable/features/linear_nonlinear/#Implementing-Your-Own-LinSolve:-How-LinSolveFactorize-Was-Created\">https://diffeq.sciml.ai/stable/features/linear_nonlinear/#Implementing-Your-Own-LinSolve:-How-LinSolveFactorize-Was-Created</a>, we end up with a much smaller step size</p>",
        "id": 251610375,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630522382
    },
    {
        "content": "<p>[slack] &lt;Ashish&gt; Hi! When solving ODEs for example, the time period is given using a tuple as <code>tspan = (0.0, 100.0)</code> and fed into defining the problem. Is is possible to define <code>tspan</code> as a vector instead with user-defined sparsity of points, something like <code>range(0.0, 100.0, step=0.1)</code>?</p>",
        "id": 251612816,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630523433
    },
    {
        "content": "<p>[slack] &lt;frankschae&gt; do you want to control the step size? Then,<br>\n<code>sol = solve(prob, alg, tstops=your_vector, adaptive=false; kwargs...)</code></p>",
        "id": 251615426,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630524575
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; Here is a reproducible example:<br>\n<a href=\"https://gist.github.com/simonbyrne/e238e04612edb84c7f604e6797056ca5\">https://gist.github.com/simonbyrne/e238e04612edb84c7f604e6797056ca5</a></p>\n<p>running using the default linear solver, the <code>dt</code> is O(10), with the custom linear solver (which should be equivalent), <code>dt</code> is O(0.01)</p>",
        "id": 251624900,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630528454
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; almost certainly you should do <code>saveat=0.1</code> instead.</p>",
        "id": 251625203,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630528597
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; did you mean to do <code>adaptive=false</code>?</p>",
        "id": 251625283,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630528643
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; no, we still want it to be adaptive</p>",
        "id": 251625494,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630528750
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; but i can't figure out why they're adapting differently</p>",
        "id": 251625520,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630528765
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; the only thing that is different is the linear solver, and from what i can tell, it should be doing exactly the same thing</p>",
        "id": 251625582,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630528791
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; odd</p>",
        "id": 251626232,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630529068
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; indeed</p>",
        "id": 251626380,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630529148
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; can you double check with a <code>@show</code> in there that the result of the first linear solve is the same in both cases?</p>",
        "id": 251626535,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630529194
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; how do i do that for the default one?</p>",
        "id": 251627167,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630529440
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; yes, they're the same</p>",
        "id": 251634191,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630532672
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; okay, i figured it out</p>",
        "id": 251636446,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630533725
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; the first solve is fine</p>",
        "id": 251636457,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630533730
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; it's the second one</p>",
        "id": 251636462,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630533732
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; because the custom linear solver mutates <code>A</code></p>",
        "id": 251636476,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630533742
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh yeah, that's what the <code>init</code> dispatch is for</p>",
        "id": 251636480,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630533744
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; no</p>",
        "id": 251636493,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630533751
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; so that the caches don't need to collide</p>",
        "id": 251636494,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630533751
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; ok</p>",
        "id": 251636521,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630533766
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; probably a good idea to change the example on the website then</p>",
        "id": 251636536,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630533777
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes, that one is really old <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 251636585,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630533804
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I am just hoping to finish <a href=\"https://github.com/search?q=LinearSolve.jl&amp;type=Repositories\">LinearSolve.jl</a> first and do a full replacement, since having a weird baked in linear solve system to workaround the lack of some general linear solver interface is really not great.</p>",
        "id": 251636635,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630533840
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; honestly, we would really appreciate having a clear way to insert a custom solver</p>",
        "id": 251636752,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630533895
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; with a custom Jacobian</p>",
        "id": 251636786,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630533913
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; or really, a custom factorization</p>",
        "id": 251636823,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630533947
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah, that's what this is supposed to do, but I think that \"custom linear solvers / factorizations\" really need to be a full package with a full documentation and used in optimization, nonlinear solver, differential equation, etc. libraries. I think what went wrong is this whole system is a footnote to DiffEq, and so it's a really underdocumented one as well.</p>",
        "id": 251636945,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630534021
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; yeah, unfortunately path dependency is hard: we've all been there</p>",
        "id": 251637083,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630534092
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yeah</p>",
        "id": 251637117,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630534114
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the real problem is that <code>\\</code> is almost a good interface, except when it's not (no kwargs for tolerance choices for iterative solvers, very manual handling of caching, etc.)</p>",
        "id": 251637165,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630534156
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; I am having a precompilation error <code>WARNING: Method definition (::Type{Float32})(Base.Irrational{:twoπ}) in module IrrationalConstants at irrationals.jl:190 overwritten in module StatsFuns on the same line (check for duplicate calls to </code>include<code>).\n  *** incremental compilation may be fatally broken for this module ***</code> and doing <code>using DifferentialEquations</code> , what is the currently fix for this?</p>",
        "id": 251656318,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630548814
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; `/Project.toml``<br>\n  [479239e8] Catalyst v9.0.0<br>\n  [a93c6f00] DataFrames v1.2.2<br>\n  [0c46a032] DifferentialEquations v6.19.0<br>\n  [c601a237] Interact v0.10.3<br>\n  [961ee093] ModelingToolkit v6.4.8<br>\n  [91a5bcdd] Plots v1.21.3<br>\n  [92933f4c] ProgressMeter v1.7.1</p>",
        "id": 251656378,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630548851
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @devmotion what's the current word on this?</p>",
        "id": 251688739,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630574945
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I think if you force the most recent StatsFuns it goes away?</p>",
        "id": 251688746,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630574953
    },
    {
        "content": "<p>[slack] &lt;devmotion&gt; Yes, it's fixed in recent StatsFuns versions (IIRC 0.9.9 and 0.9.10 should both work).</p>",
        "id": 251691073,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630576319
    },
    {
        "content": "<p>[slack] &lt;Giulio Benedetti&gt; Hello! I am trying to add a step tolerance to my solver, but I would first like to see how it was done previously by other people. Is there any place I could look into?</p>",
        "id": 251693840,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630578025
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; See OrdinaryDiffEq?</p>",
        "id": 251695613,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630579272
    },
    {
        "content": "<p>[slack] &lt;Giulio Benedetti&gt; Thanks!</p>",
        "id": 251723053,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630592501
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what solver are you working on BTW?</p>",
        "id": 251723229,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630592558
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It might be best to just hook it into OrdinaryDiffEq's stepper and focus on the perform_step definition.</p>",
        "id": 251723260,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630592573
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @elrodc are you running v1.7beta4?</p>",
        "id": 251723334,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630592600
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>WARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).\nWARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).\n┌ Warning: Inactive precompile statement\n└   form = Tuple{typeof(getindex), StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}, Base.IdentityUnitRange{UnitRange{Int64}}}   \n┌ Warning: Inactive precompile statement\n└   form = Tuple{typeof(getindex), StepRangeLen{Int64, Int64, Int64}, Base.IdentityUnitRange{UnitRange{Int64}}}\n┌ Warning: Inactive precompile statement\n└   form = Tuple{typeof(getindex), LinRange{Float64}, Base.IdentityUnitRange{UnitRange{Int64}}}\nWARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).\nWARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).\nWARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).\nWARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).\nWARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).\nWARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).\nWARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).\nWARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).\nWARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).\nWARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).\nWARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).\nWARNING: Wrapping `Vararg` directly in UnionAll is deprecated (wrap the tuple instead).</code></p>",
        "id": 251723341,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630592605
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Last time I tracked those down to <a href=\"https://github.com/search?q=Static.jl&amp;type=Repositories\">Static.jl</a> and <a href=\"https://github.com/search?q=LoopVectorization.jl&amp;type=Repositories\">LoopVectorization.jl</a> things IIRC</p>",
        "id": 251723375,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630592619
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; I have 1.8, but it should be giving the same warnings?<br>\nI wish those gave line numbers.</p>",
        "id": 251737840,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630598017
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; ```julia&gt; using LoopVectorization<br>\n[ Info: Precompiling LoopVectorization [bdcacae8-1622-11e9-2a5c-532679323890]</p>\n<p>julia&gt; versioninfo()<br>\nJulia Version 1.8.0-DEV.438<br>\nCommit 88a6376e99* (2021-08-28 11:03 UTC)```</p>",
        "id": 251738135,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630598125
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; Thanks, just updated. It seems that it is compiling without issues.</p>",
        "id": 251739727,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630598667
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I think I need to run it with --depwarn-error</p>",
        "id": 251739936,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630598757
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; I'm installing 1.7.0-beta4 now. I'll start it with <code>--depwarn=error</code> and see if I hit anything.</p>",
        "id": 251740410,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630598915
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; ```&gt; /home/chriselrod/Documents/languages/juliarelease/usr/bin/julia -O3 -C\"native,-prefer-256-bit\" -q --startup=no --depwarn=error --project=~/Documents/progwork/julia/env/lvdev<br>\njulia&gt; @time using Static<br>\n[ Info: Precompiling Static [aedffcd0-7271-4cad-89d0-dc628f76c6d3]<br>\n  0.788203 seconds (1.33 M allocations: 72.952 MiB, 3.54% gc time, 2.01% compilation time)</p>\n<p>julia&gt; @time using ArrayInterface<br>\n[ Info: Precompiling ArrayInterface [4fba245c-0d91-5ea0-9b3e-6abc04ee57a9]<br>\n  0.750893 seconds (53.54 k allocations: 3.543 MiB, 0.56% compilation time)</p>\n<p>julia&gt; @time using LoopVectorization<br>\n[ Info: Precompiling LoopVectorization [bdcacae8-1622-11e9-2a5c-532679323890]<br>\n 27.477434 seconds (3.39 M allocations: 183.931 MiB, 0.14% gc time)</p>\n<p>julia&gt; versioninfo()<br>\nJulia Version 1.7.0-beta4<br>\nCommit d0c90f37ba* (2021-08-24 12:35 UTC)```</p>",
        "id": 251742342,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630599622
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; wild, I just ran things again and it was fine</p>",
        "id": 251743537,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630600097
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; huh...</p>",
        "id": 251743541,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630600098
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; Were you using old versions earlier?</p>",
        "id": 251743590,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630600119
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; I fixed a bunch of those when it was first deprecated, but I don't recall how long ago that was.</p>",
        "id": 251743665,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630600151
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I don't think versions changed <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 251743669,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630600152
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I'll just leave depwarn error on and see if it comes back.</p>",
        "id": 251743703,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630600165
    },
    {
        "content": "<p>[slack] &lt;Giulio Benedetti&gt; Hi, it’s an FDE solver! Sorry, I’m kind of new to the protocol. How do I get to see the code for the DiffEq solvers on GitHub?</p>",
        "id": 251755023,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630604418
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/SciML/OrdinaryDiffEq.jl/tree/master/src\">https://github.com/SciML/OrdinaryDiffEq.jl/tree/master/src</a></p>",
        "id": 251764879,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630607958
    },
    {
        "content": "<p>[slack] &lt;Arpit Babbar&gt; Hello,</p>\n<p>I wish to use a 5th order ODE solver for solving a hyperbolic conservation law while applying a <strong>limiter at every stage</strong> of the ODE solver. As I can see, <a href=\"https://diffeq.sciml.ai/stable/solvers/ode_solve/\">https://diffeq.sciml.ai/stable/solvers/ode_solve/</a> but none of them are fifth order. Is there any way I can manually add limiting at every stage? As I understand, <code>callback</code> can only work once per time step. Is that wrong? Can <code>callback</code> be used to do things in every stage.</p>\n<p><strong>EDIT - Context regarding need for 5th order methods</strong></p>\n<p>The need is purely academic, apologies if I gave the wrong idea.</p>\n<p>We are currently studying Lax-Wendroff type schemes(single stage evolution). Naturally, the primary interest is in comparing them with schemes which rely on multi-stage ODE solvers. This comparison is made up to fifth order of accuracy, which leads to interesting phenomena in itself.</p>",
        "id": 251817699,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630639540
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 251818886,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630640788
    },
    {
        "content": "<p>[slack] &lt;Utkarsh&gt; I don't think that's possible with callbacks, because they only work on the <code>integrator.u</code> , which is computed by <code>perform_step</code> (@chrisrackauckas?) I think stage limiters work inside <code>perform_step</code> as well, so yeah callbacks can't handle that.</p>\n<p>If you're interested in implementing it though, its pretty easy to follow if you have all the coefficients and stuff. See a sample implementation: <a href=\"https://github.com/SciML/OrdinaryDiffEq.jl/blob/b563fcce03ee83d354c957a8a9c4f71bb85a56c1/src/perform_step/ssprk_perform_step.jl#L1505-L1577\">https://github.com/SciML/OrdinaryDiffEq.jl/blob/b563fcce03ee83d354c957a8a9c4f71bb85a56c1/src/perform_step/ssprk_perform_step.jl#L1505-L1577</a></p>\n<p>General guide:<br>\n<a href=\"http://devdocs.sciml.ai/latest/contributing/adding_algorithms/\">http://devdocs.sciml.ai/latest/contributing/adding_algorithms/</a></p>",
        "id": 251820805,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630642871
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Why does it specifically have to be 5th order?</p>",
        "id": 251853797,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630663071
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Most limiters are used with SSP methods</p>",
        "id": 251853872,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630663090
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; But yeah, if someone wants to implement it more generally that would be nice</p>",
        "id": 251853940,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630663127
    },
    {
        "content": "<p>[slack] &lt;ranocha&gt; We also have some limiters for 2N low-storage methods. The relevant issue is <a href=\"https://github.com/SciML/OrdinaryDiffEq.jl/issues/1292\">https://github.com/SciML/OrdinaryDiffEq.jl/issues/1292</a>. If you want to add this feature to other algorithms, you could follow the PR <a href=\"https://github.com/SciML/OrdinaryDiffEq.jl/pull/1293\">https://github.com/SciML/OrdinaryDiffEq.jl/pull/1293</a> where I implemented them for 2N methods.</p>",
        "id": 251854438,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630663339
    },
    {
        "content": "<p>[slack] &lt;ranocha&gt; Nevertheless, I'm also curious why you need a fifth-order method for hyperbolic PDEs. It would be nice if you could share some context.</p>",
        "id": 251854539,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630663400
    },
    {
        "content": "<p>[slack] &lt;Arpit Babbar&gt; I'd begin by adding the feature to <code>Tsit5()</code> (the solver we use), for which I have received great direction. Once(if!) I accomplish that, I'd be very interested in attempting a general solution.</p>\n<p>I hope that the info I put in the main post has somewhat justified my interest. Thank you very much!</p>",
        "id": 251862233,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630667008
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; I see the same mistake in another example <span aria-label=\"disappointed\" class=\"emoji emoji-1f61e\" role=\"img\" title=\"disappointed\">:disappointed:</span><br>\nWhere should I open an issue? DiffEq?</p>",
        "id": 251889097,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630679278
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; DiffEq</p>",
        "id": 251895667,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630681959
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; OK</p>",
        "id": 251898568,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630683116
    },
    {
        "content": "<p>[slack] &lt;hexaeder&gt; I solve a DAE with Rodas4. If i introduce a discontinuity in a callback the solver needs to project the solution back onto the manifold defined by the algebraic constraint. Is somewhere documented how this happens? Is is possible to parametrize this process (i.e. forbid discontinuities in certain variables)</p>",
        "id": 251911391,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630688386
    },
    {
        "content": "<p>[slack] &lt;elmokadem82&gt; Does SciML have tools to solve a linear ODE system using matrix exponential method!! If so, can someone please point me to a working example?</p>",
        "id": 251951930,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630709544
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; That’s the consistent initialization algorithm</p>",
        "id": 251956163,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630712998
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; It should be in the docs</p>",
        "id": 251956222,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630713023
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; I was trying to use the <code>steady_states</code>  function from <a href=\"https://github.com/search?q=DiffEqBiological.jl&amp;type=Repositories\">DiffEqBiological.jl</a>. But a fresh install is giving me error <code>ERROR: could not load symbol “jl_threading_run”:dlsym(RTLD_DEFAULT, jl_threading_run): symbol not found Stacktrace: [1] track_paths(tracker::HomotopyContinuation.PathTracker</code>. Is such <code>steady_states</code> calculation available in <a href=\"https://github.com/search?q=Catalyst.jl&amp;type=Repositories\">Catalyst.jl</a> now? Some of my code depends on this function. How should I fix this?</p>",
        "id": 251970682,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630728588
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; @isaacsas</p>",
        "id": 251970688,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630728597
    },
    {
        "content": "<p>[slack] &lt;elmokadem82&gt; Yeah with a deeper look into docs I think I found it <a href=\"https://diffeq.sciml.ai/stable/solvers/nonautonomous_linear_ode/\">https://diffeq.sciml.ai/stable/solvers/nonautonomous_linear_ode/</a><br>\n@yingbo_ma Thanks <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 251980585,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630740237
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; You can convert Catalyst <code>ReactionSystem</code>s to ModelingToolkit <code>SteadyStateSystem</code>s or  <code>NonlinearSystem</code>s. But there is no equivalent to the old steady states command. As you reported it had some issues with specific systems, and wasn’t ever updated to Catalyst.</p>",
        "id": 252000746,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630762031
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; @torkel.loman wrote <code>steady_states</code> and the homotopy continuation code, so maybe he can help with figuring out the problem.</p>",
        "id": 252000822,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630762087
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; Which version are you on?</p>",
        "id": 252002160,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630763457
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; I think we removed the HC based steady state solving when we switched to modelling toolkit based internals. I had been hoping to fix it so that HC then could be applied on MTK stuff, but at the time all the pieces were not in place and then I got busy with other things.</p>",
        "id": 252002250,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630763540
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; Did you make an update to some package that then caused the error? Unless there's something essential that you needed the best approach might be to have an environment where everything worked, and don't change it.</p>",
        "id": 252002296,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630763601
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; @torkel.loman Yeah, I updated to the lastest version.</p>\n<p>[a93c6f00] DataFrames v1.2.2<br>\n  [eb300fae] DiffEqBiological v4.0.2<br>\n  [0c46a032] DifferentialEquations v6.8.0<br>\n  [92933f4c] ProgressMeter v1.7.1<br>\n  [37e2e46d] LinearAlgebra</p>\n<p>and I found that I can not additionally add Catalyst and precompile together, if I only want the <code>steady_states</code> function from <a href=\"https://github.com/search?q=DiffEqBiological.jl&amp;type=Repositories\">DiffEqBiological.jl</a>. How should I revert back? The updated versions has some conflicts now</p>",
        "id": 252012612,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630774296
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; @isaacsas I believe the <code>SteadyStateSystem</code>  does not provide all the steady states solutions for mass action system, like the <code>steady_states</code> function does, am I correct?</p>",
        "id": 252012698,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630774376
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; It only solves for one at a time as far as I know.</p>",
        "id": 252012734,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630774425
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; ok, I think so too. I guess I need to revert back to the old version. Do you know which set of version should I go to?</p>",
        "id": 252012800,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630774484
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; what is the current stage  of merging HC method with MTK</p>",
        "id": 252012828,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630774528
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; I thought this is an old issue already. Is it possible to have that function ready in MTK now?</p>",
        "id": 252012894,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630774587
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; I’d recommend going back to the last DEBio release. I don’t think anyone is working on this now. Maybe @torkel.loman has plans to work on this at some point, but I think he is pretty busy right now. If you want to take a pass at updating it and make a PR please fell free! It would generally make more sense though to build this for polynomial NonlinearProblems in ModelingToolkit rather than to add to Catalyst I think. </p>\n<p>I guess the main thing to do is converting the symbolic MT problem equations into the HC representation so maybe it isn’t too bad if one knows the HC library.</p>",
        "id": 252016121,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630778346
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; If your LinearOde also has a nil potent time invariant matrix I have developed a specialized package for this.</p>",
        "id": 252016659,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630778900
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; <code>  [a93c6f00] DataFrames v0.21.8\n  [eb300fae] DiffEqBiological v4.3.0\n  [0c46a032] DifferentialEquations v6.11.0\n  [91a5bcdd] Plots v1.6.8\n  [92933f4c] ProgressMeter v1.7.1</code><br>\nI currently have these package installed start from fresh.  I can run the example in this tutorial <a href=\"https://tutorials.sciml.ai/html/models/04b-diffeqbio_III_steadystates.html\">https://tutorials.sciml.ai/html/models/04b-diffeqbio_III_steadystates.html</a> successfully. However, my old code with <code>@add_constraints</code>  seems not working with <code>DiffEqBiological v4.3.0</code> . I got the error saying <code>`ERROR: ArgumentError: Underdetermined polynomial systems are currently not supported. Consider adding linear polynomials to your system in order to reduce your system to a zero dimensional system.</code>  However, my old code run correctly every time before I update. Should I go with the older version of <a href=\"https://github.com/search?q=DiffEqBiological.jl&amp;type=Repositories\">DiffEqBiological.jl</a>? which version should I use? @isaacsas @torkel.loman</p>",
        "id": 252023562,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630786636
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; <code>rn = @reaction_network begin \n  (k1,k2), X ↔ Y        \n  (k3,k4), V ↔ W              \nend k1 k2 k3 k4\nparams = [2.,1.,1.,2.]\n@add_constraints rn begin\n  X + Y = 2.\n  V + W = 4.\nend\nsteady_states(rn,params)</code><br>\nI have also tried this simple example. It seems that <code>@add_constraints</code>  is not working properly right now</p>",
        "id": 252024863,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630788021
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; I’d say use whatever version you were using before you updated when everything worked for you, and make sure the dependencies are also on the same version, especially <a href=\"https://github.com/search?q=HomotopyContinuation.jl&amp;type=Repositories\">HomotopyContinuation.jl</a></p>",
        "id": 252026065,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630789374
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; The problem is after I updated. All packages updated. I don’t remember the version I have. When I add  the <code>DiffEqBiological.jl</code> v4.3, the other packages compiled correctly. but the <code>add_constraints</code> does not work. If I revert it to v4.2. The precompilation process failed.</p>",
        "id": 252026643,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630790021
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; If you were using a Project.toml and Manifest.toml via a project environment you should be able to just instantiate them, but I guess this won’t work if you tried to run update and modified them…</p>",
        "id": 252026652,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630790032
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; I am not quite sure how to get back to my previous Project.toml.</p>",
        "id": 252026744,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630790135
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Could you have checked it into a GitHub repo or backed it up?</p>",
        "id": 252026756,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630790158
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Ideally you’d have the manifest too; otherwise you might not get the same version of some packages.</p>",
        "id": 252026809,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630790193
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; you mean the github might store my previous project.toml, right?</p>",
        "id": 252026852,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630790251
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; If you had it in a repo you synced to GitHu…</p>",
        "id": 252026864,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630790269
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; ok, let me check that</p>",
        "id": 252026920,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630790288
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Otherwise we’ll have to see if @torkel.loman has any suggestions. Unfortunately he is the only one that knows the HC-based code.</p>",
        "id": 252026927,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630790295
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; ok, I see. Let me check if I could recover it from my github. thanks</p>",
        "id": 252026961,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630790355
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; Not sure, but I _think_ that if you go back to the latest DiffEqBiological version it should work. I think we removed steady state when we updated to Catalyst and based it on MTK (think that was about the same time). In either case, you should use a version not dependant on MTK. Can't help more than that unfortunately <span aria-label=\"disappointed\" class=\"emoji emoji-1f61e\" role=\"img\" title=\"disappointed\">:disappointed:</span></p>",
        "id": 252027556,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630790951
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; Yes, <code>SteadyStateSystem</code> is only for DiuffEq base finding of steady states, it is sufficient for some purposes, but not super fancy.</p>",
        "id": 252027578,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630790991
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; The people at HC did go some way to make it work with MTK, but they also created their own version ModelKit), which might have been a bit unfortunate compared to a full integration.</p>",
        "id": 252027680,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630791081
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; Either way, I got it to work on directly on <code>NonlinearSystem</code> s (which can be created from <code>ReactionSystem</code>s).</p>",
        "id": 252027741,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630791127
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; There is some work on automatically finding the constraints (which was required to be added manually before). When that is done, I might go back at looking at fixing HC support again, but probably not before then (because it is really convenient to have this around).</p>",
        "id": 252027773,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630791182
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; At the time it would also be convenient to make a <code>PolynomialSystem</code> or something similar, because there's a large class of system that contains, and that would enable all sorts of fancy stuff which is enabled for polynomials.</p>",
        "id": 252027797,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630791229
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; Either way, don't count on anything like that in the immediate future.</p>",
        "id": 252027841,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630791246
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; I have used these toml file  and successfully run the example. But if I add <a href=\"https://github.com/search?q=DataFrames.jl&amp;type=Repositories\">DataFrames.jl</a> and other pacakages, and after recompile, everything fails again. Is there ways to correctly add <a href=\"https://github.com/search?q=DataFrames.jl&amp;type=Repositories\">DataFrames.jl</a> <a href=\"https://github.com/search?q=Plots.jl&amp;type=Repositories\">Plots.jl</a> and other packages without disturbing the env?: <a href=\"https://files.slack.com/files-pri/T68168MUP-F02DM5V2JFN/download/manifest.toml\">https://files.slack.com/files-pri/T68168MUP-F02DM5V2JFN/download/manifest.toml</a></p>",
        "id": 252028693,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630792328
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; <a href=\"https://files.slack.com/files-pri/T68168MUP-F02D07X6M0X/download/project.toml\">https://files.slack.com/files-pri/T68168MUP-F02D07X6M0X/download/project.toml</a></p>",
        "id": 252028694,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630792328
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; <code>rn = @reaction_network begin \n  (k1,k2), X ↔ Y        \n  (k3,k4), V ↔ W              \nend k1 k2 k3 k4\nparams = [2.,1.,1.,2.]\n@add_constraints rn begin\n  X + Y = 2.\n  V + W = 4.\nend\nsteady_states(rn,params)</code><br>\nI am just testing this simple example.</p>",
        "id": 252028796,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630792476
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; @torkel.loman Do you have any suggestions how should I add additional packages and keep the current env working properly?</p>",
        "id": 252028833,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630792546
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; @chen.tianc maybe try pinning all the packages in the package manger before adding Dataframes?</p>",
        "id": 252029443,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630793263
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; @torkel.loman does HC support ModelingToolkit? When I checked the repo I didn't see it as a dependency. In any case we have <code>conservationlaws</code> in Catalyst now; that is what you need for the constraints?</p>",
        "id": 252029501,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630793311
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; @isaacsas How do you pin all the packages? Have not try this before</p>",
        "id": 252029715,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630793563
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; In the package manager there is a pin command just like add or up. I’ve never used it so you may want to read the help documentation on it.</p>",
        "id": 252029771,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630793642
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; ok, I will look into this. Thanks</p>",
        "id": 252029809,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630793664
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; It seems  that Pkg.pin(“DiffEqBiological”) still updates  other dependent packages and kept the DiffEqBiological version fixed. As long as I update other pacakges, the function would not work again.</p>",
        "id": 252030505,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630794517
    },
    {
        "content": "<p>[slack] &lt;elmokadem82&gt; @pure_interpeter  the matrix is constant and I am not sure if it is nilpotent! Will be interested in exploring your package ! What is its name?</p>",
        "id": 252032057,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630796172
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; Could you then also pin those other packages (which are updated when you update)? Just roll back, pin whatever additional package you think might be causing the issue, and then run the update.</p>",
        "id": 252061445,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630831380
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; @isaacsas There's some support. E.g. this quick example:</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>import HomotopyContinuation\nconst HC = HomotopyContinuation\n\n# Define a MT nonlinear system\n\n@variables x y z\n@parameters σ ρ β\n\neqs = [0 ~ σ*(y-x),\n       0 ~ x*(ρ-z)-y,\n       0 ~ x*y - β*z]\nns = NonlinearSystem(eqs, [x,y,z], [σ,ρ,β])\n\n\n# convert variables and parametrs from nonlinear system to HC vars\n\nhc_vars = HC.Variable.(Symbol.(ns.states))\nhc_params = HC.Variable.(Symbol.(http://ns.ps))\n\n# Now we just would need to evaluate the nonlinear system at (hc_vars, hc_params)\n# However this seems to be possibel without actually compiling a function (sigh...)\n\nnlsys_func = generate_function(ns, [x,y,z], [σ,ρ,β], expression=Val{false})[1]\n\nhc_eqs = nlsys_func(hc_vars, hc_params)\nHC.System(hc_eqs; variables = hc_vars, parameters = hc_params)```\nI can probably be made more streamlined though.\n\nHad some home written functions for this kind of stuff, but haven't used in a year. They worked for me, but wasn't really happy enough with them to make something of them for the main package. You are right though, `conservationlaws` are around so pretty much everything is in place to make it work.\n</code></pre></div>",
        "id": 252061782,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630831801
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 252066835,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630837681
    },
    {
        "content": "<p>[slack] &lt;Amir Abbasi&gt; Hi All! I am trying to save derivative of a variable by defining a saving callback when I am solving a set of ODE's with different initial conditions using parallel ensemble simulations. The (not) working example that I have borrowed from <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a> is</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>using DifferentialEquations\nusing Plots\n\naddprocs()\n@everywhere using DifferentialEquations\nprob = ODEProblem((u,p,t)-&gt;1.01u,[0.0, 1.0, 2.0],(0.0,1.0))\n@everywhere function prob_func(prob,i,repeat)\n  remake(prob,u0=rand()*prob.u0)\nend\n\nsaved_values = SavedValues(Float64,Vector)\ncb = SavingCallback((u,t,integrator) -&gt;[u[1],u[2],u[3],get_du(integrator)[3]], saved_values, saveat = 0.1:0.2:1.0)\n\nensemble_prob = EnsembleProblem(prob,prob_func=prob_func)\nsim = solve(ensemble_prob,Tsit5(),EnsembleDistributed(),callback = cb,trajectories=10)\nsaved_values```\nDo you have any suggestions?\n</code></pre></div>",
        "id": 252067039,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630837910
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you cannot distribute one global</p>",
        "id": 252068937,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630839935
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it needs to be built as part of the prob_func if you're doing that</p>",
        "id": 252068947,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630839946
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; though this doesn't really seem necessary since if you're doing a dense save then you might as well just <code>sol(t,Val{1})</code> for the derivative anyways.</p>",
        "id": 252068995,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630839968
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Getting back the steady-state / stability stuff would be great at some point if it can be made to work robustly. I’m fine leaving the more complicated bifurcation analysis out for now / leaving it to BifrucationKit.</p>",
        "id": 252075466,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630847019
    },
    {
        "content": "<p>[slack] &lt;Amir Abbasi&gt; Perfect! I managed to implement it and it works fine!</p>",
        "id": 252078442,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630850353
    },
    {
        "content": "<p>[slack] &lt;mcabbott&gt; Does anyone who knows about MTK / Symbolics care to comment on these test failures? <a href=\"https://github.com/JuliaDiff/DiffRules.jl/pull/66/checks?check_run_id=3520209421#step:6:801\">https://github.com/JuliaDiff/DiffRules.jl/pull/66/checks?check_run_id=3520209421#step:6:801</a></p>",
        "id": 252116581,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630893316
    },
    {
        "content": "<p>[slack] &lt;Amir Abbasi&gt; I am running a parallel ensemble simulation of three coupled SDEs with additive noise term. I need really large number of iterations for each run of ensemble to reach to  my desired result. In my ensemble I have 100 trajectories. Is it preferred to use DiffEqGPU to gain more speed or not?</p>",
        "id": 252154798,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630923282
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Maybe. Depends on the cost of f and g</p>",
        "id": 252155477,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630923720
    },
    {
        "content": "<p>[slack] &lt;Qiyao Wei&gt; Hi all, I have a general question about visualization of ODE solvers---usually we would declare an ODE equation (e.g. wrap ODEProblem), and call solve() with a chosen solver. My question is, are there tutorial examples for visualizing the solution steps taken during the solve() function? For example, I can solve a NonLinearProblem() with NewtonRaphson()---can I visualize what's going on (steps, scheduling, etc) during the solve() process? Thanks!</p>",
        "id": 252232101,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630970582
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 252247989,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630987303
    },
    {
        "content": "<p>[slack] &lt;Kim Laberinto (he/him)&gt; Forward Euler Diagram from Youtube Video:  \"Numerical Analysis - Forward Euler Method\" by Engineering Made Easy: <a href=\"https://files.slack.com/files-pri/T68168MUP-F02DKCUFGM9/download/screenshot_20210906-230439.png\">https://files.slack.com/files-pri/T68168MUP-F02DKCUFGM9/download/screenshot_20210906-230439.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02DKCUFGM9/download/screenshot_20210906-230439.png\"><img src=\"https://uploads.zulipusercontent.net/1bee288cccbe26ddab261c33a4b506039015371c/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d463032444b435546474d392f646f776e6c6f61642f73637265656e73686f745f32303231303930362d3233303433392e706e67\"></a></div>",
        "id": 252248334,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630987625
    },
    {
        "content": "<p>[slack] &lt;Kim Laberinto (he/him)&gt; Were there any particular ODE solver algorithms that you were interested in visualizing? If so, maybe you could mention which one you are interested in and maybe someone might know how to visualize that. From my understanding DiffEq uses many different algorithms to numerically solve ODEs.</p>\n<p>On a general level, are you familiar with the Forward Euler Method, a basic method for finding numerical solutions to differential equations? I think it has a nice visualization to see what its doing at each step. Basically calculating the slope at this time using the current-time estimated value using that slope as an approximation during the entire duration to the next timesteo.</p>\n<p>Unfortunately that's the limit of my knowledge/education. I know that DiffEq implements many different much more advanced D.E. solving techniques but I have no idea how to visualize what those advanced techniques are doing. </p>\n<p>I also would be interested in learning more about how those can be visualized.</p>",
        "id": 252249006,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630988309
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 252250034,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630989313
    },
    {
        "content": "<p>[slack] &lt;Qiyao Wei&gt; Yeah I think the Euler method is a great place to start, visualizing the slopes and how much of an update step to take. I'm not sure if people have already done that visualization in Julia though, so it would be great if someone can point to resources.</p>\n<p>Going further, it would be incredibly helpful if someone could recommend visualizations of e.g. DynamicSS(Tsit5()) for solving steady state problems, or NewtonRaphson() for NonLinearProblem(). Many thanks in advance for the help!</p>",
        "id": 252250186,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1630989462
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; You can take the integrator object and plot it's values over the iterations. Or you can do a phase space plot</p>",
        "id": 252282238,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1631010264
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; Has anybody gotten his/her hands on this new book by Higham and Kloeden on SDE (“An Introduction to the Numerical Simulation of Stochastic Differential Equations”)? I am interested in teaching an advanced undergraduate course on RODE and SDE (that is the best way to learn…) and I am wondering whether this would be suitable. At the moment, I am leaning towards Neckel and Rupp’s book, which is freely available online. Another option is Han and Kloeden’s book. Any comments (or other suggestions) are appreciated.</p>",
        "id": 252286204,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1631012534
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; Here are some links:<br>\n<a href=\"https://www.maa.org/press/maa-reviews/an-introduction-to-the-numerical-simulation-of-stochastic-differential-equations\">https://www.maa.org/press/maa-reviews/an-introduction-to-the-numerical-simulation-of-stochastic-differential-equations</a><br>\n<a href=\"https://www.degruyter.com/document/doi/10.2478/9788376560267/html\">https://www.degruyter.com/document/doi/10.2478/9788376560267/html</a><br>\n<a href=\"https://www.springer.com/gp/book/9789811062643\">https://www.springer.com/gp/book/9789811062643</a></p>",
        "id": 252286320,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1631012618
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; I couldn’t even find the table of contents of teh Higham-Kloeden</p>",
        "id": 252286416,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1631012648
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; Problem identified: <a href=\"https://github.com/SciML/DiffEqOperators.jl/issues/472\">https://github.com/SciML/DiffEqOperators.jl/issues/472</a></p>",
        "id": 252297841,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1631018206
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Not yet. I was offered the opportunity to add Julia code to the book, but that would take too much time haha</p>",
        "id": 252307480,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1631022478
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; Thanks. I plan to have the students implement the codes in Julia and make a repo out of it. It could be a start. But I need to figure out whether this book would be suitable for them or too advanced.</p>",
        "id": 252309153,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1631023088
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; By the way, any missing algorithm for SDE or RODE in SciML that would be worth adding? I could make it into a project for the course.</p>",
        "id": 252309465,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1631023203
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; probably none in that book are missing</p>",
        "id": 252314688,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1631025141
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; Ok, that is good, actually. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 252316192,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1631025712
    },
    {
        "content": "<p>[slack] &lt;contradict&gt; This tutorial has a nice example of manually stepping an integrator: <a href=\"https://www.youtube.com/watch?v=L-gyDvhjzGQ\">https://www.youtube.com/watch?v=L-gyDvhjzGQ</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"L-gyDvhjzGQ\" href=\"https://www.youtube.com/watch?v=L-gyDvhjzGQ\"><img src=\"https://uploads.zulipusercontent.net/7dec029a9634d72f54dcc64edecbce155e664c76/68747470733a2f2f692e7974696d672e636f6d2f76692f4c2d67794476686a7a47512f64656661756c742e6a7067\"></a></div>",
        "id": 252393591,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1631064208
    },
    {
        "content": "<p>[slack] &lt;verma.shwetank22&gt; Julia crashes when doing parameter estimation using diffeqflix. Full details on julia discourse <br>\n<a href=\"https://discourse.julialang.org/t/julia-crashes-when-doing-parameter-estimation-for-a-differential-equation-in-vscode/67859?u=shwetank_verma\">https://discourse.julialang.org/t/julia-crashes-when-doing-parameter-estimation-for-a-differential-equation-in-vscode/67859?u=shwetank_verma</a></p>",
        "id": 252430161,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1631093019
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; The exit code indicates memory corruption. Are you using any unsafe pointers or arrays? Also, you should try to add some more details to that post, like the output of <code>versioninfo()</code> and whether or not there were any stacktraces or log files dumped before the process terminated.</p>",
        "id": 252431375,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1631093677
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; You should also check to make sure all of your array sizing and indexing is correct. I think out-of-bounds array access with <code>@inbounds</code> can produce crashes like this.</p>",
        "id": 252431498,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1631093750
    },
    {
        "content": "<p>[slack] &lt;verma.shwetank22&gt; Added the version info in the post. I am not using @inbounds in the problem</p>",
        "id": 252434484,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1631095367
    },
    {
        "content": "<p>[slack] &lt;Qiyao Wei&gt; Hi all, I am trying to follow this tutorial to plot an integrator object (<a href=\"https://diffeq.sciml.ai/stable/basics/integrator/\">https://diffeq.sciml.ai/stable/basics/integrator/</a>), but received the following error. For completeness, I also post the segment of code where I use the plot function. Any help is appreciated. Thanks a lot!</p>\n<div class=\"codehilite\" data-code-language=\"error\"><pre><span></span><code>Closest candidates are:\n  interpret_vars(::Any, ::Any, ::Any) at /Users/qiyaowei/.julia/packages/SciMLBase/UIp7W/src/solutions/solution_interface.jl:387\nStacktrace:\n  [1] macro expansion\n    @ ~/.julia/packages/SciMLBase/UIp7W/src/integrator_interface.jl:487 [inlined]\n  [2] apply_recipe(plotattributes::AbstractDict{Symbol, Any}, integrator::SciMLBase.DEIntegrator)\n    @ SciMLBase ~/.julia/packages/RecipesBase/3fzVq/src/RecipesBase.jl:283\n  [3] _process_userrecipes!(plt::Any, plotattributes::Any, args::Any)\n    @ RecipesPipeline ~/.julia/packages/RecipesPipeline/i2bA0/src/user_recipe.jl:36\n  [4] recipe_pipeline!(plt::Any, plotattributes::Any, args::Any)\n    @ RecipesPipeline ~/.julia/packages/RecipesPipeline/i2bA0/src/RecipesPipeline.jl:70\n  [5] _plot!(plt::Plots.Plot, plotattributes::Any, args::Any)\n    @ Plots ~/.julia/packages/Plots/4UbNP/src/plot.jl:208\n  [6] plot(args::Any; kw::Any)\n    @ Plots ~/.julia/packages/Plots/4UbNP/src/plot.jl:91\n  [7] plot(args::Any)\n    @ Plots ~/.julia/packages/Plots/4UbNP/src/plot.jl:85\n  [8] solve_ss(x::Vector{Int64})\n    @ Main ~/julia/simpleDEQ.jl:40\n  [9] (::var\"#32#33\")()\n    @ Main ~/julia/simpleDEQ.jl:85\n [10] top-level scope\n    @ ~/julia/simpleDEQ.jl:93\n [11] include(fname::String)\n    @ Base.MainInclude ./client.jl:444\n [12] top-level scope\n    @ none:1```\n```function solve_ss(x)\n    z = re(p)(x)\n    function dudt_(u, _p, t)\n        # Solving the equation f(u) - u = du = 0\n        re(_p)(u+x) - u\n    end\n    ss = ODEProblem(dudt_, z, tspan, p)\n    xx = solve(ss, Tsit5(), u0=z, abstol=Float32(1e-5), reltol=Float32(1e-5), tspan=1.0f0).u\n    integrator = init(ss,Tsit5();dt=1//2^(4),tstops=[0.5])\n    pyplot(show=true)\n    plot(integrator)\n    for i in integrator\n      display(plot!(integrator,vars=(0,1),legend=false))\n    end\n    step!(integrator); plot!(integrator,vars=(0,1),legend=false)\n    savefig(\"iteratorplot.png\")\nend```\n</code></pre></div>",
        "id": 252451509,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1631104470
    },
    {
        "content": "<p>[slack] &lt;verma.shwetank22&gt; I keep getting this warning everytime I use diffeqflux. Any fixes?: <a href=\"https://files.slack.com/files-pri/T68168MUP-F02DV1ZCKMZ/download/capture3.png\">https://files.slack.com/files-pri/T68168MUP-F02DV1ZCKMZ/download/capture3.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02DV1ZCKMZ/download/capture3.png\"><img src=\"https://uploads.zulipusercontent.net/b0c18cbf5dcdaf28cb7756b53cc2448de1d18de2/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d4630324456315a434b4d5a2f646f776e6c6f61642f63617074757265332e706e67\"></a></div>",
        "id": 252569111,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1631161371
    },
    {
        "content": "<p>[slack] &lt;verma.shwetank22&gt; I keep getting this warning. Any fixes?: <a href=\"https://files.slack.com/files-pri/T68168MUP-F02E7LDLU65/download/image_from_ios.jpg\">https://files.slack.com/files-pri/T68168MUP-F02E7LDLU65/download/image_from_ios.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02E7LDLU65/download/image_from_ios.jpg\"><img src=\"https://uploads.zulipusercontent.net/1adac1b7ce3580aa8751fb47e35a294e564ab49c/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303245374c444c5536352f646f776e6c6f61642f696d6167655f66726f6d5f696f732e6a7067\"></a></div>",
        "id": 252569202,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1631161447
    },
    {
        "content": "<p>[slack] &lt;verma.shwetank22&gt; Any fixes for this?<br>\nusing DiffEqFlux<br>\nWARNING: could not import DistributionsAD._mv_categorical_logpdf into ReverseDiffX</p>",
        "id": 252569338,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1631161603
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @devmotion do you know about this one?</p>",
        "id": 252604520,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1631184121
    },
    {
        "content": "<p>[slack] &lt;devmotion&gt; It was fixed a while ago and should not happen with more recent versions of DistributionsAD. In any case, the warning can be ignored, it's just caused by an import statement that was accidentally not removed.</p>",
        "id": 252606417,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1631185267
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I'll need to take a deeper look at integrator + SteadyStateProblem. I assumed it would work by composition, but it might need something.</p>",
        "id": 252636348,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1631198110
    },
    {
        "content": "<p>[slack] &lt;Qiyao Wei&gt; Hey Chris! I’m actually not sure if this is a steady state issue though... in the code I changed the original SteadyStateProblem wrapper to ODEProblem, which is why I assumed it would work xD</p>",
        "id": 252799430,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1631285746
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I won't be able to look at it for a bit.</p>",
        "id": 252799580,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1631285793
    },
    {
        "content": "<p>[slack] &lt;tshort&gt; The upcoming Modelica Conference has a lot of Julia content. See the Monday, September 20th schedule at <a href=\"https://2021.international.conference.modelica.org/Documents/Modelica2021_program.pdf\">https://2021.international.conference.modelica.org/Documents/Modelica2021_program.pdf</a>. Does anyone know what timezone is used there?</p>",
        "id": 252807881,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1631289195
    },
    {
        "content": "<p>[slack] &lt;gideon.simpson&gt; so i updated on 1.6.2, and now the following is happening:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"p\">[</span> <span class=\"n\">Info</span><span class=\"o\">:</span> <span class=\"n\">Precompiling</span> <span class=\"n\">DifferentialEquations</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"n\">c46a032</span><span class=\"o\">-</span><span class=\"n\">eb83</span><span class=\"o\">-</span><span class=\"mi\">5123</span><span class=\"o\">-</span><span class=\"n\">abaf</span><span class=\"o\">-</span><span class=\"mi\">570</span><span class=\"n\">d42b7fbaa</span><span class=\"p\">]</span>\n\n<span class=\"n\">signal</span> <span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"n\">Segmentation</span> <span class=\"n\">fault</span><span class=\"o\">:</span> <span class=\"mi\">11</span>\n<span class=\"k\">in</span> <span class=\"n\">expression</span> <span class=\"n\">starting</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">gideonsimpson</span><span class=\"o\">/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">DiffEqBase</span><span class=\"o\">/</span><span class=\"n\">OPDgm</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">DiffEqBase</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">15</span>\n<span class=\"n\">jl_deserialize_value</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">Applications</span><span class=\"o\">/</span><span class=\"n\">Julia</span><span class=\"o\">-</span><span class=\"mf\">1.6</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">/</span><span class=\"n\">Contents</span><span class=\"o\">/</span><span class=\"n\">Resources</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">libjulia</span><span class=\"o\">-</span><span class=\"n\">internal</span><span class=\"mf\">.1.6</span><span class=\"o\">.</span><span class=\"n\">dylib</span> <span class=\"p\">(</span><span class=\"n\">unknown</span> <span class=\"n\">line</span><span class=\"p\">)</span>\n<span class=\"n\">jl_deserialize_value</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">Applications</span><span class=\"o\">/</span><span class=\"n\">Julia</span><span class=\"o\">-</span><span class=\"mf\">1.6</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">/</span><span class=\"n\">Contents</span><span class=\"o\">/</span><span class=\"n\">Resources</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">libjulia</span><span class=\"o\">-</span><span class=\"n\">internal</span><span class=\"mf\">.1.6</span><span class=\"o\">.</span><span class=\"n\">dylib</span> <span class=\"p\">(</span><span class=\"n\">unknown</span> <span class=\"n\">line</span><span class=\"p\">)</span>\n<span class=\"n\">jl_deserialize_value</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">Applications</span><span class=\"o\">/</span><span class=\"n\">Julia</span><span class=\"o\">-</span><span class=\"mf\">1.6</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">/</span><span class=\"n\">Contents</span><span class=\"o\">/</span><span class=\"n\">Resources</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">libjulia</span><span class=\"o\">-</span><span class=\"n\">internal</span><span class=\"mf\">.1.6</span><span class=\"o\">.</span><span class=\"n\">dylib</span> <span class=\"p\">(</span><span class=\"n\">unknown</span> <span class=\"n\">line</span><span class=\"p\">)</span>\n<span class=\"n\">jl_deserialize_value</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">Applications</span><span class=\"o\">/</span><span class=\"n\">Julia</span><span class=\"o\">-</span><span class=\"mf\">1.6</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">/</span><span class=\"n\">Contents</span><span class=\"o\">/</span><span class=\"n\">Resources</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">libjulia</span><span class=\"o\">-</span><span class=\"n\">internal</span><span class=\"mf\">.1.6</span><span class=\"o\">.</span><span class=\"n\">dylib</span> <span class=\"p\">(</span><span class=\"n\">unknown</span> <span class=\"n\">line</span><span class=\"p\">)</span>\n<span class=\"n\">jl_deserialize_value</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">Applications</span><span class=\"o\">/</span><span class=\"n\">Julia</span><span class=\"o\">-</span><span class=\"mf\">1.6</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">/</span><span class=\"n\">Contents</span><span class=\"o\">/</span><span class=\"n\">Resources</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">libjulia</span><span class=\"o\">-</span><span class=\"n\">internal</span><span class=\"mf\">.1.6</span><span class=\"o\">.</span><span class=\"n\">dylib</span> <span class=\"p\">(</span><span class=\"n\">unknown</span> <span class=\"n\">line</span><span class=\"p\">)</span>\n<span class=\"n\">jl_deserialize_value</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">Applications</span><span class=\"o\">/</span><span class=\"n\">Julia</span><span class=\"o\">-</span><span class=\"mf\">1.6</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">/</span><span class=\"n\">Contents</span><span class=\"o\">/</span><span class=\"n\">Resources</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">libjulia</span><span class=\"o\">-</span><span class=\"n\">internal</span><span class=\"mf\">.1.6</span><span class=\"o\">.</span><span class=\"n\">dylib</span> <span class=\"p\">(</span><span class=\"n\">unknown</span> <span class=\"n\">line</span><span class=\"p\">)</span>\n<span class=\"n\">jl_deserialize_value</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">Applications</span><span class=\"o\">/</span><span class=\"n\">Julia</span><span class=\"o\">-</span><span class=\"mf\">1.6</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">/</span><span class=\"n\">Contents</span><span class=\"o\">/</span><span class=\"n\">Resources</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">libjulia</span><span class=\"o\">-</span><span class=\"n\">internal</span><span class=\"mf\">.1.6</span><span class=\"o\">.</span><span class=\"n\">dylib</span> <span class=\"p\">(</span><span class=\"n\">unknown</span> <span class=\"n\">line</span><span class=\"p\">)</span>\n<span class=\"n\">jl_deserialize_value</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">Applications</span><span class=\"o\">/</span><span class=\"n\">Julia</span><span class=\"o\">-</span><span class=\"mf\">1.6</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">/</span><span class=\"n\">Contents</span><span class=\"o\">/</span><span class=\"n\">Resources</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">libjulia</span><span class=\"o\">-</span><span class=\"n\">internal</span><span class=\"mf\">.1.6</span><span class=\"o\">.</span><span class=\"n\">dylib</span> <span class=\"p\">(</span><span class=\"n\">unknown</span> <span class=\"n\">line</span><span class=\"p\">)</span>\n<span class=\"n\">jl_deserialize_value</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">Applications</span><span class=\"o\">/</span><span class=\"n\">Julia</span><span class=\"o\">-</span><span class=\"mf\">1.6</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">/</span><span class=\"n\">Contents</span><span class=\"o\">/</span><span class=\"n\">Resources</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">libjulia</span><span class=\"o\">-</span><span class=\"n\">internal</span><span class=\"mf\">.1.6</span><span class=\"o\">.</span><span class=\"n\">dylib</span> <span class=\"p\">(</span><span class=\"n\">unknown</span> <span class=\"n\">line</span><span class=\"p\">)</span>\n<span class=\"n\">jl_deserialize_value</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">Applications</span><span class=\"o\">/</span><span class=\"n\">Julia</span><span class=\"o\">-</span><span class=\"mf\">1.6</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">/</span><span class=\"n\">Contents</span><span class=\"o\">/</span><span class=\"n\">Resources</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">libjulia</span><span class=\"o\">-</span><span class=\"n\">internal</span><span class=\"mf\">.1.6</span><span class=\"o\">.</span><span class=\"n\">dylib</span> <span class=\"p\">(</span><span class=\"n\">unknown</span> <span class=\"n\">line</span><span class=\"p\">)</span>\n<span class=\"n\">jl_deserialize_value</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">Applications</span><span class=\"o\">/</span><span class=\"n\">Julia</span><span class=\"o\">-</span><span class=\"mf\">1.6</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">/</span><span class=\"n\">Contents</span><span class=\"o\">/</span><span class=\"n\">Resources</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">libjulia</span><span class=\"o\">-</span><span class=\"n\">internal</span><span class=\"mf\">.1.6</span><span class=\"o\">.</span><span class=\"n\">dylib</span> <span class=\"p\">(</span><span class=\"n\">unknown</span> <span class=\"n\">line</span><span class=\"p\">)</span>\n<span class=\"n\">jl_deserialize_value</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">Applications</span><span class=\"o\">/</span><span class=\"n\">Julia</span><span class=\"o\">-</span><span class=\"mf\">1.6</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">/</span><span class=\"n\">Contents</span><span class=\"o\">/</span><span class=\"n\">Resources</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">libjulia</span><span class=\"o\">-</span><span class=\"n\">internal</span><span class=\"mf\">.1.6</span><span class=\"o\">.</span><span class=\"n\">dylib</span> <span class=\"p\">(</span><span class=\"n\">unknown</span> <span class=\"n\">line</span><span class=\"p\">)</span>\n<span class=\"n\">jl_deserialize_value_array</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">Applications</span><span class=\"o\">/</span><span class=\"n\">Julia</span><span class=\"o\">-</span><span class=\"mf\">1.6</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">/</span><span class=\"n\">Contents</span><span class=\"o\">/</span><span class=\"n\">Resources</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">libjulia</span><span class=\"o\">-</span><span class=\"n\">internal</span><span class=\"mf\">.1.6</span><span class=\"o\">.</span><span class=\"n\">dylib</span> <span class=\"p\">(</span><span class=\"n\">unknown</span> <span class=\"n\">line</span><span class=\"p\">)</span><span class=\"sb\">```</span>\n<span class=\"sb\">there's a lot more</span>\n</code></pre></div>",
        "id": 252833614,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1631300402
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; is this the generic binary?</p>",
        "id": 252874008,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1631325860
    },
    {
        "content": "<p>[slack] &lt;verma.shwetank22&gt; An update to this issue that I posted here earlier:<br>\n<a href=\"https://github.com/SciML/DiffEqFlux.jl/issues/619\">https://github.com/SciML/DiffEqFlux.jl/issues/619</a><br>\nI ran this in Atom/Juno and now I am getting this error:</p>\n<div class=\"codehilite\" data-code-language=\"please\"><pre><span></span><code>Exception: EXCEPTION_ACCESS_VIOLATION at 0x7ff919a74408 -- RtlSetUserValueHeap at C:\\Windows\\SYSTEM32\\ntdll.dll (unknown line)\nin expression starting at C:\\Users\\verma\\OneDrive\\Desktop\\Modelling\\SPM.jl:140\nRtlSetUserValueHeap at C:\\Windows\\SYSTEM32\\ntdll.dll (unknown line)\nRtlAllocateHeap at C:\\Windows\\SYSTEM32\\ntdll.dll (unknown line)\nRtlAllocateHeap at C:\\Windows\\SYSTEM32\\ntdll.dll (unknown line)\nmalloc at C:\\Windows\\System32\\msvcrt.dll (unknown line)\n\nPlease submit a bug report with steps to reproduce this fault, and any error messages that follow (in their entirety). Thanks.\nException: EXCEPTION_ACCESS_VIOLATION at 0x7ff919a9e3cb --```\nI ran sfc /scannow and it said windows has fixed some files. I ran Atom again and this time it just closed without putting any message\n</code></pre></div>",
        "id": 252900293,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1631356707
    },
    {
        "content": "<p>[slack] &lt;Emir Hadzic&gt; Quick questions I got the diffeq function f(du,u,p,t) and u is a matrix that I want to allocate into a variables so<br>\n<code>fMB = u[1,:]</code> . Is this the best way to do it or is there a better way?</p>",
        "id": 253144552,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1631560825
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>fMB = @view u[1,:]</code></p>",
        "id": 253145684,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1631561178
    },
    {
        "content": "<p>[slack] &lt;Emir Hadzic&gt; thank you</p>",
        "id": 253147290,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1631561883
    },
    {
        "content": "<p>[slack] &lt;gregorykimmel&gt; When using method of lines to solve a PDE, does the solver know about the time-step restriction (e.g the classical C ≥ dt/dx^2 ) where we have discretized space so dx and C are known.</p>",
        "id": 254128408,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632177017
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; other way around. The time stepping adaptivity would take care of CFL</p>",
        "id": 254128747,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632177242
    },
    {
        "content": "<p>[slack] &lt;gregorykimmel&gt; Ok that is what I was wondering, thanks.</p>",
        "id": 254143528,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632188080
    },
    {
        "content": "<p>[slack] &lt;Qiyao Wei&gt; Hey Chris! I have been looking into this problem, and the stack trace seems to point to solution_interface.jl at (<a href=\"https://github.com/SciML/SciMLBase.jl/blob/master/src/solutions/solution_interface.jl\">https://github.com/SciML/SciMLBase.jl/blob/master/src/solutions/solution_interface.jl</a>). Specifically, line 387 seems to be where the error is. However, line 173 and 174 should have interpret_vars running successfully, so I don't understand why line 387 would err. Am I missing something in the code? Thanks a lot!</p>",
        "id": 254147838,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632191936
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; are you on the latest version?</p>",
        "id": 254148103,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632192188
    },
    {
        "content": "<p>[slack] &lt;Qiyao Wei&gt; I believe so yeah (I have updated all packages). Specifically, I also checked that I am on the latest of SciMLBase, which is 1.18.7</p>",
        "id": 254163321,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632207498
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; I am trying the UDE github example and swapping the scenario_1.jl with a higher dimensional model (11 vars). I am getting the following error when I start training. What does this error mean?: <a href=\"https://files.slack.com/files-pri/T68168MUP-F02F2JCBTGD/download/error.txt\">https://files.slack.com/files-pri/T68168MUP-F02F2JCBTGD/download/error.txt</a></p>",
        "id": 254233415,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632240492
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; also, can UDE recover a dynamical system with bistability?</p>",
        "id": 254233654,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632240588
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you can't have 5 arguments to the dynamical system</p>",
        "id": 254241863,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632243647
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; your training would at least need data from two initial conditions</p>",
        "id": 254241894,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632243663
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; what do you mean by this?  Do you mean _<code># Closure with the known parameter</code>_<br>\n<code>nn_dynamics!(du,u,p,t) = ude_dynamics!(du,u,p,t,p_)</code> this step?</p>",
        "id": 254244269,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632244546
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; here is my code, I am not sure what you mean by I can not have 5 arguments to the dynamical system: <a href=\"https://files.slack.com/files-pri/T68168MUP-F02F5VABW2F/download/test.ipynb\">https://files.slack.com/files-pri/T68168MUP-F02F5VABW2F/download/test.ipynb</a></p>",
        "id": 254244774,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632244752
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; ok, I see, you have defined the ude_dynamics! with 5 arguments, with additioanal p_true. I will modify it and try it again.</p>",
        "id": 254247361,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632245839
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; Now I am getting this error. I redefined my ude with 5 arguments with last p to be p_true @chrisrackauckas</p>\n<div class=\"codehilite\" data-code-language=\"loaderror\"><pre><span></span><code>[0mClosest candidates are:\n[0m  getindex(::Number) at number.jl:93\n[0m  getindex(::Number, [91m::Integer[39m) at number.jl:94\n[0m  getindex(::Number, [91m::Integer...[39m) at number.jl:99\n[0m  ...\nMethodError: no method matching getindex(::Float32, ::UnitRange{Int64})\nClosest candidates are:\n  getindex(::Number) at number.jl:93\n  getindex(::Number, ::Integer) at number.jl:94\n  getindex(::Number, ::Integer...) at number.jl:99```\n</code></pre></div>",
        "id": 254249328,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632246719
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you're indexing a scalar</p>",
        "id": 254251607,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632247538
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; I fixed the indexing error. But for the training process  it seems give me incompatible \\hat X with X_true dimension starting from the 3rd iteration . What might be the issue ? &lt;@U69BL50BF&gt;: <a href=\"https://files.slack.com/files-pri/T68168MUP-F02ERT96CNT/download/screen_shot_2021-09-21_at_3.44.00_pm.png\">https://files.slack.com/files-pri/T68168MUP-F02ERT96CNT/download/screen_shot_2021-09-21_at_3.44.00_pm.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02ERT96CNT/download/screen_shot_2021-09-21_at_3.44.00_pm.png\"><img src=\"https://uploads.zulipusercontent.net/e9f2b2e5a44b313334cb86ac8834c297690907a8/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d4630324552543936434e542f646f776e6c6f61642f73637265656e5f73686f745f323032312d30392d32315f61745f332e34342e30305f706d2e706e67\"></a></div>",
        "id": 254266872,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632253616
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; stiff or bad parameters</p>",
        "id": 254268892,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632254444
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 254269778,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632254810
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; do you have any suggestion what to try for the next step?</p>",
        "id": 254269813,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632254832
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; the dynamics does not seems too steep: <a href=\"https://files.slack.com/files-pri/T68168MUP-F02F6N30V6F/download/screen_shot_2021-09-21_at_4.08.18_pm.png\">https://files.slack.com/files-pri/T68168MUP-F02F6N30V6F/download/screen_shot_2021-09-21_at_4.08.18_pm.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02F6N30V6F/download/screen_shot_2021-09-21_at_4.08.18_pm.png\"><img src=\"https://uploads.zulipusercontent.net/82dead21e11a45c4d3c254b58533788251c4a329/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303246364e33305636462f646f776e6c6f61642f73637265656e5f73686f745f323032312d30392d32315f61745f342e30382e31385f706d2e706e67\"></a></div>",
        "id": 254270008,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632254918
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; I am trying the UDE github example and swapping the scenario_1.jl with a higher dimensional model (11 vars). I am getting the following error when I start training. What does this error mean?</p>",
        "id": 254270713,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632255214
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; for some parameters, the dynamics seems a little steep. is there anything I can do to tune things for a successful training?: <a href=\"https://files.slack.com/files-pri/T68168MUP-F02F6PHSY7M/download/screen_shot_2021-09-21_at_4.21.10_pm.png\">https://files.slack.com/files-pri/T68168MUP-F02F6PHSY7M/download/screen_shot_2021-09-21_at_4.21.10_pm.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02F6PHSY7M/download/screen_shot_2021-09-21_at_4.21.10_pm.png\"><img src=\"https://uploads.zulipusercontent.net/327f27d8ef77e390151b8ae52314f73fc27db4a3/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d463032463650485359374d2f646f776e6c6f61642f73637265656e5f73686f745f323032312d30392d32315f61745f342e32312e31305f706d2e706e67\"></a></div>",
        "id": 254272054,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632255805
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; @chrisrackauckas</p>",
        "id": 254272111,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632255842
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what solver?</p>",
        "id": 254272466,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632255965
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it can be stiff without being steep</p>",
        "id": 254272499,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632255985
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; res1 = DiffEqFlux.sciml_train(loss, p, ADAM(0.1f0), cb=callback, maxiters = 200)<br>\nprintln(“Training loss after $(length(losses)) iterations: $(losses[end])“)</p>",
        "id": 254272518,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632255993
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; I just use adam</p>",
        "id": 254272527,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632255998
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; here is my code: <a href=\"https://files.slack.com/files-pri/T68168MUP-F02FD19P13N/download/test_v2.ipynb\">https://files.slack.com/files-pri/T68168MUP-F02FD19P13N/download/test_v2.ipynb</a></p>",
        "id": 254272723,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632256083
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; no, ODE solver</p>",
        "id": 254273877,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632256592
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; solution = solve(prob,Tsit5(),abstol=1e-12, reltol=1e-12, saveat = 0.1)</p>\n<p>function predict(θ, X = Xₙ[:,1], T = t)<br>\n    Array(solve(prob_nn, Tsit5(), u0 = X, p=θ,<br>\n                tspan = (T[1], T[end]), saveat = T,<br>\n                abstol=1e-6, reltol=1e-6,<br>\n                sensealg = ForwardDiffSensitivity()<br>\n                ))<br>\n_end_</p>",
        "id": 254274061,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632256675
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; both x hat and x_true are using Tsits5</p>",
        "id": 254274151,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632256696
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; I am changing it to Rosenbrock23 for the prediction and test it again.</p>",
        "id": 254274288,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632256768
    },
    {
        "content": "<p>[slack] &lt;chen.tianc&gt; it has been keep running for now with Rosenbrock23, but extremely slow: <a href=\"https://files.slack.com/files-pri/T68168MUP-F02FD47TDFW/download/screen_shot_2021-09-21_at_4.53.36_pm.png\">https://files.slack.com/files-pri/T68168MUP-F02FD47TDFW/download/screen_shot_2021-09-21_at_4.53.36_pm.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02FD47TDFW/download/screen_shot_2021-09-21_at_4.53.36_pm.png\"><img src=\"https://uploads.zulipusercontent.net/65186c3ed2a82afcdde1f35c486507c64d0df8ee/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303246443437544446572f646f776e6c6f61642f73637265656e5f73686f745f323032312d30392d32315f61745f342e35332e33365f706d2e706e67\"></a></div>",
        "id": 254276454,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632257674
    },
    {
        "content": "<p>[slack] &lt;ahojukka5&gt; What is the recommended method to implement my own results writer? I'm having a huge ODE and I don't want to save any results to memory but instead or that at every saveat step write them to disk in vtk format.</p>",
        "id": 254341011,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632303815
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; You could disable the built-in saving with <code>save_everystep=false</code> and <code>saveat=[]</code> , then use <code>FunctionCallingCallback</code> , I think?</p>",
        "id": 254341161,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632303910
    },
    {
        "content": "<p>[slack] &lt;ahojukka5&gt; Hmm. Almost working. That FunctionCallingCallback is called at every timestep, so do I have to implement my own save_at?</p>",
        "id": 254342355,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632304530
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Hmm, no? I think <code>FunctionCallingCallback</code> has an option <code>funcat</code> which lets you specify the times.</p>",
        "id": 254342825,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632304792
    },
    {
        "content": "<p>[slack] &lt;ahojukka5&gt; Oh, yeah, I see.</p>",
        "id": 254342882,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632304804
    },
    {
        "content": "<p>[slack] &lt;ahojukka5&gt; Yeah, this looks to fit my needs well</p>",
        "id": 254342926,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632304815
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; Should <code>remake</code>  be supporting input maps for usage with MTK? MWE in thread.</p>",
        "id": 254369603,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632318440
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 254369638,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632318454
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; ```using ModelingToolkit, OrdinaryDiffEq, LazyGrids<br>\n@parameters t<br>\n@variables x(t) y(t)<br>\nD = Differential(t)</p>\n<p>eqs = [D(x) ~ y,<br>\n       D(y) ~ x - x^3]</p>\n<p>@named sys = ODESystem(eqs)<br>\nprob = ODEProblem(sys, [x =&gt; 3.0, y =&gt; 3.0], (0.0, 1.0), [], jac = true)<br>\nsol = solve(prob, Tsit5())</p>\n<p>sol</p>\n<p>function prob_func(prob,i,repeat)<br>\n    remake(prob, u0 = [x =&gt; rand(), y =&gt; rand()])<br>\nend<br>\nensemble_prob = EnsembleProblem(prob,prob_func=prob_func)<br>\nsim2 = solve(ensemble_prob,Tsit5(), trajectories=10)</p>\n<p>function prob_func2(prob,i,repeat) #OK<br>\n    u0 = ModelingToolkit.varmap_to_vars([x =&gt; rand(), y =&gt; rand()],states(sys))<br>\n    remake(prob, u0 = u0)<br>\nend<br>\nensemble_prob2 = EnsembleProblem(prob,prob_func=prob_func2)<br>\nsim2 = solve(ensemble_prob2,Tsit5(), trajectories=10)```</p>",
        "id": 254369704,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632318477
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; stacktrace: <a href=\"https://gist.github.com/agerlach/5bfd92a72b0888c11ca2a1a2cf1ba8e7\">https://gist.github.com/agerlach/5bfd92a72b0888c11ca2a1a2cf1ba8e7</a></p>",
        "id": 254370461,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632318729
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; not yet. You need to <code>varmap_to_vars</code> directly. <a href=\"https://mtk.sciml.ai/dev/basics/FAQ/#Transforming-value-maps-to-arrays\">https://mtk.sciml.ai/dev/basics/FAQ/#Transforming-value-maps-to-arrays</a></p>",
        "id": 254371037,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632318939
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; OK, that is what I was doing, just wanted to make sure it wasn't a bug/oversight</p>",
        "id": 254371160,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632318973
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; One odd burden w/ needing to do this or w/ using input maps is that the variables/parameters/sys need to be passed to each function for type stability.</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    u0 = ModelingToolkit.varmap_to_vars([x =&gt; rand(), y =&gt; rand()],states(sys))\n    remake(prob, u0 = u0)\nend```\n</code></pre></div>",
        "id": 254371546,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632319095
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; is there a way to get <code>sys</code>  directly from <code>prob</code>?</p>",
        "id": 254372556,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632319390
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; no, and that's the reason it's not implemented. We need some way to store this information and recover it.</p>",
        "id": 254372830,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632319487
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; got it. Thanks</p>",
        "id": 254372927,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632319521
    },
    {
        "content": "<p>[gitter] &lt;dapias&gt; Hello! I am trying for the first time to integrate an integrodifferential PDE using NeuralPDEs. For this, there is an analytical solution in the Laplace Domain with which I can compare. This is the equation on hand:</p>",
        "id": 254423557,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632338643
    },
    {
        "content": "<p>[gitter] &lt;dapias&gt; <a href=\"https://stackoverflow.com/questions/69290327/integrodifferential-pde-with-neuralpdes-julia\">https://stackoverflow.com/questions/69290327/integrodifferential-pde-with-neuralpdes-julia</a></p>",
        "id": 254426124,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632339589
    },
    {
        "content": "<p>[gitter] &lt;dapias&gt; I appreciate any help ;)</p>",
        "id": 254426239,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632339629
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; are you on the latest version? Julia v1.6?</p>",
        "id": 254427630,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632340188
    },
    {
        "content": "<p>[slack] &lt;wilwxk&gt; about this: <a href=\"https://twitter.com/ChrisRackauckas/status/1440639995857944581\">https://twitter.com/ChrisRackauckas/status/1440639995857944581</a><br>\nwoudnt fair to compile the whole C lib with a higher optimization level or even LTO ? or it isnt really equivalent to julia JIT ?</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/ChrisRackauckas/status/1440639995857944581\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/1c02d8f86be4f89ad40d559578f888d7677f1668/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f333137353439343330302f65363531373438303437313033376230383463383835633562616134623465335f6e6f726d616c2e6a706567\"></a><p>And for anyone curious how Julia is outperforming C and Fortran there, a small part is algorithmic, but a large part is because if you ever used a compiled ODE solver .so, the ODE solver has to call the function `f`. Julia JIT compiles and can inline the ODE code into the solver.</p><span>- Chris Rackauckas (@ChrisRackauckas)</span></div></div>",
        "id": 254466953,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632361463
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah if you static compile the function against the ODE solver and the function together you're fine.</p>",
        "id": 254467758,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632362075
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; But any package from say Python or R which uses  a JIT compiler for the function + a pre-compiled ODE solver library will not be doing that. And that's the strategy that every library takes.</p>",
        "id": 254467804,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632362111
    },
    {
        "content": "<p>[gitter] &lt;dapias&gt; <a href=\"https://github.com/SciML/NeuralPDE.jl/issues/406\">https://github.com/SciML/NeuralPDE.jl/issues/406</a></p>",
        "id": 254490887,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632380913
    },
    {
        "content": "<p>[slack] &lt;KnutAM&gt; Hi. I'm just starting trying out the DiffEqFlux package - really cool work!<br>\nBut I was surprised by</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"sa\">false</span><span class=\"sb\">```</span>\n<span class=\"sb\">Is there a way to check for equality between two FastDense layers?</span>\n</code></pre></div>",
        "id": 254532097,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632402623
    },
    {
        "content": "<p>[slack] &lt;KnutAM&gt; I think the reason is that initial_params is defined as a function?</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">,</span> <span class=\"k\">in</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">,</span> <span class=\"n\">σ</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">,</span> <span class=\"n\">initial_params</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">,</span> <span class=\"n\">bias</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">)</span><span class=\"sb\">```</span>\n<span class=\"sb\">but</span>\n<span class=\"sb\">```</span><span class=\"sa\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">fd1</span><span class=\"o\">.</span><span class=\"n\">initial_params</span><span class=\"p\">()</span><span class=\"o\">==</span><span class=\"n\">fd2</span><span class=\"o\">.</span><span class=\"n\">initial_params</span><span class=\"p\">()</span>\n<span class=\"sa\">true</span><span class=\"sb\">```</span>\n</code></pre></div>",
        "id": 254532139,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632402644
    },
    {
        "content": "<p>[slack] &lt;George Gkountouras&gt; &gt; if you static compile the function against the ODE solver and the function together you're fine<br>\nIs this only for Julia-native solvers, or does it also apply to e.g. the SUNDIALS suite? @chrisrackauckas</p>",
        "id": 254534818,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632403750
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it applies to <a href=\"https://github.com/search?q=Sundials.jl&amp;type=Repositories\">Sundials.jl</a>. It's probably one of the reasons why OrdinaryDiffEq QNDF outperforms it.</p>",
        "id": 254536185,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632404278
    },
    {
        "content": "<p>[slack] &lt;amin.sadeghi&gt; Hi, I've just started using Julia, and in particular DifferentialEquations for research. I'm trying to optimize a simple ODE problem for now. I've followed the pointers on sciml website, but I still think my model is still allocating too much (please see below). The problem I'm working on is a simple system of ODEs that arises from discretizing the heat equation in 3D using method of lines. I've attached the code. What else can I do to further decrease allocations? Thanks!</p>\n<p><code>7.118934 seconds (2.19 M allocations: 1.371 GiB, 65.67% gc time, 20.88% compilation time)</code></p>",
        "id": 254549320,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632408958
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 254549476,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632408999
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 254549545,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632409023
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 254549695,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632409077
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 254549704,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632409082
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 254551989,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632409850
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 254552555,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632410094
    },
    {
        "content": "<p>[slack] &lt;amin.sadeghi&gt; <a href=\"https://files.slack.com/files-pri/T68168MUP-F02FBSL2B1T/download/heat_equation.jl.julia\">https://files.slack.com/files-pri/T68168MUP-F02FBSL2B1T/download/heat_equation.jl.julia</a></p>",
        "id": 254552867,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632410193
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 254552937,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632410216
    },
    {
        "content": "<p>[slack] &lt;amin.sadeghi&gt; <a href=\"https://files.slack.com/files-pri/T68168MUP-F02FBTBTUSZ/download/heat_equation.jl.julia\">https://files.slack.com/files-pri/T68168MUP-F02FBTBTUSZ/download/heat_equation.jl.julia</a></p>",
        "id": 254553765,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632410488
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; are you sure the allocations are from the rhs?</p>",
        "id": 254554853,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632410966
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Isolate it and double check</p>",
        "id": 254554862,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632410971
    },
    {
        "content": "<p>[slack] &lt;amin.sadeghi&gt; is this what you mean?</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code>  <span class=\"mf\">0.005343</span> <span class=\"n\">seconds</span> <span class=\"p\">(</span><span class=\"mi\">35</span> <span class=\"n\">allocations</span><span class=\"o\">:</span> <span class=\"mf\">7.630</span> <span class=\"n\">MiB</span><span class=\"p\">)</span><span class=\"sb\">```</span>\n</code></pre></div>",
        "id": 254558899,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632412494
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Pull the similar out</p>",
        "id": 254559025,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632412543
    },
    {
        "content": "<p>[slack] &lt;amin.sadeghi&gt; <code>julia&gt; @time diffusion!(du, u0, params, 0);\n  0.002301 seconds (33 allocations: 880 bytes)</code></p>",
        "id": 254559724,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632412780
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Have you tried reducing how often it saves the state? Right now it is saving every step I think. See <a href=\"https://diffeq.sciml.ai/latest/basics/common_solver_opts/#Output-Control\">https://diffeq.sciml.ai/latest/basics/common_solver_opts/#Output-Control</a></p>",
        "id": 254565202,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632414955
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Do a view on the du part</p>",
        "id": 254572078,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632417729
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Take out the @turbo</p>",
        "id": 254572103,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632417740
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; And try <a href=\"https://github.com/search?q=FastBroadcast.jl&amp;type=Repositories\">FastBroadcast.jl</a> @.. on the last line</p>",
        "id": 254572138,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632417753
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Oh and put return nothing after it</p>",
        "id": 254572167,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632417764
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Maybe that return nothing is all that is necessary</p>",
        "id": 254572210,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632417780
    },
    {
        "content": "<p>[slack] &lt;amin.sadeghi&gt; @isaacsas Thanks, it reduced the memory usage to <del>400 MiB, but still </del>2.2 M allocations</p>",
        "id": 254576781,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632419670
    },
    {
        "content": "<p>[slack] &lt;amin.sadeghi&gt; @chrisrackauckas Thanks! I did all that and we're at 0 allocations!<br>\n<code>  0.002398 seconds</code><br>\n<code>@..</code> got rid of 32 allocations, and <code>return nothing</code> got rid of the only one remaining.</p>\n<p>One final question: when I <code>@time</code> the <code>solve</code> part, I still get <code>2.7 M allocations</code>, is that normal?</p>",
        "id": 254577523,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632419944
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Well it has to allocate the cache arrays internal to the RK method. If your u0 is reasonably large that makes sense. It should be around 4 times the size of u0 for BS3</p>",
        "id": 254587675,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632423938
    },
    {
        "content": "<p>[slack] &lt;amin.sadeghi&gt; @chrisrackauckas Thanks a lot!</p>",
        "id": 254696051,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632486919
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; It also has to allocate to store the results.</p>",
        "id": 254722930,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632497466
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; In general, I would only benchmark your rhs function and ignore the allocations on <code>solve</code> , since it's more or less out of your control.</p>",
        "id": 254723028,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632497514
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah, with big equations be careful with saving. Use saveat and everything effectively. Saving a continuous output on a big equation is expensive <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 254724927,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632498219
    },
    {
        "content": "<p>[slack] &lt;amin.sadeghi&gt; Just out of curiosity, how large was the largest problem you've solved using DifferentialEquations? I intend to use it for a problem with 100M-1B unknowns, want to see if that's even practical.</p>",
        "id": 254730723,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632500358
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah, that's fine. The climate model stuff probably has gotten the biggest. The MPIArray usage stuff allows for whole clusters.</p>",
        "id": 254731946,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632500812
    },
    {
        "content": "<p>[slack] &lt;amin.sadeghi&gt; Do you have an example/tutorial on sciml website on how to use the diffeq in parallel (either shared/distributed) by any chance?</p>",
        "id": 254774201,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632518359
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; There's a blog post on the GPU stuff, and it's just the same</p>",
        "id": 254777408,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632519914
    },
    {
        "content": "<p>[slack] &lt;amin.sadeghi&gt; Amazing! I was able to get up to 50x speedup by simply passing <code>cu(u0)</code> instead of <code>u0</code> ! Would have never thought it would be that easy! Really amazing ecosystem you guys have built, thanks <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 254863910,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632597963
    },
    {
        "content": "<p>[slack] &lt;amin.sadeghi&gt; Another question regarding the GPU support: from what I understand from the docs, multi GPU support only works if I want to run a bunch of simulations in parallel (like Monte Carlo simulations where you have multiple parallel trajectories). What if I want to distribute a single simulation across multiple GPUs? Is that supported (or if not, is it something that you'd consider adding in the future)?</p>",
        "id": 254864185,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632598208
    },
    {
        "content": "<p>[slack] &lt;amin.sadeghi&gt; Is it possible/viable to solve ODEs using <code>Float16</code>  (to further speedup on GPU)? I tried passing <code>Float16.(u0)</code> to <code>solve</code> but it failed, complaining about <code>dt</code> evaluated as <code>NaN</code>.</p>",
        "id": 255037624,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632744992
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It should be, but any stiffness would cause numerical issues so you do have to be careful</p>",
        "id": 255042667,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632747394
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Is your problem fine if you set an init dt?</p>",
        "id": 255042693,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632747408
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; I've noticed that in both REPL and VSCode, DiffEq solvers do not stop with Ctrl+C. Intended?</p>",
        "id": 255070977,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632757624
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; if it's fully non-allocating, Julia can't stop</p>",
        "id": 255072224,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632758084
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; Well, there are states being saved using <code>saveat</code>, even if the rule is non allocating, right?</p>",
        "id": 255072321,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632758127
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; hm, but I guess the point I'm trying to stop it is already in non-allocating mode (some trajectories that diverge to infinity and I guess give solvers a hard time with the step sizes)</p>",
        "id": 255072480,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632758172
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; Um, actually, no, I've tried this with other systems that are fully stable. I can't interrupt the DiffEq process. There is a normal <code>saveat</code> keyword, so there are allocations while stepping.</p>",
        "id": 255073817,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632758618
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; Have you tried it and it worked for you?</p>",
        "id": 255073839,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632758624
    },
    {
        "content": "<p>[slack] &lt;amin.sadeghi&gt; I passed <code>dt</code> to <code>solve</code>, but I still get a warning (although a different warning):<br>\n<code>┌ Warning: dt &lt;= dtmin. Aborting. There is either an error in your model specification or the true solution is unstable.</code></p>",
        "id": 255101529,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632769109
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; There's a good chance that's just due to floating point error.</p>",
        "id": 255229493,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632840671
    },
    {
        "content": "<p>[gitter] &lt;dapias&gt; <a href=\"https://stackoverflow.com/questions/69378110/parallelizing-code-for-solving-simultaneous-odes-differentialequations-jl-ju\">https://stackoverflow.com/questions/69378110/parallelizing-code-for-solving-simultaneous-odes-differentialequations-jl-ju</a></p>",
        "id": 255412078,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632926900
    },
    {
        "content": "<p>[gitter] &lt;dapias&gt; I appreciate any help :)</p>",
        "id": 255412103,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1632926915
    },
    {
        "content": "<p>[slack] &lt;oxinabox&gt; OK should be back should be back now (or shortly after)</p>",
        "id": 256259066,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633445390
    },
    {
        "content": "<p>[slack] &lt;Christopher Revell&gt; I’m suddenly getting an error in precompilation of DifferentialEquations. Stacktrace is here <a href=\"https://pastebin.com/q8KUBXT6\">https://pastebin.com/q8KUBXT6</a> Any ideas of what has happened here?</p>",
        "id": 256286984,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633455454
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @elrodc do you know what this is from?</p>",
        "id": 256287831,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633455801
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; Looking into it</p>",
        "id": 256288197,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633455926
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; Old version of ArrayInterface</p>",
        "id": 256288437,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633456015
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; <code>ERROR: LoadError: MethodError: no method matching (ArrayInterface.StrideIndex{1, (1,), 1, S, O, O1} where {S, O, O1})(::Tuple{Static.StaticInt{8}}, ::Tuple{Static.StaticInt{1}})\nClosest candidates are:\n  (ArrayInterface.StrideIndex{N, R, C, S, O, O1} where {S, O, O1})(::S, ::O, ::O1) where {N, R, C, S&lt;:Tuple{Vararg{Union{Int64, Static.StaticInt}, N}}, O&lt;:Tuple{Vararg{Union{Int64, Static.StaticInt}, N}}, O1} at /Users/christopher/.julia/packages/ArrayInterface/CYf5x/src/array_index.jl:191\n  (ArrayInterface.StrideIndex{N, R, C, S, O, O1} where {S, O, O1})(::A) where {N, R, C, A} at /Users/christopher/.julia/packages/ArrayInterface/CYf5x/src/array_index.jl:194</code><br>\nIt hasn't had an <code>O1</code> parameter for a while.</p>",
        "id": 256288500,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633456042
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; Looks like I didn't set a correct lower bound in LayoutPointers.</p>",
        "id": 256288557,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633456071
    },
    {
        "content": "<p>[slack] &lt;Christopher Revell&gt; Ah I see. I tried running ]update so thought that would mean everything was current.</p>",
        "id": 256288623,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633456089
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; Except</p>",
        "id": 256288695,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633456128
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; I did: <a href=\"https://github.com/JuliaArrays/ArrayInterface.jl/blob/b572dc109a16f9878dc868da100fc59f1987f6c7/src/array_index.jl#L192\">https://github.com/JuliaArrays/ArrayInterface.jl/blob/b572dc109a16f9878dc868da100fc59f1987f6c7/src/array_index.jl#L192</a></p>",
        "id": 256288700,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633456129
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; <a href=\"https://github.com/JuliaSIMD/LayoutPointers.jl/blob/38c785e7c6b7261afbcc16557e28d1afce28e639/Project.toml#L14\">https://github.com/JuliaSIMD/LayoutPointers.jl/blob/38c785e7c6b7261afbcc16557e28d1afce28e639/Project.toml#L14</a></p>",
        "id": 256288728,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633456139
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; But sometimes Pkg likes to do the impossible and give invalid old versions</p>",
        "id": 256288761,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633456148
    },
    {
        "content": "<p>[slack] &lt;Christopher Revell&gt; How helpful of Pkg</p>",
        "id": 256288823,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633456172
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; We mere mortals just cannot fathom what Pkg does</p>",
        "id": 256288942,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633456209
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; I'm not 100% sure that's exactly true, since there is a version of LayoutPointers that is compatible</p>",
        "id": 256288989,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633456227
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; but that version was doing the correct thing (adding an extra <code>offset1</code> to the <code>StrideIndex</code>)</p>",
        "id": 256289153,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633456308
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; I'd try and <code>] up</code>. If that doesn't work, please tell me the versions of <code>ArrayInterface</code> and <code>LayoutPointers</code> you have/try to manually bump ArrayInterface to &gt;= <code>v\"3.1.24\"</code>.</p>",
        "id": 256289386,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633456388
    },
    {
        "content": "<p>[slack] &lt;Christopher Revell&gt; I’m running <code>]update</code> a couple more times because it seems to give a different output each time.</p>",
        "id": 256289406,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633456396
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; Ha, seems like another case of</p>\n<blockquote>\n<p>We mere mortals just cannot fathom what Pkg does</p>\n</blockquote>",
        "id": 256289487,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633456424
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; Naively, I'd expect update to be idempotent (barring more packages/versions getting released)</p>",
        "id": 256289577,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633456446
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Maybe pkg server updates before the last up</p>",
        "id": 256289705,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633456502
    },
    {
        "content": "<p>[slack] &lt;Christopher Revell&gt; All I can tell you is that DifferentialEquations has now precompiled after running <code>]update</code> a couple more times :man-shrugging:</p>",
        "id": 256289878,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633456563
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Cool. Crisis averted</p>",
        "id": 256289986,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633456602
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 256290000,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633456608
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; We need a proper SAT solver for Pkg./</p>",
        "id": 256290021,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633456615
    },
    {
        "content": "<p>[slack] &lt;Christopher Revell&gt; Sorry for wasting your time; I thought running update once should have done the trick.</p>",
        "id": 256290057,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633456634
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Maybe Plg can only behave like what humans expect by the virtue of optimality; the solution coincides with human intuition by uniqueness.</p>",
        "id": 256290659,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633456812
    },
    {
        "content": "<p>[gitter] &lt;dynamic-queries&gt; @ChrisRackauckas @YingboMa</p>",
        "id": 256337863,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633478479
    },
    {
        "content": "<p>[gitter] &lt;dynamic-queries&gt; Could you suggest any MOR features in <a href=\"https://github.com/search?q=ModelingToolkit.jl&amp;type=Repositories\">ModelingToolkit.jl</a>  that is open for contributions?</p>",
        "id": 256338153,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633478646
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @dynamic-queries codegen for the constraints in an OptimizationProblem</p>",
        "id": 256340436,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633480328
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Hi,</p>\n<p>Is there an issue with Julia 1.6.3?</p>\n<p><code>``[ Info: Precompiling DifferentialEquations [0c46a032-eb83-5123-abaf-570d42b7fbaa]\nWARNING: Method definition Type##kw(Any, Type{Base.MPFR.BigFloat}, Base.Irrational{:sqrt3}) in module IrrationalConstants at irrationals.jl:180 overwritten in module StatsFuns on the same line (check for duplicate calls to </code>include`).<br>\n<strong>* incremental compilation may be fatally broken for this module </strong>*</p>\n<p>WARNING: Method definition Type##kw(Any, Type{Base.MPFR.BigFloat}, Base.Irrational{:sqrtπ}) in module IrrationalConstants at irrationals.jl:180 overwritten in module StatsFuns on the same line (check for duplicate calls to <code>include</code>).<br>\n<strong>* incremental compilation may be fatally broken for this module </strong>*</p>\n<p>WARNING: Method definition Type##kw(Any, Type{Base.MPFR.BigFloat}, Base.Irrational{:quartπ}) in module IrrationalConstants at irrationals.jl:180 overwritten in module StatsFuns on the same line (check for duplicate calls to <code>include</code>).<br>\n<strong>* incremental compilation may be fatally broken for this module </strong>*</p>\n<p>WARNING: Method definition Type##kw(Any, Type{Base.MPFR.BigFloat}, Base.Irrational{:twoπ}) in module IrrationalConstants at irrationals.jl:180 overwritten in module StatsFuns on the same line (check for duplicate calls to <code>include</code>).<br>\n<strong>* incremental compilation may be fatally broken for this module </strong>*</p>\n<p>WARNING: Method definition Type##kw(Any, Type{Base.MPFR.BigFloat}, Base.Irrational{:sqrthalfπ}) in module IrrationalConstants at irrationals.jl:180 overwritten in module StatsFuns on the same line (check for duplicate calls to <code>include</code>).<br>\n<strong>* incremental compilation may be fatally broken for this module </strong>*</p>\n<p>WARNING: Method definition Type##kw(Any, Type{Base.MPFR.BigFloat}, Base.Irrational{:sqrt2}) in module IrrationalConstants at irrationals.jl:180 overwritten in module StatsFuns on the same line (check for duplicate calls to <code>include</code>).<br>\n<strong>* incremental compilation may be fatally broken for this module </strong>*</p>\n<p>WARNING: Method definition Type##kw(Any, Type{Base.MPFR.BigFloat}, Base.Irrational{:inv2π}) in module IrrationalConstants at irrationals.jl:180 overwritten in module StatsFuns on the same line (check for duplicate calls to <code>include</code>).<br>\n<strong>* incremental compilation may be fatally broken for this module </strong>*</p>\n<p>WARNING: Method definition Type##kw(Any, Type{Base.MPFR.BigFloat}, Base.Irrational{:invsqrt2π}) in module IrrationalConstants at irrationals.jl:180 overwritten in module StatsFuns on the same line (check for duplicate calls to <code>include</code>).<br>\n<strong>* incremental compilation may be fatally broken for this module </strong>*</p>\n<p>WARNING: Method definition Type##kw(Any, Type{Base.MPFR.BigFloat}, Base.Irrational{:twoinvπ}) in module IrrationalConstants at irrationals.jl:180 overwritten in module StatsFuns on the same line (check for duplicate calls to <code>include</code>).<br>\n<strong>* incremental compilation may be fatally broken for this module </strong>*```</p>",
        "id": 256411173,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633527032
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Share <code>]st -m</code></p>",
        "id": 256413183,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633527811
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @devmotion I thought this went away?</p>",
        "id": 256413193,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633527818
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; too big to paste</p>",
        "id": 256416410,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633528990
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; My mistake, it is on Julia 1.6.2</p>",
        "id": 256426997,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633532886
    },
    {
        "content": "<p>[slack] &lt;devmotion&gt; Yeah it is fixed in since StatsFuns 0.9.10 or 0.9.9 IIRC, it should not occur with any reasonably recent version of StatsFuns.</p>",
        "id": 256430143,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633533980
    },
    {
        "content": "<p>[gitter] &lt;dynamic-queries&gt; @ChrisRackauckas. Building on your comment,  is there a point of reference to start from?</p>",
        "id": 256444142,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633538887
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what do you mean?</p>",
        "id": 256444287,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633538947
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; rm, resolve and up solved this!</p>",
        "id": 256447820,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633540376
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; thank you</p>",
        "id": 256447854,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633540387
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; @chrisrackauckas how do you index your vectors for the time steppers. Usually, you want to work on the space dimension like u(t1) + u(t2). Dou you use <code>u[i,t1]</code> where i in 1:n is the space dimension? Somehow I have to use <code>u[n,t12,t1]</code>  for piecewise orthogonal collocation and this is hell. My jacobian is not banded and stuff <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span></p>\n<blockquote>\n<p>Note that for trapezoid, it is simple enough to do the indexing myself: <a href=\"https://github.com/rveltz/BifurcationKit.jl/blob/master/src/periodicorbit/PeriodicOrbitTrapeze.jl#L211\">https://github.com/rveltz/BifurcationKit.jl/blob/master/src/periodicorbit/PeriodicOrbitTrapeze.jl#L211</a></p>\n</blockquote>",
        "id": 256448348,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633540562
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what do you mean?</p>",
        "id": 256448523,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633540619
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; <a href=\"https://files.slack.com/files-pri/T68168MUP-F02GFTD7Q3H/download/screen_shot_2021-10-06_at_19.17.55.png\">https://files.slack.com/files-pri/T68168MUP-F02GFTD7Q3H/download/screen_shot_2021-10-06_at_19.17.55.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02GFTD7Q3H/download/screen_shot_2021-10-06_at_19.17.55.png\"><img src=\"https://uploads.zulipusercontent.net/32558f6c0595583f90fa4127862a9722d8e32cc4/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303247465444375133482f646f776e6c6f61642f73637265656e5f73686f745f323032312d31302d30365f61745f31392e31372e35352e706e67\"></a></div>",
        "id": 256448700,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633540682
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; I am implementing computation of periodic orbits like auto. I need to store the periodic orbit. Right now I use <code>u = zeros(n, m, N)</code> but then I have adjoints everywhere.</p>\n<blockquote>\n<p>n is space dimension, m collocation degree and N time mesh number.<br>\nI have a wroking version of this but I am trying to improve it</p>\n</blockquote>",
        "id": 256448821,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633540731
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh because you're doing time as columns?</p>",
        "id": 256449014,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633540806
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; for this u = zeros(n, m, N), I’d say no</p>",
        "id": 256449096,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633540836
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; the vector field is applied to <code>u[:, tij, ti]</code></p>",
        "id": 256449209,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633540891
    },
    {
        "content": "<p>[slack] &lt;Gabriel Birnbaum&gt; I also got an error with ArrayInterface (and ChainRules) when running ]precompile on NeuralPDE.: <a href=\"https://files.slack.com/files-pri/T68168MUP-F02HLC79Q7J/download/screenshot_2021-10-06_at_19.45.46.png\">https://files.slack.com/files-pri/T68168MUP-F02HLC79Q7J/download/screenshot_2021-10-06_at_19.45.46.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02HLC79Q7J/download/screenshot_2021-10-06_at_19.45.46.png\"><img src=\"https://uploads.zulipusercontent.net/5d431983c06a6454bf0558f4d4a22fc0092d1c56/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d463032484c43373951374a2f646f776e6c6f61642f73637265656e73686f745f323032312d31302d30365f61745f31392e34352e34362e706e67\"></a></div>",
        "id": 256453196,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633542398
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; That's from using an old <a href=\"https://github.com/search?q=Compat.jl&amp;type=Repositories\">Compat.jl</a></p>",
        "id": 256453311,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633542448
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Or do you use fancier indexing</p>",
        "id": 256459014,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633544406
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I'm not entirely sure what your question is <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 256459297,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633544514
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; I want to know what is a good pratice to store the periodic orbit in a table. I will do 2 operations:<br>\n• some based on the vector field <code>F(u[:,tij,ti])</code></p>",
        "id": 256465436,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633546657
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; • some to get time derivative <code>L*u[:,:,tj]</code>  for all tj</p>",
        "id": 256465584,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633546700
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 256505948,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633566959
    },
    {
        "content": "<p>[slack] &lt;Jordan Murphy&gt; I'm working with an ODE system such that time and the state are regularized wrt an independent variable and then integrated forward, thus time also gets integrated as an ODE. When I'm integrating forward I want to be able to save at specified times rather than specified values of the independent variable, I understand how to do this for a single value using callbacks (i.e. checking for a Poincare crossing) but is there a good way to handle this for an array of values? Is there a way to check for variable crossing at a number of different values?</p>\n<p>The specified times will usually be irregularly spaced but are monotonically increasing and ordered. And the ODE for time will also be monotonically increasing so the function would not need to check all specified times simultaneously just the \"next\" value.</p>\n<p>If anyone has a suggestion or can point me to a good source, I'd appreciate it.</p>",
        "id": 256506831,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633567598
    },
    {
        "content": "<p>[slack] &lt;ilyaorson&gt; Is there any strategy to reduce the cost of precompilation with diffeqflux? I get a 300 speedup after the first call, and the profiler shows that all the difference comes from <code>typeinf_ext_toplevel</code> .</p>",
        "id": 256514500,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633573909
    },
    {
        "content": "<p>[slack] &lt;ilyaorson&gt; <a href=\"https://files.slack.com/files-pri/T68168MUP-F02HN41A4TA/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F02HN41A4TA/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02HN41A4TA/download/image.png\"><img src=\"https://uploads.zulipusercontent.net/a25194c6af7360a08291149ceba2fd24d0bffe66/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d463032484e3431413454412f646f776e6c6f61642f696d6167652e706e67\"></a></div>",
        "id": 256514691,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633574065
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Not right now. But precompilation should only happen once every few weeks?</p>",
        "id": 256518732,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633577891
    },
    {
        "content": "<p>[slack] &lt;ilyaorson&gt; Oh I meant precompilation of a particular script using diffeqflux. I made a system image with all the package dependencies but I still see this hit.</p>",
        "id": 256521654,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633580770
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah, if you're looking at that, I think it could be that Zygote uses generated functions</p>",
        "id": 256552890,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633601361
    },
    {
        "content": "<p>[slack] &lt;ilyaorson&gt; Is this something that Diffractor might improve?</p>",
        "id": 256608978,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633624643
    },
    {
        "content": "<p>[slack] &lt;ilyaorson&gt; Using @snoopi_deep it looks like Tracker is the main cause actually.: <a href=\"https://files.slack.com/files-pri/T68168MUP-F02HE5P78F3/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F02HE5P78F3/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02HE5P78F3/download/image.png\"><img src=\"https://uploads.zulipusercontent.net/99203560947bd702357d570cacfc9a09c36adefd/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303248453550373846332f646f776e6c6f61642f696d6167652e706e67\"></a></div>",
        "id": 256609299,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633624768
    },
    {
        "content": "<p>[slack] &lt;Fabian Bernhard&gt; Is it good practice to attribute <code>NaN</code> - or more elegantly <code>missing</code> - to state variables?<br>\nAre there any experiences with this? Any shortcomings I might not be aware of?</p>\n<p>What I've noticed so far:<br>\n<code>NaN</code> will clash with the default stability check of <code>solve(...;unstable_check = (dt,u,p,t) -&gt; any(isnan,u))</code> but could be solved with a workaround such as <code>(dt,u,p,t) -&gt; false</code>. <code>missing</code> clash because it is of type <code>Missing</code> instead <code>Float64</code>.</p>\n<p>The issue I'm trying to solve is the following: I simulate a hydrological system where I have compartments such as snow cover that disappear during summer: i.e. their mass goes to 0. Now, I'm not only simulating the mass of the compartments but also their isotopic concentration. As the concentration is not defined when the compartment disappears, I'd like to set these state variables to a value that represents this and also behaves nicely with Plots etc...</p>",
        "id": 256724405,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633692036
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I guess changing the stability check is okay.</p>",
        "id": 256741616,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633700730
    },
    {
        "content": "<p>[slack] &lt;Fabian Bernhard&gt; Thanks for your answer, Chris!<br>\nI'll give that a try.</p>\n<p>I can deactivate the stability check in a more targeted way only for the states where it is necessary and keep it for others.</p>",
        "id": 256761424,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633708715
    },
    {
        "content": "<p>[slack] &lt;George Gkountouras&gt; Any news on pure-Julia fully-implicit DAE solvers <a href=\"https://sciml.ai/news/2021/05/24/QNDF/\">https://sciml.ai/news/2021/05/24/QNDF/</a>?</p>",
        "id": 256878950,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633794540
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; FBDF merged, and I think DFBDF may have merged? (@yingbo_ma?)</p>",
        "id": 256881684,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633797262
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but they still need to be optimized before we fully document them</p>",
        "id": 256881690,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633797271
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; so they are right at the cusp</p>",
        "id": 256881694,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633797276
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Open an issue to discuss this. Good question.</p>",
        "id": 256883571,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633799019
    },
    {
        "content": "<p>[slack] &lt;George Gkountouras&gt; Where are those methods covered in the literature? Possibly Hairer II?</p>",
        "id": 256886060,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633801226
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; No Hairer doesn't cover them. Just directly from Hindmarsh</p>",
        "id": 256892438,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633807208
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Another good reference is ascher and petzold, though I might have misspelled the name.</p>",
        "id": 256905758,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633820752
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; I think A &amp;P covered bdf methods, but not sure of the exact algorithms.</p>",
        "id": 256905842,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633820840
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I don't think it specifically covered the details of constant first coefficient forms</p>",
        "id": 256945291,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633862834
    },
    {
        "content": "<p>[slack] &lt;nathanaelbosch&gt; Hey, quick question: Does anyone have a reference for <code>QNDF</code>? I got very used to the bibtex docstrings (amazing idea btw), but this one does not include a single clear reference.</p>",
        "id": 256987526,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633902715
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; I’ll add it</p>",
        "id": 256988864,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633903835
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; <a href=\"https://github.com/SciML/OrdinaryDiffEq.jl/pull/1500\">https://github.com/SciML/OrdinaryDiffEq.jl/pull/1500</a></p>",
        "id": 256989495,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633904391
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; If you are interested in the derivation, it’s available at <a href=\"https://yingboma.github.io/posts/bdf_derivation/\">https://yingboma.github.io/posts/bdf_derivation/</a></p>",
        "id": 256989568,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633904419
    },
    {
        "content": "<p>[slack] &lt;nathanaelbosch&gt; Amazing. Thanks a lot!</p>",
        "id": 256989840,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633904696
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; yes, that’s right</p>",
        "id": 256990598,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633905438
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; It seems that sensitivity analysis in continuous normalizing flows leads to solving a Hamiltonian system (as described by Pontryagin's maximum priciple). Shouldn't then people use symplectic integrators to solve that? Or maybe I'm just confusing myself with the papers I'm reading?</p>",
        "id": 257026967,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633939152
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes, people should.</p>",
        "id": 257041391,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633946960
    },
    {
        "content": "<p>[gitter] &lt;conanyao&gt; Hi, I am a python beginner and tried to install diffeqpy to solve differential equations. According to the web (<a href=\"https://github.com/SciML/diffeqpy\">https://github.com/SciML/diffeqpy</a>), I have to install julia and add it to the path. Now I have installled julia 1.6, but not sure what does 'add it to the path' mean, and how to do it. Anyone can help, pls? Many thanks in advance</p>",
        "id": 257050342,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633951807
    },
    {
        "content": "<p>[slack] &lt;SebastianM-C&gt; <a href=\"https://www.architectryan.com/2018/03/17/add-to-the-path-on-windows-10/\">https://www.architectryan.com/2018/03/17/add-to-the-path-on-windows-10/</a><br>\nor<br>\n<a href=\"https://askubuntu.com/questions/109381/how-to-add-path-of-a-program-to-path-environment-variable\">https://askubuntu.com/questions/109381/how-to-add-path-of-a-program-to-path-environment-variable</a></p>",
        "id": 257052690,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633953166
    },
    {
        "content": "<p>[gitter] &lt;conanyao&gt; Thank you@BridgingBot, I have installed it using the following steps, however the error message is still there (FileNotFoundError: [Errno 2] No such file or directory: 'julia'). Any further advice, pls? Many thanks in advance. 1. install julia1.6; 2. add it into the path (export PATH=$PATH:/Applications/julia-1.6/Contents/Resources/julia/bin); 3. check the path (echo $PATH) and can see the julia routine; 4. install python for MacOS; 5. install diffeqpy (python3 -m pip install diffeqpy); 5. install required julia packages (import diffeqpy, diffeqpy.install()).</p>",
        "id": 257068060,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633960718
    },
    {
        "content": "<p>[slack] &lt;SebastianM-C&gt; Do you see <code>julia</code> in $PATH from the terminal?</p>",
        "id": 257072658,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633962791
    },
    {
        "content": "<p>[slack] &lt;SebastianM-C&gt; <a href=\"https://www.architectryan.com/2012/10/02/add-to-the-path-on-mac-os-x-mountain-lion/\">https://www.architectryan.com/2012/10/02/add-to-the-path-on-mac-os-x-mountain-lion/</a></p>\n<p>this is a guide for macos</p>",
        "id": 257072681,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633962802
    },
    {
        "content": "<p>[gitter] &lt;conanyao&gt; When I ran \"export PATH=$PATH:/Applications/Julia-1.6/Contents/Resources/julia/bin\", and check it using (echo $PATH), I can see it is in the routine (/Library/Frameworks/Python.framework/Versions/3.10/bin:/Library/Frameworks/Python.framework/Versions/3.10/bin:/Library/Frameworks/Python.framework/Versions/3.10/bin:/Users/petershi/opt/anaconda3/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Applications/Julia-1.6/Contents/Resources/julia/bin). However, after I closed the terminal and reopen a new one, and checked again, there is no julia (/Library/Frameworks/Python.framework/Versions/3.10/bin:/Library/Frameworks/Python.framework/Versions/3.10/bin:/Library/Frameworks/Python.framework/Versions/3.10/bin:/Users/petershi/opt/anaconda3/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin<br>\n).</p>",
        "id": 257077524,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633964940
    },
    {
        "content": "<p>[gitter] &lt;conanyao&gt; <a href=\"https://files.gitter.im/57bf79b040f3a6eec0615ecf/vBku/Screenshot-2021-10-11-at-16.08.41.png\">![Screenshot 2021-10-11 at 16.08.41.png](https://files.gitter.im/57bf79b040f3a6eec0615ecf/vBku/thumb/Screenshot-2021-10-11-at-16.08.41.png)</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.gitter.im/57bf79b040f3a6eec0615ecf/vBku/Screenshot-2021-10-11-at-16.08.41.png\" title=\"![Screenshot 2021-10-11 at 16.08.41.png](https://files.gitter.im/57bf79b040f3a6eec0615ecf/vBku/thumb/Screenshot-2021-10-11-at-16.08.41.png)\"><img src=\"https://uploads.zulipusercontent.net/b554825c5333fc606b9c81b25c410cf1a2124cc9/68747470733a2f2f66696c65732e6769747465722e696d2f3537626637396230343066336136656563303631356563662f76426b752f53637265656e73686f742d323032312d31302d31312d61742d31362e30382e34312e706e67\"></a></div>",
        "id": 257077599,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633964975
    },
    {
        "content": "<p>[gitter] &lt;conanyao&gt; When I ran your second method (see the photo above), and check in the terminal, there is still no julia (/Library/Frameworks/Python.framework/Versions/3.10/bin:/Library/Frameworks/Python.framework/Versions/3.10/bin:/Library/Frameworks/Python.framework/Versions/3.10/bin:/Users/petershi/opt/anaconda3/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin)</p>",
        "id": 257077789,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633965046
    },
    {
        "content": "<p>[slack] &lt;Ronny Bergmann&gt; Are you on Mac OS? Then you have to add that export to your <code>~/.zshenv</code></p>",
        "id": 257077807,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633965053
    },
    {
        "content": "<p>[gitter] &lt;conanyao&gt; do you mean I have to upgrade bash to zsh and redo the procedures above?</p>",
        "id": 257077933,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633965111
    },
    {
        "content": "<p>[slack] &lt;Ronny Bergmann&gt; no, if you have a bash instead of zsh, then I do not know directly, I am happy to have understood the zsh workflow – it might then be some <code>.bash…</code> file (but your folders look like Mac OS so I thought you might be on Mac OS and from Big Sur onwards you have a zsh)</p>",
        "id": 257078170,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633965203
    },
    {
        "content": "<p>[slack] &lt;Ronny Bergmann&gt; main message is: You have to add it to the part of you bash that makes your path at the beginning of a session</p>",
        "id": 257078224,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633965238
    },
    {
        "content": "<p>[gitter] &lt;conanyao&gt; After running \"chsh -s /bin/zsh\", I got this now</p>",
        "id": 257079210,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633965648
    },
    {
        "content": "<p>[gitter] &lt;conanyao&gt; <a href=\"https://files.gitter.im/57bf79b040f3a6eec0615ecf/mHNK/Screenshot-2021-10-11-at-16.20.58.png\">![Screenshot 2021-10-11 at 16.20.58.png](https://files.gitter.im/57bf79b040f3a6eec0615ecf/mHNK/thumb/Screenshot-2021-10-11-at-16.20.58.png)</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.gitter.im/57bf79b040f3a6eec0615ecf/mHNK/Screenshot-2021-10-11-at-16.20.58.png\" title=\"![Screenshot 2021-10-11 at 16.20.58.png](https://files.gitter.im/57bf79b040f3a6eec0615ecf/mHNK/thumb/Screenshot-2021-10-11-at-16.20.58.png)\"><img src=\"https://uploads.zulipusercontent.net/ed921f7b5bf6f035275d7b0e809e7ed33db9a271/68747470733a2f2f66696c65732e6769747465722e696d2f3537626637396230343066336136656563303631356563662f6d484e4b2f53637265656e73686f742d323032312d31302d31312d61742d31362e32302e35382e706e67\"></a></div>",
        "id": 257079246,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633965665
    },
    {
        "content": "<p>[slack] &lt;Ronny Bergmann&gt; HM, sorry I do not see the screenshots properly here on Slack (I only see one line with — zsh — 80x24 😕 ) ; so the main point would more be like – which Mac OS are you on because prior to Big Sur it was bash, so then it is maybe easier to stick with bash</p>",
        "id": 257079419,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633965745
    },
    {
        "content": "<p>[gitter] &lt;conanyao&gt; <a href=\"https://files.gitter.im/57bf79b040f3a6eec0615ecf/zoHT/Screenshot-2021-10-11-at-16.22.58.png\">![Screenshot 2021-10-11 at 16.22.58.png](https://files.gitter.im/57bf79b040f3a6eec0615ecf/zoHT/thumb/Screenshot-2021-10-11-at-16.22.58.png)</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.gitter.im/57bf79b040f3a6eec0615ecf/zoHT/Screenshot-2021-10-11-at-16.22.58.png\" title=\"![Screenshot 2021-10-11 at 16.22.58.png](https://files.gitter.im/57bf79b040f3a6eec0615ecf/zoHT/thumb/Screenshot-2021-10-11-at-16.22.58.png)\"><img src=\"https://uploads.zulipusercontent.net/63a517eddd6b4ab1026b91ed5e7e26857a5b31c1/68747470733a2f2f66696c65732e6769747465722e696d2f3537626637396230343066336136656563303631356563662f7a6f48542f53637265656e73686f742d323032312d31302d31312d61742d31362e32322e35382e706e67\"></a></div>",
        "id": 257079498,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633965783
    },
    {
        "content": "<p>[gitter] &lt;conanyao&gt; Big Sur 11.6</p>",
        "id": 257079509,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633965787
    },
    {
        "content": "<p>[slack] &lt;Ronny Bergmann&gt; Ah but on Big Sur you should be running zsh anyways then use the <code>.zshenv</code>.</p>",
        "id": 257079789,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633965906
    },
    {
        "content": "<p>[slack] &lt;Ronny Bergmann&gt; (the links posted above by Sebastian are then a little outdated, they are from 9 years ago).</p>",
        "id": 257079844,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633965938
    },
    {
        "content": "<p>[slack] &lt;Ronny Bergmann&gt; so basically put the PATH command that you used above and that worked as one line into your <code>.zshenv</code> file</p>",
        "id": 257079992,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633965984
    },
    {
        "content": "<p>[gitter] &lt;conanyao&gt; I am sorry not sure I understand correctly, do you mean like this (export PATH=$PATH:.zshenv<br>\n)</p>",
        "id": 257080246,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633966099
    },
    {
        "content": "<p>[slack] &lt;Ronny Bergmann&gt; Now you confuse me. You have a line above that worked adding the path to your $PATH. Put that line _into_ the file <code>zshenv</code> in your local folder._</p>",
        "id": 257080876,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633966371
    },
    {
        "content": "<p>[slack] &lt;Ronny Bergmann&gt; not zshenv into your path, the other way around. the path command with export that you did above _into_ your zshenv file</p>",
        "id": 257080939,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633966409
    },
    {
        "content": "<p>[gitter] &lt;conanyao&gt; I am sorry I am not in this area! Could you tell me how to put that line into zshenv file, pls.</p>",
        "id": 257081903,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633966876
    },
    {
        "content": "<p>[slack] &lt;Ronny Bergmann&gt; open that file in your favourite editor and add it, is at least what I do</p>",
        "id": 257082094,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633966965
    },
    {
        "content": "<p>[gitter] &lt;conanyao&gt; <a href=\"https://files.gitter.im/57bf79b040f3a6eec0615ecf/PhgM/Screenshot-2021-10-11-at-16.44.57.png\">![Screenshot 2021-10-11 at 16.44.57.png](https://files.gitter.im/57bf79b040f3a6eec0615ecf/PhgM/thumb/Screenshot-2021-10-11-at-16.44.57.png)</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.gitter.im/57bf79b040f3a6eec0615ecf/PhgM/Screenshot-2021-10-11-at-16.44.57.png\" title=\"![Screenshot 2021-10-11 at 16.44.57.png](https://files.gitter.im/57bf79b040f3a6eec0615ecf/PhgM/thumb/Screenshot-2021-10-11-at-16.44.57.png)\"><img src=\"https://uploads.zulipusercontent.net/8a9fa1437c01fcce2bb7423bfc685b372df7356c/68747470733a2f2f66696c65732e6769747465722e696d2f3537626637396230343066336136656563303631356563662f5068674d2f53637265656e73686f742d323032312d31302d31312d61742d31362e34342e35372e706e67\"></a></div>",
        "id": 257082390,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633967105
    },
    {
        "content": "<p>[slack] &lt;Ronny Bergmann&gt; No, there you have to add the command you used above already</p>",
        "id": 257082945,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633967357
    },
    {
        "content": "<p>[slack] &lt;Ronny Bergmann&gt; <code>export PATH=$PATH:/Applications/Julia-1.6/Contents/Resources/julia/bin</code></p>",
        "id": 257082978,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633967374
    },
    {
        "content": "<p>[gitter] &lt;conanyao&gt; <a href=\"https://files.gitter.im/57bf79b040f3a6eec0615ecf/fbY7/Screenshot-2021-10-11-at-16.50.52.png\">![Screenshot 2021-10-11 at 16.50.52.png](https://files.gitter.im/57bf79b040f3a6eec0615ecf/fbY7/thumb/Screenshot-2021-10-11-at-16.50.52.png)</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.gitter.im/57bf79b040f3a6eec0615ecf/fbY7/Screenshot-2021-10-11-at-16.50.52.png\" title=\"![Screenshot 2021-10-11 at 16.50.52.png](https://files.gitter.im/57bf79b040f3a6eec0615ecf/fbY7/thumb/Screenshot-2021-10-11-at-16.50.52.png)\"><img src=\"https://uploads.zulipusercontent.net/0f4994fe0dd1a367b55105b116062d93cf346a5b/68747470733a2f2f66696c65732e6769747465722e696d2f3537626637396230343066336136656563303631356563662f666259372f53637265656e73686f742d323032312d31302d31312d61742d31362e35302e35322e706e67\"></a></div>",
        "id": 257083157,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633967459
    },
    {
        "content": "<p>[slack] &lt;Ronny Bergmann&gt; This is what is meant by “add it to path”. I usually prefer to put them in the beginning of the path not at the end, but your should work for now</p>",
        "id": 257083314,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633967527
    },
    {
        "content": "<p>[gitter] &lt;conanyao&gt; I see, thank you very much!!! I will have a test now</p>",
        "id": 257083382,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633967570
    },
    {
        "content": "<p>[slack] &lt;jon.norberg935&gt; I have issues formulating a somewhat complex model in ModelingToolkit. I later want to link it so I make a custom component as</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    sts=@variables t,u[1:EN](t)\n    ps=@parameters r[1:EN],a[EN,EN],K[1:EN],m[1:EN]\n    D=Differential(t)\n    eqns=[D(u[i])~u[i]*(r[i]*(1-sum(u.*a[i,:])/K[i])-m[i]) for i in 1:EN]\n    ODESystem(eqns,t,[r...,a...,K...,m...],ps; name)\nend```\n1. I get **`BoundsError: attempt to access SymbolicUtils.Sym{Matrix{Real}, Base.ImmutableDict{DataType, Any}} at index [1, j]`** related to the `sum(u.*a[i,:])/K[I]` I think, not sure how to express that correctly\n2. If I remove that term I get **`MethodError: no method matching hasmetadata(::Vector{Symbolics.Num}, ::Type{Symbolics.VariableDefaultValue})`** which I think has something to do with the ODESystem definition. I crudely tried to copy the syntax from the documentation but something is amiss.\nAny hints greatly appreciated\n</code></pre></div>",
        "id": 257109758,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633982206
    },
    {
        "content": "<p>[gitter] &lt;conanyao&gt; Hi again! I have added the julia on the path (see the picture below pls), however it is still not working. The error message is show below. Any further advice is highly appreciated!             Traceback (most recent call last):<br>\n  File \"&lt;pyshell#1&gt;\", line 1, in &lt;module&gt;<br>\n    from diffeqpy import ode<br>\n  File \"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/diffeqpy/ode.py\", line 4, in &lt;module&gt;<br>\n    from julia import Main<br>\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 1027, in _find_and_load<br>\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 1006, in _find_and_load_unlocked<br>\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 672, in _load_unlocked<br>\n  File \"&lt;frozen importlib._bootstrap&gt;\", line 632, in _load_backward_compatible<br>\n  File \"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/julia/core.py\", line 247, in load_module<br>\n    JuliaMainModule(self, fullname))<br>\n  File \"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/julia/core.py\", line 149, in __init__<br>\n    self._julia = loader.julia<br>\n  File \"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/julia/core.py\", line 239, in julia<br>\n    self.__class__.julia = julia = Julia()<br>\n  File \"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/julia/core.py\", line 468, in __init__<br>\n    jlinfo = JuliaInfo.load(runtime)<br>\n  File \"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/julia/juliainfo.py\", line 68, in load<br>\n    proc = subprocess.Popen(<br>\n  File \"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/subprocess.py\", line 966, in __init__<br>\n    self._execute_child(args, executable, preexec_fn, close_fds,<br>\n  File \"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/subprocess.py\", line 1842, in _execute_child<br>\n    raise child_exception_type(errno_num, err_msg, err_filename)<br>\nFileNotFoundError: [Errno 2] No such file or directory: 'julia'</p>",
        "id": 257111743,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633983319
    },
    {
        "content": "<p>[gitter] &lt;conanyao&gt; <a href=\"https://files.gitter.im/57bf79b040f3a6eec0615ecf/3pb8/Screenshot-2021-10-11-at-21.15.40.png\">![Screenshot 2021-10-11 at 21.15.40.png](https://files.gitter.im/57bf79b040f3a6eec0615ecf/3pb8/thumb/Screenshot-2021-10-11-at-21.15.40.png)</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.gitter.im/57bf79b040f3a6eec0615ecf/3pb8/Screenshot-2021-10-11-at-21.15.40.png\" title=\"![Screenshot 2021-10-11 at 21.15.40.png](https://files.gitter.im/57bf79b040f3a6eec0615ecf/3pb8/thumb/Screenshot-2021-10-11-at-21.15.40.png)\"><img src=\"https://uploads.zulipusercontent.net/878f99658f91cfc8c628b873224b0904b248c522/68747470733a2f2f66696c65732e6769747465722e696d2f3537626637396230343066336136656563303631356563662f337062382f53637265656e73686f742d323032312d31302d31312d61742d32312e31352e34302e706e67\"></a></div>",
        "id": 257111782,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633983348
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; (1) collect first.</p>",
        "id": 257116153,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1633986040
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; Hey there, what would be the simplest way to implement a callback that outputs something to the terminal every X time steps? Can I just use a discrete callback that keeps an internal counter that increments in <code>condition</code> ?</p>",
        "id": 257140663,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634005452
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes</p>",
        "id": 257144367,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634009124
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 257153285,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634018241
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 257154201,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634018937
    },
    {
        "content": "<p>[slack] &lt;jon.norberg935&gt; This works for defining the system (problem 1):</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">sum</span><span class=\"p\">([</span><span class=\"n\">u</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"n\">aa</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">,</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"k\">in</span> <span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">EN</span><span class=\"p\">]</span><span class=\"sb\">```</span>\n<span class=\"sb\">and with</span>\n<span class=\"sb\">```</span><span class=\"sa\">eqns</span><span class=\"o\">=</span><span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"o\">....</span><span class=\"p\">)</span>\n<span class=\"n\">ODESystem</span><span class=\"p\">(</span><span class=\"n\">eqns</span><span class=\"p\">,</span><span class=\"n\">t</span><span class=\"p\">,</span><span class=\"n\">u</span><span class=\"p\">,[</span><span class=\"n\">r</span><span class=\"o\">...</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"o\">...</span><span class=\"p\">,</span><span class=\"n\">K</span><span class=\"o\">...</span><span class=\"p\">,</span><span class=\"n\">m</span><span class=\"o\">...</span><span class=\"p\">];</span> <span class=\"n\">name</span><span class=\"p\">)</span><span class=\"sb\">```</span>\n<span class=\"sb\">problem 2 also gone. thanks!</span>\n</code></pre></div>",
        "id": 257154302,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634019010
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 257154767,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634019409
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 257154814,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634019470
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Hi,</p>\n<p>Is there a way to stitch solutions together? Say sol1 solves an ODE on t=(0,1) and sol2 on (1,2). How can I combine them in a single ODESolution?</p>",
        "id": 257166635,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634027174
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @vaibhavdixit02 had a code for it.</p>",
        "id": 257188629,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634039016
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; I guess that pinged him <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 257189018,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634039208
    },
    {
        "content": "<p>[slack] &lt;vaibhavdixit02&gt; Yeah, but I am on my mobile so a little tough to send the code. Do you mind taking a look at the multiple shooting code in <a href=\"https://github.com/search?q=DiffEqParamEstim.jl&amp;type=Repositories\">DiffEqParamEstim.jl</a>, it's there?</p>",
        "id": 257189804,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634039643
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Hum, I found <code>Merged_Solution</code> but not sure ow to use it</p>",
        "id": 257203136,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634045613
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; I am not 100% on the plotting receipes, but is<br>\n<code>plot(sims,vars=(+,1,2))</code><br>\nsupposed to plot the sum of variable 1 and 2 (y-axis) against time (x-axis)<br>\n(sims is the ouput of a differential equation simulation)</p>",
        "id": 257218722,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634051325
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>plot(sims,vars=((t,x,y)-&gt;(t,x+y),0,1,2))</code></p>",
        "id": 257219126,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634051488
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; Thanks <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 257223119,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634053004
    },
    {
        "content": "<p>[slack] &lt;vaibhavdixit02&gt; I wanted to point out these lines <a href=\"https://github.com/SciML/DiffEqParamEstim.jl/blob/d812632db012913f7f026002db6680f7b314f05e/src/multiple_shooting_objective.jl#L49-L64\">https://github.com/SciML/DiffEqParamEstim.jl/blob/d812632db012913f7f026002db6680f7b314f05e/src/multiple_shooting_objective.jl#L49-L64</a></p>",
        "id": 257261762,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634068309
    },
    {
        "content": "<p>[slack] &lt;de-souza&gt; <a href=\"https://julialang.slack.com/archives/C7T968HRU/p1634204940401500?thread_ts=1634121576.381100&amp;cid=C7T968HRU\">https://julialang.slack.com/archives/C7T968HRU/p1634204940401500?thread_ts=1634121576.381100&amp;cid=C7T968HRU</a> Hello there! How to obtain the PDE loss function of a PINN with parameter estimation in <a href=\"https://github.com/search?q=NeuralPDE.jl&amp;type=Repositories\">NeuralPDE.jl</a> ?</p>\n<p>I tried the low-level API and I don't understand what arguments I should pass to <code>build_loss_function()</code>. I tried passing <code>default_p=Dict(k .=&gt; k_init)</code> and it didn't work.</p>\n<p>Here is a minimal working example</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>@parameters x, k\n@variables u(..)\nDx = Differential(x)\n\n# Equation\neq = Dx(u(x)) ~ k * cos(x)\nk_sol = 3\nanalytic_sol_func(x) = k_sol * sin(x)\n\n# Data\nx_data = [0.5 3.6 5.9 7.0 9.8]\nu_data = [analytic_sol_func(x) for x in x_data]\n\n# Initial condition\nbcs = [u(0) ~ 0.]\n\n# Domain\ndomains = [x ∈ ModelingToolkit.Interval(0.0, 10.0)]\n\n# Discretization\ndx = 0.1\n\n# Neural network\nchain = FastChain(FastDense(1, 8, tanh), FastDense(8, 8, tanh), FastDense(8, 1))\ninitθ = DiffEqFlux.initial_params(chain)\neltypeθ = eltype(initθ)\nparameterless_type_θ = DiffEqBase.parameterless_type(initθ)\nstrategy = GridTraining(dx)\n\nphi = NeuralPDE.get_phi(chain, parameterless_type_θ)\nderivative = NeuralPDE.get_numeric_derivative()\n\nindvars = [x]\ndepvars = [u]\n\nk_init = 1\n_pde_loss_function = NeuralPDE.build_loss_function(\n    eq, indvars, depvars, phi, derivative, nothing, chain, initθ, strategy;\n    param_estim=true, default_p=Dict(k .=&gt; k_init),\n)\n\ntrain_sets = NeuralPDE.generate_training_sets(\n    domains, dx, [eq], bcs, eltypeθ, indvars, depvars,\n)\ntrain_domain_set, train_bound_set = train_sets\n\npde_loss_function = NeuralPDE.get_loss_function(\n    _pde_loss_function, train_domain_set[1], eltypeθ, parameterless_type_θ, strategy,\n)\n\npde_loss_function(initθ)```\nAnd here is the error when I call the loss function on initial parameters at the last line of the MWE\n```ERROR: LoadError: UndefVarError: k not defined\nStacktrace:\n [1] macro expansion\n   @ ~/.julia/packages/NeuralPDE/HVA0c/src/pinns_pde_solve.jl:556 [inlined]\n [2] macro expansion\n   @ ~/.julia/packages/RuntimeGeneratedFunctions/KrkGo/src/RuntimeGeneratedFunctions.jl:129 [inlined]\n [3] macro expansion\n   @ ./none:0 [inlined]\n [4] generated_callfunc(::RuntimeGeneratedFunctions.RuntimeGeneratedFunction{(:cord, Symbol(\"##θ#257\"), :phi, :derivative, :integral, :u, :p), NeuralPDE.var\"#_RGF_ModTag\", NeuralPDE.var\"#_RGF_ModTag\", (0x9b814b7d, 0x76e52b1b, 0xcc52ca95, 0xaf205ac9, 0xd786ab04)}, ::Matrix{Float32}, ::Vector{Float32}, ::NeuralPDE.var\"#270#272\"{FastChain{Tuple{FastDense{typeof(tanh), DiffEqFlux.var\"#initial_params#82\"{Vector{Float32}}}, FastDense{typeof(tanh), DiffEqFlux.var\"#initial_params#82\"{Vector{Float32}}}, FastDense{typeof(identity), DiffEqFlux.var\"#initial_params#82\"{Vector{Float32}}}}}, UnionAll}, ::NeuralPDE.var\"#276#277\", ::Nothing, ::NeuralPDE.var\"#274#275\", ::Dict{Num, Int64})\n   @ NeuralPDE ./none:0\n [5] (::RuntimeGeneratedFunctions.RuntimeGeneratedFunction{(:cord, Symbol(\"##θ#257\"), :phi, :derivative, :integral, :u, :p), NeuralPDE.var\"#_RGF_ModTag\", NeuralPDE.var\"#_RGF_ModTag\", (0x9b814b7d, 0x76e52b1b, 0xcc52ca95, 0xaf205ac9, 0xd786ab04)})(::Matrix{Float32}, ::Vector{Float32}, ::Function, ::Function, ::Nothing, ::Function, ::Dict{Num, Int64})\n   @ RuntimeGeneratedFunctions ~/.julia/packages/RuntimeGeneratedFunctions/KrkGo/src/RuntimeGeneratedFunctions.jl:117\n [6] #175\n   @ ~/.julia/packages/NeuralPDE/HVA0c/src/pinns_pde_solve.jl:595 [inlined]\n [7] (::NeuralPDE.var\"#299#300\"{NeuralPDE.var\"#175#176\"{Dict{Num, Int64}, NeuralPDE.var\"#270#272\"{FastChain{Tuple{FastDense{typeof(tanh), DiffEqFlux.var\"#initial_params#82\"{Vector{Float32}}}, FastDense{typeof(tanh), DiffEqFlux.var\"#initial_params#82\"{Vector{Float32}}}, FastDense{typeof(identity), DiffEqFlux.var\"#initial_params#82\"{Vector{Float32}}}}}, UnionAll}, NeuralPDE.var\"#276#277\", Nothing, RuntimeGeneratedFunctions.RuntimeGeneratedFunction{(:cord, Symbol(\"##θ#257\"), :phi, :derivative, :integral, :u, :p), NeuralPDE.var\"#_RGF_ModTag\", NeuralPDE.var\"#_RGF_ModTag\", (0x9b814b7d, 0x76e52b1b, 0xcc52ca95, 0xaf205ac9, 0xd786ab04)}, NeuralPDE.var\"#274#275\"}, Matrix{Float32}})(θ::Vector{Float32})\n   @ NeuralPDE ~/.julia/packages/NeuralPDE/HVA0c/src/pinns_pde_solve.jl:881\n [8] top-level scope\n   @ Untitled:53\nin expression starting at Untitled:53```\n</code></pre></div>",
        "id": 257343986,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634121579
    },
    {
        "content": "<p>[slack] &lt;Jakub Mitura&gt; Hello i do early concept work on algorithm in medical image segmentation<br>\nI consider using some differential geometry or algebraic topology tools   to specify a parameterized function.<br>\nThen classically those parameters i would want to optimize in order to minimize given error metric , probably distance metric.<br>\nCan I use diffeq for this ? <br>\nWould you recommend some source to help design function using differential geometry or algebraic topology tools so it will be efficient to find it's optimal parameters, even when some discrete data like Euler number will be used?</p>",
        "id": 257352615,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634126449
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; do you need the solution on some manifold?</p>",
        "id": 257363114,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634131055
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; Hi @chrisrackauckas, quick question. Is it possible to control the re-initialization technique  after callback when changes are introduced into the Algebraic portions of the DAE in mass matrix form. We have been testing some of the pure julia solvers and we run into an issue after a callback changes the algebraic portions.</p>\n<p>Rodas4 and Rodas5 work really well and don’t exhibit the problem, but we also want to benchmark with Rosenbrock23 and QNDF methods.</p>",
        "id": 257378578,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634136594
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; we have now a medium size system about 2200 states to make the benchmarking with Sundials and DiffEq methods</p>",
        "id": 257378821,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634136668
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I'm not sure they all reinit right now?</p>",
        "id": 257379714,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634136946
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; I think so, after the callback all the mentioned methods fail to converge. But we know that the system is stable from the other solvers’ solutions and the industrial tools benchmarks.</p>\n<p>I can dig in more but wanted to see if there is an easier way to test what is happening.</p>",
        "id": 257380022,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634137044
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah I think that's because they aren't trying to reinit</p>",
        "id": 257380089,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634137070
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; a reinit call needs to be added after the callbacks</p>",
        "id": 257380111,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634137078
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; so this will need to happen in the solvers’ code? I know you have explained this to me 100 times.</p>",
        "id": 257380342,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634137158
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah, and there's a partial PR, etc.</p>",
        "id": 257384466,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634138586
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; maybe if you ping me nicely over the weekend I might do it. I have a ton to catch up on.</p>",
        "id": 257384505,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634138597
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; ok great. P.S. what classifies as a not nice ping? haha</p>",
        "id": 257384801,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634138696
    },
    {
        "content": "<p>[slack] &lt;Jakub Mitura&gt; Mesh manifold as output of my parametrarized function and gold standard mesh that is given for training and evaluation<br>\ncost function will be telling how dissimilar they are</p>",
        "id": 257387398,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634139686
    },
    {
        "content": "<p>[slack] &lt;affans&gt; Came across a bug I think.</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    1.01*u\nend\nu0 = 1/2\ntspan = (0.0,1.0)\nprob = ODEProblem(_sis,u0,tspan)\nsol = solve(prob, Tsit5(), reltol=1e-8, abstol=1e-8)```\nThe error is\n```Stacktrace:\n  [1] alg_cache(alg::Tsit5{typeof(OrdinaryDiffEq.trivial_limiter!), typeof(OrdinaryDiffEq.trivial_limiter!)}, u::Float64, rate_prototype::Float64, #unused#::Type{Float64}, #unused#::Type{Float64}, #unused#::Type{Float64}, uprev::Float64, uprev2::Float64, f::ODEFunction{true, typeof(_sis), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, t::Float64, dt::Float64, reltol::Float64, p::SciMLBase.NullParameters, calck::Bool, #unused#::Val{true})```\n\\\nIt might be corruption on my part but removiing the underscore from the function name fixes the issue.\n</code></pre></div>",
        "id": 257413922,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634149564
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I would need the full trace</p>",
        "id": 257422246,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634152866
    },
    {
        "content": "<p>[slack] &lt;affans&gt; Okay will try to get that later.</p>",
        "id": 257427074,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634154873
    },
    {
        "content": "<p>[slack] &lt;affans&gt; Does anyone have a small tutorial on <code>BifurcationKit</code>? I have a very simple ODE I am playing around with that exhibits a transcritical bifurcation.. and was thinking this is a good opportunity to learn the bifurcation pacakge</p>",
        "id": 257427198,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634154922
    },
    {
        "content": "<p>[slack] &lt;affans&gt; ```function sis_model(I, p, t) <br>\n    p.β<em>I</em>(1 - 1/p.R0 - I)<br>\nend</p>\n<p>i0 = 1<br>\nprob = ODEProblem(sis_model, i0, (0.0, 500.0), (β = 0.04, R0 = rval, α = 0.01))<br>\nsol = solve(prob, Tsit5(), saveat = 1)```</p>",
        "id": 257427284,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634154952
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; worked for me on ordinarydiffeq 5.64.1</p>",
        "id": 257431381,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634156508
    },
    {
        "content": "<p>[slack] &lt;ignace-computing&gt; Sorry for bothering you with a small request for help:)<br>\nI have the following code, but I would expect the solution to the one-timestep<br>\nODEProblem (and implicit Euler) to be computed in a time similar to AA\\b, which is not the case on my computer.<br>\nAny help (or constructive pointers to my stupidness) is highly appreciated!</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>using SparseArrays\nusing LinearAlgebra\n\n## full heavy matrix\nNx = Ny = 100\nKK = Nx*Ny\n\nFM = BandedMatrix(-1=&gt;ones(KK-1), 0=&gt;-2*ones(KK), 1=&gt;ones(KK-1))\nA = BandedBlockBandedMatrix(FM, [Nx for i in 1:Ny], [Ny for i in 1:Nx], (1,1), (1,1))\nfor k = 2:Nx-1\n    view(A, Block(k-1,k)) .+= I(Nx)\nend\nfor k = 1:Nx-1\n    view(A, Block(k,k+1)) .+= -I(Nx)\nend\nview(A, Block(1,1))\nview(A .+ A, Block(1,1))\n\n##\n@time AA = sparse(A)\nprintln(nnz(AA))\n\n##\nb = randn(KK)\n@time A*b\n@time AA\\b\n\n## solve DiffEq\nusing DifferentialEquations\n\nfunction dummy_prob(du, u, p, t)\n    du .= AA*u\nend\n\ntspan = (0., 1.)\ndt = 1.\nprob = ODEProblem(dummy_prob, b, tspan, [], dt=dt, adaptive=false)\n@time sol = solve(prob, ImplicitEuler(), save_everystep=true)```\n</code></pre></div>",
        "id": 257441147,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634160488
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Catalyst has a pretty well commented basic example by @torkel.loman at <a href=\"https://catalyst.sciml.ai/dev/tutorials/bifurcation_diagram/\">https://catalyst.sciml.ai/dev/tutorials/bifurcation_diagram/</a></p>\n<p>It uses a ModelingToolkit generated ODEFunction, so hopefully it is clear where your own code could go.</p>",
        "id": 257455307,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634167928
    },
    {
        "content": "<p>[slack] &lt;ilyaorson&gt; This looks interesting <a href=\"https://twitter.com/Dirivian/status/1447965154679967744?s=20\">https://twitter.com/Dirivian/status/1447965154679967744?s=20</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/Dirivian/status/1447965154679967744?s=20\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/dbe1cda5eb4b5d0a577563bf9fba88f23a9b06b7/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313332353534313831363636323336343136322f376e4c78493533545f6e6f726d616c2e6a7067\"></a><p>Hey, everyone. Our new preprint \"Walking into the complex plane to 'order' better time integrators\" is on Arxiv! <a href=\"https://t.co/y1ciDZwQKe\">https://arxiv.org/abs/2110.04402</a>\n\nWhen we need to simulate something going from time a to time b, most of us think of using real time steps because imaginary time sounds wonky.</p><span>- Jithin George (@Dirivian)</span></div></div>",
        "id": 257472790,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634181126
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; Reposting for more visibility.</p>",
        "id": 257497464,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634199780
    },
    {
        "content": "<p>[slack] &lt;de-souza&gt; The correct syntax for <code>build_loss_function</code> is</p>\n<div class=\"codehilite\" data-code-language=\"_pde_loss_function\"><pre><span></span><code>    eq, indvars, depvars, phi, derivative, nothing, chain, initθ, strategy;\n    param_estim=true, eq_params=[k],\n)```\nFinally, one needs to append the estimated parameter to the parameters of the neural network when calling the loss function:\n```k_init = 1\npde_loss_function(vcat(initθ, k_init))```\nI'm gonna try to add this to the documentation of NeuralPDE.jl.\n\nEdit: https://github.com/SciML/NeuralPDE.jl/blob/a2772edc56c2ee2e5490d4b5a63153a4ebeee097/docs/src/solvers/pinns.md?plain=1#L119.\n</code></pre></div>",
        "id": 257508197,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634204942
    },
    {
        "content": "<p>[slack] &lt;Roger Powell&gt; Hello, I'm trying to work out whether MTK is mature enough for a modeling and, eventually real-time control problem I have. The Copy-Paste Example <a href=\"https://mtk.sciml.ai/stable/tutorials/spring_mass/\">https://mtk.sciml.ai/stable/tutorials/spring_mass/</a> errors, Julia version <code>v\"1.6.3\"</code>  with the following error:</p>",
        "id": 257554641,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634225312
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; we're still building out the control modules <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 257555240,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634225525
    },
    {
        "content": "<p>[slack] &lt;Roger Powell&gt; <code>julia&gt; eqs = [\n           connect_spring(spring, mass.pos, center)\n           collect(D.(mass.v) .~ spring_force(spring) / mass.m .+ g)\n       ]\nERROR: ArgumentError: Variable pos does not exist</code><br>\nI think it's because pos is a vector. so it should be <code>mass.pos[1]</code> or something. But my real point I suppose is that examples could be made into your unit tests so that you know when they are broken. And, to help people learn, comments in the code would be really useful. E.g. It's a 2 DoF system, fairly obviously but you have to work that out.</p>",
        "id": 257555243,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634225526
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the examples should be made into unit tests. I think we just moved too swiftly there.</p>",
        "id": 257555305,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634225549
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @yingbo_ma @shashi more vector stuff <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 257555321,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634225555
    },
    {
        "content": "<p>[slack] &lt;Roger Powell&gt; I am so interested in using MKT. I have set up Twan's RBD system for modelling a very large (10m) robot with non-linearly compliant joints. So not a rigid body problem. I am trying to convert some OpneModellica models to MKT.</p>",
        "id": 257555544,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634225636
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; It just says <code>pos</code> doesn’t exist. I think that’s a model error</p>",
        "id": 257555696,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634225672
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; is there a reason a lot of sciml docs dont use doctests, or just nobody has gotten around to doing it?</p>",
        "id": 257555965,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634225768
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; It works for me. Did you copy-paste that right?</p>",
        "id": 257555989,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634225778
    },
    {
        "content": "<p>[slack] &lt;Roger Powell&gt; @yingbo_ma How strange. I copied it, it didn't work, I restarted Julia and copied again and it fails as above.  Weird. Sorry to bother you in that case.</p>",
        "id": 257556193,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634225858
    },
    {
        "content": "<p>[slack] &lt;Roger Powell&gt; <code>``               _\n   _       _ _(_)_     |  Documentation: https://docs.julialang.org\n  (_)     | (_) (_)    |\n   _ _   _| |_  __ _   |  Type \"?\" for help, \"]?\" for Pkg help.\n  | | | | | | |/ _</code> |  |<br>\n  | | |_| | | | (_| |  |  Version 1.6.3 (2021-09-23)<br>\n _/ |\\__'_|_|_|\\__'_|  |  Official <a href=\"https://julialang.org/\">https://julialang.org/</a> release<br>\n|__/                   |</p>\n<p>julia&gt; using ModelingToolkit, Plots, DifferentialEquations, LinearAlgebra</p>\n<p>julia&gt; @variables t<br>\n1-element Vector{Num}:<br>\n t</p>\n<p>julia&gt; D = Differential(t)<br>\n(::Differential) (generic function with 2 methods)</p>\n<p>julia&gt; function Mass(; name, m = 1.0, xy = [0., 0.], u = [0., 0.])<br>\n           ps = @parameters m=m<br>\n           sts = @variables pos<a href=\"http://t\">1:2</a>=xy v<a href=\"http://t\">1:2</a>=u<br>\n           eqs = collect(D.(pos) .~ v)<br>\n           ODESystem(eqs, t, [pos..., v...], ps; name)<br>\n       end<br>\nMass (generic function with 1 method)</p>\n<p>julia&gt; function Spring(; name, k = 1e4, l = 1.)<br>\n           ps = @parameters k=k l=l<br>\n           @variables x(t), dir<a href=\"http://t\">1:2</a><br>\n           ODESystem(Equation[], t, [x, dir...], ps; name)<br>\n       end<br>\nSpring (generic function with 1 method)</p>\n<p>julia&gt; function connect_spring(spring, a, b)<br>\n           [<br>\n               spring.x ~ norm(collect(a .- b))<br>\n               collect(spring.dir .~ collect(a .- b))<br>\n           ]<br>\n       end<br>\nconnect_spring (generic function with 1 method)</p>\n<p>julia&gt; spring_force(spring) = -spring.k .* collect(spring.dir) .* (spring.x - spring.l)  ./ spring.x<br>\nspring_force (generic function with 1 method)</p>\n<p>julia&gt; m = 1.0<br>\n1.0</p>\n<p>julia&gt; xy = [1., -1.]<br>\n2-element Vector{Float64}:<br>\n  1.0<br>\n -1.0</p>\n<p>julia&gt; k = 1e4<br>\n10000.0</p>\n<p>julia&gt; l = 1.<br>\n1.0</p>\n<p>julia&gt; center = [0., 0.]<br>\n2-element Vector{Float64}:<br>\n 0.0<br>\n 0.0</p>\n<p>julia&gt; g = [0., -9.81]<br>\n2-element Vector{Float64}:<br>\n  0.0<br>\n -9.81</p>\n<p>julia&gt; @named mass = Mass(m=m, xy=xy)<br>\nModel mass with 2 equations<br>\nStates (4):<br>\n  pos₁(t)<br>\n  pos₂(t)<br>\n  v₁(t)<br>\n  v₂(t)<br>\nParameters (1):<br>\n  m</p>\n<p>julia&gt; @named spring = Spring(k=k, l=l)<br>\nModel spring with 0 equations<br>\nStates (3):<br>\n  x(t)<br>\n  dir₁(t)<br>\n  dir₂(t)<br>\nParameters (2):<br>\n  k<br>\n  l</p>\n<p>julia&gt; eqs = [<br>\n           connect_spring(spring, mass.pos, center)<br>\n           collect(D.(mass.v) .~ spring_force(spring) / mass.m .+ g)<br>\n       ]<br>\nERROR: ArgumentError: Variable pos does not exist<br>\nStacktrace:<br>\n [1] getproperty(sys::ODESystem, name::Symbol; namespace::Bool)<br>\n   @ ModelingToolkit ~/.julia/packages/ModelingToolkit/MuQfD/src/systems/abstractsystem.jl:248<br>\n [2] getproperty(sys::ODESystem, name::Symbol)<br>\n   @ ModelingToolkit ~/.julia/packages/ModelingToolkit/MuQfD/src/systems/abstractsystem.jl:213<br>\n [3] top-level scope<br>\n   @ REPL[16]:1</p>\n<p>julia&gt; @named _model = ODESystem(eqs, t)<br>\nERROR: UndefVarError: eqs not defined<br>\nStacktrace:<br>\n [1] top-level scope<br>\n   @ REPL[17]:1</p>\n<p>julia&gt; @named model = compose(_model, mass, spring)<br>\nERROR: UndefVarError: compose not defined<br>\nStacktrace:<br>\n [1] top-level scope<br>\n   @ REPL[18]:1</p>\n<p>julia&gt; sys = structural_simplify(model)<br>\nERROR: UndefVarError: model not defined<br>\nStacktrace:<br>\n [1] top-level scope<br>\n   @ REPL[19]:1</p>\n<p>julia&gt; prob = ODEProblem(sys, [], (0., 3.))<br>\nERROR: UndefVarError: sys not defined<br>\nStacktrace:<br>\n [1] top-level scope<br>\n   @ REPL[20]:1</p>\n<p>julia&gt; sol = solve(prob, Rosenbrock23())<br>\nERROR: UndefVarError: prob not defined<br>\nStacktrace:<br>\n [1] top-level scope<br>\n   @ REPL[21]:1</p>\n<p>julia&gt; plot(sol)```</p>",
        "id": 257556679,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634226045
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Try to update MTK and check the version of it</p>",
        "id": 257557017,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634226178
    },
    {
        "content": "<p>[slack] &lt;Roger Powell&gt; <code>(@v1.6) pkg&gt; st ModelingToolkit\n      Status `~/.julia/environments/v1.6/Project.toml`\n  [961ee093] ModelingToolkit v5.20.0</code><br>\nDid   <code>(@v1.6) pkg&gt; up ModelingToolkit</code> No change to the behaviour.  Still errors at the same place.</p>",
        "id": 257559747,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634227209
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; That’s very old version of MTK</p>",
        "id": 257561255,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634227769
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; <code>``(@v1.7) pkg&gt; st ModelingToolkit\n      Status </code>~/.julia/environments/v1.7/Project.toml<code>\n  [961ee093] ModelingToolkit v6.5.2 </code>~/src/julia/ModelingToolkit````</p>",
        "id": 257561259,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634227770
    },
    {
        "content": "<p>[slack] &lt;Roger Powell&gt; Oh!! Well that would explain a lot. I don't know why Julia is not pulling the latest version. I will switch to 1.7 and start over. Many thanks!</p>",
        "id": 257561798,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634227993
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; You don’t really need 1.7</p>",
        "id": 257564006,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634228878
    },
    {
        "content": "<p>[slack] &lt;Roger Powell&gt; <code>(@v1.7) pkg&gt; add https://github.com/SciML/ModelingToolkit.jl.git\n     Cloning git-repo `https://github.com/SciML/ModelingToolkit.jl.git`\n    Updating git-repo `https://github.com/SciML/ModelingToolkit.jl.git`\n   Resolving package versions...\nERROR: Unsatisfiable requirements detected for package MeshCatMechanisms [6ad125db]:</code><br>\nAs above, git cloned the latest (?) but ran into more probs. Perhaps my registry is in a mess. Thank you for your help @yingbo_ma I'll try to figure this out. It obviously is not the fault of MTK! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 257565443,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634229402
    },
    {
        "content": "<p>[slack] &lt;Roger Powell&gt; Or could it be my local (UK) server, from which I pull registry updates? Perhaps that's out of date.</p>",
        "id": 257565669,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634229495
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Don’t clone it. I just have it dev’ed for development purposes</p>",
        "id": 257565732,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634229525
    },
    {
        "content": "<p>[slack] &lt;Roger Powell&gt; OK, I'll dev it. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 257565789,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634229552
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; No, don’t dev it. Just <code>]add ModelingToolkit</code></p>",
        "id": 257566051,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634229664
    },
    {
        "content": "<p>[slack] &lt;Roger Powell&gt; Sorry, that's exactly what I did: <code>]add ModelingToolki</code>t but it only gave me <code>5.20.0</code> then I tried adding it directly from your gitlab, as above, to force it to give me the latest. Really, I'll manage. Not your problem -- have a great day!</p>",
        "id": 257566733,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634229941
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Try <code>]add ModelingToolkit@6.5</code> and see what it tell you</p>",
        "id": 257566908,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634230005
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Or, just make a fresh project/environment with only packages that you want for one project</p>",
        "id": 257566971,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634230031
    },
    {
        "content": "<p>[slack] &lt;Roger Powell&gt; I'm in a right mess at the moment.</p>",
        "id": 257567249,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634230152
    },
    {
        "content": "<p>[slack] &lt;Roger Powell&gt; <code>``add ModelingToolkit@6.5\n[ Info: Resolving package identifier </code>ModelingToolkit<code> as a directory at </code>~/.julia/dev/ModelingToolkit<code>.\nERROR: version specification invalid when tracking a repository: </code>6.5<code> specified for package </code>ModelingToolkit````</p>",
        "id": 257567265,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634230159
    },
    {
        "content": "<p>[slack] &lt;Roger Powell&gt; I have to go home. I'll figure it all out tomorrow!! Thanks!! I wish I could shake your hand!</p>",
        "id": 257567345,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634230200
    },
    {
        "content": "<p>[slack] &lt;Alexis&gt; Hello, I recently discovered that some discretized PDE have an unsymmetric block-arrowhead structure.<br>\nDo you already encountered a linear system like this ?<br>\nI would like to solve these structured systems with a new Krylov method.: <a href=\"https://files.slack.com/files-pri/T68168MUP-F02HUDLGXM0/download/arrowhead.png\">https://files.slack.com/files-pri/T68168MUP-F02HUDLGXM0/download/arrowhead.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02HUDLGXM0/download/arrowhead.png\"><img src=\"https://uploads.zulipusercontent.net/20b3bb3d9f82b0eb31d500cf18c407ecf3c244e9/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d4630324855444c47584d302f646f776e6c6f61642f6172726f77686561642e706e67\"></a></div>",
        "id": 257583002,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634236331
    },
    {
        "content": "<p>[slack] &lt;Alexis&gt; Hello, I recently discovered that some discretized PDE have an unsymmetric block-arrowhead structure.<br>\nDo you already encountered a linear system like this ?<br>\nIt seems to be related to a specific domain decomposition.<br>\nI would like to solve these structured systems with a new Krylov method.</p>",
        "id": 257583337,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634236465
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Nobody has gotten around to it</p>",
        "id": 257588841,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634238646
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @Roger Powell right now, compiling for 10mil equations will be hard but we are working on that this week</p>",
        "id": 257589074,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634238743
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I haven't seen that, but you can specialize the linear solver</p>",
        "id": 257589124,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634238774
    },
    {
        "content": "<p>[slack] &lt;Alexis&gt; Thanks Chris !</p>",
        "id": 257602034,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634243997
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; What mode has that many equations?</p>",
        "id": 257713653,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634310680
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; Has there been some significant-ish update to DiffEqJump lately? I used to solve a JumpProblem and get some behaviour (image 1). But when I solve it now, nothing happens at all (there are 8 jumps, one for each state, where each goes from 1 to 0, and that is it) (image 2).</p>\n<p>This is the code:</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>using Catalyst\nusing Plots\n\nrn = @reaction_network begin\n    kDeg,       (w,w2,w2v,v,w2v2,vP,σB,w2σB) ⟶ ∅\n    (kBw,kDw),  2w ⟷ w2\n    (kB1,kD1),  w2 + v ⟷ w2v\n    (kB2,kD2),  w2v + v ⟷ w2v2\n    kK1,        w2v ⟶ w2 + vP\n    kK2,        w2v2 ⟶ w2v + vP\n    (kB3,kD3),  w2 + σB ⟷ w2σB\n    (kB4,kD4),  w2σB + v ⟷ w2v + σB\n    kP,  vP ⟶ v\n    v0*((1+F*σB)/(K+σB)),     ∅ ⟶ σB\n    λW*v0*((1+F*σB)/(K+σB)),  ∅ ⟶ w\n    λV*v0*((1+F*σB)/(K+σB)),  ∅ ⟶ v\nend kBw kDw kD kB1 kB2 kB3 kB4 kD1 kD2 kD3 kD4 kK1 kK2 kP kDeg v0 F K λW λV;\n\nkBw = 3600; kDw = 18; kD = 18\nkB1 = 3600; kB2 = 3600; kB3 = 3600; kB4 = 1800;\nkD1 = 18; kD2 = 18; kD3 = 18; kD4 = 1800;\nkK1 = 36; kK2 = 12;\nkP = 3.6; kDeg = 0.7;\nv0 = 0.2; F = 1000; K = 0.2;\nλW = 4; λV = 4.5;\n\np_vals = [kBw, kDw, kD, kB1, kB2, kB3, kB4, kD1, kD2, kD3, kD4, kK1, kK2, kP, kDeg, v0, F, K, λW, λV]\n\ndprob = DiscreteProblem(rn, fill(1,8), (0.,20.), p_vals)\njprob = JumpProblem(rn, dprob, Direct())\nsol = solve(jprob,SSAStepper())\nplot(sol)```\nI have moved from\n```[479239e8] Catalyst v6.13.0\n[0c46a032] DifferentialEquations v6.17.1```\nto\n```  [479239e8] Catalyst v10.0.0\n  [0c46a032] DifferentialEquations v6.19.0```\nwith the solver giving weird output in the 2nd case.\n\nJust a simple\n```rn = @reaction_network begin\n    (p,d), 0 &amp;lt;--&amp;gt; X\nend p d\ndprob = DiscreteProblem(rn,[1],(-20,50.),[10.,0.1])\njprob = JumpProblem(rn,dprob,Direct())\nsol = solve(jprob,SSAStepper())\nplot(sol)```\nworks with the new version though, so it is not that `JumpProblem`s are failing totally.: https://files.slack.com/files-pri/T68168MUP-F02JMSX6PU0/download/image.png\n</code></pre></div>",
        "id": 257716270,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634311620
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; <a href=\"https://files.slack.com/files-pri/T68168MUP-F02JMT3M2QY/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F02JMT3M2QY/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02JMT3M2QY/download/image.png\"><img src=\"https://uploads.zulipusercontent.net/08b87c8651145f41d89e8080adef2ddcb397f589/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d4630324a4d54334d3251592f646f776e6c6f61642f696d6167652e706e67\"></a></div>",
        "id": 257716271,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634311621
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Catalyst 10 may have a different parameter ordering?</p>",
        "id": 257716520,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634311717
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; hmm</p>",
        "id": 257716568,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634311739
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; yeah, that sounds like a good guess</p>",
        "id": 257716583,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634311746
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Not sure why could you check <code>parameters(rn)</code></p>",
        "id": 257716635,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634311768
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Could be a bug with the recent DSL changes too. I’ll try to take a look later today.</p>",
        "id": 257716792,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634311817
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; Yes, this is the new order:<br>\n<code>[kDeg, kBw, kDw, kB1, kD1, kB2, kD2, kK1, kK2, kB3, kD3, kB4, kD4, kP, v0, F, K, λW, λV, kD]</code></p>",
        "id": 257716877,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634311851
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; that explains it</p>",
        "id": 257716887,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634311856
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; Thanks :)</p>",
        "id": 257716983,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634311895
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Yeah, sorry that changed, but that is one reason 10.0 is breaking (and it is in the release notes!).</p>",
        "id": 257716994,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634311900
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; yeah, should have paid better attention to what would have happened there</p>",
        "id": 257717199,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634311973
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Generally we want to move away from just giving numeric arrays with an assumed ordering, and to have users give mapping arrays or dicts. </p>\n<p>Maybe we should remove the ability to give a purely numeric array.</p>",
        "id": 257717203,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634311973
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; yeah</p>",
        "id": 257717268,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634312000
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; think there's so sense in that</p>",
        "id": 257717280,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634312005
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Going forward, changing parameter ordering internally is not going to be considered breaking I think. Too many transformations can alter them. I updated most of the docs to use mappings, but maybe this is significant enough to get an explicit point in the README too. :man-shrugging::skin-tone-2:</p>",
        "id": 257717557,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634312115
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; Wouldn't hurt, but I think as long as the docs just uses mappings then we should be fine</p>",
        "id": 257718037,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634312298
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; In the new docs, we generally give the parameters as:<br>\n<code>parameters(repressilator) .=&gt; p</code><br>\nhowever, in my previous example we couldn't guarantee that the parameters would be in the order as they were added at the end of the DSL. Wouldn't we have the same problem here? E.g. we would have to do<br>\n<code>(@parameters p1 p2 p3) .=&gt; [1.0, 2.0, 3.0]</code><br>\ndu be sure the order was right?</p>",
        "id": 257722472,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634313955
    },
    {
        "content": "<p>[slack] &lt;Roger Powell&gt; @yingbo_ma It's working now I have got version 6.52.  Slight glitch, where it errors with</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">StackOverflowError</span><span class=\"o\">:</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">recursive_unitless_bottom_eltype</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">::</span><span class=\"kt\">Type</span><span class=\"p\">{</span><span class=\"kt\">Any</span><span class=\"p\">})</span> <span class=\"p\">(</span><span class=\"n\">repeats</span> <span class=\"mi\">79984</span> <span class=\"n\">times</span><span class=\"p\">)</span>\n   <span class=\"err\">@</span> <span class=\"n\">RecursiveArrayTools</span> <span class=\"o\">~/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">RecursiveArrayTools</span><span class=\"o\">/</span><span class=\"n\">USU0j</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">96</span><span class=\"sb\">```</span>\n</code></pre></div>",
        "id": 257729665,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634316898
    },
    {
        "content": "<p>[slack] &lt;Roger Powell&gt; but I'm sure it's a local problem not yours. Have a nice weekend.</p>",
        "id": 257729806,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634316955
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Your u0 array isn't type stable</p>",
        "id": 257737711,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634320178
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; What’s <code>prob.u0</code> ?</p>",
        "id": 257737758,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634320200
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Yeah, this is a bit hairy currently as MT doesn't provide a nice way to just pull all the symbols into the current scope (at least not as far as I am aware). The ordering in the docs is right (I believe) as the parameter ordering returned by <code>parameters(sys)</code> is consistent with the order parameters appear in the DSL (prior to applying transformations to the system). But this does mean the docs have an implicit assumption on the parameter ordering. The simple way for users to handle this is to just look at the ordering in <code>parameters(sys)</code> but what we really need is a macro to pull all the syms into the current scope without a user having to type them.</p>",
        "id": 257738661,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634320563
    },
    {
        "content": "<p>[slack] &lt;sashmit&gt; I got the same error as Roger copy/pasting that example: <a href=\"https://mtk.sciml.ai/stable/tutorials/spring_mass/\">https://mtk.sciml.ai/stable/tutorials/spring_mass/</a></p>",
        "id": 257740999,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634321536
    },
    {
        "content": "<p>[slack] &lt;sashmit&gt; <a href=\"https://files.slack.com/files-pri/T68168MUP-F02HS8T7LLE/download/screen_shot_2021-10-15_at_2.11.18_pm.png\">https://files.slack.com/files-pri/T68168MUP-F02HS8T7LLE/download/screen_shot_2021-10-15_at_2.11.18_pm.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02HS8T7LLE/download/screen_shot_2021-10-15_at_2.11.18_pm.png\"><img src=\"https://uploads.zulipusercontent.net/786e300bf1007b431580bbe6f03edeb99e6523eb/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303248533854374c4c452f646f776e6c6f61642f73637265656e5f73686f745f323032312d31302d31355f61745f322e31312e31385f706d2e706e67\"></a></div>",
        "id": 257741027,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634321552
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @yingbo_ma are you on this one?</p>",
        "id": 257744542,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634322977
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Yes, looks like a bug</p>",
        "id": 257744573,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634322995
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I think the symbolic array u0 map handling</p>",
        "id": 257744632,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634323019
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Probably making an array of arrays</p>",
        "id": 257744652,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634323027
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Not quite, that’s the default propagation</p>",
        "id": 257744697,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634323055
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; <code>  mass₊v[1](t) [defaults to [0.0, 0.0][i]]</code><br>\njust should never happen</p>",
        "id": 257744732,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634323076
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Oh interesting</p>",
        "id": 257744795,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634323088
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; I think I understand, yes, such a macro seems useful at some point. We might throw in a note about it (but might sound a bit weird), but otherwise not worry too much until something like that is possible?</p>",
        "id": 257761165,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634330083
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; Also, is there a reason symbols can't be used in the mapping? (they can't, right?) In that case, maybe one could use mappings without having to introduce variables?</p>\n<p>(e.g. if I have parameter p1, it seems possible that I want a variable p1 with that value, then introducing fetching a p1 parameter from the macro might cause conflicts)</p>",
        "id": 257761413,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634330207
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Yeah, symbols aren’t supported by MT here. I’m not sure the reason for not allowing them.</p>",
        "id": 257791464,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634349730
    },
    {
        "content": "<p>[slack] &lt;termi-official&gt; Hi, I have worked quite some time on these kinds of systems (and still work on these). They encounter in discretizations and linearizations of Hodgkin-Huxley type systems and generally for many space-time problems in electrophysiology.</p>",
        "id": 257823839,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634383189
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; I've got a very large (sparse) jacobian for my ODE system, so I want to make sure I've done everything I can to speed up the (non)linear solving. I do have access to GPUs, so is using <code>LinSolveGPUFactorize</code> something I should do? What algorithm is best for a general large sparse matrix?</p>",
        "id": 257886520,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634444520
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; You specialized the differentiation already?</p>",
        "id": 257888397,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634446542
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; Yes, the automatic differentation is passed the sparsity and colorvec</p>",
        "id": 257888620,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634446800
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; There's no specific structure to the Jacobian, so passing the sparsity is the best I can do</p>",
        "id": 257888742,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634446855
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yeah then that and setting the GPU factorize might be it</p>",
        "id": 257891622,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634450071
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; Okay, so I did try GPU factorize, and it's trying to allocate a ridiculous amount of memory on the GPU (60 GB). I have upwards of 200k equations, so this makes me think it's not preserving the sparse matrix somewhere</p>",
        "id": 257891674,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634450162
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; Yes, particularly <code>cuify</code> is where the sparse type is lost</p>",
        "id": 257892358,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634450860
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; <a href=\"https://gist.github.com/superckl/675c6d5295b89f675361d49bd06dbdb0\">https://gist.github.com/superckl/675c6d5295b89f675361d49bd06dbdb0</a><br>\nIt's a doozy, but 1-11 is what's important</p>",
        "id": 257892576,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634451080
    },
    {
        "content": "<p>[slack] &lt;Alexis&gt; @Christopher Larsson Did you test an iterative method instead of a direct solver on GPU? They are less expensive in storage.</p>",
        "id": 257962878,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634518814
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; I have tried GMRES, and generally the solution becomes unstable</p>",
        "id": 257975773,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634531814
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; Is the sparse <code>lu</code> decomposition using SuiteSparse multithreaded? (Is there any performance gain to be had?)</p>",
        "id": 257981804,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634537534
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I believe it is</p>",
        "id": 257996355,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634547234
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you might need a preconditioner for that.</p>",
        "id": 257996419,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634547247
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; for anything very stiff, GMRES is unstable.</p>",
        "id": 257996438,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634547259
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Hi,</p>\n<p>My friend keeps getting the error on julia 1.5, how can it be resolved?</p>\n<p><code>ERROR: LoadError: LoadError: UndefVarError: alg_difftype not defined</code></p>",
        "id": 258003286,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634550902
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; use the latest OrdinaryDiffEq? Pullback StochasticDiffEq? Hard to tell without the <code>]st</code>, but OrdinaryDiffEq 5.64.1 should be fine.</p>",
        "id": 258007143,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634552910
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; (@v1.5) pkg&gt; st<br>\nStatus <code>~/.julia/environments/v1.5/Project.toml</code><br>\n  [0c46a032] DifferentialEquations v6.18.0</p>",
        "id": 258019569,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634559751
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I think the easiest answer is to just use v1.6. Since that's the LTS that will have long term support anyways <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 258019698,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634559825
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; But the other answer is to update OrdinaryDiffEq, or find out what package is bounding it.</p>",
        "id": 258019712,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634559837
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; thx</p>",
        "id": 258039883,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634568283
    },
    {
        "content": "<p>[gitter] &lt;willsharpless&gt; What is the proper way to set <code>autojacvec=EnzymeVJP</code>/use Enzyme in a sciml_train call?  Including it directly as a kwarg or as a kwarg of the kwarg <code>sensealg = ReverseDiffAdjoint(autojacvec=EnzymeVJP)</code> produce no method match error</p>",
        "id": 258080508,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634583285
    },
    {
        "content": "<p>[gitter] &lt;willsharpless&gt; ***    I used <code>autojacvec=EnzymeVJP()</code> with the '()' in both cases</p>",
        "id": 258080641,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634583344
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; ReverseDiffAdjoint doesn't have a VJP</p>",
        "id": 258080924,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634583448
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; QuadratureAdjoint(autojacvec=EnzymeVJP()) is a valid one for example</p>",
        "id": 258080955,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634583461
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; though application of Enzyme should be automatic these days, so IMO just using the default is usually a good idea.</p>",
        "id": 258081042,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634583483
    },
    {
        "content": "<p>[gitter] &lt;willsharpless&gt; Gotcha thx thx</p>",
        "id": 258081751,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634583725
    },
    {
        "content": "<p>[slack] &lt;Clare Singer&gt; I want to solve an ODE for steady-state and specify a tolerance for the termination criterion that is different from the tolerance for the adaptive time step. What is the proper syntax to do that? I couldn’t find this in the docs for Steady State Solvers <a href=\"https://diffeq.sciml.ai/stable/solvers/steady_state_solve/\">https://diffeq.sciml.ai/stable/solvers/steady_state_solve/</a>. Thanks!<br>\n<code>sol = solve(prob, DynamicSS(Rodas5(); abstol=0.0, reltol=1e-6, tspan=tspan), abstol=0.0, reltol=1e-3)</code></p>",
        "id": 258085992,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634585471
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>sol = solve(prob, DynamicSS(Rodas5()), abstol=0.0, reltol=1e-3)</code></p>",
        "id": 258087068,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634585919
    },
    {
        "content": "<p>[slack] &lt;Clare Singer&gt; Thanks Chris! So is this <code>reltol</code> specifying the termination condition? What controls the time step size?</p>",
        "id": 258089346,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634586906
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh oops, I forgot <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 258089769,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634587083
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; You were right</p>",
        "id": 258089770,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634587084
    },
    {
        "content": "<p>[slack] &lt;Alexis&gt; With <a href=\"https://github.com/search?q=CUDA.jl&amp;type=Repositories\">CUDA.jl</a>, two preconditioners can be used easily, ILU(0) and IC(0) factorizations.<br>\n<a href=\"https://juliasmoothoptimizers.github.io/Krylov.jl/dev/gpu/\">https://juliasmoothoptimizers.github.io/Krylov.jl/dev/gpu/</a></p>",
        "id": 258120045,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634601071
    },
    {
        "content": "<p>[slack] &lt;Miguel&gt; Hello, is it possible to solve a 1D PDE with a DirichletBC and a NeumannBC in each end? Using <code>DiffEqOperators</code> , it does not look like the interface accepts DirichletBC for a single point.</p>",
        "id": 258121443,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634602063
    },
    {
        "content": "<p>[slack] &lt;Miguel&gt; Also, it is possible to solve multivariable partial differential equations with the <code>OrdinaryDiffEq</code>  and <code>DiffEqOperators</code> machinery? I am interested in solving this specific PDE (solving for \\phi_1 and \\phi_2) in a 1D domain: <a href=\"https://files.slack.com/files-pri/T68168MUP-F02J9CXHR1A/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F02J9CXHR1A/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02J9CXHR1A/download/image.png\"><img src=\"https://uploads.zulipusercontent.net/8141e2ba4ce5652a5a5c7953e6bd54f1d7aacae2/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d4630324a394358485231412f646f776e6c6f61642f696d6167652e706e67\"></a></div>",
        "id": 258122935,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634603125
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes it does. Just use Robin per-end coefficients.</p>",
        "id": 258186475,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634646966
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes, just apply the discretizations to the equations.</p>",
        "id": 258186521,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634646998
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; similar to <a href=\"https://www.stochasticlifestyle.com/solving-systems-stochastic-pdes-using-gpus-julia/\">https://www.stochasticlifestyle.com/solving-systems-stochastic-pdes-using-gpus-julia/</a> but more automated.</p>",
        "id": 258186550,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634647013
    },
    {
        "content": "<p>[slack] &lt;wilwxk&gt; Just installed <a href=\"https://github.com/search?q=ApproxBayes.jl&amp;type=Repositories\">ApproxBayes.jl</a> and there was a huge downgrade from other packages, any chance for a update of the dependencies ?</p>",
        "id": 258190007,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634648506
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you'd have to PR to fix <a href=\"https://github.com/search?q=ApproxBayes.jl&amp;type=Repositories\">ApproxBayes.jl</a>. Seems like it hasn't had an update in awhile and that would make a lot of things pullback. It has upper bounds.</p>",
        "id": 258190385,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634648643
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/marcjwilliams1/ApproxBayes.jl/pulls\">https://github.com/marcjwilliams1/ApproxBayes.jl/pulls</a></p>",
        "id": 258190430,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634648664
    },
    {
        "content": "<p>[slack] &lt;Datseris&gt; Do Stiff solvers like Rodas5 not work with out-of-place (SVector) equation form?</p>",
        "id": 258191729,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634649193
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it does</p>",
        "id": 258191746,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634649202
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that's how it's all used in Pumas so it should be rather stable too</p>",
        "id": 258191765,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634649214
    },
    {
        "content": "<p>[slack] &lt;Miguel&gt; Thanks!</p>",
        "id": 258201586,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634652905
    },
    {
        "content": "<p>[slack] &lt;Miguel&gt; <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 258201615,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634652913
    },
    {
        "content": "<p>[slack] &lt;vaibhavdixit02&gt; Iirc ApproxBayes isn't maintained anymore</p>",
        "id": 258219684,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634658746
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; I noticed the internals of ordinary diff EQ seem to be allocating a lot of memory (&gt;2800 GiB) over the course of solving my problem. I have verified with benchmarking that this isn't coming from my methods, so is this normal for very large stiff problems? I'm using <code>TRBDF2</code> if that's relevant. I'm using in-place Jacobian and residual methods too.</p>",
        "id": 258223776,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634659982
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it only allocates once at the very start</p>",
        "id": 258226545,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634660896
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; how big is your jacobian and have you specialized the sparsity?</p>",
        "id": 258226575,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634660909
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; It's about 90,000x90,000, and yes, I have given it the exact sparsity pattern (confirmed with modeling toolkit)</p>",
        "id": 258228749,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634661678
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; I do the actual in-place computation of the Jacobian myself, if that matters, with SparseDiffTools (that's included in my benchmark and doesn't allocate)</p>",
        "id": 258229275,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634661851
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; interesting</p>",
        "id": 258230798,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634662324
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; if you cut it, where is it failing?</p>",
        "id": 258230811,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634662328
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; Sorry, what do you mean by cut it?</p>",
        "id": 258231466,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634662548
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; ctrl+c</p>",
        "id": 258233996,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634663169
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; You want me to just randomly cut it at some point then? It usually takes about 3 hours to run so I can cut it like 5 minutes in?</p>",
        "id": 258235438,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634663643
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah</p>",
        "id": 258235463,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634663650
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I assume that if it's allocating something huge that's taking all of its time, if you wait to get past the startup it should be cut in the big chunk with a very high probability</p>",
        "id": 258235526,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634663676
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's a very simple debugging trick to find out what piece is misbehaving without profiling</p>",
        "id": 258235593,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634663703
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; do it twice and if you hit the same line of code it's very clear</p>",
        "id": 258235618,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634663715
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; I see, will report back with what I find</p>",
        "id": 258235883,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634663814
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; It seems to always stop at <code>_loopfooter!</code> :<code>OrdinaryDiffEq C:\\Users\\super\\.julia\\packages\\OrdinaryDiffEq\\Zi9Zh\\src\\integrators\\integrator_utils.jl:225</code></p>",
        "id": 258246249,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634667311
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and the progress bar is on?</p>",
        "id": 258246520,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634667413
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what IDE?</p>",
        "id": 258246521,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634667414
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; VSCode</p>",
        "id": 258246595,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634667441
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; and yes</p>",
        "id": 258246607,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634667446
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what if it's off? Does that all disappear?</p>",
        "id": 258246778,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634667501
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that line of code is for the progress bar update</p>",
        "id": 258246803,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634667510
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; ah, okay let me check</p>",
        "id": 258246823,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634667521
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; it seems I am unable to interrupt in the integrated REPL anymore <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 258249791,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634668623
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; I tried in an regular terminal and got this: <a href=\"https://gist.github.com/superckl/8a91fdbf52c09ce1c626065974441ba5\">https://gist.github.com/superckl/8a91fdbf52c09ce1c626065974441ba5</a></p>",
        "id": 258249875,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634668654
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; that last line is my entry point from the terminal</p>",
        "id": 258249896,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634668664
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; because it's not allocating so it doesn't have a yield point?</p>",
        "id": 258249909,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634668669
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; put a <code>yield()</code> in your f and see</p>",
        "id": 258249921,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634668675
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; Yes, now it cuts out in my <code>f</code></p>",
        "id": 258250518,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634668921
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; Testing on a smaller problem (800 eqs), the total allocation reported in <code>solve</code> is around `10 GiB , whereas the allocation reported from all my functions (residual, jacobian, and callbacks) is only around 400 MiB (due to cache arrays)</p>",
        "id": 258252181,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634669577
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; I'm using dense output, but that doesn't account for anywhere near 10 GiB <span aria-label=\"oh no\" class=\"emoji emoji-1f615\" role=\"img\" title=\"oh no\">:oh_no:</span></p>",
        "id": 258252492,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634669709
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; If you want to see the benchmark: <a href=\"https://gist.github.com/superckl/ead4a4596ad57d8803c163d177ec6589\">https://gist.github.com/superckl/ead4a4596ad57d8803c163d177ec6589</a></p>\n<p>There's a lot there for my own checking, but basically <code>eval</code> is my residual function, <code>jacobian</code> is my jacobian function, and <code>wrapped_callback</code> are my continuous callbacks. There's some other stuff there which is just internals. The top level <code>solve</code> is the direct call to the <code>solve</code> function.</p>",
        "id": 258253162,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634669968
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; Really have no clue where that extra 10 gigs is coming from. It's definitely not all at once either since there's never more than ~40 megabytes change in memory usage from Julia</p>",
        "id": 258254480,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634670441
    },
    {
        "content": "<p>[slack] &lt;vchuravy&gt; <a href=\"https://files.slack.com/files-pri/T68168MUP-F02JQ05NBLZ/download/pxl_20211019_191259542.jpg\">https://files.slack.com/files-pri/T68168MUP-F02JQ05NBLZ/download/pxl_20211019_191259542.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02JQ05NBLZ/download/pxl_20211019_191259542.jpg\"><img src=\"https://uploads.zulipusercontent.net/b102b7f0fcd0137b076d8ec3149b0cf97ff8eb78/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d4630324a5130354e424c5a2f646f776e6c6f61642f70786c5f32303231313031395f3139313235393534322e6a7067\"></a></div>",
        "id": 258255430,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634670840
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; I tried with <code>QNDF</code> instead of <code>TRBDF2</code> , and the allocations seems to be roughly proportional to the number of calls to my <code>f</code> . I added that benchmark to the above gist</p>",
        "id": 258258359,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634672081
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; What does a profile show?</p>",
        "id": 258259085,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634672394
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; What should I be looking for? This is a bit complicated</p>",
        "id": 258261576,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634673431
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; <code>@profile</code> won't show me allocations, right?</p>",
        "id": 258262246,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634673691
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; I think this is relevant?: <a href=\"https://files.slack.com/files-pri/T68168MUP-F02J50J49PY/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F02J50J49PY/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02J50J49PY/download/image.png\"><img src=\"https://uploads.zulipusercontent.net/406aa10e6ac4242d73ec4f5097a61dab78c613a9/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d4630324a35304a343950592f646f776e6c6f61642f696d6167652e706e67\"></a></div>",
        "id": 258266864,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634675524
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; From what I gather, SuiteSparse is allocating? (I have no idea what I'm doing)</p>",
        "id": 258266907,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634675550
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @Christopher Larsson oh yes, SuiteSparse is missing <code>lu!</code></p>",
        "id": 258274206,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634678402
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/SciML/DiffEqBase.jl/blob/master/src/linear_nonlinear.jl#L122-L123\">https://github.com/SciML/DiffEqBase.jl/blob/master/src/linear_nonlinear.jl#L122-L123</a></p>",
        "id": 258274217,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634678403
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I don't know if that's fundamental</p>",
        "id": 258274241,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634678405
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but if you open a JuliaLang/julia issue (and ping me?), we can find out.</p>",
        "id": 258274276,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634678417
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @yingbo_ma don't we cache the symbolic analysis?</p>",
        "id": 258274339,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634678445
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it looks like it keeps being computed</p>",
        "id": 258274348,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634678450
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; sure, I can do that, but it also seems like <code>ldiv!</code> is allocating?</p>",
        "id": 258274357,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634678455
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah... it also looks like <code>ldiv!</code> is spending all of its time allocation <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 258274620,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634678559
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; wtf.</p>",
        "id": 258274626,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634678561
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah, this looks like a Base issue to me</p>",
        "id": 258274643,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634678567
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; I'll see if I can reproduce this behavior on a smaller example and open an issue</p>",
        "id": 258275042,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634678759
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; @chrisrackauckas I believe it's a fundamental issue with <code>lu!</code>, since the LU decomp of a sparse matrix generally does not have the same sparsity pattern. Still looking into the <code>ldiv!</code> though</p>",
        "id": 258284300,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634683364
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; You might want to use a Krylov method at that size</p>",
        "id": 258284540,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634683488
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; There should be some caching of the symbolic factorization though.</p>",
        "id": 258284546,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634683490
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; would that be <code>GMRES</code>? That's unstable for my problem unfortunately</p>",
        "id": 258284787,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634683624
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; try the CVODE(linear_solver=:GMRES)? There are still cases where that is a bit better</p>",
        "id": 258284831,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634683660
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; hrmm, getting an error relating to callbacks using that</p>",
        "id": 258285944,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634684329
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; <code>ERROR: ArgumentError: range step cannot be zero\nStacktrace:\n  [1] (::Colon)(start::Float64, step::Float64, stop::Float64)\n    @ Base .\\twiceprecision.jl:387\n  [2] determine_event_occurance\n    @ C:\\Users\\super\\.julia\\packages\\DiffEqBase\\OPDgm\\src\\callbacks.jl:497 [inlined]</code></p>",
        "id": 258285958,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634684338
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Odd. I'll need an issue for that</p>",
        "id": 258288288,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634685530
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; I'll add it to the list haha. Though, I don't think the <code>lu</code> allocation is the main concern for me here since it's only called ~800 times. The bigger issue is why <code>ldiv!</code> is allocating <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 258288901,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634685892
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; Here's the example I'm going to use: <a href=\"https://gist.github.com/superckl/ecd4eb03cf2b44587f77d3757b7d3871\">https://gist.github.com/superckl/ecd4eb03cf2b44587f77d3757b7d3871</a></p>\n<p>If anyone can explain this behavior before I submit an issue...</p>",
        "id": 258289773,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634686521
    },
    {
        "content": "<p>[slack] &lt;vchuravy&gt; <a href=\"https://files.slack.com/files-pri/T68168MUP-F02K28CPC64/download/pxl_20211019_191259542.jpg\">https://files.slack.com/files-pri/T68168MUP-F02K28CPC64/download/pxl_20211019_191259542.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02K28CPC64/download/pxl_20211019_191259542.jpg\"><img src=\"https://uploads.zulipusercontent.net/1a427b4617d3d9b2b3164f77006f0ae2a3a9dd8c/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d4630324b323843504336342f646f776e6c6f61642f70786c5f32303231313031395f3139313235393534322e6a7067\"></a></div>",
        "id": 258300389,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634694557
    },
    {
        "content": "<p>[slack] &lt;hexaeder&gt; I have a DAE system which gets thrown of its constraint manifold during a callback. To my supprise, the reaction of the system really depends on the <code>dtmax</code> solverarg (Rodas4), it seems like adaptive timestepping misjudges this situation. Is this MWE+issue worthy or is it a known limitation of the method?: <a href=\"https://files.slack.com/files-pri/T68168MUP-F02HYLSA01M/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F02HYLSA01M/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02HYLSA01M/download/image.png\"><img src=\"https://uploads.zulipusercontent.net/5e00c5c9d600051ddbfa2c5125ad53cd83ddca5e/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303248594c534130314d2f646f776e6c6f61642f696d6167652e706e67\"></a></div>",
        "id": 258325743,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634715875
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Initialization needs to be reran which it doesn't right now</p>",
        "id": 258334289,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634720400
    },
    {
        "content": "<p>[slack] &lt;hexaeder&gt; initialization of the adaptive timestepping? Will <code>auto_dt_reset!(integrator)</code> inside the callback will help with that?</p>",
        "id": 258337201,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634721872
    },
    {
        "content": "<p>[slack] &lt;hexaeder&gt; well, it doesn’t…. Anything a can do about that on the user side?</p>",
        "id": 258338876,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634722767
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; no, <code>DiffEqBase.initialize_dae!(integrator)</code> at the end of the callback</p>",
        "id": 258340699,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634723686
    },
    {
        "content": "<p>[slack] &lt;hexaeder&gt; i thought this would happen automaticially since the callback assumes allways that <code>u</code> was modified?</p>\n<p>But even with the dae reinit the adaptive timestep is still off. It works if i do</p>\n<div class=\"codehilite\" data-code-language=\"auto_dt_reset\"><pre><span></span><code>set_proposed_dt!(integrator, integrator.dt)```\nwhich is a bit weird…\n</code></pre></div>",
        "id": 258341225,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634723982
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what do you mean the adaptive timestep is off?</p>",
        "id": 258341668,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634724180
    },
    {
        "content": "<p>[slack] &lt;hexaeder&gt; My system gets pertubated from a fixpoint. I.e. before the callback the dt is pretty high. During the callback I need to reset the auto dt</p>",
        "id": 258341868,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634724272
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; ahh yeah, maybe it should do a dt-reset if initialize is required.</p>",
        "id": 258341978,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634724318
    },
    {
        "content": "<p>[slack] &lt;hexaeder&gt; yeah but <code>auto_dt_reset!</code> does not seem to be enougth since it does not use <code>set_proposed_dt!</code> and just sets <code>integrator.dt</code></p>",
        "id": 258342106,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634724372
    },
    {
        "content": "<p>[slack] &lt;hexaeder&gt; I think <code>initialize_dae!</code> is allready called if <code>u</code> is changed, which is assumend in a callback. But this ist just a guess from this loc <a href=\"https://github.com/SciML/OrdinaryDiffEq.jl/blob/10324a1a052d132fa88202aa89fbca1508aa0366/src/integrators/integrator_interface.jl#L41\">https://github.com/SciML/OrdinaryDiffEq.jl/blob/10324a1a052d132fa88202aa89fbca1508aa0366/src/integrators/integrator_interface.jl#L41</a></p>",
        "id": 258342221,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634724441
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; okay yeah that looks right</p>",
        "id": 258342343,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634724489
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it doesn't automatically change your dt though, since in general there's no clear way it should \"always\" be done.</p>",
        "id": 258342373,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634724508
    },
    {
        "content": "<p>[slack] &lt;hexaeder&gt; <a href=\"https://github.com/SciML/OrdinaryDiffEq.jl/blob/10324a1a052d132fa88202aa89fbca1508aa0366/src/integrators/integrator_interface.jl#L329\">https://github.com/SciML/OrdinaryDiffEq.jl/blob/10324a1a052d132fa88202aa89fbca1508aa0366/src/integrators/integrator_interface.jl#L329</a></p>\n<p>but shouldn’t <code>auto_dt_reset!</code> <del>set <code>integrator.dtpropose</code></del>use <code>set_proposed_dt!</code> instead of setting <code>integrator.dt</code> so the reset timestep will be actually used?</p>",
        "id": 258342597,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634724609
    },
    {
        "content": "<p>[slack] &lt;hexaeder&gt; than i could just use <code>auto_dt_reset!</code> inside my callback</p>",
        "id": 258342628,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634724624
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah it probably should</p>",
        "id": 258342803,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634724722
    },
    {
        "content": "<p>[slack] &lt;hexaeder&gt; okay thanks chris! I’ll propose this in a PR, lets see if there are any objections to it 🙂</p>",
        "id": 258342993,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634724832
    },
    {
        "content": "<p>[slack] &lt;Ian McInerney&gt; Which book?</p>",
        "id": 258371208,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634738058
    },
    {
        "content": "<p>[slack] &lt;AlCap23&gt; Is this intended use of <code>sort</code> here? <a href=\"https://github.com/SciML/DiffEqSensitivity.jl/blob/9da3a808229173ccc73c7237d1b051ef9bb3e0de/src/concrete_solve.jl#L196\">https://github.com/SciML/DiffEqSensitivity.jl/blob/9da3a808229173ccc73c7237d1b051ef9bb3e0de/src/concrete_solve.jl#L196</a></p>\n<p>I accidentally tried to solve at a 1xn array and got the following error:</p>\n<div class=\"codehilite\" data-code-language=\"error\"><pre><span></span><code>Stacktrace:\n  [1] sort(A::Matrix{Float64})\n    @ Base.Sort ./sort.jl:1029\n  [2] _concrete_solve_adjoint(::ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float32}, ODEFunction{true, typeof(f_), UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SciMLBase.StandardODEProblem}, ::Tsit5{typeof(OrdinaryDiffEq.trivial_limiter!), typeof(OrdinaryDiffEq.trivial_limiter!)}, ::InterpolatingAdjoint{0, true, Val{:central}, ReverseDiffVJP{false}, Bool}, ::Vector{Float64}, ::Vector{Float32}; save_start::Bool, save_end::Bool, saveat::Matrix{Float64}, save_idxs::Nothing, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n    @ DiffEqSensitivity ~/.julia/packages/DiffEqSensitivity/ItIGE/src/concrete_solve.jl:196\n  [3] _concrete_solve_adjoint(::ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float32}, ODEFunction{true, typeof(f_), UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SciMLBase.StandardODEProblem}, ::Tsit5{typeof(OrdinaryDiffEq.trivial_limiter!), typeof(OrdinaryDiffEq.trivial_limiter!)}, ::Nothing, ::Vector{Float64}, ::Vector{Float32}; kwargs::Base.Iterators.Pairs{Symbol, Matrix{Float64}, Tuple{Symbol}, NamedTuple{(:saveat,), Tuple{Matrix{Float64}}}})\n    @ DiffEqSensitivity ~/.julia/packages/DiffEqSensitivity/ItIGE/src/concrete_solve.jl:66\n  [4] #_solve_adjoint#61\n    @ ~/.julia/packages/DiffEqBase/FtYIB/src/solve.jl:347 [inlined]\n  [5] #rrule#59```\n</code></pre></div>",
        "id": 258381204,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634741338
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; how could saveat be a matrix?</p>",
        "id": 258401193,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634748262
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; We should just error on that earlier.</p>",
        "id": 258401198,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634748265
    },
    {
        "content": "<p>[slack] &lt;Miguel&gt; Hello, does anybody know how to take gradients of a system with a DAEProblem? I have written more details in this question: <a href=\"https://discourse.julialang.org/t/daeproblem-and-gradients/70121\">https://discourse.julialang.org/t/daeproblem-and-gradients/70121</a></p>",
        "id": 258551453,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634825266
    },
    {
        "content": "<p>[slack] &lt;George Gkountouras&gt; Watching this space, as I also asked a while back. <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 258552398,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634825619
    },
    {
        "content": "<p>[slack] &lt;Miguel&gt; I think DiffEqOperators and AD tools don't play well together yet: <a href=\"https://github.com/SciML/DiffEqOperators.jl/issues/333\">https://github.com/SciML/DiffEqOperators.jl/issues/333</a></p>",
        "id": 258553473,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634825997
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; ReverseDiffAdjoint on the pure Julia methods is fine, and this issue is not related to that but to differentiation of DiffEqOperators</p>",
        "id": 258553482,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634825999
    },
    {
        "content": "<p>[slack] &lt;Chaitanya&gt; While solving the heat Equation using <a href=\"https://github.com/search?q=DiffEqOperators.jl&amp;type=Repositories\">DiffEqOperators.jl</a> at stepsize &lt; 0.005; the u_predict is not capturing the entire dataset. Instead, I am only getting 1single  point at time 0.0<br>\nWhy is this happening? What are the limitations of GridTraining Strategy, can't we go below 0.005?</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>using DifferentialEquations\nusing DiffEqOperators\nusing DomainSets\nusing OrdinaryDiffEq\n\n@parameters t,x\n@variables u(..);\n\nDx = Differential(x);\nDt = Differential(t);\nDxx = Differential(x).^2;\neqn = [Dt(u(t,x)) ~ Dxx(u(t,x))];\nbcs = [u(0,x) ~ cos(x),\n        u(t,0) ~ exp(-t),\n        u(t,1) ~ exp(-t)* cos(1)];\n\ndomains = [x ∈ Interval(0.0,1.0),\n           t ∈ Interval(0.0,1.0)];```\n```indvars = [t,x];\ndepvars = [u(t,x)];\n@named pdesys = PDESystem(eqn,bcs,domains,indvars, depvars)\n\ndx = 0.003;\ndiscretization = MOLFiniteDifference([x =&gt; dx],t)\n\n## \"\"\" Converting PDE problem into ODE problem \"\"\";\nprob = discretize(pdesys,discretization)\n\n# \"\"\" Now we solve the ode problem using Differential Equations library\"\"\";\nsol = solve(prob,Vern9(),saveat = dx)\n\nTspan = sol.t\nresults = sol.u```\nEven using the Vern9 instead of Tsit5() couldn't make any difference.\n</code></pre></div>",
        "id": 258575068,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634833234
    },
    {
        "content": "<p>[slack] &lt;wilwxk&gt; ModelingToolkit rejects it because of derivatives in both sides, is there anything to deal with this type of redundancy automatically ?: <a href=\"https://files.slack.com/files-pri/T68168MUP-F02K1662JAV/download/screenshot_20211021_193910.png\">https://files.slack.com/files-pri/T68168MUP-F02K1662JAV/download/screenshot_20211021_193910.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02K1662JAV/download/screenshot_20211021_193910.png\"><img src=\"https://uploads.zulipusercontent.net/fd6d8b184ae4096cf21118219e2a1682596a34ee/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d4630324b313636324a41562f646f776e6c6f61642f73637265656e73686f745f32303231313032315f3139333931302e706e67\"></a></div>",
        "id": 258628809,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634856122
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; not yet</p>",
        "id": 258628886,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634856166
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; a future update will handle it</p>",
        "id": 258628888,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634856170
    },
    {
        "content": "<p>[slack] &lt;wilwxk&gt; where can I track it ?</p>",
        "id": 258628951,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634856221
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; not sure</p>",
        "id": 258629061,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634856268
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it would be the follow up to <a href=\"https://github.com/SciML/ModelingToolkit.jl/pull/1164\">https://github.com/SciML/ModelingToolkit.jl/pull/1164</a></p>",
        "id": 258629068,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634856272
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but it hasn't been written yet.</p>",
        "id": 258629073,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634856275
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; @chrisrackauckas so I opened <a href=\"https://github.com/JuliaLang/SuiteSparse.jl/issues/48\">https://github.com/JuliaLang/SuiteSparse.jl/issues/48</a> about the allocations inside <code>ldiv!</code>. Turns out it's actually inside SuiteSparse because it needs some workspace arrays. To avoid the allocations, they have to be pre-allocated before calling SuiteSparse. Until this is available in the standard library, I managed to get a workaround working by calling into <code>SuiteSparse</code>  myself from a <a href=\"https://gist.github.com/superckl/41d4daa294be03cc7f59f5cdca010d40\">https://gist.github.com/superckl/41d4daa294be03cc7f59f5cdca010d40</a>. The allocations are now mainly from the LU factorization which is unavoidable for sparse matrices (enter incomplete LU factorization).</p>",
        "id": 258646256,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634867782
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; Just finished a test run and doing this has cut an hour off what used to be a three hour simulation <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 258672619,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634886898
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Really interesting analysis… I will check if this applies to me too, I mean for the tutorials of my library <a href=\"https://github.com/search?q=BifurcationKit.jl&amp;type=Repositories\">BifurcationKit.jl</a>.</p>\n<p>Indeed, I have an implementation of the Langmuir problem and it is not that fast. Same for the <a href=\"https://rveltz.github.io/BifurcationKit.jl/dev/tutorials/tutorialsPD/#Period-doubling-in-the-Barrio-Varea-Aragon-Maini-model\">https://rveltz.github.io/BifurcationKit.jl/dev/tutorials/tutorialsPD/#Period-doubling-in-the-Barrio-Varea-Aragon-Maini-model</a> model.</p>\n<p>Thank you</p>",
        "id": 258680245,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634891863
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @Christopher Larsson awesome! Can this be added to the default linear solver when sparsity is seen?</p>",
        "id": 258688389,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634896360
    },
    {
        "content": "<p>[slack] &lt;lindnemi&gt; I have a DDE on a network (100 nodes, 200 links). Ultimately, every link should have a different lag time, hence i set the function up in such a way that the history function for a single variable <code>h(args...; idxs=i)</code>  gets called 200 times.</p>\n<p>To test the performance of this approach i set up the system with all lags identical.  In this case, solving the version with <code>h(args...; idxs=i)</code>  takes  roughly 10x longer than calling only once <code>h(out,p,t)</code>  to get all history values. Interestingly, for a direct call to <code>f</code> there is no large difference, only for the solver.</p>\n<p>I am wondering if there are ways to speed up the history function for such systems, since ultimately i want to have 50.000 links with different lags. For example would it be possible to call <code>h</code> with a vector of <code>tau</code> where each index holds a different lag?</p>\n<p>Along  the same lines: I noticed that i have to leave the lags undeclared for the system to solve at all. If I declare 200 different <code>constant_lags</code> the system takes ages to solve. Is that expected behaviour?</p>",
        "id": 258695347,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634900361
    },
    {
        "content": "<p>[slack] &lt;devmotion&gt; There's already an issue regarding evaluation with multiple time points: <a href=\"https://github.com/SciML/DelayDiffEq.jl/issues/215\">https://github.com/SciML/DelayDiffEq.jl/issues/215</a> I completely forgot it over the summer but try to have a look within the next week. Otherwise ping me <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> There's also some other performance issue (<a href=\"https://github.com/SciML/DelayDiffEq.jl/issues/218\">https://github.com/SciML/DelayDiffEq.jl/issues/218</a>) that might need a bugfix of the Julia compiler.</p>",
        "id": 258699156,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634902757
    },
    {
        "content": "<p>[slack] &lt;lindnemi&gt; Thank you! <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>\n<p>I already came across the second issue, but was hoping it doesn't apply <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>. But now that I think of it again I remember seeing a similar explosion in allocations sometimes.</p>",
        "id": 258717757,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634912154
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; I suppose it could, though I think just waiting to see if this gets added to the stlib is probably better.</p>",
        "id": 258794678,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1634951161
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; I see a comment here about implementing a non-uniform grid for <code>UpwindDifference</code>. As far as I can tell though, it looks like it should work for a nonuniform grid? Is this just a vestigial comment?<br>\n<a href=\"https://github.com/SciML/DiffEqOperators.jl/blob/master/src/derivative_operators/derivative_operator.jl#L233\">https://github.com/SciML/DiffEqOperators.jl/blob/master/src/derivative_operators/derivative_operator.jl#L233</a></p>",
        "id": 258897236,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635108031
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah that should be working. It's tested too IIRC</p>",
        "id": 258945343,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635161081
    },
    {
        "content": "<p>[slack] &lt;Refaat Yakoub&gt; is it possible to use the IDA() solver within MTK?</p>",
        "id": 258977826,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635176477
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes, just use the DAEProblem constructor</p>",
        "id": 258980727,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635177686
    },
    {
        "content": "<p>[slack] &lt;avikpal&gt; Any way to disable printing:<br>\n<code>┌ Warning: Interrupted. Larger maxiters is needed.\n└ @ SciMLBase ~/.julia/packages/SciMLBase/h4Gxc/src/integrator_interface.jl:331</code></p>",
        "id": 259011871,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635191915
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; verbose=false</p>",
        "id": 259013143,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635192417
    },
    {
        "content": "<p>[slack] &lt;Refaat Yakoub&gt; Thanks. Is it possible to define the equation vector based on matrix operation? i.e. eqn .~ A .op V? Also does MTK solve for consistent initial condition prior to integration or do IO have to define a NonlinearProbelm first?</p>",
        "id": 259092236,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635253311
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yes that should work fine and is shown in the basic tutorials</p>",
        "id": 259143092,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635274099
    },
    {
        "content": "<p>[slack] &lt;Johannes Boehm&gt; Hello, is it possible to solve an ODE problem with the ‘initial’ value somewhere in the interior of the interval where i’d like to solve? Say, you’d like to solve y’ = f(y,t) on [t0,t1], but you know y(t2) where t2 is in (t0,t1). I may be wrong (my college course on diffeq’s was a while ago...) but it seems one could solve this ‘forward’ on [t2,t1] and ‘backward’ on [t0,t2]. Can this be done ‘out of the box’?</p>",
        "id": 259152741,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635278399
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; see the boundary value problem solvers</p>",
        "id": 259160881,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635282159
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; or yeah, solve in both directions from t1 is probably a better way to do it</p>",
        "id": 259160973,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635282182
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it won't do that out of the box./</p>",
        "id": 259161004,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635282186
    },
    {
        "content": "<p>[slack] &lt;Johannes Boehm&gt; Thanks a lot for the quick response.</p>",
        "id": 259162297,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635282791
    },
    {
        "content": "<p>[slack] &lt;verma.shwetank22&gt; I was using DiffEqFlux.BBO() in sciml_train for parameter estimation before. I went back to it again and now it's throwing error that BBO is not defined. This code was working fine some weeks ago. Did something changed recently?</p>",
        "id": 259193116,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635310410
    },
    {
        "content": "<p>[slack] &lt;vaibhavdixit02&gt; Yeah, <a href=\"https://galacticoptim.sciml.ai/stable/optimization_packages/blackboxoptim/\">https://galacticoptim.sciml.ai/stable/optimization_packages/blackboxoptim/</a> now you need to pass the complete algorithm with <code>BBO_</code> prefix</p>",
        "id": 259193572,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635310889
    },
    {
        "content": "<p>[slack] &lt;verma.shwetank22&gt; Thanks!</p>",
        "id": 259193906,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635311327
    },
    {
        "content": "<p>[slack] &lt;Qiyao Wei&gt; Anyone seen the error? I suspect that this is because I defined a VecJacOperator in order to calculate the norm of the jacobian with mul!(), but I'm not sure how to resolve this error<br>\n<code>ERROR: LoadError: UndefVarError: DiffEqBase not defined</code></p>",
        "id": 259347167,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635404256
    },
    {
        "content": "<p>[slack] &lt;Qiyao Wei&gt; ```ERROR: LoadError: UndefVarError: DiffEqBase not defined<br>\nStacktrace:<br>\n  [1] Array<br>\n    @ ./boot.jl:448 [inlined]<br>\n  [2] Array<br>\n    @ ./boot.jl:467 [inlined]<br>\n  [3] _pullback(::Zygote.Context, ::SparseDiffTools.var\"##num_vecjac!#62\", ::Bool, ::typeof(SparseDiffTools.num_vecjac!), ::Vector{Float64}, ::DiffEqOperators.var\"<a href=\"https://github.com/JuliaLang/julia/issues/432\">#432</a>#440\"{VecJacOperator{Float64, Chain{Tuple{Dense{typeof(tanh), CuArray{Float32, 2, CUDA.Mem.DeviceBuffer}, CuArray{Float32, 1, CUDA.Mem.DeviceBuffer}}, Dense{typeof(identity), CuArray{Float32, 2, CUDA.Mem.DeviceBuffer}, CuArray{Float32, 1, CUDA.Mem.DeviceBuffer}}}}, Vector{Float64}, Vector{Float64}, Vector{Float64}, CuArray{Float32, 2, CUDA.Mem.DeviceBuffer}, Any, Bool}, CuArray{Float32, 2, CUDA.Mem.DeviceBuffer}, Nothing}, ::Vector{Float64}, ::Vector{Float64}, ::Vector{Float64}, ::Vector{Float64})<br>\n    @ Zygote ~/.julia/packages/Zygote/rv6db/src/compiler/interface2.jl:0<br>\n  [4] _pullback<br>\n    @ ~/.julia/packages/SparseDiffTools/qKAp4/src/differentiation/vecjac_products.jl:11 [inlined]<br>\n  [5] _pullback(::Zygote.Context, ::SparseDiffTools.var\"#num_vecjac!##kw\", ::NamedTuple{(:compute_f0,), Tuple{Bool}}, ::typeof(SparseDiffTools.num_vecjac!), ::Vector{Float64}, ::DiffEqOperators.var\"<a href=\"https://github.com/JuliaLang/julia/issues/432\">#432</a>#440\"{VecJacOperator{Float64, Chain{Tuple{Dense{typeof(tanh), CuArray{Float32, 2, CUDA.Mem.DeviceBuffer}, CuArray{Float32, 1, CUDA.Mem.DeviceBuffer}}, Dense{typeof(identity), CuArray{Float32, 2, CUDA.Mem.DeviceBuffer}, CuArray{Float32, 1, CUDA.Mem.DeviceBuffer}}}}, Vector{Float64}, Vector{Float64}, Vector{Float64}, CuArray{Float32, 2, CUDA.Mem.DeviceBuffer}, Any, Bool}, CuArray{Float32, 2, CUDA.Mem.DeviceBuffer}, Nothing}, ::Vector{Float64}, ::Vector{Float64}, ::Vector{Float64}, ::Vector{Float64})<br>\n    @ Zygote ~/.julia/packages/Zygote/rv6db/src/compiler/interface2.jl:0<br>\n  [6] _pullback<br>\n    @ ~/.julia/packages/DiffEqOperators/lqggZ/src/vecjac_operators.jl:175 [inlined]<br>\n  [7] _pullback(::Zygote.Context, ::typeof(mul!), ::Vector{Float64}, ::VecJacOperator{Float64, Chain{Tuple{Dense{typeof(tanh), CuArray{Float32, 2, CUDA.Mem.DeviceBuffer}, CuArray{Float32, 1, CUDA.Mem.DeviceBuffer}}, Dense{typeof(identity), CuArray{Float32, 2, CUDA.Mem.DeviceBuffer}, CuArray{Float32, 1, CUDA.Mem.DeviceBuffer}}}}, Vector{Float64}, Vector{Float64}, Vector{Float64}, CuArray{Float32, 2, CUDA.Mem.DeviceBuffer}, Any, Bool}, ::Vector{Float64})<br>\n    @ Zygote ~/.julia/packages/Zygote/rv6db/src/compiler/interface2.jl:0<br>\n  [8] _pullback<br>\n    @ /workspace/julia/test_mnist.jl:67 [inlined]<br>\n  [9] _pullback(::Zygote.Context, ::DeepEquilibriumNetwork{Chain{Tuple{Dense{typeof(tanh), CuArray{Float32, 2, CUDA.Mem.DeviceBuffer}, CuArray{Float32, 1, CUDA.Mem.DeviceBuffer}}, Dense{typeof(identity), CuArray{Float32, 2, CUDA.Mem.DeviceBuffer}, CuArray{Float32, 1, CUDA.Mem.DeviceBuffer}}}}, CuArray{Float32, 1, CUDA.Mem.DeviceBuffer}, Flux.var\"<a href=\"https://github.com/JuliaLang/julia/issues/60\">#60</a>#62\"{Chain{Tuple{Dense{typeof(tanh), Matrix{Float32}, Vector{Float32}}, Dense{typeof(identity), Matrix{Float32}, Vector{Float32}}}}}, Tuple{DynamicSS{Tsit5{typeof(OrdinaryDiffEq.trivial_limiter!), typeof(OrdinaryDiffEq.trivial_limiter!), Static.False}, Float32, Float32, Float64}}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, ::CuArray{Float32, 2, CUDA.Mem.DeviceBuffer}, ::CuArray{Float32, 1, CUDA.Mem.DeviceBuffer})<br>\n    @ Zygote ~/.julia/packages/Zygote/rv6db/src/compiler/interface2.jl:0<br>\n [10] _pullback<br>\n    @ /workspace/julia/test_mnist.jl:49 [inlined]<br>\n [11] _pullback(ctx::Zygote.Context, f::DeepEquilibriumNetwork{Chain{Tuple{Dense{typeof(tanh), CuArray{Float32, 2, CUDA.Mem.DeviceBuffer}, CuArray{Float32, 1, CUDA.Mem.DeviceBuffer}}, Dense{typeof(identity), CuArray{Float32, 2, CUDA.Mem.DeviceBuffer}, CuArray{Float32, 1, CUDA.Mem.DeviceBuffer}}}}, CuArray{Float32, 1, CUDA.Mem.DeviceBuffer}, Flux.var\"<a href=\"https://github.com/JuliaLang/julia/issues/60\">#60</a>#62\"{Chain{Tuple{Dense{typeof(tanh), Matrix{Float32}, Vector{Float32}}, Dense{typeof(identity), Matrix{Float32}, Vector{Float32}}}}}, Tuple{DynamicSS{Tsit5{typeof(OrdinaryDiffEq.trivial_limiter!), typeof(OrdinaryDiffEq.trivial_limiter!), Static.False}, Float32, Float32, Float64}}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, args::CuArray{Float32, 2, CUDA.Mem.DeviceBuffer})<br>\n    @ Zygote ~/.julia/packages/Zygote/rv6db/src/compiler/interface2.jl:0<br>\n [12] _pullback<br>\n    @ ~/.julia/packages/Flux/ZnXxS/src/layers/basic.jl:47 [inlined]<br>\n [13] _pullback(::Zygote.Context, ::typeof(Flux.applychain), ::Tuple{DeepEquilibriumNetwork{Chain{Tuple{Dense{typeof(tanh), CuArray{Float32, 2, CUDA.Mem.DeviceBuffer}, CuArray{Float32, 1, CUDA.Mem.DeviceBuffer}}, Dense{typeof(identity), CuArray{Float32, 2, CUDA.Mem.DeviceBuffer}, CuArray{Float32, 1, CUDA.Mem.DeviceBuffer}}}}, CuArray{Float32, 1, CUDA.Mem.DeviceBuffer}, Flux.var\"<a href=\"https://github.com/JuliaLang/julia/issues/60\">#60</a>#62\"{Chain{Tuple{Dense{typeof(tanh), Matrix{Float32}, Vector{Float32}}, Dense{typeof(identity), Matrix{Float32}, Vector{Float32}}}}}, Tuple{DynamicSS{Tsit5{typeof(OrdinaryDiffEq.trivial_limiter!), typeof(OrdinaryDiffEq.trivial_limiter!), Static.False}, Float32, Float32, Float64}}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}, ::CuArray{Float32, 2, CUDA.Mem.DeviceBuffer})<br>\n    @ Zygote ~/.julia/packages/Zygote/rv6db/src/compiler/interface2.jl:0<br>\n [14] _pullback<br>\n    @ ~/.julia/packages/Flux/ZnXxS/src/layers/basic.jl:47 [inlined]<br>\n [15] _pullback(::Zygote.Context, ::typeof(Flux.applychain), ::Tuple{Dense{typeof(identity), CuArray{Float32, 2, CUDA.Mem.DeviceBuffer}, CuArray{Float32, 1, CUDA.Mem.DeviceBuffer}}, DeepEquilibriumNetwork{Chain{Tuple{Dense{typeof(tanh), CuArray{Float32, 2, CUDA.Mem.DeviceBuffer}, CuArray{Float32, 1, CUDA.Mem.DeviceBuffer}}, Dense{typeof(identity), CuArray{Float32, 2, CUDA.Mem.DeviceBuffer}, CuArray{Float32, 1, CUDA.Mem.DeviceBuffer}}}}, CuArray{Float32, 1, CUDA.Mem.DeviceBuffer}, Flux.var\"<a href=\"https://github.com/JuliaLang/julia/issues/60\">#60</a>#62\"{Chain{Tuple{Dense{typeof(tanh), Matrix{Float32}, Vector{Float32}}, Dense{typeof(identity), Matrix{Float32}, Vector{Float32}}}}}, Tuple{DynamicSS{Tsit5{typeof(OrdinaryDiffEq.trivial_limiter!), typeof(OrdinaryDiffEq.trivial_limiter!), Static.False}, Float32, Float32, Float64}}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}, ::CuArray{Float32, 2, CUDA.Mem.DeviceBuffer})<br>\n    @ Zygote ~/.julia/packages/Zygote/rv6db/src/compiler/interface2.jl:0<br>\n [16] _pullback<br>\n    @ ~/.julia/packages/Flux/ZnXxS/src/layers/basic.jl:47 [inlined]<br>\n [17] _pullback(::Zygote.Context, ::typeof(Flux.applychain), ::Tuple{typeof(flatten), Dense{typeof(identity), CuArray{Float32, 2, CUDA.Mem.DeviceBuffer}, CuArray{Float32, 1, CUDA.Mem.DeviceBuffer}}, DeepEquilibriumNetwork{Chain{Tuple{Dense{typeof(tanh), CuArray{Float32, 2, CUDA.Mem.DeviceBuffer}, CuArray{Float32, 1, CUDA.Mem.DeviceBuffer}}, Dense{typeof(identity), CuArray{Float32, 2, CUDA.Mem.DeviceBuffer}, CuArray{Float32, 1, CUDA.Mem.DeviceBuffer}}}}, CuArray{Float32, 1, CUDA.Mem.DeviceBuffer}, Flux.var\"<a href=\"https://github.com/JuliaLang/julia/issues/60\">#60</a>#62\"{Chain{Tuple{Dense{typeof(tanh), Matrix{Float32}, Vector{Float32}}, Dense{typeof(identity), Matrix{Float32}, Vector{Float32}}}}}, Tuple{DynamicSS{Tsit5{typeof(OrdinaryDiffEq.trivial_limiter!), typeof(OrdinaryDiffEq.trivial_limiter!), Static.False}, Float32, Float32, Float64}}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}, ::CuArray{Float32, 4, CUDA.Mem.DeviceBuffer})<br>\n    @ Zygote ~/.julia/packages/Zygote/rv6db/src/compiler/interface2.jl:0<br>\n [18] _pullback<br>\n    @ ~/.julia/packages/Flux/ZnXxS/src/layers/basic.jl:49 [inlined]<br>\n [19] _pullback(ctx::Zygote.Context, f::Chain{Tuple{typeof(flatten), Dense{typeof(identity), CuArray{Float32, 2, CUDA.Mem.DeviceBuffer}, CuArray{Float32, 1, CUDA.Mem.DeviceBuffer}}, DeepEquilibriumNetwork{Chain{Tuple{Dense{typeof(tanh), CuArray{Float32, 2, CUDA.Mem.DeviceBuffer}, CuArray{Float32, 1, CUDA.Mem.DeviceBuffer}}, Dense{typeof(identity), CuArray{Float32, 2, CUDA.Mem.DeviceBuffer}, CuArray{Float32, 1, CUDA.Mem.DeviceBuffer}}}}, CuArray{Float32, 1, CUDA.Mem.DeviceBuffer}, Flux.var\"<a href=\"https://github.com/JuliaLang/julia/issues/60\">#60</a>#62\"{Chain{Tuple{Dense{typeof(tanh), Matrix{Float32}, Vector{Float32}}, Dense{typeof(identity), Matrix{Float32}, Vector{Float32}}}}}, Tuple{DynamicSS{Tsit5{typeof(OrdinaryDiffEq.trivial_limiter!), typeof(OrdinaryDiffEq.trivial_limiter!), Static.False}, Float32, Float32, Float64}}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}}}, args::CuArray{Float32, 4, CUDA.Mem.DeviceBuffer})<br>\n    @ Zygote ~/.julia/packages/Zygote/rv6db/src/compiler/interface2.jl:0<br>\n [20] _pullback<br>\n    @ /workspace/julia/test_mnist.jl:169 [inlined]<br>\n [21] _pullback(::Zygote.Context, ::var\"<a href=\"https://github.com/JuliaLang/julia/issues/7\">#7</a>#8\"{Chain{Tuple{typeof(flatten), Dense{typeof(identity), CuArray{Float32, 2, CUDA.Mem.DeviceBuffer}, CuArray{Float32, 1, CUDA.Mem.DeviceBuffer}}, DeepEquilibriumNetwork{Chain{Tuple{Dense{typeof(tanh), CuArray{Float32, 2, CUDA.Mem.DeviceBuffer}, CuArray{Float32, 1, CUDA.Mem.DeviceBuffer}}, Dense{typeof(identity), CuArray{Float32, 2, CUDA.Mem.DeviceBuffer}, CuArray{Float32, 1, CUDA.Mem.DeviceBuffer}}}}, CuArray{Float32, 1, CUDA.Mem.DeviceBuffer}, Flux.var\"<a href=\"https://github.com/JuliaLang/julia/issues/60\">#60</a>#62\"{Chain{Tuple{Dense{typeof(tanh), Matrix{Float32}, Vector{Float32}}, Dense{typeof(identity), Matrix{Float32}, Vector{Float32}}}}}, Tuple{DynamicSS{Tsit5{typeof(OrdinaryDiffEq.trivial_limiter!), typeof(OrdinaryDiffEq.trivial_limiter!), Static.False}, Float32, Float32, Float64}}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, Dense{typeof(identity), CuArray{Float32, 2, CUDA.Mem.DeviceBuffer}, CuArray{Float32, 1, CUDA.Mem.DeviceBuffer}}}}, Args})<br>\n    @ Zygote ~/.julia/packages/Zygote/rv6db/src/compiler/interface2.jl:0<br>\n [22] pullback(f::Function, ps::Params)<br>\n    @ Zygote ~/.julia/packages/Zygote/rv6db/src/compiler/interface.jl:338<br>\n [23] gradient(f::Function, args::Params)<br>\n    @ Zygote ~/.julia/packages/Zygote/rv6db/src/compiler/interface.jl:75<br>\n [24] macro expansion<br>\n    @ /workspace/julia/test_mnist.jl:168 [inlined]<br>\n [25] macro expansion<br>\n    @ ~/.julia/packages/ProgressMeter/Vf8un/src/ProgressMeter.jl:940 [inlined]<br>\n [26] train(; kws::Base.Iterators.<br>\n[message truncated]</p>",
        "id": 259347184,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635404279
    },
    {
        "content": "<p>[slack] &lt;Ian McInerney&gt; I was looking through the docs for DifferentialEquations and I couldn't find anything obvious that would allow me to stop the solver using a callback. My usecase is that I want to stop the simulation once one of my states reaches 0, so I don't want the <code>TerminateSteadyState</code> callback because the derivative will be non-zero at that point, but I don't see if any of the other callbacks would let me do that. Is there another mechanism that can be used to terminate solvers with this condition?</p>",
        "id": 259389091,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635428279
    },
    {
        "content": "<p>[slack] &lt;Ian McInerney&gt; Looking deeper, I guess this will do it? <a href=\"https://diffeq.sciml.ai/stable/features/callback_functions/#Example-2:-Terminating-an-Integration\">https://diffeq.sciml.ai/stable/features/callback_functions/#Example-2:-Terminating-an-Integration</a> - but are there any restrictions on what solvers it can terminate? (e.g. will the C wrapped solvers not work)? I actually just use the auto solvers right now, but it is something I am curious about if I have a more problematic model in the future.</p>",
        "id": 259389737,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635428574
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Give it a try on one of the Sundials solvers and see! (I haven't tried it myself, so don't know if it works, but looking at the repo it does seem a version of <code>terminate!</code> for Sundials intergrators is defined.)</p>",
        "id": 259393160,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635430006
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; <a href=\"https://github.com/SciML/Sundials.jl/blob/f67f1a63a836df56849f77a3fc583d6cb458e48e/src/common_interface/integrator_utils.jl#L151\">https://github.com/SciML/Sundials.jl/blob/f67f1a63a836df56849f77a3fc583d6cb458e48e/src/common_interface/integrator_utils.jl#L151</a></p>",
        "id": 259393196,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635430025
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; all solvers should be fine with <code>terminate!</code></p>",
        "id": 259404926,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635434521
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @avikpal</p>",
        "id": 259404984,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635434532
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; Is there a way to have better control on the initialization of DAEs without having to use OrdinaryDiffEq to pass NoInit()? Would it be ok to have a field in the DAEproblem to do something like:</p>\n<div class=\"codehilite\" data-code-language=\"if\"><pre><span></span><code>      DiffEqBase.initialize_dae!(integrator)\n    end```\n</code></pre></div>",
        "id": 259553523,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635526721
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; if you initialize consistently the step is skipped</p>",
        "id": 259553864,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635526861
    },
    {
        "content": "<p>[slack] &lt;fieldofnodes&gt; Suppose that I have a model, a stochastic diff eq, that mapped t to some value, u, where u is either oscillating or excitable between to bounded states, say 0 and 1. I want to implement a random walk that only moves based off say state 0 and not state 1.</p>\n<p>I know if I perform an explicit time solver like forward Euler, I can just use a conditional every time step. But how could I solve this using a differential equation solver with implicit and predictive time steps?</p>",
        "id": 259554301,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635527078
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; In some cases we have a mismatch of tolerances that fails at this:</p>\n<p><code>integrator.opts.internalnorm(resid,t) &lt;= alg.abstol &amp;&amp; return</code></p>",
        "id": 259554376,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635527131
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; we initialize with an NLsolve f_tolerance of 1e-6 for larger systems. in some or our cases having NLsolve f_tolerance at 1e-9 or more x10 the initialization time.</p>",
        "id": 259554552,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635527212
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; I wonder if a solution then is to fo this comparison with a tolerance that matches the tolerance and not an strict iszero.</p>",
        "id": 259554666,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635527270
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; why is that failing?</p>",
        "id": 259560166,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635529826
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; sorry, copied the wrong piece of code. Fixed the comment.</p>",
        "id": 259562331,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635530647
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; Basically the tolerance is too low even for NLsolve</p>",
        "id": 259562365,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635530663
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; The default tolerance is 1e-10, so if I initialize outside with an NLsolve tolerance that is lower it triggers the initialization</p>",
        "id": 259562598,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635530765
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; but when the init alg calls nsolve it doesn’t apply that tolerance of 1e-10 either</p>",
        "id": 259562658,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635530796
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; here is the full code snippet from initialize_dae.jl lines 289 - 311</p>\n<div class=\"codehilite\" data-code-language=\"#\"><pre><span></span><code>  integrator.opts.internalnorm(tmp,t) &lt;= alg.abstol &amp;&amp; return\n  alg_u = @view u[algebraic_vars]\n\n  isad = alg_autodiff(integrator.alg)\n  if isad\n    chunk = Val{ForwardDiff.pickchunksize(count(algebraic_vars))}\n    _tmp = DiffEqBase.dualcache(tmp, chunk)\n    _du_tmp = DiffEqBase.dualcache(tmp, chunk)\n  else\n    _tmp, _du_tmp = tmp, similar(tmp)\n  end\n  nlequation = @closure (out, x) -&gt; begin\n    uu = isad ? DiffEqBase.get_tmp(_tmp, x) : _tmp\n    du_tmp = isad ? DiffEqBase.get_tmp(_du_tmp, x) : _du_tmp\n    copyto!(uu, integrator.u)\n    alg_uu = @view uu[algebraic_vars]\n    alg_uu .= x\n    f(du_tmp, uu, p, t)\n    out .= @view du_tmp[algebraic_eqs]\n    return nothing\n  end\n  # Here doesn't use that same tolerance.\n  r = nlsolve(nlequation, u[algebraic_vars], autodiff=isad ? :forward : :central, method=:newton)```\n</code></pre></div>",
        "id": 259562944,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635530926
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Isn't this just a jump-diffusion problem?</p>\n<p><a href=\"https://diffeq.sciml.ai/latest/tutorials/jump_diffusion/\">https://diffeq.sciml.ai/latest/tutorials/jump_diffusion/</a></p>\n<p>Does the flipping of <code>u</code> depend on the position of the random walk? If not you can either pre-generate a path for  <code>u</code> and use it as a parameter to your SDE solver rhs, or you can do a jump diffusion using a <code>ConstantRateJump</code> or <code>MassActionJump</code> to model <code>u</code>. If <code>u</code> depends on the position of the random walk you'd need to use <code>VariableRateJump</code> . I'm not sure if all SDE solvers would work with all of these, or if only some subset support this.</p>",
        "id": 259566869,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635532909
    },
    {
        "content": "<p>[slack] &lt;fieldofnodes&gt; Wow, thank you for this answer. I need to look further into this. In some cases I have also included diffusion which can affect when <code>u</code> is in state <code>0</code> or <code>1</code>, but I'll look at the link. Thanks for the pointer.</p>",
        "id": 259568195,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635533578
    },
    {
        "content": "<p>[slack] &lt;avikpal&gt; @Qiyao Wei I would need something to reproduce this.</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>model = Dense(2, 2)\np, re = Flux.destructure(model)\nA = VecJacOperator((u, p, t) -&gt; re(p)(u), x, p; autodiff = true)\nx = rand(2, 1)\nϵ = rand(size(x)...)\nmul!(similar(vec(ϵ)), A, vec(ϵ))```\nSeems to work fine\n</code></pre></div>",
        "id": 259574138,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635536703
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; @chrisrackauckas where do you guys have the definition of @closure in the repos for SciML? I don’t seem to be able to find it</p>",
        "id": 259586594,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635543620
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I'm not sure what that is.</p>",
        "id": 259588719,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635545167
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Where do you see it?</p>",
        "id": 259588722,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635545169
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; OrdinaryDiffEq: <a href=\"https://files.slack.com/files-pri/T68168MUP-F02KP3UBN7N/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F02KP3UBN7N/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02KP3UBN7N/download/image.png\"><img src=\"https://uploads.zulipusercontent.net/1a24ad4ea84c258f0adb5633a761cf2f64696686/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d4630324b503355424e374e2f646f776e6c6f61642f696d6167652e706e67\"></a></div>",
        "id": 259588769,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635545224
    },
    {
        "content": "<p>[slack] &lt;Alastair&gt; Might be from this package </p>\n<p><a href=\"https://github.com/c42f/FastClosures.jl\">https://github.com/c42f/FastClosures.jl</a></p>",
        "id": 259590016,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635546065
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; I'm trying to pass a preconditioner to the iterative linear solver, and it seems to want a type of <code>ScaleVector</code>, but that type isn't exported by <code>DiffEqBase</code>? Is there something I'm missing here, since that seems a bit weird.</p>",
        "id": 259708170,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635565328
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; furthermore it requires a vector it seems. Is there no way to pass a matrix preconditioner?</p>",
        "id": 259708458,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635565801
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; The linear operator Jacobian always acts on a vector. It's <code>vec(u)</code></p>",
        "id": 259731051,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635600369
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; ScaleVector just does a rescaling before the preconditioner.</p>",
        "id": 259731059,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635600391
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you shouldn't have to touch it.</p>",
        "id": 259731060,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635600398
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; Do we have a native implementation of RKF78? I know there is FEHLBERG_13_7_8 in Sundials, but I need to be able to forward diff through it to do constrained optimization with the IPNewton solver.</p>\n<p>For context, this is for a competition (<a href=\"https://gtoc11.nudt.edu.cn/GTOC?page=home\">https://gtoc11.nudt.edu.cn/GTOC?page=home</a>) and RKF78 is the integrator they’re using to check the solution, so it’s more important to be close to their solution than it is to be actually accurate.</p>",
        "id": 259736286,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635607245
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; @chrisrackauckas or @yingbo_ma Just had a simple question about the Diffeq interface. I am kinda used to the interface now, but never really resolved this question in my mind. Say I have an extremely simple discrete simulation--or I don't think it would be different for a continuous ODE problem either.</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    du[1] = 1\n    du\nend\ntspan = (1., 10.)\np = [1]\nu0 = [1]\nprob = DiscreteProblem(simplefunc!, u0, tspan, p)\nsol = solve(prob)```\nIn this case, I will only get out a vector of 1s, `sol = [1, 1, 1 ,1, 1, 1, 1, 1, 1, 1]`. But I would think that for an ODE integrator--or even in this discrete case, the solver should be something like $u_{t+1} = u_t + simplefunc!*h$, like for a simple forward Euler method, in this discrete case h=1. So I would expect the above code to give a vector like `sol = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]. So it seems like in the `solve()` is not actually doing the integration, meaning it is not adding the `u_t` term automatically at each timestep? If I change the function to `du[1] = u[1] + 1` then of course things work fine. My question was whether I interpreting the integration routine wrong, or something.\n</code></pre></div>",
        "id": 259741628,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635614297
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; I think what you want is FunctionMap{scale_by_time}()</p>",
        "id": 259741777,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635614541
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; <a href=\"https://diffeq.sciml.ai/stable/solvers/discrete_solve/\">https://diffeq.sciml.ai/stable/solvers/discrete_solve/</a></p>",
        "id": 259741780,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635614549
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; @yingbo_ma Oh interesting. Let me try that and see what the result is.</p>",
        "id": 259741825,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635614637
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Say @yingbo_ma so I was trying <code>sol = solve(prob, scale_by_time=true)</code> but perhaps that is wrong. If it is not too much trouble, can you tell me the write way to specify that FunctionMap() in the solver.</p>",
        "id": 259742061,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635614978
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Ahh, okay. So this worked <code>sol = solve(prob, FunctionMap(scale_by_time=true))</code></p>",
        "id": 259742116,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635615038
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Yeah, that makes sense. Hmm, interesting. @yingbo_ma thanks so much for clearing that up. I was just could not reconcile what was going on with what I was expecting to happen. Thanks a bunch for pointing me in the right direction.</p>",
        "id": 259742180,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635615124
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; So then without the FunctionMap(), the integrator does not accumulate the previous state <code>u_t</code>. So that is good to know.</p>",
        "id": 259742211,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635615185
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I don't think we do. It would be quick to whip it together though. It might be in the tableau form ExplicitRK, but that's slowet</p>",
        "id": 259744688,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635618407
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; Jonnie, i see you are already part of a team. I would also love to work on GTOC, if your team is already full. I guess i have to sit out as i missed the registration date.</p>",
        "id": 259746943,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635621756
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; So what do I do if my preconditioner depends on the Jacobian? Right now it seems the native types only work with a constant preconditioner. I've had to make my own linear solver that wraps the GMRES linear solver, but this seems like it should be supported natively</p>",
        "id": 259748449,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635623406
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; say I'm using an ILU(0) preconditioner</p>",
        "id": 259748460,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635623457
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; Hey @pure_interpeter. Actually a buddy of mine from work is heading up our team this year and he wanted to keep our group pretty small (haha, actually it’s just the two of us). And we have a bit of a friendly battle going with another team whose members used to work in our group. Otherwise I would have totally been fine with it.</p>\n<p>But it’s a pretty neat problem this year. I’d definitely encourage you to give it a shot, even if just for fun.</p>",
        "id": 259753660,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635631181
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; @chrisrackauckas If it’s pretty straightforward to add, I can throw together a PR.</p>",
        "id": 259753927,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635631433
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; Maybe i do it after the challange is over ...</p>",
        "id": 259754196,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635631781
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; I am curious however about the dynamics of astroids with attached ATD device. In particular with the direction of the acceleration and how one ensure that the astroids arive at the proper position in time ...</p>",
        "id": 259754732,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635632467
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; Yeah, that’s the part I liked most about this year’s problem. Usually it’s just discrete impulsive transfers, but this year they have that element of continuous optimal control for the ATD devices. There are a lot of different ways to handle that part of the problem. We’ve already tried variational methods. That’s been… okay. It’s just really hit-or-miss on being able to solve the boundary value problem. We have something that works for us, but it’s kinda limiting the overall optimization problem. Discretize-then-optimize is probably going to end up being a better approach.</p>",
        "id": 259755213,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635633160
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; One thing i am confused by is the fixed magnitude of the ATD. If the direction is arbitrary couldn't one by flipping the direction quickly also reach any other magnitude &lt; then intended by pointing it in the other direction for some fraction of the time.</p>",
        "id": 259755518,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635633540
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; Yeah, you could definitely do it that way. It won’t be optimal, but it might make the problem more tractable.</p>",
        "id": 259755794,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635633925
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; who says a 100% burn is optimal? If that astroid is  not going the station with the least mass it'S travel time has no impact on the objective. And that might make sending an astroid that would otherwise be unfeasible to a station not available on the fastest trajectory ...</p>",
        "id": 259755970,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635634189
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; (Maybe i am missing something ... please let me know)</p>",
        "id": 259756313,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635634672
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; 100% “bang-bang” types of solutions just tend to be what most often fall out of the calculus of variations. But yeah since only the minimum mass station matters, you can certainly afford to do something suboptimal for the rest of it means they’ll be more tractable. But for the asteroids that were transferred to that station, you probably want the trajectories to be pretty close to optimal given the mass penalty.</p>",
        "id": 259757213,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635635870
    },
    {
        "content": "<p>[slack] &lt;Qiyao Wei&gt; Thanks a lot for the MWE @avikpal! I worked on your example a bit, and noticed that something goes weird when mul! is inside DEQ. So the following code should err</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>using CUDA\nCUDA.allowscalar(false)\nstruct DeepEquilibriumNetwork{M,P,RE,A,K}\n    model::M\n    p::P\n    re::RE\n    args::A\n    kwargs::K\nend\n\nFlux.@functor DeepEquilibriumNetwork\n\nfunction DeepEquilibriumNetwork(model, args...; kwargs...)\n    p, re = Flux.destructure(model)\n    return DeepEquilibriumNetwork(model, p, re, args, kwargs)\nend\n\nFlux.trainable(deq::DeepEquilibriumNetwork) = (deq.p,)\n\n\n\nfunction (deq::DeepEquilibriumNetwork)(x::AbstractArray{T},\n                                       p = deq.p) where {T}\n\n    # This is standard DEQ code\n    z = http://deq.re(p)(x)\n    # Solving the equation f(u) - u = du = 0\n    dudt(u, _p, t) = http://deq.re(_p)(u .+ x) .- u\n    ssprob = SteadyStateProblem(ODEProblem(dudt, z, (zero(T), one(T)), p))\n    temp = solve(ssprob, deq.args...; u0 = z, deq.kwargs...).u\n\n    # This is standard jacobian code\n    A = VecJacOperator((u, p, t) -&gt; re(p)(u), x, p; autodiff = true)\n    ϵ = rand(size(x)...) |&gt; gpu\n    mul!(similar(vec(ϵ)), A, vec(ϵ))\n\n    # Notice that I am not even returning anything related to the mul! operation\n    return temp\nend\n\nmodel = DeepEquilibriumNetwork(Chain(Dense(2, 1, tanh), Dense(1, 2)),\n                               DynamicSS(Tsit5(), abstol = 1f-1, reltol = 1f-1)) |&gt; gpu\nx = rand(2, 128) |&gt; gpu\nps = Flux.params(model)\ngs = Flux.gradient(ps) do\n    Flux.Losses.mse(model(x), x)\nend```\n</code></pre></div>",
        "id": 259790530,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635690728
    },
    {
        "content": "<p>[slack] &lt;avikpal&gt; I will have to look into this. But for now, I would just write out the expression for vjp instead of using the operator, i.e. just do Zygote.pullback(x -&gt; re(p)(x), x)<a href=\"http://ϵ\">2</a>.</p>",
        "id": 259801625,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635705420
    },
    {
        "content": "<p>[slack] &lt;avikpal&gt; @chrisrackauckas should we be doing 2nd order with reverse over reverse, or do forward here and do reverse over forward?</p>",
        "id": 259801648,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635705467
    },
    {
        "content": "<p>[slack] &lt;avikpal&gt; or reverse over numerical (forward might not work due to convs)</p>",
        "id": 259801691,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635705497
    },
    {
        "content": "<p>[slack] &lt;avikpal&gt; &gt;  I will have to look into this<br>\nNVM found it. I will submit a PR</p>",
        "id": 259802060,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635706034
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yeah probably forward</p>",
        "id": 259806206,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1635711588
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; you dont have older methods like runge kutta or…?</p>",
        "id": 262092088,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637340006
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; The RK methods for IDEs are different and haven't been implemented yet.</p>",
        "id": 262110703,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637347561
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/search?q=NeuralPDE.jl&amp;type=Repositories\">NeuralPDE.jl</a> is really a catch-all, the NN approach is easy to generalize to pretty much any system, while classical methods are a lot faster but require special methods for each of these types of systems.</p>",
        "id": 262110804,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637347588
    },
    {
        "content": "<p>[slack] &lt;Cossio&gt; Is there something writen somewhere about how <a href=\"https://benchmarks.sciml.ai/\">https://benchmarks.sciml.ai/</a> is setup? I mean the CI automation, what is used to render the pages, etc.</p>",
        "id": 262246871,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637509970
    },
    {
        "content": "<p>[slack] &lt;Cossio&gt; I think there was something at <a href=\"https://www.stochasticlifestyle.com/\">https://www.stochasticlifestyle.com/</a>, but I can't find it now.</p>",
        "id": 262247083,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637510235
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; its in the README</p>",
        "id": 262251248,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637515774
    },
    {
        "content": "<p>[gitter] &lt;cossio:<a href=\"http://matrix.org\">matrix.org</a>&gt; WHere?</p>",
        "id": 262251307,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637515823
    },
    {
        "content": "<p>[gitter] &lt;cossio:<a href=\"http://matrix.org\">matrix.org</a>&gt; YOu mean here <a href=\"https://github.com/SciML/SciMLBenchmarks.jl\">https://github.com/SciML/SciMLBenchmarks.jl</a>?</p>",
        "id": 262251342,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637515919
    },
    {
        "content": "<p>[slack] &lt;Cossio&gt; I remember there was a blog-post about this somewhere (probably written by you). giving more details</p>",
        "id": 262256338,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637523198
    },
    {
        "content": "<p>[slack] &lt;fitchmicah&gt; hey there, I've been watching this video about HAVOK <a href=\"https://www.youtube.com/watch?v=831Ell3QNck\">https://www.youtube.com/watch?v=831Ell3QNck</a> and was wondering if it's possible to do this kind of modeling with <a href=\"https://github.com/search?q=DataDrivenDiffEq.jl&amp;type=Repositories\">DataDrivenDiffEq.jl</a>?</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"831Ell3QNck\" href=\"https://www.youtube.com/watch?v=831Ell3QNck\"><img src=\"https://uploads.zulipusercontent.net/ba9afcd9683d9645351c2b60da99e89dc5a2ee5a/68747470733a2f2f692e7974696d672e636f6d2f76692f383331456c6c33514e636b2f64656661756c742e6a7067\"></a></div>",
        "id": 262340571,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637597599
    },
    {
        "content": "<p>[slack] &lt;fitchmicah&gt; seems like most of the pieces are there</p>",
        "id": 262341857,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637598106
    },
    {
        "content": "<p>[slack] &lt;fitchmicah&gt; maybe I'll just try DMD</p>",
        "id": 262344533,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637599206
    },
    {
        "content": "<p>[slack] &lt;fitchmicah&gt; so now I'm realizing that if I can turn my data into a little flow graph picture, I can use DMD, which is intriguing!</p>",
        "id": 262347390,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637600421
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/SciML/DataDrivenDiffEq.jl/issues/5\">https://github.com/SciML/DataDrivenDiffEq.jl/issues/5</a></p>",
        "id": 262358977,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637605752
    },
    {
        "content": "<p>[slack] &lt;jacobusmmsmit&gt; Has anyone successfully implemented/solved the social force model for pedestrian dynamics from _https://arxiv.org/pdf/cond-mat/9805244.pdf_? It's pretty involved and I'm not sure on what the best way to represent it as an ODEproblem that DifferentialEquations can handle is.</p>",
        "id": 262372009,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637612175
    },
    {
        "content": "<p>[slack] &lt;AlCap23&gt; There has been an implementation ( to show that it works ).</p>\n<p><a href=\"https://github.com/SciML/DataDrivenDiffEq.jl/blob/v0.5.2/examples/Havok_Examples.jl\">https://github.com/SciML/DataDrivenDiffEq.jl/blob/v0.5.2/examples/Havok_Examples.jl</a></p>\n<p>Which still uses the old API. Feel free to try, adapt and if you like submit a PR <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 262418956,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637650522
    },
    {
        "content": "<p>[slack] &lt;fitchmicah&gt; Ooh thank you! I'll take a look!</p>",
        "id": 262531153,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637711961
    },
    {
        "content": "<p>[slack] &lt;Qiyao Wei&gt; Say I have defined as ODE problem with tspan = (0.0, 1.0). If I further specify<br>\n<code>solve(..., dt=1.0, ...)</code><br>\ndoes that mean the solver is only going to take one iteration? My goal is to control how many steps the solver takes behind the scenes (this is for research purposes, I’m sure no one in actual applications want to manipulate the solver), for example if we are talking about Euler’s method then I want the solver to just iterate<br>\n<code>x(t=1) = x(t=0) + x^{\\prime}*(1-0)</code><br>\nonce over the tspan. Also, are there visualizations for how the solver actually steps?</p>",
        "id": 262573355,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637751663
    },
    {
        "content": "<p>[slack] &lt;frankschae&gt; you'll also have to set <code>adaptive=false</code> for adaptive solvers. (Otherwise <code>dt</code> is basically just the initial guess)</p>",
        "id": 262574187,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637752122
    },
    {
        "content": "<p>[slack] &lt;frankschae&gt; &gt; Also, are there visualizations for how the solver actually steps?<br>\n<code>plot(sol)</code> ?</p>",
        "id": 262574272,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637752179
    },
    {
        "content": "<p>[slack] &lt;Qiyao Wei&gt; I see, I just was not sure whether sol is the trajectory at which the solver evaluated, or the actual trajectory the solver takes when solving the ODE</p>",
        "id": 262574760,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637752456
    },
    {
        "content": "<p>[slack] &lt;Qiyao Wei&gt; I guess the evaluation parameter is tstops, so that’s good to know</p>",
        "id": 262575072,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637752673
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @ranocha <a href=\"https://github.com/search?q=BSeries.jl&amp;type=Repositories\">BSeries.jl</a> is awesome. @yingbo_ma check it out</p>",
        "id": 262577411,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637754100
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and</p>",
        "id": 262577415,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637754103
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://ranocha.de/BSeries.jl/dev/benchmarks/\">https://ranocha.de/BSeries.jl/dev/benchmarks/</a></p>",
        "id": 262577417,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637754103
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @shashi this is a good Symbolics benchmark to use for the refactor</p>",
        "id": 262577430,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637754118
    },
    {
        "content": "<p>[slack] &lt;ranocha&gt; Thanks!</p>",
        "id": 262577484,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637754133
    },
    {
        "content": "<p>[slack] &lt;ranocha&gt; Yeah, it would be awesome to use this when improving the performance of <a href=\"https://github.com/search?q=Symbolics.jl&amp;type=Repositories\">Symbolics.jl</a> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 262577505,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637754160
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; there was an idea that could increase its slow parts by about 100x by avoiding dynamic dispatch</p>",
        "id": 262577546,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637754204
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; this is a good benchmark since it seems to hit that bad part quite well</p>",
        "id": 262577563,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637754221
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and have good benchmarks to SymPy and SymEngine, so that's pretty perfect.</p>",
        "id": 262577578,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637754233
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but yeah, I want to look into using <a href=\"https://github.com/search?q=BSeries.jl&amp;type=Repositories\">BSeries.jl</a> for building parallel RKs</p>",
        "id": 262577633,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637754257
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I think some highly optimized 9th order parallel RKs would be amazing.</p>",
        "id": 262577650,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637754268
    },
    {
        "content": "<p>[slack] &lt;ranocha&gt; Sounds quite interesting! I would be happy to get you started with <a href=\"https://github.com/search?q=BSeries.jl&amp;type=Repositories\">BSeries.jl</a> or collaborate on such a project</p>",
        "id": 262577821,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637754386
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/SciML/SciMLBenchmarks.jl/pull/321\">https://github.com/SciML/SciMLBenchmarks.jl/pull/321</a></p>",
        "id": 262581534,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637757041
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @yingbo_ma we fixed the benchmarks</p>",
        "id": 262581545,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637757049
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; moment of truth now</p>",
        "id": 262581548,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637757052
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; does our FBDF outperform CVODE? <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 262581560,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637757063
    },
    {
        "content": "<p>[slack] &lt;frankschae&gt; <code>save_everystep=true</code> without any other <code>saveat</code> arguments is important (otherwise indeed you just save specific steps.)  and yes, by setting tstops you can make the solver step deterministically to different time points.</p>",
        "id": 262581631,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637757123
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; Hey! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span><br>\nAny tips on speeding up this ODE or is this efficient as is?</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    x = u0[1:83]\n    y = u0[84:166]\n    ρ, α, β  = p\n    du[1:83] .= -ρ * L * x .+ α .* x .* (1.0 .- x)\n    du[84:166] .= -β .* x .* y .* (1.0 .- (y ./ v)) # v is a global constant\nend```\natm speed is:\n```julia&gt; @benchmark solve(problem, Tsit5())\nBenchmarkTools.Trial: 2471 samples with 1 evaluation.\n Range (min … max):  1.467 ms … 15.363 ms  ┊ GC (min … max):  0.00% … 73.18%\n Time  (median):     1.513 ms              ┊ GC (median):     0.00%\n Time  (mean ± σ):   2.012 ms ±  1.409 ms  ┊ GC (mean ± σ):  14.87% ± 17.76%\n\n  █▅▁▁                                 ▁▂           ▁▂▁\n  ████▁▃▁▃▄▁▃▁▁▁▃▁▁▁▁▃▁▃▃▁▁▃▃▃▁▁▁▁▁▁▃▃▇██▆▇▄▁▁▁▁▁▁▁▅███▅▄▃▁▃ █\n  1.47 ms      Histogram: log(frequency) by time     5.73 ms &lt;\n\n Memory estimate: 13.51 MiB, allocs estimate: 1567.```\n</code></pre></div>",
        "id": 262639622,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637787524
    },
    {
        "content": "<p>[slack] &lt;jacobusmmsmit&gt; <code>v</code> being global immediately raises some speedup potential, copy its value into another variable and pass that as part of p,</p>\n<p><code>ρ, α, β, v_notglobal = p</code></p>",
        "id": 262639901,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637787667
    },
    {
        "content": "<p>[slack] &lt;jacobusmmsmit&gt; even if it is a constant, it’s still better to keep things out of global scope</p>",
        "id": 262640048,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637787726
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; hey! Thanks, I actually did try that but it  slows things down a bit:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">BenchmarkTools</span><span class=\"o\">.</span><span class=\"n\">Trial</span><span class=\"o\">:</span> <span class=\"mi\">1595</span> <span class=\"n\">samples</span> <span class=\"n\">with</span> <span class=\"mi\">1</span> <span class=\"n\">evaluation</span><span class=\"o\">.</span>\n <span class=\"n\">Range</span> <span class=\"p\">(</span><span class=\"n\">min</span> <span class=\"o\">…</span> <span class=\"n\">max</span><span class=\"p\">)</span><span class=\"o\">:</span>  <span class=\"mf\">2.567</span> <span class=\"n\">ms</span> <span class=\"o\">…</span> <span class=\"mf\">14.882</span> <span class=\"n\">ms</span>  <span class=\"n\">┊</span> <span class=\"n\">GC</span> <span class=\"p\">(</span><span class=\"n\">min</span> <span class=\"o\">…</span> <span class=\"n\">max</span><span class=\"p\">)</span><span class=\"o\">:</span>  <span class=\"mf\">0.00</span><span class=\"o\">%</span> <span class=\"o\">…</span> <span class=\"mf\">69.80</span><span class=\"o\">%</span>\n <span class=\"n\">Time</span>  <span class=\"p\">(</span><span class=\"n\">median</span><span class=\"p\">)</span><span class=\"o\">:</span>     <span class=\"mf\">2.614</span> <span class=\"n\">ms</span>              <span class=\"n\">┊</span> <span class=\"n\">GC</span> <span class=\"p\">(</span><span class=\"n\">median</span><span class=\"p\">)</span><span class=\"o\">:</span>     <span class=\"mf\">0.00</span><span class=\"o\">%</span>\n <span class=\"n\">Time</span>  <span class=\"p\">(</span><span class=\"n\">mean</span> <span class=\"o\">±</span> <span class=\"n\">σ</span><span class=\"p\">)</span><span class=\"o\">:</span>   <span class=\"mf\">3.124</span> <span class=\"n\">ms</span> <span class=\"o\">±</span>  <span class=\"mf\">1.384</span> <span class=\"n\">ms</span>  <span class=\"n\">┊</span> <span class=\"n\">GC</span> <span class=\"p\">(</span><span class=\"n\">mean</span> <span class=\"o\">±</span> <span class=\"n\">σ</span><span class=\"p\">)</span><span class=\"o\">:</span>  <span class=\"mf\">10.38</span><span class=\"o\">%</span> <span class=\"o\">±</span> <span class=\"mf\">15.66</span><span class=\"o\">%</span>\n\n  <span class=\"n\">█▅</span>                                       <span class=\"n\">▁</span>        <span class=\"n\">▁▂</span>\n  <span class=\"n\">██▅▃▁▃▃▃▁▁▃▁▁▃▁▁▁▁▁▁▁▁▁▁▁▃▁▁▁▁▁▃▁▃▁▁▁▁▁▃▄██▆▆▆▆▃▁▅███▇▁▁▃▃</span> <span class=\"n\">█</span>\n  <span class=\"mf\">2.57</span> <span class=\"n\">ms</span>      <span class=\"n\">Histogram</span><span class=\"o\">:</span> <span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">frequency</span><span class=\"p\">)</span> <span class=\"n\">by</span> <span class=\"n\">time</span>     <span class=\"mf\">6.59</span> <span class=\"n\">ms</span> <span class=\"o\">&lt;</span>\n\n <span class=\"n\">Memory</span> <span class=\"n\">estimate</span><span class=\"o\">:</span> <span class=\"mf\">13.69</span> <span class=\"n\">MiB</span><span class=\"p\">,</span> <span class=\"n\">allocs</span> <span class=\"n\">estimate</span><span class=\"o\">:</span> <span class=\"mf\">6545.</span><span class=\"sb\">```</span>\n</code></pre></div>",
        "id": 262640491,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637787981
    },
    {
        "content": "<p>[slack] &lt;jacobusmmsmit&gt; Huh, that’s strange. Well in that case I’ll let someone who actually knows what they’re doing take it from here…</p>",
        "id": 262640605,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637788078
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; get rid of the slicing by using views.</p>",
        "id": 262641319,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637788585
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>    x = @view u0[1:83]\n    y = @view u0[84:166]\n    dx = @view du[...]</code></p>",
        "id": 262641335,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637788606
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; then don't allocate in <code> -ρ * L * x</code> by using <code>mul!</code></p>",
        "id": 262641347,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637788622
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; See <a href=\"https://www.youtube.com/watch?v=h-xVBD2Pk9o\">https://www.youtube.com/watch?v=h-xVBD2Pk9o</a> for details.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"h-xVBD2Pk9o\" href=\"https://www.youtube.com/watch?v=h-xVBD2Pk9o\"><img src=\"https://uploads.zulipusercontent.net/877631e616d0b155646250e76c2f127ca93c6feb/68747470733a2f2f692e7974696d672e636f6d2f76692f682d7856424432506b396f2f64656661756c742e6a7067\"></a></div>",
        "id": 262641379,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637788661
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://files.slack.com/files-pri/T68168MUP-F02NM8GPT9A/download/capture.png\">https://files.slack.com/files-pri/T68168MUP-F02NM8GPT9A/download/capture.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02NM8GPT9A/download/capture.png\"><img src=\"https://uploads.zulipusercontent.net/3946decf12d16576711eea07618e67a2e2d2c650/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d4630324e4d3847505439412f646f776e6c6f61642f636170747572652e706e67\"></a></div>",
        "id": 262641470,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637788702
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @yingbo_ma</p>",
        "id": 262641474,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637788704
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; BCR?</p>",
        "id": 262641509,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637788741
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yup</p>",
        "id": 262641537,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637788771
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Pretty cool. Is it faster than before?</p>",
        "id": 262641553,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637788782
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it wasn't doing well at all before, so yeah.</p>",
        "id": 262641562,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637788792
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; NICE</p>",
        "id": 262641623,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637788811
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; At least better than CVODE_BDF</p>",
        "id": 262641637,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637788832
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yup</p>",
        "id": 262641712,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637788900
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that places it firmly in the \"usable? fuck yeah\" category.</p>",
        "id": 262641722,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637788910
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @yingbo_ma oof the overhead is high for small problems though</p>",
        "id": 262645238,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637791427
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; so yeah it still needs tuning but has good scaling.</p>",
        "id": 262645243,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637791434
    },
    {
        "content": "<p>[slack] &lt;Tor&gt; Hey! Is there a way for me to control the adjoint-error directly through <code>solve</code>?</p>",
        "id": 262703515,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637845729
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and only the adjoint error?</p>",
        "id": 262703733,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637845868
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; only with QuadratureAdjoint right now, by specifying the quadrature tolerances only</p>",
        "id": 262703752,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637845882
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; We should extend this to allow an adjoint_reltol and adjoint_abstol.</p>",
        "id": 262703765,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637845894
    },
    {
        "content": "<p>[slack] &lt;Tor&gt; &gt; We should extend this to allow an adjoint_reltol and adjoint_abstol.<br>\nThis is essentially what I was looking for, yeah. I'm using ForwardSensitivity (dimensions of the problem is 10-20, so it okay), and so it would be nice to also control the error on the sensitivity-dynamics (if that's the right terminology).</p>",
        "id": 262704200,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637846198
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yeah open an issue on DiffEqSensitivity</p>",
        "id": 262704287,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637846274
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; we haven't exposed this so far.</p>",
        "id": 262704293,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637846278
    },
    {
        "content": "<p>[slack] &lt;Tor&gt; Will do! Thanks!</p>",
        "id": 262704337,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637846288
    },
    {
        "content": "<p>[slack] &lt;Tor&gt; I just realized, you said \"only\": will <code>reltol</code>/<code>abstol</code> control the error on the sensitivity-dynamics too or is it _only_ for the primal?</p>",
        "id": 262706300,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637847495
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Hey if anyone is around and has a second today, it would be really helpful to get some hands on <a href=\"https://github.com/SciML/SciMLBenchmarks.jl/issues/325\">https://github.com/SciML/SciMLBenchmarks.jl/issues/325</a></p>",
        "id": 262707588,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637848286
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://files.slack.com/files-pri/T68168MUP-F02NMBS83AN/download/capture.png\">https://files.slack.com/files-pri/T68168MUP-F02NMBS83AN/download/capture.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02NMBS83AN/download/capture.png\"><img src=\"https://uploads.zulipusercontent.net/6b1ad3eccd49950aed9e0e919526ca45a63c3634/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d4630324e4d42533833414e2f646f776e6c6f61642f636170747572652e706e67\"></a></div>",
        "id": 262707628,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637848315
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Specifically if you look at that plot, one of the solvers is diverging at the chosen tolerances which is causing the plot to be messed up.</p>",
        "id": 262707693,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637848330
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Which solver? Maybe a small change to tolerances, or comment one out?</p>",
        "id": 262707710,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637848340
    },
    {
        "content": "<p>[slack] &lt;Gabriel Baraldi&gt; it looks to be QNDF</p>",
        "id": 262707806,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637848393
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; If anyone has a second that would be really helpful. If you find it, just modify the generator <a href=\"https://github.com/SciML/SciMLBenchmarks.jl/blob/master/benchmarks/StiffODE/VanDerPol.jmd\">https://github.com/SciML/SciMLBenchmarks.jl/blob/master/benchmarks/StiffODE/VanDerPol.jmd</a> and the CI machine will regen it on merge.</p>",
        "id": 262707963,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637848476
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yeah QNDF makes sense because that's probably when the diagram got messed up</p>",
        "id": 262707976,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637848487
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; worth isolating to an issue in <a href=\"https://github.com/search?q=OrdinaryDiffEq.jl&amp;type=Repositories\">OrdinaryDiffEq.jl</a> and merging a version which just comments it out for now.</p>",
        "id": 262707998,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637848502
    },
    {
        "content": "<p>[slack] &lt;Gabriel Baraldi&gt; Actually not sure, because on Rober there are some plots that don’t even have QNDF that are messed up</p>",
        "id": 262708098,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637848556
    },
    {
        "content": "<p>[slack] &lt;Junpeng&gt; I will handle this today</p>",
        "id": 262709015,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637848932
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; @tullio might be worth trying.</p>",
        "id": 262714467,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637851894
    },
    {
        "content": "<p>[slack] &lt;Tor&gt; Choice of sensitivity alg doesn't matter when we're using ForwardDiff to differentiate wrt. parameters, right? I.e. you're _not_ dispatching on <code>p</code> being a <code>Dual</code>, unwrapping, and then using the chosen <code>sensealg</code> instead, and then rewrapping in <code>Dual</code> again, right?</p>",
        "id": 262721186,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637855538
    },
    {
        "content": "<p>[slack] &lt;Tor&gt; Oh and another question: would we expect the sensitivity to change wrt. <code>saveat</code>? I thought <code>saveat</code> just specified at which points to interpolate and save the solution, but had nothing to do with the actual approach to solving the system, i.e. the answer to the question should be \"no\".</p>\n<p>(This is not the case for a program I'm taking the gradient of, which uses <code>solve</code>, and so I'm just making sure that it's a bug with the surrounding code rather than some misunderstanding I have of DiffEq.)</p>",
        "id": 262721783,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637855890
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yeah, ForwardDiff doesn't check ChainRules, and for small equations this is fastest.</p>",
        "id": 262745683,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637880368
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; If doing this, you can use norm choices to adjust toleranx</p>",
        "id": 262745689,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637880388
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It doesn't change the gradient calculation, but of course changing where things are saved can change the gradient</p>",
        "id": 262745701,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637880427
    },
    {
        "content": "<p>[slack] &lt;william.macready&gt; I have a MWE of something I'd like to do in a more complex setting: differentiate through solve where the parameters of the integrand are stored in a <code>struct</code>. Here's an example that errors:</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>mutable struct ODEParams{T&lt;:Real}\n  p::Vector{T}\n  q::Vector{T}\nend\n\node_func(du, u, params, t) = - params.p[1]*du - params.q[1]*u\n\nfunction loss(x, params)\n  params.p[1] = x[1];  params.q[1] = x[2]\n  _prob = remake(prob, p=ode_params)\n  sum(solve(_prob, SymplecticEuler(), dt=0.01, rtol=1e-6, atol=1e-6, saveat=0.1))\nend\n\nxdot0 = [1.0];   x0 = [0.0];  tspan = (0.0, 5.0)\node_params = ODEParams(Real[3.0], Real[4.0])\nprob = SecondOrderODEProblem(ode_func, xdot0, x0, tspan, ode_params)\n\ndx = ForwardDiff.gradient(ps -&gt; loss(ps, ode_params), [3.0, 4.0])```\nThe error occurs inside the `SymplecticEuler()` integration step (other types of steps give the same error) in creating an `ArrayPartition`. What is the idiomatic way of accomplishing what I'd like? My real use-case relies on a more complicated parameter representation.\n\nThanks for any help\n</code></pre></div>",
        "id": 262837567,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637964093
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; In your loss convert u0 to match the type of p</p>",
        "id": 262837974,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637964574
    },
    {
        "content": "<p>[slack] &lt;william.macready&gt; Thanks for the pointer Chris. This leads me to another question though. What's the format for functional inputs to <code>SecondOrderODEProblem</code>?</p>\n<p><code>SecondOrderODEProblem((du,u,p,t)-&gt; du-u,(p,t0)-&gt;p[1], (p,t0)-&gt;p[2],(0.0,1.0),(2.0,1.0))</code><br>\ninstantiates a problem, but errors when trying to solve. Can du0 and u0 be functional?</p>",
        "id": 262843099,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637970744
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; That might be a missing feature. Worth an issue</p>",
        "id": 262845851,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637974907
    },
    {
        "content": "<p>[slack] &lt;william.macready&gt; done.</p>",
        "id": 262847221,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1637977158
    },
    {
        "content": "<p>[slack] &lt;verma.shwetank22&gt; Is it possible to calculate the derivative of a function inside the ODEProblem? I have basically need the derivatives of the functions that are marked in the picture but I don't have any analytical expression that I can directly put inside the ODEProblem. I need the values of these derivatives while inside the ODEProblem. Note that 'Tr' is also a function of time that is being calculated in the function and I can use dT easily.: <a href=\"https://files.slack.com/files-pri/T68168MUP-F02PG25NF08/download/question.png\">https://files.slack.com/files-pri/T68168MUP-F02PG25NF08/download/question.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02PG25NF08/download/question.png\"><img src=\"https://uploads.zulipusercontent.net/b207a9977272141ae14c061b5f615bbb61041f57/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d463032504732354e4630382f646f776e6c6f61642f7175657374696f6e2e706e67\"></a></div>",
        "id": 262877047,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638024805
    },
    {
        "content": "<p>[slack] &lt;verma.shwetank22&gt; Is it possible to calculate the derivative of a function inside the ODEProblem? I have basically need the derivatives of the functions that are marked in the picture but I don't have any analytical expression that I can directly put inside the ODEProblem. I need the values of these derivatives while inside the ODEProblem. Note that 'Tr' is also a function of time that is being calculated in the function and I can use dT easily. Can I use ForwardDiff for time derivatives?</p>",
        "id": 262877190,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638025044
    },
    {
        "content": "<p>[slack] &lt;Qiyao Wei&gt; Where can I find the source code for ODE solvers such as Tsit5()? Both “?” and “@which” led me to track down a bunch of abstract type definitions, but not the actual implementation. Perhaps I missed something in the process?</p>",
        "id": 262877732,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638025736
    },
    {
        "content": "<p>[slack] &lt;rusandris&gt; Hi! Quick question: How should I add noise to ODEs and solve them as SDEs if my variables should always stay positive? In other words, how would I avoid the noise pushing my trajectories into unwanted regions of the phase space (negative values)?</p>",
        "id": 262877870,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638025884
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes, using ForwardDiff and such inside of an ODE definition is fine.</p>",
        "id": 262879408,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638028165
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; generally using multiplicative noise of some form is a good idea for that, so the conditional variance goes to zero as the state goes to zero</p>",
        "id": 262879424,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638028203
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's a huge complex system for handling a ton of different cases optimally, but what you might call the <code>Array</code> version core is <a href=\"https://github.com/SciML/OrdinaryDiffEq.jl/blob/master/src/perform_step/low_order_rk_perform_step.jl#L674-L734\">https://github.com/SciML/OrdinaryDiffEq.jl/blob/master/src/perform_step/low_order_rk_perform_step.jl#L674-L734</a></p>",
        "id": 262879488,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638028282
    },
    {
        "content": "<p>[slack] &lt;verma.shwetank22&gt; Can forwarddiff do a time derivative inside the ODE?</p>",
        "id": 262879656,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638028510
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes</p>",
        "id": 262879660,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638028521
    },
    {
        "content": "<p>[slack] &lt;rusandris&gt; is there an option for that at the rngs or how would you recommend doing that?</p>",
        "id": 262882586,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638032134
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; use a multiplicative noise SDE</p>",
        "id": 262882613,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638032163
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; i.e. make <code>g(u) = u</code> or such</p>",
        "id": 262882636,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638032171
    },
    {
        "content": "<p>[slack] &lt;fieldofnodes&gt; I was thinking about recursion and the forward euler scheme, is it possible to think of this and solve as a recursion as opposed to a time dependent iterator?</p>",
        "id": 262893118,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638047370
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yes, but using recursion usually isn't very efficient.</p>",
        "id": 262895009,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638050387
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; Thanks both! Havent gotten around to this yet but will do so soon and report back <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 262938744,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638120040
    },
    {
        "content": "<p>[slack] &lt;rusandris&gt; right! thank you for your help</p>",
        "id": 262944396,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638128034
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; so with:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">function</span> <span class=\"n\">NetworkAtrophy3</span><span class=\"p\">(</span><span class=\"n\">du</span><span class=\"p\">,</span> <span class=\"n\">u0</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">)</span>\n    <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"nd\">@view</span> <span class=\"n\">u0</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">83</span><span class=\"p\">]</span>\n    <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"nd\">@view</span> <span class=\"n\">u0</span><span class=\"p\">[</span><span class=\"mi\">84</span><span class=\"o\">:</span><span class=\"mi\">166</span><span class=\"p\">]</span>\n    <span class=\"n\">dx</span> <span class=\"o\">=</span> <span class=\"nd\">@view</span> <span class=\"n\">du</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">83</span><span class=\"p\">]</span>\n    <span class=\"n\">dy</span> <span class=\"o\">=</span> <span class=\"nd\">@view</span> <span class=\"n\">du</span><span class=\"p\">[</span><span class=\"mi\">84</span><span class=\"o\">:</span><span class=\"mi\">166</span><span class=\"p\">]</span>\n    <span class=\"n\">ρ</span><span class=\"p\">,</span> <span class=\"n\">α</span><span class=\"p\">,</span> <span class=\"n\">β</span><span class=\"p\">,</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">p</span>\n    <span class=\"n\">mul!</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">L</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n    <span class=\"n\">mul!</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"n\">ρ</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">)</span>\n    <span class=\"n\">dx</span> <span class=\"o\">.=</span> <span class=\"n\">a</span> <span class=\"o\">.+</span> <span class=\"n\">α</span> <span class=\"o\">.*</span> <span class=\"n\">x</span> <span class=\"o\">.*</span> <span class=\"p\">(</span><span class=\"mf\">1.0</span> <span class=\"o\">.-</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n    <span class=\"n\">dy</span> <span class=\"o\">.=</span> <span class=\"o\">-</span><span class=\"n\">β</span> <span class=\"o\">.*</span> <span class=\"n\">x</span> <span class=\"o\">.*</span> <span class=\"n\">y</span> <span class=\"o\">.*</span> <span class=\"p\">(</span><span class=\"mf\">1.0</span> <span class=\"o\">.-</span> <span class=\"p\">(</span><span class=\"n\">y</span> <span class=\"o\">./</span> <span class=\"n\">v</span><span class=\"p\">))</span>\n<span class=\"sa\">end</span><span class=\"sb\">```</span>\n<span class=\"sb\">i got a nice speed up:</span>\n<span class=\"sb\">```</span><span class=\"sa\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@benchmark</span> <span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">problem</span><span class=\"p\">,</span> <span class=\"n\">Tsit5</span><span class=\"p\">())</span>\n<span class=\"n\">BenchmarkTools</span><span class=\"o\">.</span><span class=\"n\">Trial</span><span class=\"o\">:</span> <span class=\"mi\">3489</span> <span class=\"n\">samples</span> <span class=\"n\">with</span> <span class=\"mi\">1</span> <span class=\"n\">evaluation</span><span class=\"o\">.</span>\n <span class=\"n\">Range</span> <span class=\"p\">(</span><span class=\"n\">min</span> <span class=\"o\">…</span> <span class=\"n\">max</span><span class=\"p\">)</span><span class=\"o\">:</span>  <span class=\"mf\">1.195</span> <span class=\"n\">ms</span> <span class=\"o\">…</span> <span class=\"mf\">28.079</span> <span class=\"n\">ms</span>  <span class=\"n\">┊</span> <span class=\"n\">GC</span> <span class=\"p\">(</span><span class=\"n\">min</span> <span class=\"o\">…</span> <span class=\"n\">max</span><span class=\"p\">)</span><span class=\"o\">:</span> <span class=\"mf\">0.00</span><span class=\"o\">%</span> <span class=\"o\">…</span> <span class=\"mf\">94.84</span><span class=\"o\">%</span>\n <span class=\"n\">Time</span>  <span class=\"p\">(</span><span class=\"n\">median</span><span class=\"p\">)</span><span class=\"o\">:</span>     <span class=\"mf\">1.395</span> <span class=\"n\">ms</span>              <span class=\"n\">┊</span> <span class=\"n\">GC</span> <span class=\"p\">(</span><span class=\"n\">median</span><span class=\"p\">)</span><span class=\"o\">:</span>    <span class=\"mf\">0.00</span><span class=\"o\">%</span>\n <span class=\"n\">Time</span>  <span class=\"p\">(</span><span class=\"n\">mean</span> <span class=\"o\">±</span> <span class=\"n\">σ</span><span class=\"p\">)</span><span class=\"o\">:</span>   <span class=\"mf\">1.427</span> <span class=\"n\">ms</span> <span class=\"o\">±</span>  <span class=\"mf\">1.418</span> <span class=\"n\">ms</span>  <span class=\"n\">┊</span> <span class=\"n\">GC</span> <span class=\"p\">(</span><span class=\"n\">mean</span> <span class=\"o\">±</span> <span class=\"n\">σ</span><span class=\"p\">)</span><span class=\"o\">:</span>  <span class=\"mf\">5.30</span><span class=\"o\">%</span> <span class=\"o\">±</span>  <span class=\"mf\">5.07</span><span class=\"o\">%</span>\n\n                                                   <span class=\"n\">▁▆█▆▂</span>\n  <span class=\"n\">▃▆▇█▇▆▄▃▂▂▂▂▂▂▂▁▂▂▁▁▂▁▁▂▁▁▁▁▂▂▁▂▂▂▂▂▂▂▂▃▃▃▃▄▅▆▆▆▆█████▇▅▃▂</span> <span class=\"n\">▃</span>\n  <span class=\"mf\">1.19</span> <span class=\"n\">ms</span>        <span class=\"n\">Histogram</span><span class=\"o\">:</span> <span class=\"n\">frequency</span> <span class=\"n\">by</span> <span class=\"n\">time</span>        <span class=\"mf\">1.43</span> <span class=\"n\">ms</span> <span class=\"o\">&lt;</span>\n\n <span class=\"n\">Memory</span> <span class=\"n\">estimate</span><span class=\"o\">:</span> <span class=\"mf\">863.22</span> <span class=\"n\">KiB</span><span class=\"p\">,</span> <span class=\"n\">allocs</span> <span class=\"n\">estimate</span><span class=\"o\">:</span> <span class=\"mf\">5596.</span><span class=\"sb\">```</span>\n</code></pre></div>",
        "id": 262951103,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638137317
    },
    {
        "content": "<p>[slack] &lt;Qiyao Wei&gt; Gotcha. The reason I ask is because I get different results when running an experiment in Python vs Julia, so I was wondering whether there’s something different between the python solvers (<a href=\"https://github.com/rtqichen/torchdiffeq/tree/master/torchdiffeq/_impl\">https://github.com/rtqichen/torchdiffeq/tree/master/torchdiffeq/_impl</a>) and ours. Is there any difference off the top of your head? Or should the implementation be expected to be the same?</p>",
        "id": 262991091,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638182391
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; There are a lot of small differences. Different adaptivity method (tuned PI is more stable), different tableau (slightly more efficient), different matmul, etc.</p>",
        "id": 262997327,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638186344
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; I’m migrating a PDE solver I coded to <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a>, and I’m encountering a weird issue when applying <code>solve()</code>. I’m new to <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a>, so excuse my potentially noob question. I’m basically doing something pretty straightforward like:</p>\n<div class=\"codehilite\" data-code-language=\"iceflow_prob\"><pre><span></span><code>@time solve(iceflow_prob,KenCarp4(),progress=true)\n\nfunction iceflow!(dH, H, p,t)\n    S, B = p\n    S .= B .+ H # code crashes here\n    # other stuff to solve the PDE goes here\nend```\nFor the first 3-4 iterations, `H` remains a Float32 matrix as initially initialized, but after some point it turns into a matrix of\n```Dual{ForwardDiff.Tag{SciMLBase.UJacobianWrapper{ODEFunction{true, typeof(iceflow!), UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Float64, Tuple{Int64, Int64, Float64, Float64, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Vector{Float64}, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Float64, Int64, Int64}}, Float32}}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)     Dual{ForwardDiff.Tag{SciMLBase.UJacobianWrapper{ODEFunction{true, typeof(iceflow!), UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Float64, Tuple{Int64, Int64, Float64, Float64, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Vector{Float64}, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Float64, Int64, Int64}}, Float32}}(0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0)```\ngiving the following error:\n```ERROR: LoadError: MethodError: no method matching Float32(::ForwardDiff.Dual{ForwardDiff.Tag{SciMLBase.UJacobianWrapper{ODEFunction{true, typeof(iceflow!), UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Float64, Tuple{Int64, Int64, Float64, Float64, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Vector{Float64}, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Float64, Int64, Int64}}, Float32}, Float32, 12})\nClosest candidates are:\n  (::Type{T})(::Real, ::RoundingMode) where T&lt;:AbstractFloat at rounding.jl:200\n  (::Type{T})(::T) where T&lt;:Number at boot.jl:760\n  (::Type{T})(::SymbolicUtils.Symbolic) where T&lt;:Union{AbstractFloat, Integer, Complex{var\"#s132\"} where var\"#s132\"&lt;:AbstractFloat, Complex{var\"#s131\"} where var\"#s131\"&lt;:Integer} at /srv/julia/pkg/packages/Symbolics/LTmGT/src/Symbolics.jl:130\n  ...\nStacktrace:\n  [1] convert(#unused#::Type{Float32}, x::ForwardDiff.Dual{ForwardDiff.Tag{SciMLBase.UJacobianWrapper{ODEFunction{true, typeof(iceflow!), UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Float64, Tuple{Int64, Int64, Float64, Float64, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Vector{Float64}, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Matrix{Float32}, Float64, Int64, Int64}}, Float32}, Float32, 12})\n    @ Base ./number.jl:7\n  [2] setindex!\n    @ ./array.jl:845 [inlined]\n  [3] setindex!\n    @ ./multidimensional.jl:639 [inlined]\n  [4] macro expansion\n    @ ./broadcast.jl:984 [inlined]\n  [5] macro expansion\n    @ ./simdloop.jl:77 [inlined]\n  [6] copyto!\n    @ ./broadcast.jl:983 [inlined]\n  [7] copyto!\n    @ ./broadcast.jl:936 [inlined]\n  [8] materialize!\n    @ ./broadcast.jl:894 [inlined]\n  [9] materialize!\n    @ ./broadcast.jl:891 [inlined]\n.....\n.....```\nAny idea on what might be going on? Thanks in advance!\n</code></pre></div>",
        "id": 263026795,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638201261
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://diffeq.sciml.ai/stable/basics/faq/#I-get-Dual-number-errors-when-I-solve-my-ODE-with-Rosenbrock-or-SDIRK-methods\">https://diffeq.sciml.ai/stable/basics/faq/#I-get-Dual-number-errors-when-I-solve-my-ODE-with-Rosenbrock-or-SDIRK-methods</a></p>",
        "id": 263028461,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638201897
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; Thanks @chrisrackauckas. This is part of my attempt to use KenCarp4 for my UDE as you suggested. Knowing that my end goal is to use it for an UDE with <a href=\"https://github.com/search?q=DiffEqFlux.jl&amp;type=Repositories\">DiffEqFlux.jl</a>, I guess it would be better to use <code>get_tmp()</code> instead of <code>autodiff=false</code>?</p>",
        "id": 263029667,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638202373
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I mean, autodiff=false isn't that bad because it's just the Jacobian so it's the same asymptotic compute, just a little slower</p>",
        "id": 263030087,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638202548
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; Is it worth the extra speed or should I just go for the easy solution?</p>",
        "id": 263030520,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638202730
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; both are easy <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 263031741,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638203171
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but do your thing, and then if you need more speed, that's something to consider for like a 20% gain'</p>",
        "id": 263031782,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638203189
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; maybe</p>",
        "id": 263031788,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638203191
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it might not do anything</p>",
        "id": 263031795,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638203193
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; worth profiling</p>",
        "id": 263031808,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638203196
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; Will do. Thanks a lot!</p>",
        "id": 263032668,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638203572
    },
    {
        "content": "<p>[slack] &lt;Cameron&gt; I'm having a hard time with something and I'm wondering if people can point me on to some resources. I have a differential equation that is a function of (a) the unknown function and (b) the inverse of the unknown function. I'm a bit stuck and wonder if anyone has seen this kind of thing before?</p>",
        "id": 263064163,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638217998
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what does it look like in math?</p>",
        "id": 263064321,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638218075
    },
    {
        "content": "<p>[slack] &lt;Cameron&gt; It's big, let me tidy it up and make it more explicit.</p>",
        "id": 263064417,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638218130
    },
    {
        "content": "<p>[slack] &lt;Cameron&gt; I'm trying to find this p function, which has an explicit functional form, but I can't calculate any of the \"bar\" variables without the p function. They are essentially posterior means/variances of a stochastic quantity that is p-measurable.: <a href=\"https://files.slack.com/files-pri/T68168MUP-F02PMC2HCQY/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F02PMC2HCQY/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02PMC2HCQY/download/image.png\"><img src=\"https://uploads.zulipusercontent.net/a5c3af763852ac607f03de5355dd6fd96249b009/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d463032504d4332484351592f646f776e6c6f61642f696d6167652e706e67\"></a></div>",
        "id": 263064879,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638218365
    },
    {
        "content": "<p>[slack] &lt;Cameron&gt; I need p-inverse to get E[f | p], and M-bar in particular is just a function of p non-inverted</p>",
        "id": 263065004,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638218417
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what do you mean you're trying to find the p function but it has an explicit form: you mean you are trying to find the variables?</p>",
        "id": 263065217,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638218555
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; parameters?</p>",
        "id": 263065226,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638218568
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; rho?</p>",
        "id": 263065240,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638218577
    },
    {
        "content": "<p>[slack] &lt;Cameron&gt; Like I know that p is a difference between M bar and rho Vbar</p>",
        "id": 263065315,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638218628
    },
    {
        "content": "<p>[slack] &lt;Cameron&gt; But that's not super helpful</p>",
        "id": 263065321,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638218633
    },
    {
        "content": "<p>[slack] &lt;Cameron&gt; Rho is known</p>",
        "id": 263065332,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638218640
    },
    {
        "content": "<p>[slack] &lt;Cameron&gt; Mbar is calculable given p and p-inverse, same with V bar</p>",
        "id": 263065399,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638218671
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; so you're just trying to solve the system of PDAEs?</p>",
        "id": 263065445,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638218716
    },
    {
        "content": "<p>[slack] &lt;Cameron&gt; Never heard of those but a quick glance seems to suggest that is the case</p>",
        "id": 263065564,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638218782
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you can just do central differences to get a system of nonlinear equations and throw it into <a href=\"https://github.com/search?q=NonlinearSolve.jl&amp;type=Repositories\">NonlinearSolve.jl</a> and see if it's stable. That has a chance of being discretization-dependent though, but worth a try</p>",
        "id": 263065629,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638218820
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Otherwise NeuralPDE will solve a PDAE into NN forms, but it'll take a bit of compute.</p>",
        "id": 263065655,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638218835
    },
    {
        "content": "<p>[slack] &lt;Cameron&gt; Got a lot of compute so I'll stick that in my back pocket for now, thank you!</p>",
        "id": 263065687,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638218862
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; open an issue.</p>",
        "id": 263107044,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638254854
    },
    {
        "content": "<p>[slack] &lt;Sigmund Ellingsrud&gt; NonLinearSolve's documentation gives 404 error, are there any good tutorials available you guys would recommend?</p>",
        "id": 263140715,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638277578
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://nonlinearsolve.sciml.ai/dev/\">https://nonlinearsolve.sciml.ai/dev/</a></p>",
        "id": 263144084,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638279132
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; Quick question, what’s the best strategy to update parameters inside a function used in an <code>ODEProblem</code> that need to be propagated through different timesteps? I have a function for a timestep with the classic format :</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>   a, b, c = p\n   # do some stuff to update a and b\n   p = (a, b, c)\n   # do some stuff for the ODE to compute du\nend```\nBut the thing is that changes in `a` and `b` in `p` are not propagated through different timesteps when doing `solve`. Should I keep them as separate parameters like `timestep!(du, u, a, b, p, t)` or is there a better way? Thanks!\n</code></pre></div>",
        "id": 263153532,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638282997
    },
    {
        "content": "<p>[slack] &lt;tinosulzer&gt; Is there a way to create an <code>ODEFunction</code> with a modelingtoolkitized ODE that uses the generated jacobian?</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>  y₁,y₂,y₃ = u\n  k₁,k₂,k₃ = p\n  du[1] = -k₁*y₁+k₃*y₂*y₃\n  du[2] =  k₁*y₁-k₂*y₂^2-k₃*y₂*y₃\n  du[3] =  k₂*y₂^2\n  nothing\nend\nprob = ODEProblem(rober,[1.0,0.0,0.0],(0.0,1e5),(0.04,3e7,1e4))\nsys = modelingtoolkitize(prob)\njac = eval(ModelingToolkit.generate_jacobian(sys)[2])\nf = ODEFunction(rober, jac=jac) # works\nf = ODEFunction(sys) # works\nf = ODEFunction(sys, jac=jac) #errors```\nthe error is\n```ERROR: TypeError: non-boolean (var\"#13#14\") used in boolean context\nStacktrace:\n\n(ODEFunction{true})(sys::ODESystem, dvs::Vector{Term{Real, Base.ImmutableDict{DataType, Any}}}, ps::Vector{Sym{Real, Base.ImmutableDict{DataType, Any}}}, u0::Nothing; version::Nothing, tgrad::Bool, jac::Function, eval_expression::Bool, sparse::Bool, simplify::Bool, eval_module::Module, steady_state::Bool, checkbounds::Bool, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}) at /Users/vsulzer/.julia/packages/ModelingToolkit/r5ZaU/src/systems/diffeqs/abstractodesystem.jl\n\n(::Core.var\"#Type##kw\")(::NamedTuple{(:jac,), Tuple{var\"#13#14\"}}, ::Type{ODEFunction{true}}, sys::ODESystem, dvs::Vector{Term{Real, Base.ImmutableDict{DataType, Any}}}, ps::Vector{Sym{Real, Base.ImmutableDict{DataType, Any}}}, u0::Nothing) at /Users/vsulzer/.julia/packages/ModelingToolkit/r5ZaU/src/systems/diffeqs/abstractodesystem.jl\n\n(::Core.var\"#Type##kw\")(::NamedTuple{(:jac,), Tuple{var\"#13#14\"}}, ::Type{ODEFunction{true}}, sys::ODESystem) at /Users/vsulzer/.julia/packages/ModelingToolkit/r5ZaU/src/systems/diffeqs/abstractodesystem.jl\n\n#ODEFunction#248 at /Users/vsulzer/.julia/packages/ModelingToolkit/r5ZaU/src/systems/diffeqs/abstractodesystem.jl\n\n(::Core.var\"#Type##kw\")(::NamedTuple{(:jac,), Tuple{var\"#13#14\"}}, ::Type{ODEFunction}, ::ODESystem) at /Users/vsulzer/.julia/packages/ModelingToolkit/r5ZaU/src/systems/diffeqs/abstractodesystem.jl\n\ntop-level scope at /Users/vsulzer/Documents/Energy_storage/DFN.jl/pybamm/hardcoded_models/SPM_discretized_mtkize.jl\n\nERROR: TypeError: non-boolean (var\"#13#14\") used in boolean context\nStacktrace:\n\n(ODEFunction{true})(sys::ODESystem, dvs::Vector{Term{Real, Base.ImmutableDict{DataType, Any}}}, ps::Vector{Sym{Real, Base.ImmutableDict{DataType, Any}}}, u0::Nothing; version::Nothing, tgrad::Bool, jac::Function, eval_expression::Bool, sparse::Bool, simplify::Bool, eval_module::Module, steady_state::Bool, checkbounds::Bool, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}) at /Users/vsulzer/.julia/packages/ModelingToolkit/r5ZaU/src/systems/diffeqs/abstractodesystem.jl\n\n(::Core.var\"#Type##kw\")(::NamedTuple{(:jac,), Tuple{var\"#13#14\"}}, ::Type{ODEFunction{true}}, sys::ODESystem, dvs::Vector{Term{Real, Base.ImmutableDict{DataType, Any}}}, ps::Vector{Sym{Real, Base.ImmutableDict{DataType, Any}}}, u0::Nothing) at /Users/vsulzer/.julia/packages/ModelingToolkit/r5ZaU/src/systems/diffeqs/abstractodesystem.jl\n\n(::Core.var\"#Type##kw\")(::NamedTuple{(:jac,), Tuple{var\"#13#14\"}}, ::Type{ODEFunction{true}}, sys::ODESystem) at /Users/vsulzer/.julia/packages/ModelingToolkit/r5ZaU/src/systems/diffeqs/abstractodesystem.jl\n\n#ODEFunction#248 at /Users/vsulzer/.julia/packages/ModelingToolkit/r5ZaU/src/systems/diffeqs/abstractodesystem.jl\n\n(::Core.var\"#Type##kw\")(::NamedTuple{(:jac,), Tuple{var\"#13#14\"}}, ::Type{ODEFunction}, ::ODESystem) at /Users/vsulzer/.julia/packages/ModelingToolkit/r5ZaU/src/systems/diffeqs/abstractodesystem.jl\n\ntop-level scope at /Users/vsulzer/Documents/Energy_storage/DFN.jl/pybamm/hardcoded_models/SPM_discretized_mtkize.jl```\n</code></pre></div>",
        "id": 263165182,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638287929
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; why are you generating it separately?</p>",
        "id": 263165290,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638287975
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; What piece of the documentation suggested to you that it was a good idea? I've seen some people do this and I have no clue why <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 263165322,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638287991
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>f = ODEFunction(sys, jac=true) </code></p>",
        "id": 263165333,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638287996
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that's what you should do</p>",
        "id": 263165339,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638288000
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and I assume there's some tutorial I need to go change.</p>",
        "id": 263165405,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638288010
    },
    {
        "content": "<p>[slack] &lt;tinosulzer&gt; Ah ok, I was just following this <a href=\"https://github.com/SciML/ModelingToolkit.jl/blob/master/docs/src/mtkitize_tutorials/modelingtoolkitize.md\">https://github.com/SciML/ModelingToolkit.jl/blob/master/docs/src/mtkitize_tutorials/modelingtoolkitize.md</a></p>",
        "id": 263166242,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638288291
    },
    {
        "content": "<p>[slack] &lt;tinosulzer&gt; And then thought “why pass in the original ODE and not the mtkized one”</p>",
        "id": 263166299,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638288312
    },
    {
        "content": "<p>[slack] &lt;tinosulzer&gt; But this makes much more sense</p>",
        "id": 263166317,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638288320
    },
    {
        "content": "<p>[slack] &lt;tinosulzer&gt; I can make a PR adding the line to say this is done automatically if you do <code>jac=True</code></p>",
        "id": 263166397,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638288348
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; ahhhhhhhhhhh</p>",
        "id": 263166490,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638288375
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that's why people are doing it</p>",
        "id": 263166500,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638288378
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; okay yeah, I'll change this tutorial</p>",
        "id": 263166512,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638288384
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; thanks</p>",
        "id": 263166518,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638288385
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I couldn't figure out why I kept seeing this on Discourse, but there's been a pattern <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 263166542,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638288394
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>jac = eval(ModelingToolkit.generate_jacobian(sys)[2])</code> is very unnecessary in 2021 MTK <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 263166619,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638288417
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/SciML/ModelingToolkit.jl/pull/1393\">https://github.com/SciML/ModelingToolkit.jl/pull/1393</a> boom'</p>",
        "id": 263166763,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638288466
    },
    {
        "content": "<p>[slack] &lt;tinosulzer&gt; haha I was wondering why this had to be done manually</p>",
        "id": 263169580,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638289585
    },
    {
        "content": "<p>[slack] &lt;tinosulzer&gt; and it’s the first result (for me) when you google <code>modelingtoolkitize</code></p>",
        "id": 263169629,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638289613
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; one person does it, it's weird. Two, okay... Three? I made a documentation error somewhere <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 263171015,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638290199
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; Any suggestions for this @chrisrackauckas?</p>",
        "id": 263173030,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638290970
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; If <code>p</code> is a mutable object and you mutate it then it will be changed</p>",
        "id": 263173289,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638291079
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; this is just the semantics of immutables.</p>",
        "id": 263173296,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638291083
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; remember adaptive solvers do not always move forward in time.</p>",
        "id": 263173343,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638291102
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; <code>p</code> in my case is a tuple, so it should be able to be mutated, right?.</p>\n<p>I understand, but irrespectively time is moving forward I’d like to be able to update parameters in <code>p</code> at a given moment.</p>",
        "id": 263175799,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638291970
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; no, tuples are immutables</p>",
        "id": 263175872,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638291998
    },
    {
        "content": "<p>[slack] &lt;Alexandr Komisov&gt; Hello) Is there a common way to solve hybrid continuous/discrete time systems with MTK/DiffEq?</p>",
        "id": 263256075,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638346186
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yes, use events. Do it in DiffEq right now, but in about a month MTK should be good for this. Or be brave and try it and report issues</p>",
        "id": 263269957,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638354667
    },
    {
        "content": "<p>[slack] &lt;Alexandr Komisov&gt; Thanks for your reply! Will try both options)</p>",
        "id": 263272212,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638355795
    },
    {
        "content": "<p>[slack] &lt;Sigmund Ellingsrud&gt; Is it possible to use <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a> to model a jump diffusion process where the jump intensity itselfs follows a stochastic process (orhnstein uhlenbeck)?</p>",
        "id": 263290349,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638365756
    },
    {
        "content": "<p>[slack] &lt;Sigmund Ellingsrud&gt; Nvm, found the place in the docs I overlooked at first on coupling processes</p>",
        "id": 263290828,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638365943
    },
    {
        "content": "<p>[slack] &lt;xtalax&gt; hey, is there a way of programmatically generating derivatives of given order of dependent variables, like</p>\n<div class=\"codehilite\" data-code-language=\"for\"><pre><span></span><code>    D = Differential(x, order=order)(u(x,y,t))\n    #Do some stuff with D\nend\n# EDIT: Found the answer:\nD = (Differential(x)^order)(u(x,y,t))```\n</code></pre></div>",
        "id": 263293890,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638367206
    },
    {
        "content": "<p>[slack] &lt;amilsted&gt; I did <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> <a href=\"https://github.com/SciML/DiffEqSensitivity.jl/issues/508\">https://github.com/SciML/DiffEqSensitivity.jl/issues/508</a></p>",
        "id": 263327679,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638380272
    },
    {
        "content": "<p>[slack] &lt;fieldofnodes&gt; Computing question. I am in the UK and looking to upgrade my laptop. I would like to do some GPU assisted computing. machine learning, image processing etc. Any mid range suggestions for laptops?</p>",
        "id": 263420948,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638442989
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; GPUs on laptops are only for developing GPU-compatible packages. They are too weak to really give you nice speedups in actual computations. I'd suggest get a laptop with a good battery and SSH to a compute cluster.</p>",
        "id": 263421772,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638443441
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Here's SciML's stance on the new Julia LTS</p>\n<p><a href=\"https://sciml.ai/news/2021/12/02/lts/\">https://sciml.ai/news/2021/12/02/lts/</a></p>",
        "id": 263421936,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638443546
    },
    {
        "content": "<p>[slack] &lt;hexaeder&gt; What do you mean by “All packages will be given a minimum version of the LTS”?<br>\nDoes it mean to raise the minimum julia version in the Project.toml to 1.6?</p>",
        "id": 263435958,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638451469
    },
    {
        "content": "<p>[slack] &lt;fieldofnodes&gt; Thanks for the share.</p>",
        "id": 263437098,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638451993
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 263479726,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638469252
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; Hi! I’m porting some code to <a href=\"https://github.com/search?q=DiffEqFlux.jl&amp;type=Repositories\">DiffEqFlux.jl</a> and I have a noob question. When computing the pullback with Zygote I can pass multiple arguments to the loss function (e.g. <code>loss_UA, back_UA = Zygote.pullback(() -&gt; loss(H, glacier_ref, UA, p, t, t₁), θ)</code>), but all examples I have seen with <code>sciml_train</code> only pass the NN gradients (<code>θ</code>) to the loss function.</p>\n<p>What is the right way to pass other arguments than the NN parameters to the loss function in <code>sciml_train</code>? After many tests and browsing through the docs I still haven’t figured it out. For more details I have explained my problem in detail <a href=\"https://discourse.julialang.org/t/optimizing-performance-of-zygote-for-2d-nonlinear-diffusion-pde/72113/10?u=jordibolibar\">https://discourse.julialang.org/t/optimizing-performance-of-zygote-for-2d-nonlinear-diffusion-pde/72113/10?u=jordibolibar</a>. Thanks a lot in advance!</p>",
        "id": 263613033,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638553263
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you don't have to keep asking haha</p>",
        "id": 263620249,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638556541
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I saw it and will answer when I'm free.</p>",
        "id": 263620259,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638556545
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @Jordi Bolibar I couldn't run it because there was some missing from the post, but the main thing is to pack them into a vector and then just <code>@view</code> it out.</p>",
        "id": 263727855,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638646989
    },
    {
        "content": "<p>[slack] &lt;rusandris&gt; Hi! would it be possible to use additive noise, but set the rng to give only values from say [0,1]?</p>",
        "id": 263814909,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638774745
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; That's not well-defined continuously. I don't think there's an SDE for that.</p>",
        "id": 263837319,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638790302
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; And you're probably looking at an RODE at that point.</p>",
        "id": 263837331,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638790308
    },
    {
        "content": "<p>[gitter] &lt;cirlo:<a href=\"http://matrix.org\">matrix.org</a>&gt; Hi! I am pretty new to differential equations in general, but for the last few months I've been working on my internship project using <a href=\"https://github.com/search?q=DiffEq.jl&amp;type=Repositories\">DiffEq.jl</a> in order to find \"streamlines\" in a complicated vector field.</p>\n<p>Now: the thing is that I would like to decrease the memory usage (and run time) and most of my framework time goes into solving the differential equations starting from different initial conditions and/or going in the opposite direction (e.g., tspan=(0,-100) instead of tspan=(0,100)). Do you have any tips for me? I already tried to use Static Arrays and make as few allocations as I can but i think i can still do something...</p>",
        "id": 263852513,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638798847
    },
    {
        "content": "<p>[gitter] &lt;cirlo:<a href=\"http://matrix.org\">matrix.org</a>&gt; for instance: for every iteration of my \"main\" function I solve something like  between 100/1000 different ODEProblems. Which differ from each other only by their initial condition or the tspan</p>",
        "id": 263852825,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638798998
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; I am not sure if it works but i would encourage  you to try: <a href=\"https://github.com/baggepinnen/MonteCarloMeasurements.jl\">https://github.com/baggepinnen/MonteCarloMeasurements.jl</a></p>",
        "id": 263853537,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638799317
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @cirlo and you're already parallelizing it and such?</p>",
        "id": 263854028,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638799530
    },
    {
        "content": "<p>[gitter] &lt;cirlo:<a href=\"http://matrix.org\">matrix.org</a>&gt; @pure_interpeter I will look into that, thank you!</p>",
        "id": 263854180,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638799607
    },
    {
        "content": "<p>[slack] &lt;Fredrik Bagge Carlson&gt; <a href=\"https://github.com/search?q=MonteCarloMeasurements.jl&amp;type=Repositories\">MonteCarloMeasurements.jl</a> will typically not decrease the memory consumption in a case like this. Also, MCM would not work if the tspan are different between the solves</p>",
        "id": 263854188,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638799612
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; Yeah it allows batching different intial conditions over the same time interval and might speed things up by similar operations being performed together instead them being of seperated by other code.</p>",
        "id": 263854657,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638799832
    },
    {
        "content": "<p>[gitter] &lt;cirlo:<a href=\"http://matrix.org\">matrix.org</a>&gt; @chrisrackauckas yes, but not on the DiffEq calculation.<br>\nWhat I am basically doing is building surfaces for hundrends of thousands of initial points. For each surface I compute tens of ODEProblems which get me streamlines from which i can build the surface.</p>\n<p>I have at my disposal a HPC so I am parallelizing both in a distributed way and with threads. But the \"simple\" &amp; \"atomic\" part is indeed the surface building</p>",
        "id": 263854734,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638799869
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; How big are the ODEs?</p>",
        "id": 263854805,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638799909
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; DiffEqGPU is a good candidate for that.</p>",
        "id": 263854816,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638799914
    },
    {
        "content": "<p>[gitter] &lt;cirlo:<a href=\"http://matrix.org\">matrix.org</a>&gt; @pure_interpeter well that could be interesting anyway, tbf</p>",
        "id": 263854961,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638799967
    },
    {
        "content": "<p>[gitter] &lt;cirlo:<a href=\"http://matrix.org\">matrix.org</a>&gt; @chrisrackauckas how can i \"size\" an ODE?</p>",
        "id": 263855006,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638799987
    },
    {
        "content": "<p>[gitter] &lt;cirlo:<a href=\"http://matrix.org\">matrix.org</a>&gt; @chrisrackauckas this is the HPC i'm working with doesn't have many GPU nodes :\\</p>",
        "id": 263855095,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638800027
    },
    {
        "content": "<p>[slack] &lt;Fredrik Bagge Carlson&gt; yeah, if the number of solves is small enough that static vectors are usable, and all solves have the same tspan, you could speed things up slightly if StaticParticles admit more SIMDing than parallel solve. To get the most speed out of it, you'd have to make use of both the SoA approach of MCM and threading at the same time which I have been thinking about doing for a while, but never had the need arise.</p>",
        "id": 263855127,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638800038
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; Size of the state space of the ODE.</p>",
        "id": 263855140,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638800042
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; I don't think the Gitter bridge transmits comments to posts.</p>",
        "id": 263855274,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638800093
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; length(u0)</p>",
        "id": 263855301,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638800106
    },
    {
        "content": "<p>[slack] &lt;Fredrik Bagge Carlson&gt; I'm really looking forward to the new array optimizations that will be enabled by escape analysis, such as eliding allocations for non-escaping arrays. That would make the non-static particles <strong>much</strong> faster for many workloads</p>",
        "id": 263855534,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638800212
    },
    {
        "content": "<p>[gitter] &lt;cirlo:<a href=\"http://matrix.org\">matrix.org</a>&gt; @chrisrackauckas btw I take the last state of the ODE + a sampling I do with a ContinuousCallback every 0.5 voxel in a grid space. The \"lines\" (so <code>sol.u</code>) can have sizes between 0 and ~200 at maximum, I'd say</p>",
        "id": 263855536,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638800212
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; why does the sampling need to be done via a ContinuousCallback?</p>",
        "id": 263855604,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638800248
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; That would probably be the most expensive part.</p>",
        "id": 263855616,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638800257
    },
    {
        "content": "<p>[gitter] &lt;cirlo:<a href=\"http://matrix.org\">matrix.org</a>&gt; @Fredrik Bagge Carlson I don't fully get what you mean, but I will look into the words you used that I don't get</p>",
        "id": 263855756,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638800309
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; Julia is as fast as it is now without doing that, wow.</p>",
        "id": 263855937,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638800401
    },
    {
        "content": "<p>[gitter] &lt;cirlo:<a href=\"http://matrix.org\">matrix.org</a>&gt; @chrisrackauckas I know that is probably the most expensive part, but my approach of finding a surface using two vector fields in two perpendicular directions relies on sampling points over a \"grid\"</p>",
        "id": 263856081,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638800451
    },
    {
        "content": "<p>[slack] &lt;Fredrik Bagge Carlson&gt; yeah, right now we're paying both for the alloaction of the memory, and for handling it in the GC. Eliding the allocation all together would of course avoid all of that, but even the intermediate optimization of freeing the allocated memory early if the array does not escape would avoid the GC time.</p>",
        "id": 263856184,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638800500
    },
    {
        "content": "<p>[gitter] &lt;cirlo:<a href=\"http://matrix.org\">matrix.org</a>&gt; And a dense solution is not enough because it takes <code>t</code> as an input. And that is not enough to get a sampling over a grid</p>",
        "id": 263856195,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638800505
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; Is that why Jullia code sometimes has insane allocation numbers compared to size of state?</p>",
        "id": 263856301,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638800545
    },
    {
        "content": "<p>[slack] &lt;Fredrik Bagge Carlson&gt; it's at least part of it, we're not eliding many allocations at all, in particular not array allocations. Allocation of views can be elided since 1.4-5 IIRC, but array allocations are never elided as of yet</p>",
        "id": 263856489,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638800641
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I don't understand why sampling would require pullback of the solution. Those are two different facts</p>",
        "id": 263856589,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638800674
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; a DiscreteCallback would likely be a better option.</p>",
        "id": 263856607,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638800684
    },
    {
        "content": "<p>[gitter] &lt;cirlo:<a href=\"http://matrix.org\">matrix.org</a>&gt; &gt; a DiscreteCallback would likely be a better option.<br>\nI mean, I could try to translate my sampling function, it's just that I find it more convenient that way so far</p>",
        "id": 263856933,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638800832
    },
    {
        "content": "<p>[gitter] &lt;cirlo:<a href=\"http://matrix.org\">matrix.org</a>&gt; I guess what I can work on right now is exactly on that and see if ti's possible. And if not, why</p>",
        "id": 263856984,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638800855
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; I think what Chris is saying is that things would be a lot cheaper if no line was performed as is necessary for continous callback .<br>\nAnother alternative might be to use the interpolation of solution object. You save the trajectories and search those later for the ones closest to grid points you are interested in.</p>",
        "id": 263857732,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638801190
    },
    {
        "content": "<p>[gitter] &lt;cirlo:<a href=\"http://matrix.org\">matrix.org</a>&gt; @pure_interpeter thing is I am afraid I _need_ that line to be as precise as I can. I don't know if I want to bail on that...</p>",
        "id": 263858558,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638801549
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the ContinuousCallback is using the same interpolation</p>",
        "id": 263863248,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638803399
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>DiscreteCallback</code> can use the interpolation in the <code>integrator(t)</code> form</p>",
        "id": 263863309,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638803409
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but it won't force pullback at roots, which is required for applications of ContinuousCallback but not for this.</p>",
        "id": 263863355,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638803431
    },
    {
        "content": "<p>[gitter] &lt;cirlo:<a href=\"http://matrix.org\">matrix.org</a>&gt; &gt;DiscreteCallback can use the interpolation in the integrator(t) form</p>\n<p>thing is that i think with <code>integrator(t)</code> I still would need to apply some kind of root algorithm to find exactly when the line intersects the grid, wouldn't I?</p>",
        "id": 263896958,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638816227
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes, but you won't need to do the pullback</p>",
        "id": 263920270,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638822566
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; how often is it saving compared to the optimal dt?</p>",
        "id": 263920291,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638822578
    },
    {
        "content": "<p>[gitter] &lt;cirlo:<a href=\"http://matrix.org\">matrix.org</a>&gt; &gt; yes, but you won't need to do the pullback</p>\n<p>Oh okay. I don't fully get what a \"pullback\" is, but I understand it's better if I avoid it</p>",
        "id": 263930447,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638827858
    },
    {
        "content": "<p>[gitter] &lt;cirlo:<a href=\"http://matrix.org\">matrix.org</a>&gt; Tomorrow at work I'll start by trying this route then, thank you!</p>",
        "id": 263930534,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638827890
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I have asked about this before, but I would like to check again if there been any updates in recent months to the diffeq packages that would make it easier to solve diffusion problems in mixed form?</p>\n<p>i.e. <code>du = f(x)</code> where <code>x</code> is related to <code>u</code> via a non-linear system. I know that, in principle, this should be solvable as a DAE, but my past attempts at setting it up as such were not successful.</p>",
        "id": 263932508,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638828858
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; example?</p>",
        "id": 263933210,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638829163
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Mass conserving nonlinear heat equation with phase change. Ideally, one would like to integrate <code>dE = d(k(T)*dT/dx)/dx</code> where <code>E</code> is energy and <code>T</code> is temperature. In order to compute this derivative, one needs to first obtain <code>T</code> which requires solving a non-linear system.</p>",
        "id": 263933518,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638829351
    },
    {
        "content": "<p>[slack] &lt;carstenbauer&gt; General high-level question: If I’m interested in solving large, sparse ODE/DAE systems in a distributed fashion (e.g. put weakly coupled portions onto different nodes of a HPC cluster), what does DiffEq offer here / what should I read? I’ve found the note in the FAQs that <a href=\"https://github.com/search?q=DistributedArrays.jl&amp;type=Repositories\">DistributedArrays.jl</a> is supported (but not recommended for general use?). Is there more? I would appreciate some feedback or pointers!</p>",
        "id": 263970432,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638865572
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what kind of system?</p>",
        "id": 263991887,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638879048
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; explicit algebraic equations?</p>",
        "id": 263991899,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638879057
    },
    {
        "content": "<p>[slack] &lt;ranocha&gt; For ODEs and explicit time integrators, I would probably start with some appropriate abstraction of your array type. If you use MPI and calculate the time step by yourself, you don't need to do anything special (current status of our MPI prototype in <a href=\"https://github.com/search?q=Trixi.jl&amp;type=Repositories\">Trixi.jl</a> using <a href=\"https://github.com/search?q=OrdinaryDiffEq.jl&amp;type=Repositories\">OrdinaryDiffEq.jl</a> for time integration). If you want to use adaptive time stepping using the methods from <a href=\"https://github.com/search?q=OrdinaryDiffEq.jl&amp;type=Repositories\">OrdinaryDiffEq.jl</a>, your MPI-array wrapper needs to implement broadcasting and reductions.</p>",
        "id": 263992399,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638879446
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; For implicit methods you need to use a good LU</p>",
        "id": 263992936,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638879804
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; what is that..?</p>",
        "id": 264086777,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638918310
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; 3 v1.7 updates left!</p>\n<p><a href=\"https://github.com/SciML/StochasticDelayDiffEq.jl/pull/47\">https://github.com/SciML/StochasticDelayDiffEq.jl/pull/47</a><br>\n<a href=\"https://github.com/SciML/DiffEqNoiseProcess.jl/pull/97\">https://github.com/SciML/DiffEqNoiseProcess.jl/pull/97</a><br>\n<a href=\"https://github.com/SciML/StochasticDiffEq.jl/pull/445\">https://github.com/SciML/StochasticDiffEq.jl/pull/445</a></p>",
        "id": 264206340,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1638991250
    },
    {
        "content": "<p>[slack] &lt;pure_interpeter&gt; What is the name for and how do I solve differential equations that depend a sliding window convolution of it's past?</p>\n<p>(if the distribution is a delta distribution it would be a DDE but in general it might not be..</p>",
        "id": 264285470,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639048040
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; distributed delay equation</p>",
        "id": 264285636,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639048128
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; or a Volterra integral equation</p>",
        "id": 264285647,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639048137
    },
    {
        "content": "<p>[slack] &lt;Atiyo Ghosh&gt; Maybe your problem could be casted as an <a href=\"https://en.wikipedia.org/wiki/Integro-differential_equation\">https://en.wikipedia.org/wiki/Integro-differential_equation</a>?</p>",
        "id": 264286312,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639048527
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/SciML/OrdinaryDiffEq.jl/pull/1536\">https://github.com/SciML/OrdinaryDiffEq.jl/pull/1536</a></p>",
        "id": 264324644,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639066607
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Can someone test this PR branch in some stiff ODE solver benchmarks?</p>",
        "id": 264324661,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639066615
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Van der Pol, Pollu, ROBER, Orego, etc.</p>",
        "id": 264324707,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639066631
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Work-precision diagrams aren't needed. Just before and after timing differences because it shouldn't effect the calculation.</p>",
        "id": 264324792,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639066657
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I'm just curious what kind of performance gain/loss we get</p>",
        "id": 264324817,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639066666
    },
    {
        "content": "<p>[slack] &lt;jacobusmmsmit&gt; Any tips as to what’s happening here? I have a particle simulation ODE model where agents try to reach their destinations and there are forces of repulsion from walls and other agents. I notice that when one agent reaches its destination and comes to a halt, if there is another agent moving at normal speed the integrator takes begins to take incredibly small steps and it slows down the running time of the model from a few milliseconds or seconds to around 20 minutes in some cases. (I’ve hinted to the solver that it’s a stiff problem)</p>",
        "id": 264332270,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639069559
    },
    {
        "content": "<p>[slack] &lt;jacobusmmsmit&gt; Here’s an example of a run where this problem arises, and we can plot where the steps are as well (note logscale y-axis): <a href=\"https://files.slack.com/files-pri/T68168MUP-F02PR2PEVEK/download/2_agents.gif\">https://files.slack.com/files-pri/T68168MUP-F02PR2PEVEK/download/2_agents.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02PR2PEVEK/download/2_agents.gif\"><img src=\"https://uploads.zulipusercontent.net/86660717e1880d7da3dfc4b6b95c02e28961095a/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d463032505232504556454b2f646f776e6c6f61642f325f6167656e74732e676966\"></a></div>",
        "id": 264332533,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639069656
    },
    {
        "content": "<p>[slack] &lt;jacobusmmsmit&gt; <a href=\"https://files.slack.com/files-pri/T68168MUP-F02Q5NA5TM1/download/screenshot_2021-12-09_at_17.02.46.png\">https://files.slack.com/files-pri/T68168MUP-F02Q5NA5TM1/download/screenshot_2021-12-09_at_17.02.46.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02Q5NA5TM1/download/screenshot_2021-12-09_at_17.02.46.png\"><img src=\"https://uploads.zulipusercontent.net/c75fba74029597725c82625fbd9a83aec2f6e777/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303251354e4135544d312f646f776e6c6f61642f73637265656e73686f745f323032312d31322d30395f61745f31372e30322e34362e706e67\"></a></div>",
        "id": 264332536,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639069657
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; That would take digging. What ODE solver does it choose?</p>",
        "id": 264342982,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639073670
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; That might just be numerically more difficult to resolv</p>",
        "id": 264343089,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639073693
    },
    {
        "content": "<p>[slack] &lt;jacobusmmsmit&gt; It uses Rodas4:<br>\n<code>Rodas4{8, false, DefaultLinSolve, Val{:forward}}(DefaultLinSolve(nothing, nothing, nothing))</code></p>",
        "id": 264344144,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639074089
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Interestinf</p>",
        "id": 264345917,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639074748
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; What happens with TRBDF2?</p>",
        "id": 264345938,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639074757
    },
    {
        "content": "<p>[slack] &lt;jacobusmmsmit&gt; I get a method error :’)</p>",
        "id": 264346817,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639075069
    },
    {
        "content": "<p>[slack] &lt;jacobusmmsmit&gt; It does look like <code>AutoTsit5(Rodas5())</code> works very well though, it still falls into the same trap of overdoing it at the end but nowhere nearly as badly</p>",
        "id": 264347071,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639075159
    },
    {
        "content": "<p>[slack] &lt;jacobusmmsmit&gt; <code>AutoTsit5(Rodas(5)) 0.820778 seconds (65.83 k allocations: 9.745 MiB)\nRodas4() 21.110788 seconds (17.78 M allocations: 744.260 MiB, 4.97% gc time)</code></p>",
        "id": 264347132,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639075189
    },
    {
        "content": "<p>[slack] &lt;jacobusmmsmit&gt; Yeah it looks like AutoTsit5(Rodas5()) is by far the fastest.</p>",
        "id": 264348180,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639075638
    },
    {
        "content": "<p>[slack] &lt;jacobusmmsmit&gt; I’ll try it with a larger number of agents</p>",
        "id": 264348206,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639075650
    },
    {
        "content": "<p>[slack] &lt;rusandris&gt; can you suggest some sources to read on this? i'm interested in the \"not well-defined continuously\" part</p>",
        "id": 264409586,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639119828
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I'm not sure of a source other than, what's the continuous definition of your bounded noise? If it's bounded and your construction is from standard continuous noise, then you will need a nonlinear operation.</p>",
        "id": 264425217,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639130699
    },
    {
        "content": "<p>[slack] &lt;thazhemadam&gt; DiffEqSensitivity doesn't seem to precompile for me (across multiple environments). Can someone please confirm if precompiles or not?</p>",
        "id": 264442393,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639140894
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; What's the error that you get?</p>",
        "id": 264444416,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639141951
    },
    {
        "content": "<p>[slack] &lt;thazhemadam&gt; ```(DiffEqSensitivity) pkg&gt; precompile<br>\nPrecompiling project...<br>\n  ✗ DiffEqSensitivity<br>\n  0 dependencies successfully precompiled in 22 seconds (198 already precompiled)</p>\n<p>ERROR: The following 1 direct dependency failed to precompile:</p>\n<p>DiffEqSensitivity [41bf760c-e81c-5289-8e54-58b1f1f8abe2]</p>\n<p>Failed to precompile DiffEqSensitivity [41bf760c-e81c-5289-8e54-58b1f1f8abe2] to /home/thazhemadam/.julia/compiled/v1.6/DiffEqSensitivity/jl_ccUeiA.<br>\nWARNING: both StochasticDiffEq and LinearSolve export \"DiscreteCallback\"; uses of it in module DiffEqSensitivity must be qualified<br>\nERROR: LoadError: LoadError: UndefVarError: DiscreteCallback not defined<br>\nStacktrace:<br>\n  [1] top-level scope<br>\n    @ ~/DiffEqSensitivity.jl/src/forward_sensitivity.jl:213<br>\n  [2] include(mod::Module, _path::String)<br>\n    @ Base ./Base.jl:384<br>\n  [3] include(x::String)<br>\n    @ DiffEqSensitivity ~/DiffEqSensitivity.jl/src/DiffEqSensitivity.jl:1<br>\n  [4] top-level scope<br>\n    @ ~/DiffEqSensitivity.jl/src/DiffEqSensitivity.jl:33<br>\n  [5] include<br>\n    @ ./Base.jl:384 [inlined]<br>\n  [6] include_package_for_output(pkg::Base.PkgId, input::String, depot_path::Vector{String}, dl_load_path::Vector{String}, load_path::Vector{String}, concrete_deps::Vector{Pair{Base.PkgId, UInt64}}, source::Nothing)<br>\n    @ Base ./loading.jl:1235<br>\n  [7] top-level scope<br>\n    @ none:1<br>\n  [8] eval<br>\n    @ ./boot.jl:360 [inlined]<br>\n  [9] eval(x::Expr)<br>\n    @ Base.MainInclude ./client.jl:446<br>\n [10] top-level scope<br>\n    @ none:1<br>\nin expression starting at /home/thazhemadam/DiffEqSensitivity.jl/src/forward_sensitivity.jl:213<br>\nin expression starting at /home/thazhemadam/DiffEqSensitivity.jl/src/DiffEqSensitivity.jl:1```</p>",
        "id": 264446079,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639142686
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; upgrade DiffEqBase</p>",
        "id": 264446729,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639142970
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; &lt;@U6788D83U&gt; DAE benchmarks are in. ODAEProblem with OrdinaryDiffEq is screaming fast <img alt=\":fast_parrot:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/7178/emoji/images/15527.gif\" title=\"fast parrot\">. DFBDF is still far behind :sad-panda: .: <a href=\"https://files.slack.com/files-pri/T68168MUP-F02QFFAFXQU/download/screenshot_2021-12-11_053413.png\">https://files.slack.com/files-pri/T68168MUP-F02QFFAFXQU/download/screenshot_2021-12-11_053413.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02QFFAFXQU/download/screenshot_2021-12-11_053413.png\"><img src=\"https://uploads.zulipusercontent.net/d617a9ec66fdd212c5f1780911ce011c428ce4ce/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303251464641465851552f646f776e6c6f61642f73637265656e73686f745f323032312d31322d31315f3035333431332e706e67\"></a></div>",
        "id": 264555090,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639218911
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; If anyone has free time, it would be great to get some help translating some DAE benchmark problems from some old Fortran set. I.e. <a href=\"https://github.com/SciML/SciMLBenchmarks.jl/issues/359\">https://github.com/SciML/SciMLBenchmarks.jl/issues/359</a> . All of the tooling is now in place, so it just needs some MTK code for benchmarks!</p>",
        "id": 264561607,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639227611
    },
    {
        "content": "<p>[slack] &lt;Junpeng&gt; I would dive into this in the winter break<span aria-label=\"exhausted\" class=\"emoji emoji-1f625\" role=\"img\" title=\"exhausted\">:exhausted:</span></p>",
        "id": 264564346,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639231330
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh it's definitely fine. You're on the board, now it's just optimizations!</p>",
        "id": 264564383,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639231440
    },
    {
        "content": "<p>[slack] &lt;Junpeng&gt; Thanks for encouragement hh. I may be more familiar with it and should have some free time in the winter break. Will finish it together with Yingbo</p>",
        "id": 264564537,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639231648
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; ODAEProblem is pretty nice. Yeah, Junpeng and I can try to optimize DFBDF. There are many low hanging fruits.</p>",
        "id": 264570269,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639239157
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; @chrisrackauckas in case you meant you wanted to see the algebraic equation, it's just <code>T = (H - L\\theta(T))/C(\\theta(T))</code> where <code>\\theta(T)</code> is an exponential-type function relating temperature to water content. I guess this is an index-1 DAE because one should be able to differentiate once to obtain <code>dT/dt = dT/dH * dH/dt</code>  but I still don't see how to make this work with a mass matrix because <code>dT/dt</code> depends directly on <code>dH/dt</code> via a non-linear function, not via additive linear terms.</p>",
        "id": 264585837,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639258161
    },
    {
        "content": "<p>[slack] &lt;mcabbott&gt; Does anyone know what replaced <code>DiffEqBase.AbstractReactionNetwork</code>? (Trying to update some old code)</p>",
        "id": 264738745,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639415707
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; SciMLBase.AbstractReactionNetwork</p>",
        "id": 264739970,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639416224
    },
    {
        "content": "<p>[slack] &lt;mcabbott&gt; Thanks!</p>",
        "id": 264742069,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639417098
    },
    {
        "content": "<p>[slack] &lt;mcabbott&gt; More update Qs. The thing created by <code>@reaction_network</code> used to have fields <code>.syms</code> and <code>.sys</code>, when it was called DiffEqBiological. Can I extract equivalent things from new <code>Catalyst.ReactionSystem</code>?</p>",
        "id": 264758487,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639424179
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yes</p>",
        "id": 264758831,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639424328
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I'm not understanding your equation from the description <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 264760103,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639424991
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but if it's fully implicit then DAEProblem is the way to go.</p>",
        "id": 264760170,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639425006
    },
    {
        "content": "<p>[slack] &lt;mcabbott&gt; Wait any clues? <code>dump</code> isn’t helping me, and I don’t see much about internals in the docs.</p>",
        "id": 264771312,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639430332
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it is the sys</p>",
        "id": 264771525,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639430449
    },
    {
        "content": "<p>[slack] &lt;mcabbott&gt; But how do I get it? Doc example:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">ReactionSystem</span> <span class=\"n\">has</span> <span class=\"n\">no</span> <span class=\"n\">field</span> <span class=\"n\">sys</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">repressilator</span><span class=\"o\">.</span><span class=\"n\">sys</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">ArgumentError</span><span class=\"o\">:</span> <span class=\"n\">System</span> <span class=\"n\">Repressilator</span><span class=\"o\">:</span> <span class=\"n\">variable</span> <span class=\"n\">sys</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"sa\">exist</span><span class=\"sb\">```</span>\n</code></pre></div>",
        "id": 264771867,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639430643
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it literally is it</p>",
        "id": 264771956,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639430680
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; .sys would've given the ReactionSystem before</p>",
        "id": 264771974,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639430689
    },
    {
        "content": "<p>[slack] &lt;mcabbott&gt; Oh I see, sorry. Let me try that in real code.</p>",
        "id": 264772007,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639430707
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; It's really just the heat equation, but with non-constant diffusion parameters that depend on temperature (and thus includes phase-change). Does that make sense?</p>\n<p>Also, sorry, I switched energy <code>E</code> to <code>H</code> in that last comment <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>\n<p>So: <code>dE/dt = dE/dT * dT/dt = d(k(T)*dT/dx)/dx</code></p>",
        "id": 264823999,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639469842
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; If you add <code>T</code> as an algebraic constraint, it seems to make the Jacobian singular <span aria-label=\"disappointed\" class=\"emoji emoji-1f61e\" role=\"img\" title=\"disappointed\">:disappointed:</span></p>",
        "id": 264824019,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639469872
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Means it's not an index 1 DAE</p>",
        "id": 264839103,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639478980
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; so you'll want to use MTK to do index reduction.</p>",
        "id": 264839119,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639478988
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; Hi everyone! I have opened a topic on Julia Discourse about I think what is a very simple problem of syntax concerning JuliaDiffEq and <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a> that I have. As I am a beginner, I don't think it will take much time for someone to find my mistake.. The topic is here: <a href=\"https://discourse.julialang.org/t/solving-quasi-linear-heat-diffusion-using-diffeqtools-jl-and-differentialequations-jl/72954\">https://discourse.julialang.org/t/solving-quasi-linear-heat-diffusion-using-diffeqtools-jl-and-differentialequations-jl/72954</a> . Thank you very much in advance!!</p>",
        "id": 264840420,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639479705
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @xtalax ^</p>",
        "id": 264841644,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639480356
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Very nice Benchmark!! I have been using DAE to compute waves (and their bifurcations) and it is not an easy road. I get a lot of instabilities and IDA seems the most robust. See <a href=\"https://bifurcationkit.github.io/BifurcationKitDocs.jl/dev/tutorials/tutorials/#Symmetries,-freezing,-waves,-fronts\">tutorials</a> for examples of computation.<br>\nI have not pushed the DAE associated to the detonation wave, but to me it seems a challenging example for <a href=\"https://github.com/search?q=DE.jl&amp;type=Repositories\">DE.jl</a><br>\nIf you are interested, I can provide the code for this (which is not online)</p>",
        "id": 264844346,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639481998
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that would be fantastic. We're trying to build a benchmarking base to tune DFBDF against so that we beat IDA at its own game.</p>",
        "id": 264846869,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639483402
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Ok, I will bundle it</p>",
        "id": 264855255,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639487837
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; Thx Chris for the quick reply on my problem <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 264857328,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639488838
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; @chrisrackauckas Hey, sorry to bug you but I forgot how to get the (autodiff) jacobian from an ODEProblem. Can you gime a hint please? Thank you</p>",
        "id": 264881337,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639498336
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what do you mean?</p>",
        "id": 264881559,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639498422
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; from <code>prob::ODEProblem</code>, how can I get the jacobian of the vector at <code>x,p,t=0</code>? Or is it only provided in ODESolution?</p>",
        "id": 264881707,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639498468
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh you'd need to call ForwardDiff or whatnot</p>",
        "id": 264882521,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639498767
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; unless <code>prob.f.jac</code> exists.</p>",
        "id": 264882535,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639498772
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; it does not</p>",
        "id": 264882549,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639498778
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; it would be created only in a ODESolution for a stiff solver, right?</p>",
        "id": 264882613,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639498804
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes</p>",
        "id": 264882729,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639498838
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; :th]]</p>",
        "id": 264883673,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639499212
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 264883676,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639499214
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I'll try it.</p>",
        "id": 264884120,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639499398
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; Hi everyone, quick question from someone outside the project linked to my previous messages. Has <a href=\"https://github.com/search?q=DiffEqOperators.jl&amp;type=Repositories\">DiffEqOperators.jl</a> reached enough maturity to do a 2D quasi-linear heat equation? I've found this issue <a href=\"https://github.com/SciML/DiffEqOperators.jl/issues/274\">https://github.com/SciML/DiffEqOperators.jl/issues/274</a> saying that it was beeing rewritten and I would like to know if the situation changed, since it was in March.<br>\nIf so, how am I suppose to use nonlinear_diffusion? There is {N} to chose the direction, which seems great, but q and p are required to be vectors. Should I flatten my matrices in the direction of x and y depending of the derivate?</p>",
        "id": 264905733,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639507471
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @xtalax might respond</p>",
        "id": 264906183,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639507625
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Last time I checked, the implementation of non-linear diffusion was quite slow. I stuck with my own implementation for the time being.</p>",
        "id": 264913763,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639510492
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it is</p>",
        "id": 264913815,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639510520
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; For library maturity, DiffEqOperators is probably near the bottom. It still needs a lot of work to meet the level of the other libraries.</p>",
        "id": 264913889,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639510561
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Hopefully this will be improving substantially over the next 8 months!</p>",
        "id": 264914385,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639510808
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh it will</p>",
        "id": 264914412,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639510817
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; I see. Would you recommand another library for the time being for finite differences? I am new to Julia, so I don't really know the must-use ones.. A quick google search show me <a href=\"https://github.com/search?q=FiniteDifference.jl&amp;type=Repositories\">FiniteDifference.jl</a> and <a href=\"https://github.com/search?q=FiniteDiff.jl&amp;type=Repositories\">FiniteDiff.jl</a>. I also have my own solver, so my goal is to compare it with a more \"modern\" approach, hence why I am looking for this kind of thing. Thank you!</p>",
        "id": 264921926,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639514377
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what are you using it for? Writing method of lines finite difference approximation of PDEs?</p>",
        "id": 264922313,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639514544
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; My goal at the end is to solve elliptic and parabolic PDEs in 2D. I've just discovered the MOL recently with SciML. The way I am solving my parabolic PDEs right now is using an ADI scheme that I've written by hand with PETSc as the solver. I've just 1 year of experience in numerical modeling, and I know ADI might be a bit old fashioned, so I am trying to learn new methods with modern tools. So I am quite open.</p>",
        "id": 264924480,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639515564
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; Reading like this, I feel that my answer is too broad. I would just like to have a package to discretize my equations using finite differences in an efficient way, so I could try myself different schemes.</p>",
        "id": 264930251,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639518168
    },
    {
        "content": "<p>[slack] &lt;Olivier Faugeras&gt; Hello folks,</p>",
        "id": 264990510,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639564839
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yellow.</p>",
        "id": 264990557,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639564867
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 264991261,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639565266
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; @chrisrackauckas Hey, did you update something with <code>OrdinaryDiffEq</code> and autodiff recently? I updated everything today and now all of the stiff solvers are broken on my problem... but only when autodiff is enabled.</p>",
        "id": 265036716,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639586197
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh no</p>",
        "id": 265037298,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639586444
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what's your issue?</p>",
        "id": 265037301,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639586445
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I did do a rather deep change</p>",
        "id": 265037317,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639586457
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but it should've been non-breaking according to tests <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 265037337,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639586466
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @Brian Groenke</p>",
        "id": 265037486,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639586526
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Well, I don't really have the time to dig in deep, but basically running <code>Rodas4P2</code> , <code>Trapezoid</code> , <code>TRBDF2</code>  and/or any of the other implicit solvers that I typically use just doesn't work anymore. They run for several minutes (used to take a couple of seconds) and then fail with an \"increase max iters\" error.</p>",
        "id": 265037808,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639586661
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; FWIW, I use <code>DiffCache</code> from <code>PreallocationTools</code> quite liberally, so maybe that's where the trouble is?</p>",
        "id": 265037879,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639586692
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; both <code>PreallocationTools</code> and SparseDiffTools got releases in the last day</p>",
        "id": 265038002,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639586745
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I haven't changed anything in that part of my code recently so I am almost positive it's something in the SciML packages that changed.</p>",
        "id": 265038024,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639586753
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Hmm, well Julia should have updated them too, right?</p>",
        "id": 265038109,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639586775
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; try pinning <a href=\"mailto:PreallocationTools@0.2.0\">PreallocationTools@0.2.0</a> and see if that works</p>",
        "id": 265038110,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639586776
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Ok</p>",
        "id": 265038124,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639586781
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; PreallocationTools is a lot less tested and used than SparseDiffTools</p>",
        "id": 265038142,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639586791
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; What about <code>OrdinaryDiffEq</code> ? Use the latest?</p>",
        "id": 265038167,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639586804
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; if <a href=\"https://github.com/search?q=SparseDiffTools.jl&amp;type=Repositories\">SparseDiffTools.jl</a> was failing that bad I assume I would've seen something by now <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 265038169,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639586805
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah OrdinaryDiffEq shouldn't matter here.</p>",
        "id": 265038188,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639586813
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Ok</p>",
        "id": 265038196,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639586821
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I don't directly use <code>SparseDiffTools</code> , so where does it come into play?</p>",
        "id": 265038272,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639586861
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's the AD tool used in OrdinaryDiffEq</p>",
        "id": 265038283,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639586868
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Ah, ok. I use a tridiagonal jac prototype.</p>",
        "id": 265038313,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639586882
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Not sure which code that hits.</p>",
        "id": 265038385,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639586905
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it'll use SparseDiffTools for the forward_color_jacobian</p>",
        "id": 265038406,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639586917
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; which is a function that was just updated, and so was <code>get_tmp</code> of <a href=\"https://github.com/search?q=PreallocationTools.jl&amp;type=Repositories\">PreallocationTools.jl</a></p>",
        "id": 265038429,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639586929
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; so only change one, test, change the other, test, and isolate which change it was.</p>",
        "id": 265038456,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639586941
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; My money is on <a href=\"https://github.com/search?q=PreallocationTools.jl&amp;type=Repositories\">PreallocationTools.jl</a>, though it very well could be SparseDiffTools</p>",
        "id": 265038510,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639586967
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Unrelated question while l wait for stuff to recompile.... why does <code>CVODE_BDF</code> keep going when the <code>MaxIters</code> flag gets set? Don't the other solvers error out?</p>",
        "id": 265039412,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639587322
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it should be exiting. I thought it did.</p>",
        "id": 265040023,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639587530
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Hmm, nope, it's not exiting for me. And it actually produces quite reasonable results... just has the max iters retcode at the end.</p>",
        "id": 265041775,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639588180
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Sundials would not have been affected by these changes since it won't use AD</p>",
        "id": 265041850,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639588213
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Yes, that should be unrelated.</p>",
        "id": 265042166,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639588326
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; So rolling back <code>PreallocationTools</code> does not seem to have fixed it.</p>",
        "id": 265042526,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639588470
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Alright</p>",
        "id": 265044298,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639589232
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; try <a href=\"mailto:SparseDiffTools@1.18.3\">SparseDiffTools@1.18.3</a></p>",
        "id": 265044322,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639589238
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; do you have a test case I can look at?</p>",
        "id": 265044487,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639589294
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Unfortunately, no, I don't have anything that's like a MWE. I can try to strip it down. I'll also try rolling back my code just to be sure it's not that.</p>",
        "id": 265045612,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639589787
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; @chrisrackauckas I found the problem... it was on my end after all :man-facepalming: sorry!</p>",
        "id": 265137351,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639651346
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> awesome</p>",
        "id": 265140784,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639653234
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I was digging around and was like, I am sure some test would fail if something was wrong here <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 265140835,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639653250
    },
    {
        "content": "<p>[slack] &lt;arn203&gt; for <code>EnsembleCPUArray</code> do parameters need to be in a single vector? I tried using a vector of vectors (which works fine for a single ODE solve), but this causes issues with generating to output array at the end. So I put all parameters in a 2D array, which lead to errors where only a 10 element view was being passed into the solver rather than the 10x33 array of parameters. Again, this only errors with  <code>EnsembleCPUArray</code> .</p>",
        "id": 265147706,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639657506
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes</p>",
        "id": 265147761,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639657552
    },
    {
        "content": "<p>[slack] &lt;arn203&gt; thanks</p>",
        "id": 265147862,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639657603
    },
    {
        "content": "<p>[slack] &lt;arn203&gt; Thanks for the quick response as always!</p>",
        "id": 265147916,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639657643
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; Quick question: are there any other advantages/disadvantages in using <code>sciml_train</code>  with <code>FastChain</code> instead of <code>train</code> with <code>Chain</code> besides the reduced overhead of <code>FastChain</code> (i.e. I guess speed for small NNs)?</p>",
        "id": 265200159,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639680076
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Chain you have to do some nasty restructure/destructure in order to make the parameter passing explicit</p>",
        "id": 265210025,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639684220
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the implicit references can break optimization in some cases, like in adjoint definitions</p>",
        "id": 265210046,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639684232
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and that's kind of what's going on in your example, which is why we went explicit</p>",
        "id": 265210064,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639684242
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and why future versions of Flux are going to explicit parameters as well./</p>",
        "id": 265210078,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639684251
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; Is <a href=\"https://datadriven.sciml.ai/stable/examples/symbolic_regression/#symbolic_regression_tutorial\">https://datadriven.sciml.ai/stable/examples/symbolic_regression/#symbolic_regression_tutorial</a> known to not work on 1.7?</p>",
        "id": 265409480,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639821312
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; nope. What's the issue?</p>",
        "id": 265409553,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639821394
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; Running that exact piece of code from the tutorial it just outputs:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">Model</span> <span class=\"c\">##Basis#430 with 2 equations</span>\n<span class=\"n\">States</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">:</span>\n  <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n  <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">Parameters</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"sb\">```</span>\n<span class=\"sb\">i.e. no equations.</span>\n</code></pre></div>",
        "id": 265409775,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639821628
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> open an issue</p>",
        "id": 265410387,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639822525
    },
    {
        "content": "<p>[slack] &lt;AlCap23&gt; I’ve answered in more detail in the issue, but TLDR : I’ll adapt  <code>print</code> and the docs for this 😅 .</p>",
        "id": 265469623,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639904124
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; Thanks, should I expect the same issues with the neural net based approach? OccamNet.</p>",
        "id": 265470929,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639906197
    },
    {
        "content": "<p>[slack] &lt;AlCap23&gt; With respect to the output of the REPL : yes. Also for all other results.</p>\n<p>The one dimensional target however should work for OccamNet, since it always returns an Array.</p>",
        "id": 265473622,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639910078
    },
    {
        "content": "<p>[slack] &lt;AlCap23&gt; But be aware that OccamNet ( at least right now ) just gives you integer variables ( so an equation like <code>2.5 x[1] - sin(x[2]*3.2)</code> is not part of the solution space of this method). This is due to the nature of the algorithm ( at least in its vanilla implementation ).</p>",
        "id": 265473706,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1639910248
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://scimlcon.org/2022/\">https://scimlcon.org/2022/</a></p>",
        "id": 265567674,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640009398
    },
    {
        "content": "<p>[slack] &lt;Markus Lohmayer&gt; I want to write a package which emits MTK models. Should I use the macro-based interface (variables, named, etc.) or is there a better way to do this?</p>",
        "id": 265575543,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640013208
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; The macros allow interpolation, i.e. <code>@variables $x</code></p>",
        "id": 265576677,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640013719
    },
    {
        "content": "<p>[slack] &lt;Markus Lohmayer&gt; Thanks Chris, I have seen this in the docstring</p>",
        "id": 265577369,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640013994
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; instead of named you'd directly, <code>ODESystem(...,name = :this)</code></p>",
        "id": 265577381,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640013998
    },
    {
        "content": "<p>[slack] &lt;Markus Lohmayer&gt; So I assume using this interface is the way to go. Thanks</p>",
        "id": 265577424,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640014016
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Hey folks, I am experimenting with DiffEqOperators for writing a PDE, but I was not sure how to include some specific values for the forcing function. To be more specific, say I have a 1-d and 2-d heat equations and I want to set the specific locations for the heat sources and the intensity of the heat. I remember there was a package called <code>Datainterpolations</code> or something, but I am not sure about that. Is there a good example of doing this kind of thing in one of the tutorials or in the test cases, etc.</p>\n<p>I found, <a href=\"https://github.com/PumasAI/DataInterpolations.jl\">https://github.com/PumasAI/DataInterpolations.jl</a> , but it seems to only work in 1 dimension--according to the README. Is there another package that can work with 2-d or 3d data?</p>",
        "id": 265611095,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640031492
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it can do N-d output</p>",
        "id": 265611397,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640031708
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but it's a 1d interpolation</p>",
        "id": 265611403,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640031711
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; ahh okay, I will give it a try. Is there a good example of how to use this package with MTK for PDEs? I looked in the test cases and example folder, but those just show how to create the interpolation. Should I look in the Benchmarks repo or perhaps even the Universal differential equations repo to see an example of Datainterpolations used with MTK.</p>",
        "id": 265611875,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640031975
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's still being developed, so it's quite use at your own risk right now</p>",
        "id": 265612433,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640032323
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; in fact, so much so that it's bolded in the docs</p>",
        "id": 265612445,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640032329
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and it's going to be deleted from there and moved to a separate repo</p>",
        "id": 265612457,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640032338
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/SciML/MethodOfLines.jl\">https://github.com/SciML/MethodOfLines.jl</a></p>",
        "id": 265612475,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640032357
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Oh sounds good. Yeah, I totally understand it is still under development. I am probably just overthinking it. Like I know what is happening when I code FD manually with a forcing function, but handing the discretization details off to the DiffEqOperators or MethodOfLines is still a bit new. I will just feel my way along <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> .</p>",
        "id": 265612869,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640032594
    },
    {
        "content": "<p>[gitter] &lt;sibyjackgrove&gt; Is it possible to use <a href=\"https://github.com/search?q=NeuralPDE.jl&amp;type=Repositories\">NeuralPDE.jl</a> using PyJulia and diffeqpy?</p>",
        "id": 265614388,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640033515
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I don't think so. <a href=\"https://github.com/search?q=ModelingToolkit.jl&amp;type=Repositories\">ModelingToolkit.jl</a> doesn't work well from Python</p>",
        "id": 265614521,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640033586
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you'd have to just eval strings to do it.</p>",
        "id": 265614530,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640033591
    },
    {
        "content": "<p>[gitter] &lt;sibyjackgrove&gt; Ok, thanks for confirming.</p>",
        "id": 265620542,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640037674
    },
    {
        "content": "<p>[slack] &lt;Anas Abdelrehim&gt; Is there a way to grab the jacobian from a solved system if its not an MTK model other than manually evaluated the  RHS with states etc.. and using ForwardDiff?</p>",
        "id": 265631395,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640045423
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Let the sun illuminate the words that you could not find</p>",
        "id": 265631748,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640045740
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; That's the way to do it. There are other ways, but the rest is still unwritten.</p>",
        "id": 265631857,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640045832
    },
    {
        "content": "<p>[slack] &lt;Anas Abdelrehim&gt; Seems to be harder when it's a PDE that's mutating using ForwardDiff? Like for bruss I am getting the error:</p>\n<div class=\"codehilite\" data-code-language=\"typeerror\"><pre><span></span><code>setindex!(A::Vector{Float64}, x::ForwardDiff.Dual{ForwardDiff.Tag{var\"#991#992\", Float64}, Float64, 12}, i1::Int64) at array.jl:839\ntestme(du::Vector{Float64}, u::Vector{ForwardDiff.Dual{ForwardDiff.Tag{var\"#991#992\", Float64}, Float64, 12}}, p::Vector{Float64}, t::Float64) at superfastbrussmodel.jl:56\n(::var\"#991#992\")(x::Vector{ForwardDiff.Dual{ForwardDiff.Tag{var\"#991#992\", Float64}, Float64, 12}}) at superfastbrussmodel.jl:123\nchunk_mode_jacobian(f::var\"#991#992\", x::Vector{Float64}, cfg::ForwardDiff.JacobianConfig{ForwardDiff.Tag{var\"#991#992\", Float64}, Float64, 12, Vector{ForwardDiff.Dual{ForwardDiff.Tag{var\"#991#992\", Float64}, Float64, 12}}}) at jacobian.jl:227\njacobian(f::Function, x::Vector{Float64}, cfg::ForwardDiff.JacobianConfig{ForwardDiff.Tag{var\"#991#992\", Float64}, Float64, 12, Vector{ForwardDiff.Dual{ForwardDiff.Tag{var\"#991#992\", Float64}, Float64, 12}}}, ::Val{true}) at jacobian.jl:23\njacobian(f::Function, x::Vector{Float64}, cfg::ForwardDiff.JacobianConfig{ForwardDiff.Tag{var\"#991#992\", Float64}, Float64, 12, Vector{ForwardDiff.Dual{ForwardDiff.Tag{var\"#991#992\", Float64}, Float64, 12}}}) at jacobian.jl:19\njacobian(f::Function, x::Vector{Float64}) at jacobian.jl:19\ntop-level scope at superfastbrussmodel.jl:123\neval at boot.jl:360 [inlined]```\nAt this line:\n`du[idx1] = .....`\n</code></pre></div>",
        "id": 265632560,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640046442
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; into a buffer?</p>",
        "id": 265632588,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640046470
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; which Jacobian call did you use?</p>",
        "id": 265632674,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640046490
    },
    {
        "content": "<p>[slack] &lt;Anas Abdelrehim&gt; <code>ForwardDiff.jacobian(x-&gt;testme(du, x, p, sol.t[1]), u)</code></p>",
        "id": 265632796,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640046534
    },
    {
        "content": "<p>[slack] &lt;Anas Abdelrehim&gt; Where <code>testme</code>  is</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    A, B, alpha, dx = p\n    alpha = alpha/dx^2\n    @inbounds for i in 1:N\n        iN = (i-1)*N;\n        for j in 1:N\n            x,y = xyd_brusselator[i], xyd_brusselator[j]\n            ip1, im1, jp1, jm1 = limit(i+1, N), limit(i-1, N), limit(j+1, N), limit(j-1, N)\n            idx1 = iN + j; idx2 = (im1-1)*N+j; idx3 = (ip1-1)*N + j; idx4 = iN + jp1; idx5 = iN + jm1;\n            du[idx1] = alpha*(u[idx2] + u[idx3] + u[idx4] + u[idx5] - 4u[idx1]) +\n                    B + u[idx1]^2*u[idx1+N*N] - (A + 1)*u[idx1] + brusselator_f(x, y, t)\n            du[idx1+N*N] = alpha*(u[idx2+N*N] + u[idx3+N*N] + u[idx4+N*N] + u[idx5+N*N] - 4u[idx1+N*N]) +\n                    A*u[idx1] - u[idx1]^2*u[idx1+N*N]\n        end\n    end\n    du\nend```\n</code></pre></div>",
        "id": 265632897,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640046568
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; use <code>jacobian!</code></p>",
        "id": 265633182,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640046679
    },
    {
        "content": "<p>[slack] &lt;kool7d&gt; For a simple dynamics model which has atoms connected by springs, which either move freely, or are rigid like bonds, it seems like I could just use positions as u0, and a parameter which is like an adjacency matrix except each entry is the spring constant between atoms, where they can move freely or are rigid like covalent bonds. I'm trying to make the definition of it is simple as possible, using ModelingToolkit. Would this work, or is it dumb?<br>\nI want to start super simple and then add new interaction forces.</p>",
        "id": 265633579,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640046978
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that should work</p>",
        "id": 265633620,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640047034
    },
    {
        "content": "<p>[slack] &lt;Anas Abdelrehim&gt; with <code>jac= fill(0.0, 2048, 2048)</code><br>\n and <code>ForwardDiff.jacobian!(jac, x-&gt;testme(du, x, p, t), u)</code>  still getting the same error</p>",
        "id": 265633629,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640047050
    },
    {
        "content": "<p>[slack] &lt;Anas Abdelrehim&gt; Not sure what's going on, but a big win is at the very least the ForwardDiff errors aren't 10 pages long <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 265634204,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640047514
    },
    {
        "content": "<p>[slack] &lt;kool7d&gt; One thing I'm having trouble with is the definition of the spring equation for it. Since they are potentials that I want to get the second derivative for, and animate the motions through the time steps, I've been looking at:<br>\n<a href=\"https://diffeq.sciml.ai/stable/types/dynamical_types/#dynamical_prob\">https://diffeq.sciml.ai/stable/types/dynamical_types/#dynamical_prob</a><br>\nand<br>\n<a href=\"https://mtk.sciml.ai/stable/tutorials/spring_mass/#Component-Based-Modeling-a-Spring-Mass-System\">https://mtk.sciml.ai/stable/tutorials/spring_mass/#Component-Based-Modeling-a-Spring-Mass-System</a><br>\nbut there seems to be a huge difference between these two things.</p>",
        "id": 265634818,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640047997
    },
    {
        "content": "<p>[slack] &lt;kool7d&gt; Is something like the component-based modeling necessary to construct?</p>",
        "id": 265635120,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640048264
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 265635757,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640048749
    },
    {
        "content": "<p>[slack] &lt;kool7d&gt; or maybe it is just a better way that makes it easier to modify later</p>",
        "id": 265636670,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640049578
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>ForwardDiff.jacobian!(jac, (du,x)-&gt;testme(du, x, p, t), u)</code></p>",
        "id": 265636859,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640049725
    },
    {
        "content": "<p>[slack] &lt;kool7d&gt; I'll just try and come back <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 265636922,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640049818
    },
    {
        "content": "<p>[slack] &lt;Anas Abdelrehim&gt; Most appreciated</p>",
        "id": 265639276,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640052224
    },
    {
        "content": "<p>[slack] &lt;ranocha&gt; What's the breaking change when going from <a href=\"https://github.com/search?q=OrdinaryDiffEq.jl&amp;type=Repositories\">OrdinaryDiffEq.jl</a> v5 to v6?</p>",
        "id": 265651094,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640067080
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>linsolve</code> changed to use <a href=\"https://github.com/search?q=LinearSolve.jl&amp;type=Repositories\">LinearSolve.jl</a></p>",
        "id": 265673464,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640085209
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; unless you're defining linear solvers you're fine</p>",
        "id": 265673489,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640085226
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It needed to be a breaking though because enough downstream libraries do define linear solvers, like DiffEqGPU, CLIMA, etc.</p>",
        "id": 265673543,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640085244
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I poked around and saw enough</p>",
        "id": 265673554,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640085249
    },
    {
        "content": "<p>[slack] &lt;ranocha&gt; Great, thanks!</p>",
        "id": 265673581,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640085270
    },
    {
        "content": "<p>[slack] &lt;ranocha&gt; Maybe it would be worth adding a <code>NEWS.md</code> with such a brief explanation in the repo to help users looking to update?</p>",
        "id": 265673614,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640085296
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah</p>",
        "id": 265674120,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640085662
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I thought TagBot would put enough in the tag? There's one PR in there IIRC</p>",
        "id": 265674138,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640085675
    },
    {
        "content": "<p>[slack] &lt;ranocha&gt; Yeah, it's only one PR but sometimes it's easier to check such a <code>NEWS.md</code> file instead of searching all commit messages</p>",
        "id": 265674409,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640085835
    },
    {
        "content": "<p>[slack] &lt;ranocha&gt; Anyway, thanks for confirming it's only the linsolve interface <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 265674466,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640085853
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; @Cameron say were you working on a discrete simulation framework for SciML? I seem to vaguely remember a repo. Hopefully I am not totally delirious. Would you mind sending me the link for that, if you are indeed the correct Cameron <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> .</p>",
        "id": 265716305,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640109807
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/SciML/DifferenceEquations.jl\">https://github.com/SciML/DifferenceEquations.jl</a></p>",
        "id": 265716484,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640109898
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Ahh yes, thanks @chrisrackauckas.  That is the one. Excellent.</p>",
        "id": 265716873,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640110093
    },
    {
        "content": "<p>[slack] &lt;Nikhil Yewale&gt; What are the chances in PDE solving that first derivative values of function are also available, and then we could approximate higher derivatives as weighted sums of function values as well as first derivative values?? Is this usually the case with method of lines ? If yes, we can modify existing fornberg weights function in DiffEqOperators to return weights of <code>f(x)</code> as well as weights of <code>dfdx</code>. Only, I do not know yet how that should affect other functions in DiffEqOperators.</p>",
        "id": 265775080,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640159623
    },
    {
        "content": "<p>[slack] &lt;Nikhil Yewale&gt; So, correct me if I am wrong here, the Method of lines would be(more accurate in some problems?) something like <code>dfdt = discretized(f, f', t)</code> instead of current <code>dfdt = discretized(f,</code> <code>t).</code></p>",
        "id": 265776086,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640160452
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you mean if you have a second derivative in time?</p>",
        "id": 265786496,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640167465
    },
    {
        "content": "<p>[slack] &lt;Nikhil Yewale&gt; Not necessarily, but we could have higher derivatives of function in the MOL problem. Attaching photos below. This is the idea I recently read in a newly released paper by fornberg(2020) on hermite finite difference. The method was easy enough to implement , and i have written it correctly here &lt;<a href=\"https://github.com/SciCompResources/LearnSciComp/blob/f23895cab90044891c96c44558e8ff5fa3d83757/src/Differentiation/fornberg.jl#L47|https://github.com/SciCompResources/LearnSciComp/blob/f23895cab90044891c96c44558e8ff5fa3d83757/src/Differentiation/fornberg.jl#L47\">https://github.com/SciCompResources/LearnSciComp/blob/f23895cab90044891c96c44558e8ff5fa3d83757/src/Differentiation/fornberg.jl#L47|https://github.com/SciCompResources/LearnSciComp/blob/f23895cab90044891c96c44558e8ff5fa3d83757/src/Differentiation/fornberg.jl#L47</a>&gt;: <a href=\"https://files.slack.com/files-pri/T68168MUP-F02SCF7CV08/download/img_20211222_154625.jpg\">https://files.slack.com/files-pri/T68168MUP-F02SCF7CV08/download/img_20211222_154625.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02SCF7CV08/download/img_20211222_154625.jpg\"><img src=\"https://uploads.zulipusercontent.net/0370f3ad74ce83465750b04821d7a44ccf7a5820/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303253434637435630382f646f776e6c6f61642f696d675f32303231313232325f3135343632352e6a7067\"></a></div>",
        "id": 265787722,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640168329
    },
    {
        "content": "<p>[slack] &lt;Nikhil Yewale&gt; The method is explained in more detailed here in fornberg(2020) paper. <a href=\"https://www.colorado.edu/amath/sites/default/files/attached-files/2020_f_hermite-fd_ima_j_num_anal.pdf\">https://www.colorado.edu/amath/sites/default/files/attached-files/2020_f_hermite-fd_ima_j_num_anal.pdf</a></p>\n<p>A MATLAB pseudocode is also provided so it was easy to check my julia implementation at <a href=\"https://github.com/SciCompResources/LearnSciComp/blob/master/src/Differentiation/fornberg.jl\">https://github.com/SciCompResources/LearnSciComp/blob/master/src/Differentiation/fornberg.jl</a></p>",
        "id": 265788038,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640168551
    },
    {
        "content": "<p>[slack] &lt;Nikhil Yewale&gt; The default <code>kwarg</code> version of my julia code output is almost same as what calculate_weights function provides in DiffEqOperators. We could add rest of the non-default part of <code>kwarg</code> (i.e. hermite based fornberg weights)for now in calculate_weights function of DiffEqOperators for now, and then later figure out how to make changes in other functions??</p>",
        "id": 265788331,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640168788
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah that would be nice.</p>",
        "id": 265788861,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640169149
    },
    {
        "content": "<p>[slack] &lt;Nikhil Yewale&gt; Thanks! I will create a pull request today on DiffEqOperators. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 265789609,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640169676
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @xtalax follow up on this one.</p>",
        "id": 265789765,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640169762
    },
    {
        "content": "<p>[slack] &lt;Nikhil Yewale&gt; @chrisrackauckas @xtalax Submitted a PR <a href=\"https://github.com/SciML/DiffEqOperators.jl/pull/501\">https://github.com/SciML/DiffEqOperators.jl/pull/501</a></p>",
        "id": 265811307,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640183636
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; I’m getting an error when using  <code>EnsembleDistributed()</code>  in an <code>EnsembleProblem</code> including a UDE.  It is crashing at the very end when all workers have finished running the ODEs. Any idea what this error message might be referring to?:</p>\n<div class=\"codehilite\" data-code-language=\"worker\"><pre><span></span><code>      From worker 3:    │    Closest candidates are:\n      From worker 3:    │      write(::IO, ::Any) at io.jl:635\n      From worker 3:    │      write(::IO, ::Any, !Matched::Any...) at io.jl:636\n      From worker 3:    │      write(!Matched::FileIO.Stream, ::Any...) at /srv/julia/pkg/packages/FileIO/FUXWu/src/types.jl:136\n      From worker 3:```\n</code></pre></div>",
        "id": 265844853,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640202554
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I'm not sure what that is</p>",
        "id": 265845961,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640203239
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; worth trying to isolate it.</p>",
        "id": 265845962,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640203239
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; hey, probably being really dumb but i dont understand why the following doesnt work:</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>   du .= p*u*(1-u)\nend\nu0 = 1/2\ntspan = (0.0,1.0)\nprob = ODEProblem(growth,u0,tspan, 1.0)\nsol = solve(prob, Tsit5(), reltol=1e-8, abstol=1e-8)```\nerror is:\n```ERROR: LoadError: MethodError: no method matching similar(::Float64, ::Type{Float64})```\n(full stack trace in comment)\n</code></pre></div>",
        "id": 265846893,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640203556
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; <code>ERROR: LoadError: MethodError: no method matching similar(::Float64, ::Type{Float64})\nClosest candidates are:\n  similar(::Union{LinearAlgebra.Adjoint{T, var\"#s832\"}, LinearAlgebra.Transpose{T, var\"#s832\"}} where {T, var\"#s832\"&lt;:(AbstractVector{T} where T)}, ::Type{T}) where T at /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/adjtrans.jl:230\n  similar(::Union{LinearAlgebra.Adjoint{T, S}, LinearAlgebra.Transpose{T, S}} where {T, S}, ::Type{T}) where T at /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/adjtrans.jl:234\n  similar(::Union{LinearAlgebra.Adjoint{T, S}, LinearAlgebra.Transpose{T, S}} where {T, S}, ::Type{T}, ::Tuple{Vararg{Int64, N}}) where {T, N} at /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/adjtrans.jl:235\n  ...\nStacktrace:\n [1] alg_cache(alg::Tsit5{typeof(OrdinaryDiffEq.trivial_limiter!), typeof(OrdinaryDiffEq.trivial_limiter!), Static.False}, u::Float64, rate_prototype::Float64, #unused#::Type{Float64}, #unused#::Type{Float64}, #unused#::Type{Float64}, uprev::Float64, uprev2::Float64, f::ODEFunction{true, typeof(growth), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, t::Float64, dt::Float64, reltol::Float64, p::Float64, calck::Bool, #unused#::Val{true})\n   @ OrdinaryDiffEq ~/.julia/packages/OrdinaryDiffEq/KFH7X/src/caches/low_order_rk_caches.jl:363\n [2] __init(prob::ODEProblem{Float64, Tuple{Float64, Float64}, true, Float64, ODEFunction{true, typeof(growth), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SciMLBase.StandardODEProblem}, alg::Tsit5{typeof(OrdinaryDiffEq.trivial_limiter!), typeof(OrdinaryDiffEq.trivial_limiter!), Static.False}, timeseries_init::Tuple{}, ts_init::Tuple{}, ks_init::Tuple{}, recompile::Type{Val{true}}; saveat::Tuple{}, tstops::Tuple{}, d_discontinuities::Tuple{}, save_idxs::Nothing, save_everystep::Bool, save_on::Bool, save_start::Bool, save_end::Nothing, callback::Nothing, dense::Bool, calck::Bool, dt::Float64, dtmin::Nothing, dtmax::Float64, force_dtmin::Bool, adaptive::Bool, gamma::Rational{Int64}, abstol::Float64, reltol::Float64, qmin::Rational{Int64}, qmax::Int64, qsteady_min::Int64, qsteady_max::Int64, beta1::Nothing, beta2::Nothing, qoldinit::Rational{Int64}, controller::Nothing, fullnormalize::Bool, failfactor::Int64, maxiters::Int64, internalnorm::typeof(DiffEqBase.ODE_DEFAULT_NORM), internalopnorm::typeof(LinearAlgebra.opnorm), isoutofdomain::typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), unstable_check::typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), verbose::Bool, timeseries_errors::Bool, dense_errors::Bool, advance_to_tstop::Bool, stop_at_next_tstop::Bool, initialize_save::Bool, progress::Bool, progress_steps::Int64, progress_name::String, progress_message::typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), userdata::Nothing, allow_extrapolation::Bool, initialize_integrator::Bool, alias_u0::Bool, alias_du0::Bool, initializealg::OrdinaryDiffEq.DefaultInit, kwargs::Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n   @ OrdinaryDiffEq ~/.julia/packages/OrdinaryDiffEq/KFH7X/src/solve.jl:295\n [3] __solve(::ODEProblem{Float64, Tuple{Float64, Float64}, true, Float64, ODEFunction{true, typeof(growth), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SciMLBase.StandardODEProblem}, ::Tsit5{typeof(OrdinaryDiffEq.trivial_limiter!), typeof(OrdinaryDiffEq.trivial_limiter!), Static.False}; kwargs::Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol, Symbol}, NamedTuple{(:reltol, :abstol), Tuple{Float64, Float64}}})\n   @ OrdinaryDiffEq ~/.julia/packages/OrdinaryDiffEq/KFH7X/src/solve.jl:4\n [4] solve_call(_prob::ODEProblem{Float64, Tuple{Float64, Float64}, true, Float64, ODEFunction{true, typeof(growth), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SciMLBase.StandardODEProblem}, args::Tsit5{typeof(OrdinaryDiffEq.trivial_limiter!), typeof(OrdinaryDiffEq.trivial_limiter!), Static.False}; merge_callbacks::Bool, kwargs::Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol, Symbol}, NamedTuple{(:reltol, :abstol), Tuple{Float64, Float64}}})\n   @ DiffEqBase ~/.julia/packages/DiffEqBase/yABEY/src/solve.jl:61\n [5] solve_up(prob::ODEProblem{Float64, Tuple{Float64, Float64}, true, Float64, ODEFunction{true, typeof(growth), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SciMLBase.StandardODEProblem}, sensealg::Nothing, u0::Float64, p::Float64, args::Tsit5{typeof(OrdinaryDiffEq.trivial_limiter!), typeof(OrdinaryDiffEq.trivial_limiter!), Static.False}; kwargs::Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol, Symbol}, NamedTuple{(:reltol, :abstol), Tuple{Float64, Float64}}})\n   @ DiffEqBase ~/.julia/packages/DiffEqBase/yABEY/src/solve.jl:87\n [6] solve(prob::ODEProblem{Float64, Tuple{Float64, Float64}, true, Float64, ODEFunction{true, typeof(growth), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SciMLBase.StandardODEProblem}, args::Tsit5{typeof(OrdinaryDiffEq.trivial_limiter!), typeof(OrdinaryDiffEq.trivial_limiter!), Static.False}; sensealg::Nothing, u0::Nothing, p::Nothing, kwargs::Base.Iterators.Pairs{Symbol, Float64, Tuple{Symbol, Symbol}, NamedTuple{(:reltol, :abstol), Tuple{Float64, Float64}}})\n   @ DiffEqBase ~/.julia/packages/DiffEqBase/yABEY/src/solve.jl:73\n [7] top-level scope\n   @ ~/Projects/TauPet/tests/testnohierarchy.jl:12\nin expression starting at /Users/pavanchaggar/Projects/TauPet/tests/testnohierarchy.jl:12</code></p>",
        "id": 265847046,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640203619
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; <code>function growth(du, u, p, t)\n    @. du = p * u * (1 - u)\nend\nu0 = [1 / 2]\ntspan = (0.0, 1.0)\nprob = ODEProblem(growth, u0, tspan, [1.0])\nsol = solve(prob, Tsit5(), reltol = 1e-8, abstol = 1e-8)</code><br>\nu broadcasted wrong</p>",
        "id": 265847230,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640203722
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; just make vecs of u0 and p</p>",
        "id": 265847277,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640203753
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; i dont understand why it needs to use broadcasting if they're just scalars? is this something to do with mutation for <code>du</code>?</p>",
        "id": 265847744,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640204095
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; It doesn't makes sense to mutate a scalar. So either use arrays as mentioned above or define <code>growth</code>  out of place, e.g.<br>\n<code>growth(u,p,t) = p*u*(1-u)</code><br>\nI would do this if it is always a scalar.</p>",
        "id": 265849325,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640205023
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Hey folks I was trying to work on the SciML benchmarks, but the following code is generating a strange error I have not encountered before.</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">using</span> <span class=\"n\">OrdinaryDiffEq</span><span class=\"p\">,</span> <span class=\"n\">Sundials</span><span class=\"p\">,</span> <span class=\"n\">DiffEqDevTools</span><span class=\"p\">,</span> <span class=\"n\">Plots</span><span class=\"p\">,</span> <span class=\"n\">ODEInterfaceDiffEq</span><span class=\"p\">,</span> <span class=\"n\">ODE</span><span class=\"p\">,</span> <span class=\"n\">LSODA</span>\n<span class=\"k\">using</span> <span class=\"n\">Random</span>\n<span class=\"n\">Random</span><span class=\"o\">.</span><span class=\"n\">seed!</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">gr</span><span class=\"p\">()</span>\n<span class=\"c\"># 2D Linear ODE</span>\n<span class=\"k\">function</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">du</span><span class=\"p\">,</span><span class=\"n\">u</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"n\">t</span><span class=\"p\">)</span>\n  <span class=\"nd\">@inbounds</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">eachindex</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">)</span>\n    <span class=\"n\">du</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">1.01</span><span class=\"o\">*</span><span class=\"n\">u</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n<span class=\"k\">function</span> <span class=\"n\">f_analytic</span><span class=\"p\">(</span><span class=\"n\">u₀</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"n\">t</span><span class=\"p\">)</span>\n  <span class=\"n\">u₀</span><span class=\"o\">*</span><span class=\"n\">exp</span><span class=\"p\">(</span><span class=\"mf\">1.01</span><span class=\"o\">*</span><span class=\"n\">t</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n<span class=\"n\">tspan</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"mf\">10.0</span><span class=\"p\">)</span>\n<span class=\"n\">prob</span> <span class=\"o\">=</span> <span class=\"n\">ODEProblem</span><span class=\"p\">(</span><span class=\"n\">ODEFunction</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"n\">analytic</span><span class=\"o\">=</span><span class=\"n\">f_analytic</span><span class=\"p\">),</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span><span class=\"mi\">100</span><span class=\"p\">),</span><span class=\"n\">tspan</span><span class=\"p\">)</span>\n\n<span class=\"n\">abstols</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span> <span class=\"o\">./</span> <span class=\"mf\">10.0</span> <span class=\"o\">.^</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"mi\">13</span><span class=\"p\">)</span>\n<span class=\"n\">reltols</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span> <span class=\"o\">./</span> <span class=\"mf\">10.0</span> <span class=\"o\">.^</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"mi\">10</span><span class=\"p\">);</span>\n\n\n<span class=\"n\">setups</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">Dict</span><span class=\"p\">(</span><span class=\"ss\">:alg</span><span class=\"o\">=&gt;</span><span class=\"n\">DP5</span><span class=\"p\">())</span>\n          <span class=\"kt\">Dict</span><span class=\"p\">(</span><span class=\"ss\">:alg</span><span class=\"o\">=&gt;</span><span class=\"n\">ode45</span><span class=\"p\">())</span>\n          <span class=\"kt\">Dict</span><span class=\"p\">(</span><span class=\"ss\">:alg</span><span class=\"o\">=&gt;</span><span class=\"n\">dopri5</span><span class=\"p\">())</span>\n          <span class=\"kt\">Dict</span><span class=\"p\">(</span><span class=\"ss\">:alg</span><span class=\"o\">=&gt;</span><span class=\"n\">ARKODE</span><span class=\"p\">(</span><span class=\"n\">Sundials</span><span class=\"o\">.</span><span class=\"n\">Explicit</span><span class=\"p\">(),</span><span class=\"n\">etable</span><span class=\"o\">=</span><span class=\"n\">Sundials</span><span class=\"o\">.</span><span class=\"n\">DORMAND_PRINCE_7_4_5</span><span class=\"p\">))</span>\n          <span class=\"kt\">Dict</span><span class=\"p\">(</span><span class=\"ss\">:alg</span><span class=\"o\">=&gt;</span><span class=\"n\">Tsit5</span><span class=\"p\">())]</span>\n<span class=\"n\">solnames</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"OrdinaryDiffEq\"</span><span class=\"p\">;</span><span class=\"s\">\"ODE\"</span><span class=\"p\">;</span><span class=\"s\">\"ODEInterface\"</span><span class=\"p\">;</span><span class=\"s\">\"Sundials ARKODE\"</span><span class=\"p\">;</span><span class=\"s\">\"OrdinaryDiffEq Tsit5\"</span><span class=\"p\">]</span>\n<span class=\"n\">wp</span> <span class=\"o\">=</span> <span class=\"n\">WorkPrecisionSet</span><span class=\"p\">(</span><span class=\"n\">prob</span><span class=\"p\">,</span><span class=\"n\">abstols</span><span class=\"p\">,</span><span class=\"n\">reltols</span><span class=\"p\">,</span><span class=\"n\">setups</span><span class=\"p\">;</span><span class=\"n\">names</span><span class=\"o\">=</span><span class=\"n\">solnames</span><span class=\"p\">,</span><span class=\"n\">save_everystep</span><span class=\"o\">=</span><span class=\"nb\">false</span><span class=\"p\">,</span><span class=\"n\">numruns</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">wp</span><span class=\"p\">)</span><span class=\"sb\">```</span>\n<span class=\"sb\">the error message is</span>\n<span class=\"sb\">`ERROR: type DataType has no field mutable`</span>\n<span class=\"sb\">Does that make sense? I am trying out the NonStiffODE example</span>\n</code></pre></div>",
        "id": 265851287,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640206276
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; show more</p>",
        "id": 265851816,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640206612
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Oh darn, this might be a julia 1.7 thing.</p>",
        "id": 265851871,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640206643
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; <a href=\"https://github.com/JuliaLang/julia/issues/41049\">https://github.com/JuliaLang/julia/issues/41049</a></p>",
        "id": 265851904,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640206674
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; @chrisrackauckas I edited the original code to include the julia code up until the point of failure. Seems like there used to be a field on datatypes named <code>mutable</code>, so</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"sa\">false</span><span class=\"sb\">```</span>\n<span class=\"sb\">But that was only until 1.6.1. In 1.7 the field is gone. Should we be trying the benchmarks with Julia 1.6.1 or with 1.7?</span>\n</code></pre></div>",
        "id": 265852340,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640206856
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; I can always revert to 1.6.1 if needed. Let me try and run this came code in VSCode and see if I can get a more descriptive message about where the error is.</p>",
        "id": 265852548,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640206964
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what line of code do you see that from?</p>",
        "id": 265854306,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640208114
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you still never shared a stacktrace</p>",
        "id": 265854417,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640208177
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Yep, sorry. I ran the code through Weave first, and that is where it generated the error--but no stacktrace. Now I am running the same code through vscode and trying to see if I can get the same error. So standby.</p>",
        "id": 265854649,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640208289
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Hmm, so here is what I found. I can run the code itself in vscode and it works, but when I try to Weave the file, it generates this error. I tried on both the <code>linear_wpd</code> and <code>FitzhughNagumo_wpd</code> and both had that error. So it might be an issue with Weave?</p>",
        "id": 265855302,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640208624
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; The error seems to occur when calling <code>WorkPrecisionSet</code> in Weave on Julia 1.7.1. So I can open an issue with the Weave folks and give them this file to replicate the error.</p>",
        "id": 265855710,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640208860
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Here is what I see when I weave <code>FitzhughNagumo</code>: <a href=\"https://files.slack.com/files-pri/T68168MUP-F02SEV6R596/download/selection_005.png\">https://files.slack.com/files-pri/T68168MUP-F02SEV6R596/download/selection_005.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02SEV6R596/download/selection_005.png\"><img src=\"https://uploads.zulipusercontent.net/aa1a107563d203d9053926168c61639dd2aa211e/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303253455636523539362f646f776e6c6f61642f73656c656374696f6e5f3030352e706e67\"></a></div>",
        "id": 265855766,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640208897
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; if you comment out <code>dopri5</code> are you good/</p>",
        "id": 265857464,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640209963
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; I also created issue an issue for the weave folks. <a href=\"https://github.com/JunoLab/Weave.jl/issues/446\">https://github.com/JunoLab/Weave.jl/issues/446</a></p>\n<p>I tried commenting out dopri5, but that did not work. Same error with or without it.</p>",
        "id": 265858800,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640210707
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; <a href=\"https://files.slack.com/files-pri/T68168MUP-F02SF2P60TS/download/selection_007.png\">https://files.slack.com/files-pri/T68168MUP-F02SF2P60TS/download/selection_007.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02SF2P60TS/download/selection_007.png\"><img src=\"https://uploads.zulipusercontent.net/dc36a734d46bb9b2735a8c182a9be85f36a86080/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303253463250363054532f646f776e6c6f61642f73656c656374696f6e5f3030372e706e67\"></a></div>",
        "id": 265858867,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640210739
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; show the whole stacktrace. Lines and everything.</p>",
        "id": 265859144,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640210903
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Not just the top of the error</p>",
        "id": 265859181,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640210934
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; @chrisrackauckas Here is what I see in the terminal when weaving. Is there a setting to get a more detailed stacktrace?</p>\n<div class=\"codehilite\" data-code-language=\"building\"><pre><span></span><code>┌ Info: Weaving chunk 1 from line 25\n└   progress = 0.0\n┌ Info: Weaving chunk 2 from line 54\n└   progress = 0.07142857142857142\n┌ Warning: ERROR: ErrorException occurred, including output in Weaved document\n└ @ Weave ~/.julia/packages/Weave/lQPaO/src/run.jl:224\n┌ Info: Weaving chunk 3 from line 67\n└   progress = 0.14285714285714285\n┌ Warning: ERROR: ErrorException occurred, including output in Weaved document\n└ @ Weave ~/.julia/packages/Weave/lQPaO/src/run.jl:224\n┌ Info: Weaving chunk 4 from line 83\n└   progress = 0.21428571428571427\n┌ Warning: ERROR: ErrorException occurred, including output in Weaved document\n└ @ Weave ~/.julia/packages/Weave/lQPaO/src/run.jl:224```\n</code></pre></div>",
        "id": 265859340,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640211025
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; It does not really give me much detail. Like I said, the code seems to work when I run it in vscode and pure julia. It is only when using Weave that it breaks.</p>",
        "id": 265859415,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640211080
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; run it outside of Weave</p>",
        "id": 265859464,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640211112
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Here is the WorkPrecisionSet for <code>linear_wpd</code>. So it works. I have to see if there is a way to generate a more verbose output from Weave.: <a href=\"https://files.slack.com/files-pri/T68168MUP-F02RANMGK7H/download/plot_1.png\">https://files.slack.com/files-pri/T68168MUP-F02RANMGK7H/download/plot_1.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02RANMGK7H/download/plot_1.png\"><img src=\"https://uploads.zulipusercontent.net/b72730b6bfdf91110e392b9b0cac939fd31693bb/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303252414e4d474b37482f646f776e6c6f61642f706c6f745f312e706e67\"></a></div>",
        "id": 265859653,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640211208
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Here is the WorkPrecisionSet for <code>linear_wpd</code>. So it works when I just run the code outside of Weave. I have to see if there is a way to generate a more verbose output from Weave.</p>",
        "id": 265859959,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640211271
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; ahh</p>",
        "id": 265860119,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640211356
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; maybe it's Weave that's the problem then on v1.7</p>",
        "id": 265860249,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640211419
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the benchmarks still use v1.6</p>",
        "id": 265860295,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640211450
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Okay yeah. So there is an issue with Weave and Julia 1.7.</p>",
        "id": 265860337,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640211482
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; So I opened the issue with the Weave folks. Is Arthur Newberry the person to ping on Weave issues. Haha, at least he is who I ping whenever I have Weave issues.</p>",
        "id": 265860339,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640211482
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I don't know</p>",
        "id": 265860414,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640211514
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; So while DiffEq works on Julia 1.7, the benchmarks only run on Julia 1.6 because of Weave. I will post an issue to the SciMLBenchmarks issues list to reference this Weave + 1.7 issue. That way if others have the same problem, they can find the reference.</p>",
        "id": 265860569,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640211614
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 265860668,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640211677
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Okay sounds good. I think I can take it from here. Don't want to tie you up any further. I was trying to see if I could write up some of the DAE benchmarks. So I will downrev to Julia 1.6 and then try to continue with that.</p>",
        "id": 265860705,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640211708
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh thanks, no problem at all. Thanks for finding this</p>",
        "id": 265860783,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640211739
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yeah I was confused because I know I had run these benchmarks on v1.7</p>",
        "id": 265860816,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640211771
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but not through Weave <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 265860817,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640211771
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; <code>prob = ODEProblem(sys, [], (0, 5.0); dt=0.1, saveat=0:0.1:5.0)\nsol = solve(prob, Tsit5())\nlength(sol) == 63</code><br>\nhow do I avoid the callbacks from adding points to my sol?</p>",
        "id": 265862809,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640212995
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; set <code>save_positions=(false,false)</code> in the callbacks</p>",
        "id": 265864175,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640214076
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; @Fredrik Bagge Carlson is there a way to do that while using the <code>continuous_events</code>  kwarg when making the sys?</p>",
        "id": 265864292,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640214160
    },
    {
        "content": "<p>[slack] &lt;Fredrik Bagge Carlson&gt; Not at the moment, but we should perhaps come up with an interface for doing so</p>",
        "id": 265886091,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640238815
    },
    {
        "content": "<p>[slack] &lt;Nikhil Yewale&gt; @chrisrackauckas  Had couple of more questions : <br>\n1) <a href=\"https://github.com/search?q=MethodofLines.jl&amp;type=Repositories\">MethodofLines.jl</a> seems new package, should I do same PR there also? <br>\n2) I want to understand how DiffEqOperators internals work and how MOL works! Where should I start with before I begin staring at the code? Any books/notes to refer first?</p>",
        "id": 265910903,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640261517
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes, do it to MOL</p>",
        "id": 265911721,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640262220
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that package will mostly be the successor, though its slightly different, etc.</p>",
        "id": 265911731,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640262235
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; My PDE lecture notes and my 2018 workshop are resources for that.</p>",
        "id": 265911778,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640262248
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; I think it comes from the serialization. More debugging:</p>\n<div class=\"codehilite\" data-code-language=\"from\"><pre><span></span><code>Worker 7 terminated.      From worker 7:        │   exception =\n\n      From worker 7:    │    MethodError: no method matching write(::Sockets.TCPSocket, ::Core.IntrinsicFunction)\n      From worker 7:    │    Closest candidates are:\n      From worker 7:    │      write(::IO, ::Any) at io.jl:635\n      From worker 7:    │      write(::IO, ::Any, !Matched::Any...) at io.jl:636\n      From worker 7:    │      write(!Matched::FileIO.Stream, ::Any...) at /srv/julia/pkg/packages/FileIO/FUXWu/src/types.jl:136\n      From worker 7:    │      ...\n      From worker 7:    │    Stacktrace:\n      From worker 7:    │      [1] write(io::Sockets.TCPSocket, x::Function)\n      From worker 7:    │        @ Base ./io.jl:635\n      From worker 7:    │      [2] serialize_any(s::Distributed.ClusterSerializer{Sockets.TCPSocket}, x::Any)\n      From worker 7:    │        @ Serialization /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Serialization/src/Serialization.jl:647\n      From worker 7:    │      [3] serialize\n      From worker 7:    │        @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Serialization/src/Serialization.jl:636 [inlined]\n      From worker 7:    │      [4] serialize(s::Distributed.ClusterSerializer{Sockets.TCPSocket}, t::Tuple{Core.IntrinsicFunction})\n      From worker 7:    │        @ Serialization /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Serialization/src/Serialization.jl:201\n      From worker 7:    │      [5] serialize_any(s::Distributed.ClusterSerializer{Sockets.TCPSocket}, x::Any)\n      From worker 7:    │        @ Serialization /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Serialization/src/Serialization.jl:657\n      From worker 7:    │    --- the last 3 lines are repeated 1 more time ---\n      From worker 7:    │      [9] serialize(s::Distributed.ClusterSerializer{Sockets.TCPSocket}, x::Any)\n      From worker 7:    │        @ Serialization /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Serialization/src/Serialization.jl:636\n      From worker 7:    │    --- the last 6 lines are repeated 1 more time ---\n      From worker 7:    │     [16] serialize(s::Distributed.ClusterSerializer{Sockets.TCPSocket}, t::Tuple{typeof(∂(iterate)), Zygote.ZBack{ChainRules.var\"#===_pullback#77\"}, Vector{Any}, Vector{Any}, Vector{Any}, Vector{Any}, Vector{Any}, Vector{Any}, Vector{Any}, Vector{Any}, Vector{Any}, UInt8})\n      From worker 7:    │        @ Serialization /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Serialization/src/Serialization.jl:201\n      From worker 7:    │     [17] serialize_any(s::Distributed.ClusterSerializer{Sockets.TCPSocket}, x::Any)\n      From worker 7:    │        @ Serialization /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Serialization/src/Serialization.jl:657\n      From worker 7:    │     [18] serialize(s::Distributed.ClusterSerializer{Sockets.TCPSocket}, x::Any)\n      From worker 7:    │        @ Serialization /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Serialization/src/Serialization.jl:636\n      From worker 7:    │    --- the last 3 lines are repeated 1 more time ---\n      From worker 7:    │     [22] serialize(s::Distributed.ClusterSerializer{Sockets.TCPSocket}, t::Tuple{Zygote.var\"#back#178\"{Zygote.var\"#1641#back#160\"{Zygote.var\"#back#158\"{2, 1, Zygote.Context, Base.BottomRF{ComponentArrays.var\"#22#23\"}}}}, typeof(∂(Base.Generator)), typeof(∂(Base.BottomRF)), Zygote.var\"#1641#back#160\"{Zygote.var\"#back#158\"{2, 1, Zygote.Context, Vector{Float64}}}, Zygote.var\"#back#179\"{Zygote.var\"#1641#back#160\"{Zygote.var\"#back#158\"{2, 2, Zygote.Context, Vector{Float64}}}}, typeof(∂(foldl_impl)), typeof(∂(_xfadjoint)), Zygote.var\"#1641#back#160\"{Zygote.var\"#back#158\"{2, 2, Zygote.Context, Int64}}, Zygote.var\"#1641#back#160\"{Zygote.var\"#back#158\"{2, 1, Zygote.Context, Base.BottomRF{ComponentArrays.var\"#22#23\"}}}})\n      From worker 7:    │        @ Serialization /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Serialization/src/Serialization.jl:201\n      From worker 7:    │     [23] serialize_any(s::Distributed.ClusterSerializer{Sockets.TCPSocket}, x::Any)\n      From worker 7:    │        @ Serialization /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Serialization/src/Serialization.jl:657\n      From worker 7:    │     [24] serialize\n      From worker 7:    │        @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Serialization/src/Serialization.jl:636 [inlined]\n      From worker 7:    │    --- the last 3 lines are repeated 1 more time ---\n      From worker 7:    │     [28] serialize(s::Distributed.ClusterSerializer{Sockets.TCPSocket}, t::Tuple{typeof(∂(_mapreduce_dim))})\n      From worker 7:    │        @ Serialization /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Serialization/src/Serialization.jl:201\n      From worker 7:    │     [29] serialize_any(s::Distributed.ClusterSerializer{Sockets.TCPSocket}, x::Any)\n      From worker 7:    │        @ Serialization /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Serialization/src/Serialization.jl:657\n      From worker 7:    │     [30] serialize(s::Distributed.ClusterSerializer{Sockets.TCPSocket}, x::Any)\n      From worker 7:    │        @ Serialization /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Serialization/src/Serialization.jl:636\n      From worker 7:    │    --- the last 3 lines are repeated 1 more time ---\n      From worker 7:    │     [34] serialize(s::Distributed.ClusterSerializer{Sockets.TCPSocket}, a::Vector{Any})\n      From worker 7:    │        @ Serialization /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Serialization/src/Serialization.jl:273\n      From worker 7:    │     [35] serialize(s::Distributed.ClusterSerializer{Sockets.TCPSocket}, t::Tuple{typeof(∂(NamedTuple)), Zygote.ZBack{ChainRules.var\"#isempty_pullback#505\"}, typeof(∂(merge)), Vector{Any}, Vector{Any}, UInt8})\n      From worker 7:    │        @ Serialization /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Serialization/src/Serialization.jl:201\n      From worker 7:    │     [36] serialize_any(s::Distributed.ClusterSerializer{Sockets.TCPSocket}, x::Any)\n      From worker 7:    │        @ Serialization /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Serialization/src/Serialization.jl:657\n      From worker 7:    │     [37] serialize(s::Distributed.ClusterSerializer{Sockets.TCPSocket}, x::Any)\n      From worker 7:    │        @ Serialization /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Serialization/src/Serialization.jl:636\n      From worker 7:    │    --- the last 3 lines are repeated 4 more times ---\n      From worker 7:    │     [50] serialize(s::Distributed.ClusterSerializer{Sockets.TCPSocket}, a::Vector{Any})\n      From worker 7:    │        @ Serialization /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Serialization/src/Serialization.jl:273\n      From worker 7:    │     [51] serialize(s::Distributed.ClusterSerializer{Sockets.TCPSocket}, t::Tuple{Zygote.var\"#1760#back#218\"{Zygote.var\"#back#217\"{:first, Zygote.Context, Pair{Symbol, Array}, Symbol}}, Zygote.ZBack{ChainRules.var\"#haskey_pullback#429\"}, Vector{Any}, Vector{Any}, UInt8})\n      From worker 7:    │        @ Serialization /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Serialization/src/Serialization.jl:201\n      From worker 7:    │     [52] serialize_any(s::Distributed.ClusterSerializer{Sockets.TCPSocket}, x::Any)\n      From worker 7:    │        @ Serialization /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Serialization/src/Serialization.jl:657\n      From worker 7:    │     [53] serialize\n      From worker 7:    │        @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Serialization/src/Serialization.jl:636 [inlined]\n      From worker 7:    │     [54] serialize(s::Distributed.ClusterSerializer{Sockets.TCPSocket}, t::Tuple{typeof(∂(_maybe_add_field))})\n      From worker 7:    │        @ Serialization /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Serialization/src/Serialization.jl:201\n      From worker 7:    │     [55] serialize_any(s::Distributed.ClusterSerializer{Sockets.TCPSocket}, x::Any)\n      From worker 7:    │        @ Serialization /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Serialization/src/Serialization.jl:657\n      From worker 7:    │     [56] serialize(s::Distributed.ClusterSerializer{Sockets.TCPSocket}, x::Any)\n      From worker 7:    │        @ Serialization /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Serialization/src/Serialization.jl:636\n      From worker 7:    │     [57] serialize_any(s::Distributed.ClusterSerializer{Sockets.TCPSocket}, x::Any)\n      From worker 7:    │        @ Serialization /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Serialization/src/Serialization.jl:657\n      From worker 7:    │     [58] serialize\n      From worker 7:    │        @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Serialization/src/Serialization.jl:636 [inlined]\n      From worker 7:    │     [59] serialize(s::Distributed.ClusterSerializer{Sockets.TCPSocket}, t::Tuple{ComponentVector{Float64, Vector{Float64}, Tuple{Axis{(B = ViewAxis(1:36477, ShapedAxis((193, 189), NamedTuple())), H = ViewAxis(36478:72954, ShapedAxis((193, 189), NamedTuple())), θ = 72955:73037, temp_series = 73038:73046, C = 73047, α = 73048, current_year = 73049, temps = 73086:73090)}}}, Zygote.var\"#ad_pullback#45\"{Tuple{ComponentArrays.var\"#19#20\", ComponentVector{Float64, Vector{Fl\n[message truncated]\n</code></pre></div>",
        "id": 265916121,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640266031
    },
    {
        "content": "<p>[slack] &lt;Nikhil Yewale&gt; Thanks, I guess I have seen it in past on mitmath github page.. I would revisit again! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 265923336,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640271131
    },
    {
        "content": "<p>[slack] &lt;ignace-computing&gt; Hello, is there any functionality in DifferentialEquations that plots the stability domain of the included numerical methods? If not I might be interested in working on this.</p>",
        "id": 265936006,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640280261
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; @Fredrik Bagge Carlson SBML allows one to define a priority value where higher priority events are evaluated first. is there a way to define priorities for which callback is called in MTK?</p>",
        "id": 265945850,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640287668
    },
    {
        "content": "<p>[slack] &lt;Fredrik Bagge Carlson&gt; Only if you create the callback with the standard interface. The symbolic callbacks probably need an updated interface that let's you define all the arguments of the standard interface</p>",
        "id": 265949980,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640290675
    },
    {
        "content": "<p>[slack] &lt;Vedant&gt; very good idea - would love to help out. pls share link to PR if you do</p>",
        "id": 265976784,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640321138
    },
    {
        "content": "<p>[slack] &lt;ignace-computing&gt; Ok!</p>",
        "id": 266000205,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640350682
    },
    {
        "content": "<p>[slack] &lt;SebastianM-C&gt; &lt;@U69BL50BF&gt; Should this like be &lt;<a href=\"https://diffeq.sciml.ai/latest/\">https://diffeq.sciml.ai/latest/</a>&gt;?: <a href=\"https://files.slack.com/files-pri/T68168MUP-F02S14PH4VA/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F02S14PH4VA/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02S14PH4VA/download/image.png\"><img src=\"https://uploads.zulipusercontent.net/f1749ec5c625ef73b9b432939da4a2950a6ecec7/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303253313450483456412f646f776e6c6f61642f696d6167652e706e67\"></a></div>",
        "id": 266082345,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640478217
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes it should be</p>",
        "id": 266082581,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640478494
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 266125687,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640549434
    },
    {
        "content": "<p>[slack] &lt;jon.norberg935&gt; Using MTK I have a system:</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    @parameters r,y\n    @variables t a(t) z(t) v(t)\n    eqs=[D(a)~r*f(z,T(t))*(1-a),\n    D(z)~v*(T(t)-z),\n    D(v)~k*(m+(T(t)-z)^2-v)]\n    ODESystem(eqs;name)\nend```\nwhere I set variable k to 0 if I want v to be constant during the simulation (value then provided by the initial condition). Since MTK \"knows\" that D(v)=0, does it get optimised away and just used as a parameter in the actual simulation? Or does this way have a performance penalty, i.e. calculating D(v)=0 every step? There might be many systems connected so it might matter....\n</code></pre></div>",
        "id": 266125822,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640549671
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; how are you setting it to zero?</p>",
        "id": 266125974,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640549941
    },
    {
        "content": "<p>[slack] &lt;jon.norberg935&gt; Creating a system by: @named sys = system(0)</p>",
        "id": 266125982,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640549964
    },
    {
        "content": "<p>[slack] &lt;jon.norberg935&gt; in Pluto when I do this the latex equation plotted for v is dv(t)/dt=0 so MTK removed (m+(T(t)-z)^2-v). but does it still calculate dv(t)/dt=0 every step?</p>",
        "id": 266126057,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640550054
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; hmm</p>",
        "id": 266126125,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640550152
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @yingbo_ma it doesn't remove constants right now huh?</p>",
        "id": 266126136,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640550173
    },
    {
        "content": "<p>[slack] &lt;jon.norberg935&gt; I could do this differently by generating different eqs depending on if I need the dynamics of v or not, using k was a flag in an if-else statement. But I'd also need to change the parameter and variable definition then inside the if-else.</p>",
        "id": 266126241,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640550331
    },
    {
        "content": "<p>[slack] &lt;jon.norberg935&gt; Also, your interview on randomwalks was one of the best science-podcast I have heard. Enjoyed it a lot!</p>",
        "id": 266126287,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640550403
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; It’s not clear how D(x) ~ 0 can be removed. How do you specify its initial condition and retrieve it back.</p>",
        "id": 266126364,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640550592
    },
    {
        "content": "<p>[slack] &lt;jon.norberg935&gt; I set the initial conditions in ODEProblem. Yes, I realise you'd need to identify v being constant and then remove it from variables and add is as a parameter instead. I probably need to make the if-else solution then instead....</p>",
        "id": 266126431,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640550704
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>v</code> could be transformed into a parameter and the parameter can be set by the initial condition?</p>",
        "id": 266130678,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640557350
    },
    {
        "content": "<p>[slack] &lt;jon.norberg935&gt; Thats what I thought MTK might do When it finds any D(x)=0</p>",
        "id": 266152840,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640589861
    },
    {
        "content": "<p>[slack] &lt;Pengfei Song&gt; Hello, all! I have a question bothering me for a long time.  While using NeuralPDE and DiffEqFlux in ODE or PDE epidemic models,  the Time Spans of models are often Large, sometimes over 100 days. I find that the training processes became unstable and time-consuming.  My questions are</p>\n<p>(1) what is the effect of time span and $dt$ on training procedures?</p>\n<p>(2) Are there good ways to make training faster and stable (large time span models)?  In DeepXDE,  an input-scale layer is added to make tspan to [0,1].  But I don't understand why and subsequent impacts on solving differential equations.</p>\n<p>(3) In _Krishnapriyan A, Gholami A, Zhe S, et al. Characterizing possible failure modes in physics-informed neural networks[J]. Advances in Neural Information Processing Systems, 2021, 34._  Curriculum<br>\nregularization (where the PINN’s loss term starts from a simple PDE regularization,<br>\nand becomes progressively more complex as the NN gets trained) and  sequence-to-sequence learning task (rather<br>\nthan learning to predict the entire space-time at once) are used!   Are the two ways  are just like multiple shootings in DiffEqFlux?: <a href=\"https://files.slack.com/files-pri/T68168MUP-F02S28FE77V/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F02S28FE77V/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02S28FE77V/download/image.png\"><img src=\"https://uploads.zulipusercontent.net/50e6223482e0a80df3bf5695ab898fa21d83a816/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303253323846453737562f646f776e6c6f61642f696d6167652e706e67\"></a></div>",
        "id": 266199342,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640634073
    },
    {
        "content": "<p>[slack] &lt;Pengfei Song&gt; Hello, all! I have a question bothering me for a long time.  While using NeuralPDE and DiffEqFlux in ODE or PDE epidemic models,  the Time Spans of models are often Large, sometimes over 100 days. I find that the training processes became unstable and time-consuming.  My questions are</p>\n<p>(1) what is the effect of time span and $dt$ on training procedures?</p>\n<p>(2) Are there good ways to make training faster and stable (large time span models)?  In DeepXDE,  an input-scale layer is added to make tspan to [0,1].  But I don't understand why and subsequent impacts on solving differential equations.</p>\n<p>(3) In _Krishnapriyan A, Gholami A, Zhe S, et al. Characterizing possible failure modes in physics-informed neural networks[J]. Advances in Neural Information Processing Systems, 2021, 34._  Curriculum<br>\nregularization (where the PINN’s loss term starts from a simple PDE regularization,<br>\nand becomes progressively more complex as the NN gets trained) and  sequence-to-sequence learning task (rather<br>\nthan learning to predict the entire space-time at once) are used!   Are the two ways  just like multiple shootings in DiffEqFlux?</p>",
        "id": 266199598,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640634292
    },
    {
        "content": "<p>[slack] &lt;Markus Lohmayer&gt; I am having a problem with the \"solution\" being stuck at the initial condition. I would be very happy if someone could tell me where the following code is wrong:</p>",
        "id": 266270982,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640707545
    },
    {
        "content": "<p>[slack] &lt;Markus Lohmayer&gt; <code>using ModelingToolkit\nusing DifferentialEquations\n@variables t\nD = Differential(t)\nps = @parameters mass₊m = 1.0 spring₊c = 10.0\nsts = @variables mass₊_p(t) spring₊_q(t)\neqs = [\n    0 ~ (-mass₊_p) / mass₊m + D(spring₊_q),\n    0 ~ (-spring₊_q) / spring₊c - D(mass₊_p)\n]\nsys = ODESystem(eqs, t, sts, ps, name = :osc)\nu0 = [\n    spring₊_q =&gt; 0.0,\n    mass₊_p =&gt; 10.0,\n]\nprob = ODAEProblem(structural_simplify(sys), u0, (0, 80.0))\nsol = solve(prob, Tsit5(), abstol = 1e-8, reltol = 1e-8)</code></p>",
        "id": 266270984,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640707551
    },
    {
        "content": "<p>[slack] &lt;Markus Lohmayer&gt; The corresponding explicit <code>ODEProblem</code> works.</p>",
        "id": 266271078,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640707638
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; just move the derivative terms over and see if that fixes it.</p>",
        "id": 266271082,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640707642
    },
    {
        "content": "<p>[slack] &lt;Markus Lohmayer&gt; Hi Chris! Btw. I am currently listening to your new podcast appearance. The above example stems from a reduction which works very well. However the <code>solve</code> seems to be broken, can that be?</p>",
        "id": 266271300,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640707856
    },
    {
        "content": "<p>[slack] &lt;Markus Lohmayer&gt; The following code works:</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>using DifferentialEquations\n@variables t\nD = Differential(t)\nps = @parameters mass₊m = 1.0 spring₊c = 10.0\nsts = @variables mass₊_p(t) spring₊_q(t)\neqs = [\n    D(spring₊_q) ~ mass₊_p / mass₊m,\n    D(mass₊_p) ~ (-spring₊_q) / spring₊c\n]\nsys = ODESystem(eqs, t, sts, ps, name = :osc)\nu0 = [\n    spring₊_q =&gt; 0.0,\n    mass₊_p =&gt; 10.0,\n]\nprob = ODEProblem(sys, u0, (0, 80.0))\nsol = solve(prob)```\n</code></pre></div>",
        "id": 266271311,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640707866
    },
    {
        "content": "<p>[slack] &lt;Markus Lohmayer&gt; It also works when replacing the penultimate line with <code>prob = ODAEProblem(structural_simplify(sys), u0, (0, 80.0))</code> , so yes indeed the derivative terms on the \"wrong\" side are apparently the problem.</p>",
        "id": 266271428,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640708007
    },
    {
        "content": "<p>[slack] &lt;Markus Lohmayer&gt; However, the above example is actually the output of <code>structural_simplify</code> as I have already said. Is this a known problem then? Should I open an issue on <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a> then?</p>",
        "id": 266271517,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640708093
    },
    {
        "content": "<p>[slack] &lt;Markus Lohmayer&gt; Or is there possibly a function which \"just puts the derivative terms over\", assuming that it is possible such that I can solve it as the ODE to which it reduced to?</p>",
        "id": 266271855,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640708396
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah that will get fixed by state selection</p>",
        "id": 266272075,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640708583
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you can add it to one of the ModelingToolkit issues on this topic</p>",
        "id": 266272084,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640708589
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's just not fixed up yet</p>",
        "id": 266272087,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640708597
    },
    {
        "content": "<p>[slack] &lt;Markus Lohmayer&gt; alright!</p>",
        "id": 266272246,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640708720
    },
    {
        "content": "<p>[slack] &lt;arn203&gt; How do you get at the parameters for each ode solution in a GPU ensemble?</p>",
        "id": 266346353,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640784886
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what do you mean?</p>",
        "id": 266347433,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640785860
    },
    {
        "content": "<p>[slack] &lt;arn203&gt; Sorry, after solving ODEs in parallel using GPUensemble and random parameters generated by my prob_func, how do I get the parameter vector p for each trajectory.</p>",
        "id": 266358856,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640795293
    },
    {
        "content": "<p>[slack] &lt;Anas Abdelrehim&gt; <code>EnsembleSimulation</code>  returns an array of solutions, and from there you can index into any of them and query the field for the parameters used using <code>sol[N].prob.p</code> where <code>sol</code> would be the array of solutions, and N the index of interest</p>\n<p><a href=\"https://diffeq.sciml.ai/stable/features/ensemble/#:~:text=Solution%20Type,array%20of%20solutions\">https://diffeq.sciml.ai/stable/features/ensemble/#:~:text=Solution%20Type,array%20of%20solutions</a>.</p>",
        "id": 266359366,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640795697
    },
    {
        "content": "<p>[slack] &lt;arn203&gt; Thanks!</p>",
        "id": 266360539,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640796747
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 266422955,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640865129
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; For an ODE system dX/dt = F(X), when either<br>\n• considering the solutions 0 = F(X)<br>\n• or its behaviour when t-&gt;inf<br>\nhow do people decide whenever to use terms like \"steady states\", \"fixed points\" and \"equilibrium points\"? Currently, I mostly use the first two interchangeably, and ignore the last one. But maybe someone have a good system to decide which term to use when?</p>\n<p>E.g. if a limit cycle could be a steady state, but not a fixed point, then the two terms could mean different things. Maybe there is a system from that one can use to determine which term to use (even when talking about a steady state fixed point where probably both terms could be correct).</p>",
        "id": 266423452,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640865660
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; they are the same thing</p>",
        "id": 266424139,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640866360
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; well, steady states include unstable steady states so you can have them as a solution to 0=F(X) but not be a limiting behavior</p>",
        "id": 266424170,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640866412
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; Steady states and fixed points are the same and I don’t think much about when to use either, but strictly speaking a steady state x* might be more common when speaking directly about solutions of the differential equation, while fixed points might be more common when speaking of the dynamical system associated with the equations.</p>",
        "id": 266424171,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640866421
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; fixed points and equilibrium points are just stable steady states</p>",
        "id": 266424174,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640866424
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; So a fixed point x* is indeed a fixed point of a group or semigroup S(t), i.e. S(t)x* = x*.</p>",
        "id": 266424239,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640866481
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; A limit cycle is an attracting periodic orbit, although it could include a degenerate attracting fixed point.</p>",
        "id": 266424332,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640866593
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; Can you have an unstable fixed points, or fixed points are by definition stable?</p>",
        "id": 266424374,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640866682
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; they can be unstable.</p>",
        "id": 266424421,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640866708
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; And as I understand, fixed points and equilibrium points don’t need to be stable</p>",
        "id": 266424442,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640866741
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I mean, you can have unstable fixed points and unstable equilibrium points, yeah</p>",
        "id": 266424525,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640866824
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but if you say it's a fixed point or equilibrium, I will read that as it's a steady one.</p>",
        "id": 266424532,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640866837
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; got it</p>",
        "id": 266424541,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640866846
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; Ok, might just stick with steady state and avoid the other two</p>",
        "id": 266424551,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640866854
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; If you want a term for what the system does once time goes towards infinity (e.g. either reach a stable steady state, goes towards ininity, reaches a limit cycle, or some other weird stuff), is lazy/incorrect to call that a steady state? E.g. if I want to distinguish a system's transient (behaviour?), is e.g. \"steady state behaviour\" a good term, or is there something better?</p>",
        "id": 266424788,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640867131
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that works</p>",
        "id": 266424804,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640867161
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; Good <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 266424849,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640867174
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; Asymptotic behavior is better. And atttractor for the collection of states that remain. I wouldn't use \"steady state\" for that, because it is not a collections of individual stationary states.</p>",
        "id": 266428873,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640871301
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 266437876,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640879641
    },
    {
        "content": "<p>[gitter] &lt;willsharpless&gt; Has anyone had sciml_train error that \"initialization out of bounds\" while trying to use it iteratively? I am clamping the input and output between its but still seeing this error. <a href=\"https://discourse.julialang.org/t/bounded-sciml-train-problem-error-argumenterror-initial-x-is-not-in/73710\">https://discourse.julialang.org/t/bounded-sciml-train-problem-error-argumenterror-initial-x-is-not-in/73710</a></p>",
        "id": 266444348,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640885735
    },
    {
        "content": "<p>[slack] &lt;amin.sadeghi&gt; Do implicit integrators always outperform explicit ones? If not, under what conditions are explicit ones faster? Thanks!</p>",
        "id": 266458321,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640898436
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; They only outperform them on stiff equations. That's pretty much the definition of stiff equation</p>",
        "id": 266458590,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640898648
    },
    {
        "content": "<p>[slack] &lt;amin.sadeghi&gt; I see. Do you think the problem size might affect the outcome?</p>\n<p>I say this because if I'm not mistaken, implicit methods require solving <code>Ax=b</code> for each time step, so its complexity should be <code>O(steps)*O(solver)</code>. For direct solvers, this will be at best <code>O(steps*N^2-3)</code>. The complexity for explicit methods, on the other hand, should be <code>O(steps*N)</code>. Now, the question is: how does the number of explicit steps compare with implicit ones? I understand that if iterative solvers were to be used, the complexity of implicit methods could be reduced down to <code>O(steps*iterations*N)</code>, but I guess that depends on having a good preconditioner, which is not trivial to find.</p>\n<p>Finally, I'm not very knowledgeable regarding the theory behind numerical methods, so not sure how valid the above argument is, but I'm very interested to know more as it pertains to a research problem I'm working on.</p>",
        "id": 266469677,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640910632
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; Where does this 2 come from in the definition of the mass matrix for <code>ForwardSensitivity()</code>? Should the dims of the mass matrix not depend on the number of parameters?<br>\n<a href=\"https://github.com/SciML/DiffEqSensitivity.jl/blob/b5be7279e4bf831778ccc81cc6614b5ffd777e0b/src/forward_sensitivity.jl#L178\">https://github.com/SciML/DiffEqSensitivity.jl/blob/b5be7279e4bf831778ccc81cc6614b5ffd777e0b/src/forward_sensitivity.jl#L178</a></p>",
        "id": 266470566,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640911799
    },
    {
        "content": "<p>[slack] &lt;Vedant&gt; yeah time integrators and system solvers are deeply coupled. eg in PDEs, your spatial resolution affects your largest timestep size. lemme link some notes in the next message</p>",
        "id": 266474751,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640916438
    },
    {
        "content": "<p>[slack] &lt;Vedant&gt; <a href=\"https://files.slack.com/files-pri/T68168MUP-F02SQHMA1KK/download/timestepper.pdf\">https://files.slack.com/files-pri/T68168MUP-F02SQHMA1KK/download/timestepper.pdf</a></p>",
        "id": 266475723,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640917738
    },
    {
        "content": "<p>[slack] &lt;Vedant&gt; and of course all this depends on the problem you are attempting to solve. so if you can share code/problem details that would be great</p>",
        "id": 266475815,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640917859
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 266486678,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640934459
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; There's a lot more too it. Amin your intuition is kind of right but also very wrong in practice because of adaptivity behavior. In \"noobie training materials for undergrads\" the methods are described as solving Ax=b every time, but if you dig into the source code of say <a href=\"https://github.com/search?q=OrdinaryDiffEq.jl&amp;type=Repositories\">OrdinaryDiffEq.jl</a> or Sundials you'll see that's not quite true because you can use adaptivity to much more flexibly guess Jacobians which can save you orders of magnitude in compute. This is why classes will teach people BDF2 but then no one codes it by hand in practice and then instead calls an effective ODE solver.</p>",
        "id": 266492837,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640943321
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; The Jacobian factorization may get used enough times that the cubic (not quadratic) cost of the factorization instead gets dominated by the quadratic backsubstition cost. This is common in Sundials. Though both might be dominated by the quadratic in f cost of building the Jacobians without sparse diff tooling</p>",
        "id": 266492933,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640943435
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah it should be n*p</p>",
        "id": 266493259,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640943910
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and it should repeat the mass matrix p times</p>",
        "id": 266493269,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640943931
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; p+1 times</p>",
        "id": 266493270,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640943935
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; (n+1)*p</p>",
        "id": 266493272,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640943941
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; (p+1)*n</p>",
        "id": 266493329,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640943990
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; your PR looks right</p>",
        "id": 266493331,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640943992
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I always like to say, Sundials CVODE is faster than a naive BDF2 implementation because it takes small steps, and if that statement doesn't make sense then just use it <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 266493371,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640944046
    },
    {
        "content": "<p>[slack] &lt;amin.sadeghi&gt; @chrisrackauckas Thanks for your detailed reply! A lot to digest!</p>\n<p>I have two main couple of questions:</p>\n<p>• What's this adaptivity thing? Does it mean that since the Jacobian is likely to change smoothly, it can be somehow guessed from previous Jacobians?<br>\n• Let's say that the problem is linear (heat equation without any source term), so the Jacobian factorization can be reused infinitely. Still, the factorization cost is O(N^3), so if N is sufficiently large, it's always going to dominate the O(N^2) backsubstitution (?). Under such circumstances, could it be possible that an explicit integrator is overall faster?</p>",
        "id": 266507737,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640962790
    },
    {
        "content": "<p>[slack] &lt;amin.sadeghi&gt; When solving diffeqs on GPU, the solution object behaves differently than a normal CuArray. For instance, if <code>u</code> is a normal 4d CuArray, indexing it using: <code>u[:, :, :, :]</code> works just fine. However, doing so with a diffeq solution object (<code>sol[:, :, :, :]</code>) results in the following warning:</p>\n<p><code>┌ Warning: Performing scalar indexing on task Task (runnable) @0x00007f7e1791eca0. Invocation of\n│ getindex resulted in scalar indexing of a GPU array. This is typically caused by calling an\n│ iterating implementation of a method. Such implementations do not execute on the GPU, but\n│ very slowly on the CPU, and therefore are only permitted from the REPL for prototyping\n│ purposes. If you did intend to index this array, annotate the caller with @allowscalar.\n└ @ GPUArrays /home/anaconda/.julia/packages/GPUArrays/gkF6S/src/host/indexing.jl:56</code><br>\nIs this intended behaviour? Thanks!</p>",
        "id": 266507986,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640963019
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; That's not intended. Make an MWE?</p>",
        "id": 266508314,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640963379
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Somewhat yes. For the second, Not always, it depends on how many back substitutions you perform</p>",
        "id": 266508386,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640963467
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; You can perform far more than N of those</p>",
        "id": 266508390,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640963475
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; And the calculus changes when you have a sparse Jacobian. Basically make N be the number of non zeros</p>",
        "id": 266508402,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640963502
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; So when the equations are large, SparseDiffTools is necessary</p>",
        "id": 266508446,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640963524
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Or iterative solvers</p>",
        "id": 266508450,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640963528
    },
    {
        "content": "<p>[slack] &lt;amin.sadeghi&gt; ```@info \"Loading packages...\"<br>\nusing CUDA<br>\nusing DifferentialEquations<br>\nusing FastBroadcast</p>\n<p>function diffusion!(du, u, params, t)<br>\n    @.. du[:] = 0.0<br>\n    return nothing<br>\nend</p>\n<p>use_gpu = true</p>\n<p>Nx = 5<br>\ntspan = (0.0, 1.0)<br>\ntout = range(tspan[1], stop=tspan[2], length=10)<br>\nu0 = zeros(Nx)</p>\n<p>if use_gpu<br>\n    @info \"Moving arrays to GPU...\"<br>\n    u0 = cu(u0)<br>\nend</p>\n<p>@info \"Solving system of ODEs...\"<br>\nprob = ODEProblem(diffusion!, u0, tspan)<br>\nsol = solve(prob, BS3(), progress=true, progress_steps=10, saveat=tout)</p>\n<p>@info \"Post processing...\"<br>\nsol[:, :]```</p>",
        "id": 266513829,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640970069
    },
    {
        "content": "<p>[slack] &lt;amin.sadeghi&gt; The last line should produce the warning I mentioned</p>",
        "id": 266513851,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640970099
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; isolate it to no differential equations and just RecursiveArrayTools VectorOfArray?</p>",
        "id": 266514023,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640970318
    },
    {
        "content": "<p>[slack] &lt;amin.sadeghi&gt; <code>x = CUDA.zeros(5)\ny = VectorOfArray([x,x,x])\ny[:,:]</code></p>",
        "id": 266514411,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640970911
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; cool, now open an issue on <a href=\"https://github.com/search?q=RecursiveArrayTools.jl&amp;type=Repositories\">RecursiveArrayTools.jl</a> with that</p>",
        "id": 266514419,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640970934
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; looks like that's a good test case.</p>",
        "id": 266514421,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640970940
    },
    {
        "content": "<p>[slack] &lt;amin.sadeghi&gt; Done! <a href=\"https://github.com/SciML/RecursiveArrayTools.jl/issues/178\">https://github.com/SciML/RecursiveArrayTools.jl/issues/178</a></p>",
        "id": 266517030,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1640974684
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; See the tutorials on progressive growing of the time trajectories. That will be more effective than the scaling of time for very long trajectories. As dt grows there can be more points, but also less influence of the starting boundary, so you have to compensate for that.</p>",
        "id": 266606350,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641118252
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @frankschae did the work-precision diagrams from <a href=\"https://frankschae.github.io/post/high-weak/\">https://frankschae.github.io/post/high-weak/</a> ever get into SciMLBenchmarks?</p>",
        "id": 266642185,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641171018
    },
    {
        "content": "<p>[slack] &lt;frankschae&gt; No, I don‘t think so. (At least I don‘t recall that one of us added them)</p>",
        "id": 266643193,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641172531
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it would be good to get those in there.</p>",
        "id": 266643715,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641173379
    },
    {
        "content": "<p>[slack] &lt;amin.sadeghi&gt; @chrisrackauckas Quick question: how does release management work in SciML ecosystem? For instance, you've just released a new patch for RecursiveArrayTools, which includes the bugfix. Now, does that automatically propagate to DifferentialEquations as well? Meaning that, if I just do <code>]update</code> in my project env that only has <code>DifferentialEquations</code> as dependency, and not <code>RecursiveArrayTools</code> explicitly, would that include the fix?</p>",
        "id": 266689674,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641219121
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it will propagate unless it's a breaking release.</p>",
        "id": 266689941,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641219298
    },
    {
        "content": "<p>[slack] &lt;amin.sadeghi&gt; Great, thanks!</p>",
        "id": 266690174,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641219449
    },
    {
        "content": "<p>[slack] &lt;amin.sadeghi&gt; I just encountered another issue <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> the colon indexing is fixed, but indexing with a boolean mask still throws a warning. Here's an MWE:</p>\n<div class=\"codehilite\" data-code-language=\"x\"><pre><span></span><code>m = CUDA.rand(5) .&gt; 0.5\nx[m, :]  # this works just fine\n\nu = VectorOfArray([x, x, x])\nu[m, :]  # this throws warning/error```\n</code></pre></div>",
        "id": 266693481,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641221056
    },
    {
        "content": "<p>[slack] &lt;amin.sadeghi&gt; Should I open another issue or is this intended behaviour?</p>",
        "id": 266693509,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641221078
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; open an issue</p>",
        "id": 266694688,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641221744
    },
    {
        "content": "<p>[slack] &lt;amin.sadeghi&gt; Done: <a href=\"https://github.com/SciML/RecursiveArrayTools.jl/issues/180\">https://github.com/SciML/RecursiveArrayTools.jl/issues/180</a></p>",
        "id": 266696933,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641222868
    },
    {
        "content": "<p>[slack] &lt;amin.sadeghi&gt; I'd be happy to take a crack at it, but not sure where to start. I looked at the PR you just merged and it seems that I need to specialize <code>Base.getindex</code> on <code>AbstractVectorOfArray</code>. But, I don't quite get the line where you call <code>Adapt.adapt(__parameterless_type(T),reshape(reduce(hcat,vecs),size(A.u[1])...,length(A.u)))</code></p>",
        "id": 266697331,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641223091
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah... tat line</p>",
        "id": 266698323,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641223678
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/search?q=Adapt.jl&amp;type=Repositories\">Adapt.jl</a> allows for conversion to other types in a generic fashion</p>",
        "id": 266698384,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641223691
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>Adapt.adapt(__parameterless_type(T),x)</code>  will convert it to the type of T without type parameters</p>",
        "id": 266698408,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641223711
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; so if <code>T isa CuArray{Float64}</code> , that will convert the output to a CuArray</p>",
        "id": 266698434,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641223731
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it will be a no-op if the types are right</p>",
        "id": 266698479,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641223751
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that is then really just a way to get rid of the ReshapedArray if reshaping is not concrete.</p>",
        "id": 266698533,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641223768
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; don't worry about it too much, I can mention that kind of thing in review if it comes up</p>",
        "id": 266698553,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641223787
    },
    {
        "content": "<p>[slack] &lt;amin.sadeghi&gt; Oh, I see! Thanks! Then, I'll give it a try and open a PR and we can take it from there</p>",
        "id": 266700020,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641224576
    },
    {
        "content": "<p>[slack] &lt;amin.sadeghi&gt; @chrisrackauckas I just opened a PR. The way I dealt with it seems very awkward to me, and I'm almost sure there could be a better way of doing it! Anyway, it was my first PR ever for a Julia package, hopefully it's not too bad <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span><br>\n<a href=\"https://github.com/SciML/RecursiveArrayTools.jl/pull/181\">https://github.com/SciML/RecursiveArrayTools.jl/pull/181</a></p>",
        "id": 266757544,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641258132
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; What is the Synatx for solving SDDE's?<br>\nI have tried (getting from the text cases under the SDDE stuff)</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>#Hayes Equation\nbegin\n    function hayes_modelf(du,u,h,p,t)\n        τ,a,b,c,α,β,γ = p\n        du .= a.**u .+ b .** h(p,t-τ) .+ c\n    end\n    function hayes_modelg(du,u,h,p,t)\n        τ,a,b,c,α,β,γ = p\n        du .= α.*u .+ γ\n    end\n    h(p,t) = (ones(1) .+ t);\n    tspan = (0.,10.)\nend\n\n\npmul = [1.0,-4.,-2.,10.,-1.3,-1.2, 1.1]\npadd = [1.0,-4.,-2.,10.,-0.0,-0.0, 0.1]\n\nprob = SDDEProblem(hayes_modelf, hayes_modelg, [1.], h, tspan, pmul; constant_lags = (pmul[1],));\nSDDEProblem(hayes_modelf, hayes_modelg, h, tspan, padd; constant_lags = (padd[1],));\n\nsim = solve(SDDEProblem,EM());```\nwith various solvers, but get errors like:\n```MethodError: no method matching init(::Type{SDDEProblem}, ::EM{true})\nClosest candidates are:\n  init(::PDEProblem, ::SciMLBase.DEAlgorithm, ::Any...; kwargs...) at ~/.julia/packages/DiffEqBase/gWYWc/src/solve.jl:138\n  init(::SciMLBase.DEProblem, ::Any...; kwargs...) at ~/.julia/packages/DiffEqBase/gWYWc/src/solve.jl:32\n\nStacktrace:\n [1] solve(::Type, ::Vararg{Any}; kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n   @ CommonSolve ~/.julia/packages/CommonSolve/alZRX/src/CommonSolve.jl:3\n [2] solve(::Type, ::EM{true})\n   @ CommonSolve ~/.julia/packages/CommonSolve/alZRX/src/CommonSolve.jl:3\n [3] top-level scope\n   @ In[1]:24\n [4] eval\n   @ ./boot.jl:373 [inlined]\n [5] include_string(mapexpr::typeof(REPL.softscope), mod::Module, code::String, filename::String)\n   @ Base ./loading.jl:1196```\n</code></pre></div>",
        "id": 266845486,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641320873
    },
    {
        "content": "<p>[slack] &lt;amin.sadeghi&gt; @chrisrackauckas So, indexing VectorOfArray with colon or mask works fine now. But, indexing solution objects with mask still not works. Here's the error I'm getting:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"kt\">MethodError</span><span class=\"o\">:</span> <span class=\"n\">getindex</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">ODESolution</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">CuArray</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kt\">CUDA</span><span class=\"o\">.</span><span class=\"kt\">Mem</span><span class=\"o\">.</span><span class=\"kt\">DeviceBuffer</span><span class=\"p\">}},</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">CuArray</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kt\">CUDA</span><span class=\"o\">.</span><span class=\"kt\">Mem</span><span class=\"o\">.</span><span class=\"kt\">DeviceBuffer</span><span class=\"p\">}}},</span> <span class=\"kt\">ODEProblem</span><span class=\"p\">{</span><span class=\"kt\">CuArray</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kt\">CUDA</span><span class=\"o\">.</span><span class=\"kt\">Mem</span><span class=\"o\">.</span><span class=\"kt\">DeviceBuffer</span><span class=\"p\">},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">true</span><span class=\"p\">,</span> <span class=\"kt\">Tuple</span><span class=\"p\">{</span><span class=\"kt\">CuArray</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kt\">CUDA</span><span class=\"o\">.</span><span class=\"kt\">Mem</span><span class=\"o\">.</span><span class=\"kt\">DeviceBuffer</span><span class=\"p\">},</span> <span class=\"kt\">Float64</span><span class=\"p\">,</span> <span class=\"kt\">BitArray</span><span class=\"p\">{</span><span class=\"mi\">3</span><span class=\"p\">},</span> <span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">ODEFunction</span><span class=\"p\">{</span><span class=\"kt\">true</span><span class=\"p\">,</span> <span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">diffusion!</span><span class=\"p\">),</span> <span class=\"kt\">LinearAlgebra</span><span class=\"o\">.</span><span class=\"kt\">UniformScaling</span><span class=\"p\">{</span><span class=\"kt\">Bool</span><span class=\"p\">},</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">DEFAULT_OBSERVED</span><span class=\"p\">),</span> <span class=\"kt\">Nothing</span><span class=\"p\">},</span> <span class=\"kt\">Base</span><span class=\"o\">.</span><span class=\"kt\">Pairs</span><span class=\"p\">{</span><span class=\"kt\">Symbol</span><span class=\"p\">,</span> <span class=\"kt\">Union</span><span class=\"p\">{},</span> <span class=\"kt\">Tuple</span><span class=\"p\">{},</span> <span class=\"kt\">NamedTuple</span><span class=\"p\">{(),</span> <span class=\"kt\">Tuple</span><span class=\"p\">{}}},</span> <span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">StandardODEProblem</span><span class=\"p\">},</span> <span class=\"kt\">BS3</span><span class=\"p\">{</span><span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">OrdinaryDiffEq</span><span class=\"o\">.</span><span class=\"kt\">trivial_limiter!</span><span class=\"p\">),</span> <span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">OrdinaryDiffEq</span><span class=\"o\">.</span><span class=\"kt\">trivial_limiter!</span><span class=\"p\">),</span> <span class=\"kt\">Static</span><span class=\"o\">.</span><span class=\"kt\">False</span><span class=\"p\">},</span> <span class=\"kt\">OrdinaryDiffEq</span><span class=\"o\">.</span><span class=\"kt\">InterpolationData</span><span class=\"p\">{</span><span class=\"kt\">ODEFunction</span><span class=\"p\">{</span><span class=\"kt\">true</span><span class=\"p\">,</span> <span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">diffusion!</span><span class=\"p\">),</span> <span class=\"kt\">LinearAlgebra</span><span class=\"o\">.</span><span class=\"kt\">UniformScaling</span><span class=\"p\">{</span><span class=\"kt\">Bool</span><span class=\"p\">},</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">Nothing</span><span class=\"p\">,</span> <span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">DEFAULT_OBSERVED</span><span class=\"p\">),</span> <span class=\"kt\">Nothing</span><span class=\"p\">},</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">CuArray</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kt\">CUDA</span><span class=\"o\">.</span><span class=\"kt\">Mem</span><span class=\"o\">.</span><span class=\"kt\">DeviceBuffer</span><span class=\"p\">}},</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">CuArray</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kt\">CUDA</span><span class=\"o\">.</span><span class=\"kt\">Mem</span><span class=\"o\">.</span><span class=\"kt\">DeviceBuffer</span><span class=\"p\">}}},</span> <span class=\"kt\">OrdinaryDiffEq</span><span class=\"o\">.</span><span class=\"kt\">BS3Cache</span><span class=\"p\">{</span><span class=\"kt\">CuArray</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kt\">CUDA</span><span class=\"o\">.</span><span class=\"kt\">Mem</span><span class=\"o\">.</span><span class=\"kt\">DeviceBuffer</span><span class=\"p\">},</span> <span class=\"kt\">CuArray</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kt\">CUDA</span><span class=\"o\">.</span><span class=\"kt\">Mem</span><span class=\"o\">.</span><span class=\"kt\">DeviceBuffer</span><span class=\"p\">},</span> <span class=\"kt\">CuArray</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kt\">CUDA</span><span class=\"o\">.</span><span class=\"kt\">Mem</span><span class=\"o\">.</span><span class=\"kt\">DeviceBuffer</span><span class=\"p\">},</span> <span class=\"kt\">OrdinaryDiffEq</span><span class=\"o\">.</span><span class=\"kt\">BS3ConstantCache</span><span class=\"p\">{</span><span class=\"kt\">Float32</span><span class=\"p\">,</span> <span class=\"kt\">Float64</span><span class=\"p\">},</span> <span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">OrdinaryDiffEq</span><span class=\"o\">.</span><span class=\"kt\">trivial_limiter!</span><span class=\"p\">),</span> <span class=\"kt\">typeof</span><span class=\"p\">(</span><span class=\"kt\">OrdinaryDiffEq</span><span class=\"o\">.</span><span class=\"kt\">trivial_limiter!</span><span class=\"p\">),</span> <span class=\"kt\">Static</span><span class=\"o\">.</span><span class=\"kt\">False</span><span class=\"p\">}},</span> <span class=\"kt\">DiffEqBase</span><span class=\"o\">.</span><span class=\"kt\">DEStats</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">CuArray</span><span class=\"p\">{</span><span class=\"kt\">Bool</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"kt\">CUDA</span><span class=\"o\">.</span><span class=\"kt\">Mem</span><span class=\"o\">.</span><span class=\"kt\">DeviceBuffer</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Colon</span><span class=\"p\">)</span> <span class=\"n\">is</span> <span class=\"n\">ambiguous</span><span class=\"o\">.</span> <span class=\"n\">Candidates</span><span class=\"o\">:</span>\n  <span class=\"n\">getindex</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">::</span><span class=\"kt\">AbstractVectorOfArray</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">,</span> <span class=\"kt\">N</span><span class=\"p\">},</span> <span class=\"n\">I</span><span class=\"o\">::</span><span class=\"kt\">AbstractArray</span><span class=\"p\">{</span><span class=\"kt\">Bool</span><span class=\"p\">},</span> <span class=\"n\">J</span><span class=\"o\">::</span><span class=\"kt\">Colon</span><span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"k\">where</span> <span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">,</span> <span class=\"kt\">N</span><span class=\"p\">}</span> <span class=\"k\">in</span> <span class=\"n\">RecursiveArrayTools</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">anaconda</span><span class=\"o\">/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">RecursiveArrayTools</span><span class=\"o\">/</span><span class=\"mi\">3</span><span class=\"n\">y1ze</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">vector_of_array</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">76</span>\n  <span class=\"n\">getindex</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">::</span><span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"n\">AbstractTimeseriesSolution</span><span class=\"p\">,</span> <span class=\"n\">I</span><span class=\"o\">::</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"kt\">Colon</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">AbstractArray</span><span class=\"p\">{</span><span class=\"kt\">Bool</span><span class=\"p\">},</span> <span class=\"kt\">AbstractArray</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"kt\">CartesianIndex</span><span class=\"p\">}</span><span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"k\">in</span> <span class=\"n\">SciMLBase</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">anaconda</span><span class=\"o\">/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">SciMLBase</span><span class=\"o\">/</span><span class=\"n\">XzX8e</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">solutions</span><span class=\"o\">/</span><span class=\"n\">solution_interface</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">31</span>\n  <span class=\"n\">getindex</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">::</span><span class=\"kt\">AbstractDiffEqArray</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">,</span> <span class=\"kt\">N</span><span class=\"p\">},</span> <span class=\"n\">I</span><span class=\"o\">::</span><span class=\"kt\">Union</span><span class=\"p\">{</span><span class=\"kt\">Colon</span><span class=\"p\">,</span> <span class=\"kt\">Int64</span><span class=\"p\">,</span> <span class=\"kt\">AbstractArray</span><span class=\"p\">{</span><span class=\"kt\">Bool</span><span class=\"p\">},</span> <span class=\"kt\">AbstractArray</span><span class=\"p\">{</span><span class=\"kt\">Int64</span><span class=\"p\">},</span> <span class=\"kt\">CartesianIndex</span><span class=\"p\">}</span><span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"k\">where</span> <span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">,</span> <span class=\"kt\">N</span><span class=\"p\">}</span> <span class=\"k\">in</span> <span class=\"n\">RecursiveArrayTools</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">anaconda</span><span class=\"o\">/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">RecursiveArrayTools</span><span class=\"o\">/</span><span class=\"mi\">3</span><span class=\"n\">y1ze</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">vector_of_array</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">64</span>\n  <span class=\"n\">getindex</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">::</span><span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"n\">AbstractTimeseriesSolution</span><span class=\"p\">,</span> <span class=\"n\">sym</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"k\">in</span> <span class=\"n\">SciMLBase</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">anaconda</span><span class=\"o\">/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">SciMLBase</span><span class=\"o\">/</span><span class=\"n\">XzX8e</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">solutions</span><span class=\"o\">/</span><span class=\"n\">solution_interface</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">69</span>\n  <span class=\"n\">getindex</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"o\">::</span><span class=\"kt\">AbstractDiffEqArray</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">,</span> <span class=\"kt\">N</span><span class=\"p\">},</span> <span class=\"n\">sym</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"k\">where</span> <span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">,</span> <span class=\"kt\">N</span><span class=\"p\">}</span> <span class=\"k\">in</span> <span class=\"n\">RecursiveArrayTools</span> <span class=\"n\">at</span> <span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">anaconda</span><span class=\"o\">/.</span><span class=\"n\">julia</span><span class=\"o\">/</span><span class=\"n\">packages</span><span class=\"o\">/</span><span class=\"n\">RecursiveArrayTools</span><span class=\"o\">/</span><span class=\"mi\">3</span><span class=\"n\">y1ze</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">vector_of_array</span><span class=\"o\">.</span><span class=\"n\">jl</span><span class=\"o\">:</span><span class=\"mi\">104</span>\n<span class=\"n\">Possible</span> <span class=\"n\">fix</span><span class=\"p\">,</span> <span class=\"n\">define</span>\n  <span class=\"n\">getindex</span><span class=\"p\">(</span><span class=\"o\">::</span><span class=\"kt\">SciMLBase</span><span class=\"o\">.</span><span class=\"kt\">AbstractTimeseriesSolution</span><span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">,</span> <span class=\"kt\">N</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">AbstractArray</span><span class=\"p\">{</span><span class=\"kt\">Bool</span><span class=\"p\">},</span> <span class=\"o\">::</span><span class=\"kt\">Vararg</span><span class=\"p\">{</span><span class=\"kt\">Colon</span><span class=\"p\">})</span> <span class=\"k\">where</span> <span class=\"p\">{</span><span class=\"kt\">T</span><span class=\"p\">,</span> <span class=\"kt\">N</span><span class=\"p\">}</span>\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span>\n <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"n\">top</span><span class=\"o\">-</span><span class=\"n\">level</span> <span class=\"n\">scope</span>\n   <span class=\"err\">@</span> <span class=\"n\">REPL</span><span class=\"p\">[</span><span class=\"mi\">28</span><span class=\"p\">]</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"sb\">```</span>\n</code></pre></div>",
        "id": 266954723,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641399193
    },
    {
        "content": "<p>[slack] &lt;amin.sadeghi&gt; In EllipsisNotation, if I have:<br>\n<code>u = rand(2,3,4,5)</code><br>\nand call <code>u[..,end]</code>, I was expecting to get <code>u[:,:,:,5]</code> , but apparently that's now how it works. Can someone please explain? Thanks!</p>",
        "id": 266958122,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641400824
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I would've expected that too</p>",
        "id": 266958963,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641401202
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah, that might need  an overload to <code>solution_interface.jl</code> in <a href=\"https://github.com/search?q=SciMLBase.jl&amp;type=Repositories\">SciMLBase.jl</a></p>",
        "id": 266959067,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641401268
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; because of the ambiguity</p>",
        "id": 266959086,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641401278
    },
    {
        "content": "<p>[slack] &lt;xtalax&gt; Sorry just saw this, I need to check this slack more</p>",
        "id": 266960451,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641401948
    },
    {
        "content": "<p>[slack] &lt;mcabbott&gt; <code>julia&gt; zeros(2,2,1)[CartesianIndex(2,2), end]\nERROR: BoundsError: attempt to access 2×2×1 Array{Float64,3} at index [2, 2, 2]</code></p>",
        "id": 266992237,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641417411
    },
    {
        "content": "<p>[slack] &lt;mcabbott&gt; Or perhaps:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"o\">:</span><span class=\"p\">(</span><span class=\"o\">$</span><span class=\"p\">(</span><span class=\"kt\">Expr</span><span class=\"p\">(</span><span class=\"ss\">:thunk</span><span class=\"p\">,</span> <span class=\"n\">CodeInfo</span><span class=\"p\">(</span>\n    <span class=\"err\">@</span> <span class=\"n\">none</span> <span class=\"n\">within</span> <span class=\"sb\">`top-level scope`</span>\n<span class=\"mi\">1</span> <span class=\"n\">─</span> <span class=\"o\">%</span><span class=\"mi\">1</span> <span class=\"o\">=</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">lastindex</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">│</span>   <span class=\"o\">%</span><span class=\"mi\">2</span> <span class=\"o\">=</span> <span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">getindex</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span> <span class=\"o\">..</span><span class=\"p\">,</span> <span class=\"o\">%</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">└──</span>      <span class=\"k\">return</span> <span class=\"o\">%</span><span class=\"mi\">2</span>\n<span class=\"p\">))))</span><span class=\"sb\">```</span>\n<span class=\"sb\">The parser chooses that 2 before it knows what the first “index” is.</span>\n</code></pre></div>",
        "id": 266992374,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641417484
    },
    {
        "content": "<p>[slack] &lt;amin.sadeghi&gt; @mcabbott Thanks! So, I guess there's no way to fix this?</p>",
        "id": 267009348,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641427131
    },
    {
        "content": "<p>[slack] &lt;mcabbott&gt; There are surely ways but nobody has yet. Somewhere there’s an issue with them…</p>",
        "id": 267009420,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641427198
    },
    {
        "content": "<p>[slack] &lt;mcabbott&gt; I think you’d have to delay the decision about the dimension <code>end</code> belongs to until after the type of the other indices are known.</p>",
        "id": 267009582,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641427252
    },
    {
        "content": "<p>[slack] &lt;amin.sadeghi&gt; I think you're referring to this one: <a href=\"https://github.com/JuliaLang/julia/issues/35681\">https://github.com/JuliaLang/julia/issues/35681</a>?</p>",
        "id": 267009646,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641427300
    },
    {
        "content": "<p>[slack] &lt;amin.sadeghi&gt; It seems that Tim Holy had come up with a workaround: <a href=\"https://github.com/JuliaArrays/EndpointRanges.jl\">https://github.com/JuliaArrays/EndpointRanges.jl</a></p>",
        "id": 267010355,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641427702
    },
    {
        "content": "<p>[slack] &lt;amin.sadeghi&gt; You just need to use <code>iend</code>/<code>ibegin</code> and it just works!</p>",
        "id": 267010377,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641427717
    },
    {
        "content": "<p>[slack] &lt;Qiyao Wei&gt; Hey all, I just wanted to run an insight in my upcoming paper across to check if it’s correct---in the ANODE paper (&lt;<a href=\"https://arxiv.org/pdf/1904.01681.pdf\">https://arxiv.org/pdf/1904.01681.pdf</a>&gt;), the authors seem to suggest that Neural ODE cannot learn the mapping x -&gt; -x, while resnets can (Figure 3 of the paper). I believe what they meant is that ODE cannot learn the “negate-mapping” because of Picard-Lindelof, but Neural ODE surely can with the help of a neural network. In fact, one can easily train a normal Neural ODE to learn to map 1 to -1 and -1 to 1, with the time/depth trajectories looking like the figure below. Does that sound right to you? Thanks a lot!: <a href=\"https://files.slack.com/files-pri/T68168MUP-F02SRGB15RU/download/negate.png\">https://files.slack.com/files-pri/T68168MUP-F02SRGB15RU/download/negate.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02SRGB15RU/download/negate.png\"><img src=\"https://uploads.zulipusercontent.net/32c49c3914263f02bce54a2ae093322eee7c8f8d/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303253524742313552552f646f776e6c6f61642f6e65676174652e706e67\"></a></div>",
        "id": 267055908,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641472629
    },
    {
        "content": "<p>[slack] &lt;ilyaorson&gt; Isn't the problem just that the flow lines of an ODE cannot cross because that would break the uniqueness of the solution?</p>",
        "id": 267059192,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641474915
    },
    {
        "content": "<p>[slack] &lt;Qiyao Wei&gt; Yes, which is why a single ODE cannot learn the negate mapping. However, Neural ODEs effectively represent a parametrized class of ODEs (and not just a single one), and therefore my argument is that Neural ODE is able to learn to map 1 to -1 and vice versa. I believe if you just code up a Neural ODE and train it on these two data points in Julia the training loss would also be zero.</p>",
        "id": 267059705,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641475238
    },
    {
        "content": "<p>[slack] &lt;ilyaorson&gt; A NeuralODE thought as family is different, once a NeuralODE is trained the parameters are fixed and then it only represents one ODE.</p>",
        "id": 267059906,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641475393
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; You train a parametrized family of ODEs, but once you you tune the parameters, you end up with a single ODE, so you won't be able to get away with the uniqueness problem. That's my understanding.</p>",
        "id": 267060210,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641475576
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; Ops, I am late.</p>",
        "id": 267060258,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641475601
    },
    {
        "content": "<p>[slack] &lt;Qiyao Wei&gt; Here’s the code segment I was referring to earlier, that achieve zero error when trained on these data points</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>using DiffEqSensitivity\nusing SteadyStateDiffEq\nusing DiffEqFlux\nusing OrdinaryDiffEq\nusing NonlinearSolve, StaticArrays\nusing NLsolve\nusing Plots\nusing LinearSolve\n\n# ann = Chain(Dense(2,4), Dense(4,2))\nann = Chain(Dense(1,2), Dense(2,1))\n\np,re = Flux.destructure(ann)\ntspan = (0.0f0, 1.0f0)\n\nfunction solve_ss(x)\n\n    z = re(p)(x)\n    function dudt_(u, _p, t)\n        re(_p)(u, x) .- u\n    end\n    prob = ODEProblem(dudt_, z, tspan, p)\n    sol = solve(prob, Tsit5())#, dt=0.1, adaptive=false)\n    # ss = NonlinearProblem{false}(dudt_, z, p)\n    # x = solve(ss, NewtonRaphson(), tol = 1f-5)#.u\n    # ss = SteadyStateProblem(ODEProblem(dudt_, z, tspan, p))\n    # x = solve(ss, DynamicSS(Tsit5()), u0 = z, abstol = 1f-1, reltol = 1f-1,\n    #             sensealg = SteadyStateAdjoint(; autodiff=true, autojacvec=ZygoteVJP(),\n    #                           linsolve=KrylovJL_GMRES(; rtol=1f-1, atol=1f-1, itmax=10000)),\n    #             verbose=false).u\nend\nX = [1;-1;2;-2;3;-3;4;-4;5;-5]\nY = [-1;1;-2;2;-3;2;-4;4;-5;5]\ndata = Flux.Data.DataLoader(collect.((X, Y)), batchsize=1,shuffle=true)\nopt = ADAM(0.05)\n\nfunction loss(x, y)\n    ŷ = solve_ss(x)\n    println(sum(abs2,y .- ŷ[end]))\n    sum(abs2,y .- ŷ[end])\nend\n\nepochs = 1000\nfor i in 1:epochs\n    Flux.train!(loss, Flux.params(p), data, opt)\nend\ntemp = Array(solve_ss([-1]))\n@show temp```\n</code></pre></div>",
        "id": 267060741,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641475890
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; Hmm, I think I understand what you are doing. You train <code>solve_ss</code>, which seems to indeed encompass a family of NODEs, not just a single NODE that you would get with a single <code>solve</code>. Your initial conditions for each NODE vary depending on the tuned parameters and the given input <code>x</code>, when you do <code>z = re(p)(x)</code> . You really tune it to a family of ODEs. But I don’t think it is fair to denote it as a NODE. It is a kind of “meta NODE” rsrsrs. But this seems to work, as you showed it. You just need to compare with the others concerning the performance.</p>",
        "id": 267062973,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641477225
    },
    {
        "content": "<p>[slack] &lt;Qiyao Wei&gt; I understand your point. Lemme think about it :)</p>",
        "id": 267063368,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641477468
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; Does it boil down to <code>u' = NN(u) - u</code> with initial condition <code>u(0) = NN(x)</code>?</p>",
        "id": 267063374,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641477471
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; If so, then it might not be quite what I wrote, but it might still not be a classical NODE since you are also training the initial condition for the NODE.</p>",
        "id": 267063705,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641477629
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; By the way, what's the reason for <code>-u</code> in the ODE? Did you try just <code>u' = NN(u)</code>, still with <code>u(0) = NN(u)</code> (or even <code>u(0) = NN_2(u)</code>)?</p>",
        "id": 267081480,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641486638
    },
    {
        "content": "<p>[slack] &lt;Nikhil Yewale&gt; Hi sir @chrisrackauckas  what is long term aim of <a href=\"https://github.com/search?q=DiffEqOperators.jl&amp;type=Repositories\">DiffEqOperators.jl</a> ? Since MOL is being shifted to a new package, would <a href=\"https://github.com/search?q=DiffEqOperator.jl&amp;type=Repositories\">DiffEqOperator.jl</a> would try to focus more on writing derivative operators automatically using different/famous Finite-difference schemes?</p>",
        "id": 267159760,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641541410
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; pretty much. I am not sure it'll be a major focus due to that purpose, but that's what it's for.</p>",
        "id": 267159816,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641541465
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; did you get this figured out?</p>",
        "id": 267160100,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641541777
    },
    {
        "content": "<p>[slack] &lt;Nikhil Yewale&gt; With last minor PR of hermite-fornberg weights, I began to explore on weights in compact-finite difference schemes. Turns out it should result in differentiation matrices of banded forms for general boundary conditions(can confirm till 4th order derivative). I would explore more on partial derivatives too, and get back on this!</p>",
        "id": 267160177,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641541852
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; interesting!</p>",
        "id": 267160249,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641541929
    },
    {
        "content": "<p>[slack] &lt;Nikhil Yewale&gt; The way I foresee future of DiffEqOperator as general julia user is, allowing derivative operators similar to <a href=\"https://github.com/search?q=ApprxFun.jl&amp;type=Repositories\">ApprxFun.jl</a> (Chebyshev space, fourier space lazy derivative operators)hooked into <a href=\"https://github.com/search?q=DiffEqOperator.jl&amp;type=Repositories\">DiffEqOperator.jl</a>.  After all, I think those operators too are equivalent to finite-difference I think!  Read this in Chebfun related paper</p>",
        "id": 267160491,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641542169
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes, they are just the operators in non point spaces.</p>",
        "id": 267160527,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641542213
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; The only issue is that for nonlinear PDEs that's a slow way to implement it</p>",
        "id": 267160546,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641542228
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 267189877,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641562918
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; ...</p>",
        "id": 267189996,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641562982
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's just a type</p>",
        "id": 267189999,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641562983
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>sim = solve(prob,EM());</code></p>",
        "id": 267190008,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641562988
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you put <code>SDDEProblem</code> the type into solve <img alt=\":picard_facepalm:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/7178/emoji/images/15154.jpg\" title=\"picard facepalm\"></p>",
        "id": 267190020,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641562997
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; ahh...</p>",
        "id": 267190035,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641563006
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; ok, that is kind of ridiculous, should have caught that</p>",
        "id": 267190055,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641563025
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; thanks</p>",
        "id": 267190062,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641563029
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; Hi everyone, I have a quick question: I've recently used <a href=\"https://github.com/search?q=Differentialequations.jl&amp;type=Repositories\">Differentialequations.jl</a> to solve 2 couple parabolic PDE. Is that possible with 2 couple PDE but one beeing parabolic and the other beeing elliptic? For the parabolic, I understand how to do that by discretizing in space, but concerning the elliptic, I only have spatial derivates.. Or should I use the MOL on 1 spatial direction and discretize in time? Would that work?</p>",
        "id": 267214239,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641575207
    },
    {
        "content": "<p>[slack] &lt;Vedant&gt; you can treat the elliptic PDE as constraint with DAEs?</p>",
        "id": 267271903,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641612244
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; No I don't think so unfortunately. Or I have no clue how to do that.</p>",
        "id": 267288280,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641636933
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; Additionnaly, I know how to solve the system by \"hand\", with, for example, two nested Picard iterations and a simple backward Euler scheme for the time derivative in finite differences. But it is slow because my system is very stiff and non-linear (and badly written).</p>",
        "id": 267288281,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641636936
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; I would like to know if there is a way to explain to <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a> to update the unknown of my elliptic equation when it is solving the time derivative of my first equation. Not sure if it makes sense for any of you!</p>",
        "id": 267288282,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641636939
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; That's exactly what modeling it as a DAE would do</p>",
        "id": 267288628,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641637440
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I would suggest using MTK in case it's a higher index DAE</p>",
        "id": 267288665,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641637455
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; I see, sounds great! <br>\nSo after a bit of reading, just to see if I understand correctly: I have first to discretize in space my equations to obtain  a DEA system. Then I have to use some tricks that I still have to understand to transform my equations to make a time derivative appears for my second unknown. And the number of time I do the differentiation will give me the index of my DAE. I could also do that automatically with MTK. <br>\nThen I can use an ODE solver. Did I got it right?</p>",
        "id": 267292289,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641643071
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes, see the MTK docs for how to do this with <code>structural_simplify</code></p>",
        "id": 267293149,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641644183
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; though note it won't scale past thousands of equations right now <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> , limitations in codegen being fixed.</p>",
        "id": 267293153,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641644200
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; Great, I will try to use MTK as it is a nice opportunity to learn it, and I will also try to do it by hand to understand the method and to have something I can run. Thx a lot to both of you!</p>",
        "id": 267294481,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641646348
    },
    {
        "content": "<p>[slack] &lt;jacobusmmsmit&gt; Hi all, I’ve got a vector of vectors (<code>VoV</code>) representing some forces acting on each agent that I want to allocate <code>dualcache</code> for. Normally, running <code>get_tmp</code> inside the step function causes 0 allocations, but on a vector of vectors I have to run <code>get_tmp.(VoV, type_tester)</code> which does allocate once (and when it allocates <code>Dual</code>s it’s a _hefty_ allocation), kinda defeating the purpose of using <code>PreallocationTools</code> . Any suggestions?</p>",
        "id": 267320290,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641681816
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; create a temporary for that to write to. You know it'll be an array.</p>",
        "id": 267322619,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641684600
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; or just loop</p>",
        "id": 267322658,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641684605
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; It seems upgrading <code>OrdinaryDiffEq</code>  from v5.71.0 =&gt; 6.0.0 or greater has caused ode solvers to not use my custom <code>linsolve</code> specification. I pass in the linear solver through the <code>linsolve</code> kwarg which works in 5.71.0 and below, but for 6.0.0 and above, it seems to still be using the default linear solver.</p>",
        "id": 267327253,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641691341
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; Is there something I need to change on my end, perhaps?</p>",
        "id": 267327283,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641691421
    },
    {
        "content": "<p>[slack] &lt;Vedant&gt; yes, v5.x.x -&gt; v6.0.0 was a breaking change in the linear-solve API. OrdinaryDiffEq has switched to <a href=\"https://github.com/SciML/LinearSolve.jl\">https://github.com/SciML/LinearSolve.jl</a> which makes it easy to define, reuse and swap-out linear solvers. you write your own linear solver algorithm by defining <code>MyLinSolveAlg &lt;: SciMLLinearSolveAlgorithm</code> along with <code>solve(prob::LinearProblem, alg::MyLinSolveAlg)</code> .</p>",
        "id": 267331868,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641697313
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; Ahh, it looks like this will fix my issues with preconditioners too</p>",
        "id": 267332277,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641697870
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; I'll look into this new API, thanks!</p>",
        "id": 267332282,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641697879
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I'm finishing up the preconditioners this week/tomorrow and the new docs on all of this will go up tomorrow as well</p>",
        "id": 267335712,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641703074
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; indeed, the linear solvers are now a lot lot better!</p>",
        "id": 267335754,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641703085
    },
    {
        "content": "<p>[slack] &lt;Vedant&gt; **you got to define <code>solve(cache::LinearCache, alg::MyLinSolveAlg)</code> , not <code>solve(prob::LinearProblem, alg::MyLinSolveAlg)</code></p>",
        "id": 267337589,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641706396
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; most people probably don't need to be doing that</p>",
        "id": 267338278,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641707582
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and shouldn't: that's an undocumented interface right now.</p>",
        "id": 267338284,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641707594
    },
    {
        "content": "<p>[slack] &lt;jacobusmmsmit&gt; Sorry I’m not sure I’m following what you’re suggesting.<br>\nCurrently I have something like<br>\n<code>A = [dualcache([0.0, 0.0]) for _ in 1:N]</code><br>\nwhich is then used in the function as</p>\n<div class=\"codehilite\" data-code-language=\"a\"><pre><span></span><code>for i = 1:N\n    for j = 1:N\n        A[i] .= f(u[i], u[j])\n    end\n    du[i] = sum(A[i, :])\nend```\nWhat would a temporary be in this context? Sorry if there’s something obvious I’m missing.\n</code></pre></div>",
        "id": 267359540,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641736957
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you don't need a temporary <code>A</code></p>",
        "id": 267359829,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641737346
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; just grab from get_tmp one at a time.</p>",
        "id": 267359833,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641737350
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>Ai = get_tmp(A[i], u)</code></p>",
        "id": 267359852,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641737389
    },
    {
        "content": "<p>[slack] &lt;jacobusmmsmit&gt; Ah of course, cheers</p>",
        "id": 267360369,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641738093
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; New tutorial on the linear solvers and preconditioners just dropped: <a href=\"https://diffeq.sciml.ai/stable/tutorials/advanced_ode_example/\">https://diffeq.sciml.ai/stable/tutorials/advanced_ode_example/</a></p>",
        "id": 267407937,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641803728
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Preconditioner documentation: <a href=\"https://diffeq.sciml.ai/stable/features/linear_nonlinear/\">https://diffeq.sciml.ai/stable/features/linear_nonlinear/</a></p>",
        "id": 267407984,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641803753
    },
    {
        "content": "<p>[slack] &lt;<a href=\"http://johannes.ne\">johannes.ne</a>&gt; Hi all. Can you recommend some resources for learning about differential equations?</p>\n<p>I'm slowly getting acquainted with solving systems of differential equations in Julia by watching videos and reading the DiffEqs and MTK docs.<br>\nI have know little/no theory of differential equations. This limits my understanding of the systems I set up, and there are probably some errors I could easily avoid by knowing a bit more.</p>\n<p>My background is non-math, but I'm willing to look at math notation <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> My only theoretical diff equation knowledge comes from working through the <a href=\"https://computationalthinking.mit.edu/Spring21/time_stepping/\">https://computationalthinking.mit.edu/Spring21/time_stepping/</a>.</p>\n<p>Any recommendations on where to start? Books, courses, videos, blogs?</p>",
        "id": 267408156,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641803827
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/mitmath/18337\">https://github.com/mitmath/18337</a> ?</p>",
        "id": 267408909,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641804212
    },
    {
        "content": "<p>[slack] &lt;<a href=\"http://johannes.ne\">johannes.ne</a>&gt; Thanks. I already watched a few of the first videos and got the impression that it focuses a lot on the CS part (learn to write a fast solver).  After looking at the syllabus again, I see that lecture 4 seems to introduce a lot of the concepts I was \"missing\". I'll look into the course again, and maybe skip the CS/performance parts (for now).</p>",
        "id": 267418070,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641809219
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; maybe also the first 5-6 lectures from prof Strogatz course, which may help build an intuition about systems of differential equations.<br>\n<a href=\"https://www.youtube.com/watch?v=ycJEoqmQvwg&amp;list=PLbN57C5Zdl6j_qJA-pARJnKsmROzPnO9V\">https://www.youtube.com/watch?v=ycJEoqmQvwg&amp;list=PLbN57C5Zdl6j_qJA-pARJnKsmROzPnO9V</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"ycJEoqmQvwg\" href=\"https://www.youtube.com/watch?v=ycJEoqmQvwg&amp;list=PLbN57C5Zdl6j_qJA-pARJnKsmROzPnO9V\"><img src=\"https://uploads.zulipusercontent.net/305250246230cc79622858fc8cc070cafb403126/68747470733a2f2f692e7974696d672e636f6d2f76692f79634a456f716d517677672f64656661756c742e6a7067\"></a></div><p>and/or the first four lectures of this course my  prof Balakrishnan (which are amazing!) <a href=\"https://www.youtube.com/watch?v=nh4TFzg30eQ&amp;list=PLbMVogVj5nJQKk1E7OUQs_TcW_zQoaO4t\">https://www.youtube.com/watch?v=nh4TFzg30eQ&amp;list=PLbMVogVj5nJQKk1E7OUQs_TcW_zQoaO4t</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"nh4TFzg30eQ\" href=\"https://www.youtube.com/watch?v=nh4TFzg30eQ&amp;list=PLbMVogVj5nJQKk1E7OUQs_TcW_zQoaO4t\"><img src=\"https://uploads.zulipusercontent.net/35cd62522d53c4a1dfcd0de851313d2de463656b/68747470733a2f2f692e7974696d672e636f6d2f76692f6e683454467a67333065512f64656661756c742e6a7067\"></a></div>",
        "id": 267418655,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641809596
    },
    {
        "content": "<p>[slack] &lt;<a href=\"http://johannes.ne\">johannes.ne</a>&gt; Thank you! those seem very good as well.</p>",
        "id": 267425255,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641813239
    },
    {
        "content": "<p>[slack] &lt;Tomas Fiers&gt; Lazy question: why is Tsit5 better than RK4 or DP5? The original paper is not very clarifying for someone not versed in the field</p>",
        "id": 267425756,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641813450
    },
    {
        "content": "<p>[slack] &lt;Tomas Fiers&gt; Never mind I found @chrisrackauckas's <a href=\"https://nextjournal.com/ChrisRackauckas/why-you-shouldnt-use-eulers-method-to-solve-odes\">https://nextjournal.com/ChrisRackauckas/why-you-shouldnt-use-eulers-method-to-solve-odes</a></p>",
        "id": 267426249,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641813736
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://scicomp.stackexchange.com/questions/40631/why-is-rk45-used-as-the-default-method-for-non-stiff-odes-rather-than-a-multis/40636#40636\">https://scicomp.stackexchange.com/questions/40631/why-is-rk45-used-as-the-default-method-for-non-stiff-odes-rather-than-a-multis/40636#40636</a></p>",
        "id": 267427678,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641814626
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://www.reddit.com/r/Julia/comments/rq4bpx/comment/hq8pz5v/?utm_source=reddit&amp;utm_medium=web2x&amp;context=3\">https://www.reddit.com/r/Julia/comments/rq4bpx/comment/hq8pz5v/?utm_source=reddit&amp;utm_medium=web2x&amp;context=3</a></p>",
        "id": 267427748,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641814670
    },
    {
        "content": "<p>[slack] &lt;Tomas Fiers&gt; Maybe an idea to add these links to the docs?</p>",
        "id": 267429369,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641815815
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; @johannes.ne I also had to learn differential equations on my own <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> . If you explain a little more where you are coming from, we can help you more.</p>\n<p>If you are very new to differential equations, then I would start with the first 20 videos in this sequence by Pavel Grinfeld. the title of the videos is Partial Differential Equations, but the first 20 lectures are ODEs. And the videos are pretty short, so not very long.<br>\n<a href=\"https://www.youtube.com/playlist?list=PLlXfTHzgMRUK56vbQgzCVM9vxjKxc8DCr\">https://www.youtube.com/playlist?list=PLlXfTHzgMRUK56vbQgzCVM9vxjKxc8DCr</a></p>",
        "id": 267481517,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641840108
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; One challenge with the underlying theory of ODEs is that it can make understanding practical ODEs harder, haha. There are a lot of different definitions for types of ODES--homogeneous with constant coefficients, homogeneous with non-constant coefficients, etc. Most of those special techniques are not needed for a beginner, and so Pavel Grinfeld gets your past all of that. Watching the Strogatz videos won't make sense until you at least have a sense of linear ODEs from Grinfeld.</p>",
        "id": 267481889,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641840285
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; After that, I do think that @chrisrackauckas’s video from 18337--I think the 4th or 5th videos talk about dynamical systems. So in that video he shows you the Forward and Backward Euler scheme as well as how to program those solvers in Julia. I found that really helpful because seeing the numerical scheme and the programming on one place is still rare, so Chris did a really good job with that.</p>",
        "id": 267482167,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641840414
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; You don't need to learn all of the different types of numerical solvers to understand the basics. I think if you understand the Euler methods, and then some things like Heun's method and Runge-Kutta methods, then you should be in a decent place. There are a lot of methods to deal with specialized problems like delay differential equations, or stiff equations, but understanding the fundamentals is really helpful.</p>",
        "id": 267482493,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641840597
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; The last thing I would say is it will help to also watch the Gil Strang videos for engineering 085. He is such a great teacher, but also you will find that the language he uses is very common in the Julia community, so you know have a better sense of what people are talking about <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> . If you watch the first like 8-9 videos, you will be in pretty good shape.</p>",
        "id": 267482702,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641840696
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; It takes some time, but definitely worth it.</p>",
        "id": 267482763,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641840722
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; <a href=\"https://www.youtube.com/playlist?list=PLF706B428FB7BD52C\">https://www.youtube.com/playlist?list=PLF706B428FB7BD52C</a></p>",
        "id": 267482776,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641840725
    },
    {
        "content": "<p>[slack] &lt;<a href=\"http://johannes.ne\">johannes.ne</a>&gt; Thank you so much for this. </p>\n<p>Background:<br>\nI'm a medical doctor doing a PhD about hemodynamics. As part of my project, I have the idea of writing a model of the cardiovascular system and try to fit parameters to some simultaneous waveforms of blood pressure and airway pressure/lung volume (the pressure in the lungs impact resistant and pressure in the blood going through the lungs).</p>\n<p>Usually this type of model is created as analogous to an electric circuit (RCI)</p>\n<p>I am quite proficient in R and new to Julia.</p>",
        "id": 267487518,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641842786
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Yeah, that makes sense. I think a lot of these cardiac simulations rely on nonlinear odes. There are some examples of these models in the Strogatz book. I think a lot of the arrhythmia simulations and things rely on the Fitzhugh-Nagumo model or some others. There are other simulations for things like aneuryms which are PDE simulations, which is a very interesting topic as well--because there are some recent papers on aneurysm simulations and these physic informed neural networks.</p>",
        "id": 267496289,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641847109
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; If you have some particular papers in mind or a model, you can always post the image here. Someone here can always help to decode how to operationalize it in the Sciml world. Team effort, eh.</p>",
        "id": 267496419,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641847201
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; Hi everyone, I've read the new tutorial about preconditioners that Chris released yesterday (very helpful by the way for a beginner like me). I've tried to apply the three of them with a nonlinear solver (Newton's method)  for solving my PDE system and none of them make the solve function going faster. Is it something that is only useful for linear system in that form? I don't know much about the question but I thought that preconditioners could also be useful for nonlinear function.</p>",
        "id": 267571423,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641902445
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the PDE example is nonlinear, so <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> it definitely helps nonlinear</p>",
        "id": 267572444,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641903096
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; how big is your problem?</p>",
        "id": 267572475,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641903111
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and how stiff?</p>",
        "id": 267572487,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641903122
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; preconditioners only matter as it gets stiff.</p>",
        "id": 267572532,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641903129
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; aha, that's true now that I look back at the equations. Then there is something that is confused in my head. If it is non-linear, why do you use a linear solver?</p>",
        "id": 267575135,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641904942
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; &gt; [slack] &lt;chrisrackauckas&gt; how big is your problem?</p>\n<p>It is quite big, like 100*500 in 2D</p>",
        "id": 267575356,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641905082
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; I tried that yesterday and as it didn't work as expected I thought I couldn't apply it to my problem. I will try again to see a bit in details</p>",
        "id": 267575414,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641905124
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; &gt;  If it is non-linear, why do you use a linear solver?<br>\nNonlinear solvers internally have to solve linear equations sequentially</p>",
        "id": 267575818,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641905349
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Did you add the Jacobian sparsity?</p>",
        "id": 267575841,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641905361
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; &gt; [slack] &lt;chrisrackauckas&gt; &gt;  If it is non-linear, why do you use a linear solver?</p>\n<blockquote>\n<p>Nonlinear solvers internally have to solve linear equations sequentially</p>\n</blockquote>\n<p>So in which case should I use nonlinear solvers and linear solvers if they both solve nonlinear functions?</p>",
        "id": 267576099,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641905511
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; I mean, the lsolve or the nsolve option in solve</p>",
        "id": 267576155,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641905525
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; If you use Newton's method, there is a linear solver in it</p>",
        "id": 267576172,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641905541
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's not or, it's and.</p>",
        "id": 267576178,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641905543
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It's, for this nonlinear system, which linear solver should I be using internally?</p>",
        "id": 267576200,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641905555
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; do you mean that I can use both linsolve and nlinsolve option at the same time, one to define the linear solver r and the other to define the nonlinear solver around it?</p>",
        "id": 267576429,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641905675
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; &gt; [slack] &lt;chrisrackauckas&gt; Did you add the Jacobian sparsity?</p>\n<p>yes I did</p>",
        "id": 267576444,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641905686
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; so I could combine GMRES and Newton method for example? Sorry if it is really some newbies questions <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 267576713,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641905829
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; &gt; do you mean that I can use both linsolve and nlinsolve option at the same time, one to define the linear solver r and the other to define the nonlinear solver around it?<br>\nyes</p>",
        "id": 267577107,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641906017
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Newton is the default</p>",
        "id": 267577149,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641906027
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; for the most part, don't touch the nlsolver</p>",
        "id": 267577175,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641906032
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; just let it be Newton</p>",
        "id": 267577182,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641906036
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; So what's your current setup</p>",
        "id": 267577201,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641906044
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you tried a few solvers?</p>",
        "id": 267577225,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641906052
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It's KrylovJL_GMRES with which preconditioner?</p>",
        "id": 267577244,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641906061
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; If it's ILU, did you adjust the tolerance to your problem?</p>",
        "id": 267577274,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641906074
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; ILU you really have to choose the tau correctly (as the tutorial says). AlgebraicMultigrid is a bit more automatic.</p>",
        "id": 267577315,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641906095
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; &gt; [slack] &lt;chrisrackauckas&gt; &gt; do you mean that I can use both linsolve and nlinsolve option at the same time, one to define the linear solver r and the other to define the nonlinear solver around it?</p>\n<blockquote>\n<p>yes</p>\n</blockquote>\n<p>Nice, I didn't understand that so I had the linsolve by defaut I guess, as I only specified nlsolve</p>",
        "id": 267578131,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641906568
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; Let me try a few things and I will come back!</p>",
        "id": 267578148,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641906585
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; thx a lot</p>",
        "id": 267578158,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641906594
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; So, I got an error when I try this for example <br>\nsolve(prob_sparse, TRBDF2(linsolve=LinSolveGMRES(), nlsolve= NLNewton(; κ= 1//100, max_iter= 10, fast_convergence_cutoff= 1//5, new_W_dt_cutoff= 1//5)), progress = true, progress_steps = 1, save_start=false, save_everystep=false)</p>",
        "id": 267578555,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641906796
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; when this works:<br>\nsolve(prob_sparse, TRBDF2(nlsolve= NLNewton(; κ= 1//100, max_iter= 10, fast_convergence_cutoff= 1//5, new_W_dt_cutoff= 1//5)), progress = true, progress_steps = 1, save_start=false, save_everystep=false)</p>",
        "id": 267578566,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641906804
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; that's why I thought I could't use both at the same time</p>",
        "id": 267578620,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641906833
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; Alright, I guess it was a bug with 7.0.0 because none of the linear solvers were available. I see that you just uploaded 7.1.0 and you had to reexport LinearSolve. It is working like a charm with 7.1.0 now. I guess it was a bad timing for me to decide to update all my packages yesterday!</p>",
        "id": 267583004,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641909004
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; My preconditioner will also probably work better also</p>",
        "id": 267583069,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641909031
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a> v7 released!</p>\n<p><a href=\"https://sciml.ai/news/2022/01/11/linearsolve_preconditioners/\">https://sciml.ai/news/2022/01/11/linearsolve_preconditioners/</a></p>",
        "id": 267583490,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641909210
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; &gt; Alright, I guess it was a bug with 7.0.0 because none of the linear solvers were available. I see that you just uploaded 7.1.0 and you had to reexport LinearSolve. It is working like a charm with 7.1.0 now. I guess it was a bad timing for me to decide to update all my packages yesterday!<br>\nYeah, noticed that while writing the release post <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 267583504,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641909222
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; LinSolveGMRES is the old syntax</p>",
        "id": 267583571,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641909244
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>solve(prob_sparse, TRBDF2(linsolve=KrylovJL_GMRES(), progress = true, progress_steps = 1, save_start=false, save_everystep=false)</code><br>\nis simpler and says the same thing.</p>",
        "id": 267583609,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641909273
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah, and now setup the preconditioners.</p>",
        "id": 267583637,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641909292
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; Sooo, for linsolve, the best for my problem seems to be KLUFactorization, and I've tried to combine that with AlgebricMultigrid. I've tried a small case with a grid of 5*500 with 2 PDEs</p>",
        "id": 267586735,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641910559
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; here are the results:<br>\nwithout multigrid: 13.062 s (612653 allocations: 5.13 GiB)<br>\nwith multigrid: 19.847 s (1301014 allocations: 13.82 GiB)</p>",
        "id": 267586818,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641910591
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; so it is faster without it. I will try with a bigger grid to see how it scales in space</p>",
        "id": 267586883,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641910631
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; here are the lines btw:<br>\n@btime DifferentialEquations.solve(prob_sparse, TRBDF2(linsolve=KLUFactorization() ,nlsolve= NLNewton(; κ= 1//100, max_iter= 10, fast_convergence_cutoff= 1//5, new_W_dt_cutoff= 1//5)), progress = true, progress_steps = 1, save_start=false, save_everystep=false);<br>\n@btime DifferentialEquations.solve(prob_sparse, TRBDF2(linsolve=KLUFactorization() ,nlsolve= NLNewton(; κ= 1//100, max_iter= 10, fast_convergence_cutoff= 1//5, new_W_dt_cutoff= 1//5), precs=algebraicmultigrid,concrete_jac=true), progress = true, progress_steps = 1, save_start=false, save_everystep=false);</p>",
        "id": 267586965,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641910677
    },
    {
        "content": "<p>[slack] &lt;termi-official&gt; Look great! Is there any chance that the nonlinear solver interface will get some refactoring in the near future?</p>",
        "id": 267587265,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641910827
    },
    {
        "content": "<p>[slack] &lt;termi-official&gt; I am especially thinking about utilizing some of the existing time steppers in conjuction with nonlinear preconditioning and specialized Newton-type schemes (e.g. Multilevel-Newton) for solving semi-discretizations of PDEs and PDAEs.</p>",
        "id": 267587599,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641910969
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; That's a bit harder because the nonlinear solvers tie into the time stepping in deep ways</p>",
        "id": 267589285,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641911667
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that have convergence estimates that tell it when to reconstruct only W vs reconstruct J, etc.</p>",
        "id": 267589317,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641911687
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I don't think most users would even know what most of the hooks do <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 267589345,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641911697
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I think adding nonlinear preconditioning to the Newton method would just be a better thing to do.</p>",
        "id": 267589376,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641911708
    },
    {
        "content": "<p>[slack] &lt;termi-official&gt; Thanks for the response. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> Yes, I tried to implement the Multilevel-Newton by myself, but had to give up because it took way longer than initially anticipated.</p>",
        "id": 267589790,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641911846
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Open an issue. I would like to add nonlinear preconditioners and globalizing Newton methods, but yeah in the ODE solver there's so many hooks that it needs a separate interface than the standard NonlinearProblem one./</p>",
        "id": 267590021,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641911915
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; here I am again, so for multigrid on a grid  50*501:<br>\nWithout multigrid (with @time):<br>\n447.501451 seconds (46.03 M allocations: 104.504 GiB, 0.34% gc time)<br>\nwith multigrid:<br>\n527.845074 seconds (19.97 M allocations: 195.363 GiB, 1.49% gc time)<br>\nSo definitely not helping for my problem. <br>\nI will try with IncompleteLU and by playing with τ parameter!</p>",
        "id": 267590871,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641912264
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; &gt; Sooo, for linsolve, the best for my problem seems to be KLUFactorization, and I've tried to combine that with AlgebricMultigrid.<br>\npreconditioners are only used with Krylov methods. So that combination won't do anything other than build preconditioners <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 267590874,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641912266
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; why are you specifying NLNewton?</p>",
        "id": 267590897,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641912276
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; aha, alright</p>",
        "id": 267590901,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641912277
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Just simplify the code</p>",
        "id": 267590908,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641912280
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>@btime DifferentialEquations.solve(prob_sparse, TRBDF2(linsolve=KLUFactorization(), progress = true, progress_steps = 1, save_start=false, save_everystep=false);</code></p>",
        "id": 267590928,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641912290
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; is equivalent (and it's one of the tutorial examples)</p>",
        "id": 267590951,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641912303
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; so by default TRBDF2 is always using newton method?</p>",
        "id": 267590971,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641912308
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; all implicit schemes for stiff equations default to Newton</p>",
        "id": 267591016,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641912326
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; alright, that's also 1 of my other confusion: The link between stiffness and nonlinearity</p>",
        "id": 267591095,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641912362
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; You only need to use <code>NLNewton</code> if you want to tweak convergence criteria, which is a pretty specialized thing I won't document because <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>  you might as well look at the code if you're going to be doing that..</p>",
        "id": 267591204,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641912395
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; for me the consequence of stiffness is that it is quicker to solve it in an implicit way, I didn't know it was also usefull to use newton method in that case</p>",
        "id": 267591295,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641912436
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; or is a stiff equation  always nonlinear?</p>",
        "id": 267591348,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641912455
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; there are linear stiff equations</p>",
        "id": 267591436,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641912484
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but yeah, one way to define stiffness is that an implicit solver is faster than an explicit one.</p>",
        "id": 267591463,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641912498
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; &gt; [slack] &lt;chrisrackauckas&gt; there are linear stiff equations</p>\n<p>then for this specific case, is it overkilled to use newton method on top of it?</p>",
        "id": 267591538,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641912531
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's always using Newton if you don't specify it</p>",
        "id": 267592120,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641912760
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's just using the defaults.</p>",
        "id": 267592131,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641912764
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; I understand, I am just wondering if it is useful for a linear stiff equation, in a hypothetic case, to use Newton method<br>\nJust for my understanding of the things</p>",
        "id": 267592410,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641912867
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; Like is Newton method= good for non linear equation or Newton method= good for non linear equation + good for all stiff equations</p>",
        "id": 267592490,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641912902
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; for a linear equation Newton converges in one step so that's nice.</p>",
        "id": 267592580,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641912938
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; I see, makes sense</p>",
        "id": 267592617,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641912957
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's then just equivalent to solving the linear system</p>",
        "id": 267592626,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641912960
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; Alright, thx for all the clarification, it helps a lot!</p>",
        "id": 267592868,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641913065
    },
    {
        "content": "<p>[slack] &lt;xtalax&gt; @Nikhil Yewale If you have any questions about how DiffEqOperators or MOL is working please ask away <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 267633651,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641929793
    },
    {
        "content": "<p>[slack] &lt;George Gkountouras&gt; The 'Solving large stiff equations' links within the <a href=\"https://diffeq.sciml.ai/stable/tutorials/faster_ode_example/\">https://diffeq.sciml.ai/stable/tutorials/faster_ode_example/</a> are giving 404. However, the one at the very bottom of the page works.</p>",
        "id": 267645606,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641935517
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; Why are the compile times for koopman expectation so long? I often require more than an hour for the first solve and then less than a second subsequently, and that is without ADing through it.</p>",
        "id": 267665971,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641946400
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; because its typing is bad</p>",
        "id": 267666597,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641946890
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it needs a rewrite</p>",
        "id": 267666599,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641946892
    },
    {
        "content": "<p>[slack] &lt;Qiyao Wei&gt; Hey Ricardo, sorry for the delay in replying! After thinking about this a bit more I realize that you are correct that I should not train the initial condition of the NODE. However, I also have a follow-up question---shouldn’t NODE be able to learn a family of IVPs anyways, in the sense that the ODE learned by the neural net is dependent on the initial condition (i.e. data input)?</p>",
        "id": 267678583,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641958203
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; I am not sure you should <strong>not</strong> train that, it is just another way of doing things. As for the question, the classical NODE <code>u' = NN(u); u(0) = u_0</code> (or even that with <code>u(0) = NN_2(u_0)</code>) should learn a specific ODE provided we have enough data (e.g. several trajectories starting at different initial conditions). If we only have a few initial conditions, it would only be able to learn a portion of the dynamics, namely that visited by those solutions. Unless your system is ergodic, you will not be able to learn all the ODE with a single trajectory.</p>",
        "id": 267708197,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641984782
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; The thing with <code>u' = NN(u); u(0) = NN_2(u_0)</code>, though, is that simple maps like <code>x -&gt; -x</code> can be learned with a trivial <code>NN</code>, essentially training only <code>NN_2</code> (like <code>NN = 0</code> and <code>NN_2 = - identity</code> in this case). It might have some advantages with more complex models.</p>",
        "id": 267708449,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641984942
    },
    {
        "content": "<p>[slack] &lt;Qiyao Wei&gt; Yeah I think that was actually what I was going for, if we simply have <code>u' = NN(u); u(0) = u_0</code> shouldn’t we still be able to learn <code>x -&gt; -x</code>? The <code>NN</code> would still be trivial, in that it would be <code>u' = -2*u_0</code> and integrating from <code>[0,1]</code> would give us the desired mapping</p>",
        "id": 267709426,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641985559
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; The problem in this example is that you don’t actually have a single <code>NN = NN(u)</code> , you have a parametrized <code>NN_{u_0}(u) = -2u_0</code> (constant in <code>u</code>), so not a single NODE.</p>",
        "id": 267711071,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641986514
    },
    {
        "content": "<p>[slack] &lt;Qiyao Wei&gt; Gotcha. Thanks a lot for the discussion!</p>",
        "id": 267711330,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641986652
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; Thank you as well for bringing this up.</p>",
        "id": 267713143,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641988060
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; I’m using an <code>EnsembleProblem</code> with DiffEqFlux in order to solve in parallel a UDE. This really accelerates the solve in the forward pass, but there’s no parallelization for the gradient computation part. Is there any documentation or examples on how to speed up the backpropagation part of a UDE? Thanks</p>",
        "id": 267723294,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641993983
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it should be parallelizing the gradient?</p>",
        "id": 267723352,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641994028
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Do you have an MWE of that?</p>",
        "id": 267723357,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641994033
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; with multithreading right?</p>",
        "id": 267723373,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641994041
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; off the top of my head I can even point right to the call that should be parallelizing the gradient call: <a href=\"https://github.com/SciML/DiffEqBase.jl/blob/master/src/init.jl#L110\">https://github.com/SciML/DiffEqBase.jl/blob/master/src/init.jl#L110</a></p>",
        "id": 267723437,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641994081
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; if that's not in the call stack then it's worth investigating.</p>",
        "id": 267723484,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641994090
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; Basically when I do <code>EnsembleSerial()</code> vs <code>EnsembleDistributed()</code> I only see a meaningful difference on the solve. After the solve, it gets stuck for a while computing the gradient with both methods, with no speed up using the distributed ensemble.</p>",
        "id": 267723876,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641994295
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh EnsembleDistributed</p>",
        "id": 267725242,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641994957
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I think that's a performance issue with the derivative of pmap</p>",
        "id": 267725256,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641994965
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I just emailed the student I work with who has a performance fix for that</p>",
        "id": 267725269,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641994973
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah he noticed that like a month ago. It still pmaps for the reverse but it concretizes some things so there's more data operations than necessary</p>",
        "id": 267725357,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641995023
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; there's a fixed code that was used in <a href=\"https://arxiv.org/abs/2111.05841\">https://arxiv.org/abs/2111.05841</a> but it's not in Zygote yet <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 267725380,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641995041
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; We can test with that improved version and see if that does it.</p>",
        "id": 267725436,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641995054
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; That makes sense though. Yeah it's hitting all parallel dispatches but that one does more work than it needs to.</p>",
        "id": 267725492,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641995077
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; OK, good to know. Thanks Chris</p>",
        "id": 267725514,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641995089
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; I’d be interested in following this fix. As I discussed in Discourse, my code is not working with Zygote (gradient issues, again….), so I’m left with ReverseDiff, which is pretty slow. So in order to find a temporary workaround I was hoping to strongly parallelize the UDE using InterpolatingAdjoint and ReverseDiff.</p>",
        "id": 267725759,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641995192
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah I'll set a reminder</p>",
        "id": 267725825,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641995220
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I know the code already exists, but sometimes getting a student who doesn't do dev stuff to actually make a PR to an open source repo can be a challenge <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 267725878,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641995242
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I planned to look at your example a bit more but I have been trying to push the DiffEq v7 release out this week since we have Friday deadlines for a few things.</p>",
        "id": 267725943,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641995277
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; No worries Chris, thanks for all your help!</p>",
        "id": 267726074,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641995323
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; It’s just that I’m getting a bit weary with Zygote. It’s slowing my project a lot, and I’m starting to feel pressure to move on to the “science” part of my project after being stuck with this for months.</p>",
        "id": 267726201,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641995391
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Also @Dhairya did you ever look into that code?</p>",
        "id": 267729592,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641996854
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; Is is just koopman that needs the rewrite or quadrature entirely?</p>",
        "id": 267730221,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641997178
    },
    {
        "content": "<p>[slack] &lt;<a href=\"http://johannes.ne\">johannes.ne</a>&gt; Can anyone recommend an open project based around ModelingToolkit that i can use for inspiration? I'm particularly interested in how to appropriately structure a project/package with multiple components.</p>",
        "id": 267731614,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641997727
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/wsphillips/Conductor.jl\">https://github.com/wsphillips/Conductor.jl</a> or <a href=\"https://github.com/SciML/ModelingToolkitStandardLibrary.jl\">https://github.com/SciML/ModelingToolkitStandardLibrary.jl</a>?</p>",
        "id": 267734893,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641999189
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It's still a bit of the wild west right now.</p>",
        "id": 267734905,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1641999193
    },
    {
        "content": "<p>[slack] &lt;Dhairya&gt; I do remember That. Is there a pr for it? I remember we had parallelized the pmap gradient call before that too but it's best to get it merged in Zygote.</p>",
        "id": 267736884,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642000044
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I feel you <span aria-label=\"disappointed\" class=\"emoji emoji-1f61e\" role=\"img\" title=\"disappointed\">:disappointed:</span> this has been me for a year now...</p>",
        "id": 267737424,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642000274
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; @Jordi Bolibar What about the Enzyme VJP implementation? I haven't tried it yet myself, but I thought @chrisrackauckas mentioned that it might be faster for medium size UDE systems...?</p>",
        "id": 267737680,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642000386
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @Dhairya can you look int othat gradient issue?</p>",
        "id": 267737838,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642000454
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Enzyme can't handle the BLAS calls right now. But that will be the right answer for Jordi's problem once that's done.</p>",
        "id": 267737985,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642000527
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I see. Does <code>LinearAlgebra</code> use BLAS by default...?</p>",
        "id": 267738292,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642000664
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes</p>",
        "id": 267738562,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642000773
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I guess this means Enzyme wouldn't work with implicit solvers like <code>TRBDF2</code> then...</p>",
        "id": 267738587,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642000783
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; no</p>",
        "id": 267738597,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642000789
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that's a completely different thing</p>",
        "id": 267738616,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642000796
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; oh right... VJP vs solver derivatives</p>",
        "id": 267738686,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642000815
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; ok so if you don't use linear algebra in your <code>f</code> then Enzyme should work?</p>",
        "id": 267738711,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642000829
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes</p>",
        "id": 267739742,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642001256
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; And DiffEq actually defaults to Enzyme</p>",
        "id": 267739772,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642001269
    },
    {
        "content": "<p>[slack] &lt;Dhairya&gt; Sure, happy to! Would you have a link to the code handy?</p>",
        "id": 267740185,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642001423
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://discourse.julialang.org/t/zero-gradients-with-zygote-vs-correct-gradients-with-reversediff-using-diffeqflux/74398/2\">https://discourse.julialang.org/t/zero-gradients-with-zygote-vs-correct-gradients-with-reversediff-using-diffeqflux/74398/2</a></p>",
        "id": 267740773,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642001687
    },
    {
        "content": "<p>[slack] &lt;Dhairya&gt; Thanks</p>",
        "id": 267740791,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642001698
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; What @chrisrackauckas said. Right now Zygote is the solution (despite all its problems). I think when Zygote will fix its bugs and with heavy parallelization it can be a workable option for my problem.</p>",
        "id": 267744094,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642003012
    },
    {
        "content": "<p>[slack] &lt;<a href=\"http://johannes.ne\">johannes.ne</a>&gt; Thank you! ModelingToolkiStandardLibrary seem to match what I want to with hemodynamic components.</p>",
        "id": 267755651,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642007726
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it needs an update though <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> but yeah it's kind of a model</p>",
        "id": 267756009,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642007806
    },
    {
        "content": "<p>[slack] &lt;<a href=\"http://johannes.ne\">johannes.ne</a>&gt; Well, I'm mostly looking for inspiration for how to structure this type of project <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 267760979,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642009923
    },
    {
        "content": "<p>[gitter] &lt;mkitti&gt; chrisrackauckas is talking about diffeq at <a href=\"https://www.twitch.tv/out_of_context_lambda\">https://www.twitch.tv/out_of_context_lambda</a> right now</p>",
        "id": 267807190,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642032912
    },
    {
        "content": "<p>[slack] &lt;Nikhil Yewale&gt; Hey @xtalax , thanks for going through the PR. My understanding about MOL is really theoretical, for eg, i know that \"only the spatial derivatives are discretised and time-derivative is left unharmed\", and then <a href=\"https://github.com/search?q=OrdinaryDiffEq.jl&amp;type=Repositories\">OrdinaryDiffEq.jl</a> solvers do the job of solving resulting sets of IVPs.<br>\nI did not have much time to go through <a href=\"https://github.com/search?q=DiffEqOperators.jl&amp;type=Repositories\">DiffEqOperators.jl</a> yet, but from whatever i had browsed i have following questions:</p>\n<ol>\n<li>How does the automatic discretisation of spatial derivatives work (which code specifically) in <a href=\"https://github.com/search?q=DiffEqOperators.jl&amp;type=Repositories\">DiffEqOperators.jl</a> ? and how is the order of accuracy considered in such automatic discretisation of derivatives ?</li>\n<li>I also understand the special cases of <code>CenteredFiniteDifference</code> and <code>Upwind</code> are created from <code>calculate_weights</code> as they are more widely used in CFD etc. Is there any way to do so for arbitrary accuracy too ?</li>\n<li>How are boundary conditions applied (functions/code that points to this)? The usual ones like Dirichlet/Robin/Neumann and some weird exceptional ones ? </li>\n<li>Meaning of concretization , and how do convolutions help in creating derivative operators ? I understand convolutions as stencils on the grids, but am unable to understand how they are used in DiffEqOperators, and how boundary conditions are clubbed with them, in the code<br>\nAs for my PR on fornberg-hermite weights , i wish to extend/generalise it so that one can leverage any extra-accuracy as shown by the paper ! But for that i thought first its better to familiarise myself with <a href=\"https://github.com/search?q=DiffEqOperators.jl&amp;type=Repositories\">DiffEqOperators.jl</a> first.</li>\n</ol>",
        "id": 267828025,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642054213
    },
    {
        "content": "<p>[slack] &lt;Nikhil Yewale&gt; 5. Lastly, we write equations and BCs in MTK/Symbolic styles, . How is this symbolic form actually \"discretised\" in the code ?</p>",
        "id": 267828408,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642054634
    },
    {
        "content": "<p>[slack] &lt;xtalax&gt; Something to understand first off is that DiffEqOperators does not provide any automatic discretization, it simply supplies lazy matrix like operators that use GPU based convolution of a discretized domain with a precalculated kernel constructed from all of the finite difference stencils of the composed operator to accelerate a 'matrix multiply'. It provides a few other things too, but that's the core idea.</p>\n<ol start=\"2\">\n<li><code>calculate_weights</code> works to arbitrary order finite difference approximation, by supplying a longer <code>x</code> as an input you get a higher order aproximation.</li>\n</ol>\n<p>MethodOfLines has been recently split off from DiffEqOperators after it became clear that they were solving different problems. This is where all the automatic discretization is occurring. The package is under active development and will change a lot in the next release. At the moment the finite difference approximation order is hardcoded to 2, I'm currently in the process of generalizing this to arbitrary order by precalculating weights using a constructor to <code>DerivativeOperator</code> , found <a href=\"https://github.com/SciML/DiffEqOperators.jl/blob/master/src/derivative_operators/derivative_operator.jl\">here</a></p>",
        "id": 267908315,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642097445
    },
    {
        "content": "<p>[slack] &lt;xtalax&gt; 1. In method of lines we are discretizing the domain to something like <code>@variables u[1:100]</code> (have a look at <code>src/discretization/discretize_vars.jl</code>) and then for each index in the interior we are using symbolics to match particular forms in a supplied equation like a <code>Differential(x)(u(x,t))</code>, and map them to their finite difference approximation. For example at index 7 we would have a rule <code>Differential(x)^2(u(x,t)) =&gt; (u[6] - 2u[7] + u[8])/dx^2</code> , among others.  We apply the rules <a href=\"https://github.com/SciML/MethodOfLines.jl/blob/b1d5d334f705a304329d4ac09cd93c85cbbe91e2/src/discretization/MOL_discretization.jl#L105\">here</a>, and generate the rules <a href=\"https://github.com/SciML/MethodOfLines.jl/blob/b1d5d334f705a304329d4ac09cd93c85cbbe91e2/src/discretization/generate_finite_difference_rules.jl#L24\">here</a>. The result is a new system of equations with only t as a free parameter which can be solved with an ODE solver.</p>",
        "id": 267910776,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642098634
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; Quick question: is there a clean way to get a progress bar per batch  or epoch when using <code>EnsembleDistributed</code>  and <code>progress=true</code>? So far I’m getting many progress bars printed at the same time for each worker which overlap each other constantly with TerminalLoggers.</p>",
        "id": 267911958,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642099243
    },
    {
        "content": "<p>[slack] &lt;xtalax&gt; 3. After the next release, boundary conditions will be discretized with the same rules as the pde, at e.g. <code>u[1]</code>  and <code>u[end]</code>, simply adding these discrete equations to the ODEsystem</p>",
        "id": 267913950,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642100179
    },
    {
        "content": "<p>[slack] &lt;xtalax&gt; 4. In DiffEqOperators the bcs are applied with BCOperators, often called <code>Q</code>. They extend the domain by one node at the boundary called a ghost node, the value of which is determined by the type of BC. These are affine operators, doing something like <code>y = A*x .+ b</code>. The A and b parts are calculated by discretizing derivatives at the boundary like in neumann and robin with a call to <code>calculate_weights</code>. Have a look at the docstrings for robin and general bc for more, or their implementation here: <a href=\"https://github.com/SciML/DiffEqOperators.jl/blob/0c43a651539f479bb00304bae0af9567b659d9c0/src/derivative_operators/bc_operators.jl\">https://github.com/SciML/DiffEqOperators.jl/blob/0c43a651539f479bb00304bae0af9567b659d9c0/src/derivative_operators/bc_operators.jl</a></p>\n<p>If the derivative operator is <code>A = Dxx + Dyy</code> , then to apply it you would need a ghost operator <code>Q</code>, and do <code>A*Q*u</code></p>",
        "id": 267914584,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642100452
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you can use the <code>progress_name</code> and set it in the problem remake so that they all have different names. On Juno that would at least keep them separate, I don't know about terminal loggers or VSCode but it's worth a try.</p>",
        "id": 267917042,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642101497
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; In VSCode, this just adds a tag to the previous behaviour:: <a href=\"https://files.slack.com/files-pri/T68168MUP-F02TYSXBL2X/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F02TYSXBL2X/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02TYSXBL2X/download/image.png\"><img src=\"https://uploads.zulipusercontent.net/b3565f1d07b47517c88296378778251beef9ec12/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303254595358424c32582f646f776e6c6f61642f696d6167652e706e67\"></a></div>",
        "id": 267922409,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642104077
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oof, ask @pfitzseb?</p>",
        "id": 267923129,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642104372
    },
    {
        "content": "<p>[slack] &lt;pfitzseb&gt; VS Code is only hooked up to ProgressLogging, which I don't think TerminalLoggers uses</p>",
        "id": 267923241,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642104431
    },
    {
        "content": "<p>[slack] &lt;SebastianM-C&gt; <a href=\"https://github.com/JuliaLogging/TerminalLoggers.jl/blob/master/Project.toml\">https://github.com/JuliaLogging/TerminalLoggers.jl/blob/master/Project.toml</a><br>\nTerminalLoggers uses ProgressLogging</p>",
        "id": 267959830,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642126515
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; @pfitzseb The thing is that the progress bars do load, it’s just that they instantiate each time they are updated for each worker, which results in a very messy print. Is there any way to have them load in parallel?</p>",
        "id": 267980848,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642146593
    },
    {
        "content": "<p>[slack] &lt;Dominic Rose&gt; Getting an odd error for some of the high weak order SDE methods, primarily the adaptive ones I think, where it says its trying to access a 1-element Vector{Symbol} at index [1:2], worth submitting an issue or shall I give more details here?</p>",
        "id": 267993603,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642154846
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; open an issue. That's usually the easiest way for it to get into the dev queue</p>",
        "id": 267995986,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642156351
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @frankschae</p>",
        "id": 267995988,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642156352
    },
    {
        "content": "<p>[slack] &lt;ODF&gt; Hi all, I am solving a (large) system of SDEs. I would like to avoid saving all solutions, I am thinking of using GPUs, and keep only some moments.<br>\nI have implemented the mean and variance by a Callback. These two moments are computed at the same time t and obtained as functions of t, which is excellent.<br>\nIs there a way to use the Callback idea to compute, say the mean of the product of the values of the solutions at all times t and t+\\Delta, for a given \\Delta?</p>",
        "id": 267998552,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642157936
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Look at the SavingCallback @ODF</p>",
        "id": 267998753,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642158021
    },
    {
        "content": "<p>[slack] &lt;Dominic Rose&gt; Great, will do</p>",
        "id": 267998871,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642158098
    },
    {
        "content": "<p>[slack] &lt;Dominic Rose&gt; In the stochastic sub-repository?</p>",
        "id": 267998950,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642158141
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; a limit cycle is not an equilibrium, it can be a preriodic orbit or a heteroclinic cycle</p>",
        "id": 267999127,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642158257
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; but SavingCallback only gives access at current time, no?</p>",
        "id": 267999339,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642158400
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/search?q=StochasticDiffEq.jl&amp;type=Repositories\">StochasticDiffEq.jl</a></p>",
        "id": 267999448,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642158478
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh true</p>",
        "id": 267999627,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642158581
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; so you can just run the online algorithm inside of a callback</p>",
        "id": 267999643,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642158593
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; online algorithm?</p>",
        "id": 267999843,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642158705
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; like Welford.</p>",
        "id": 268000041,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642158830
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Welford's_online_algorithm\">https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Welford's_online_algorithm</a></p>",
        "id": 268000044,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642158831
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; there's an implementation of that here <a href=\"https://github.com/SciML/SciMLBase.jl/blob/master/src/ensemble/ensemble_analysis.jl#L178-L217\">https://github.com/SciML/SciMLBase.jl/blob/master/src/ensemble/ensemble_analysis.jl#L178-L217</a> which you can adapt to callbacks</p>",
        "id": 268000145,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642158868
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it can compute the mean and variance without ever storing the time series.</p>",
        "id": 268000163,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642158877
    },
    {
        "content": "<p>[slack] &lt;ODF&gt; Welford is fine, thanks, but I need to have access u(t) and u(t+\\Delta): I want to compute the mean of u(t)u(t+\\Delta) at all times t and for various values of \\Delta. This is to estimate the covariance C(t,s) of  the solutions. I have done the case \\Delta = 0 using callback. I can’t see a way of doing \\Delta \\neq 0 in SavingCallback, but I am new to this.</p>",
        "id": 268001702,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642159819
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; savingcallback will give you the integrator</p>",
        "id": 268001740,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642159852
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; so you have the local interpolation</p>",
        "id": 268001751,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642159859
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>integrator.u</code> , <code>integrator.uprev</code>, <code>integrator.t</code>, <code>integrator.t + integrator.dt</code> , and <code>integrator(t+delta)</code> in that interval.</p>",
        "id": 268001791,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642159885
    },
    {
        "content": "<p>[slack] &lt;pfitzseb&gt; Ah</p>",
        "id": 268008024,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642164002
    },
    {
        "content": "<p>[slack] &lt;pfitzseb&gt; no, I don't think so -- you'd need to write all progress bars from the main process to do this reliably</p>",
        "id": 268008081,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642164038
    },
    {
        "content": "<p>[slack] &lt;ODF&gt; Thanks that helped a lot. In fact you can seamlessly do things like<br>\n<code>integrator(t-10*integrator.dt)</code><br>\nto have access at time t to the values of your solution in the past and I can compute my covariance function on the fly!</p>",
        "id": 268008738,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642164492
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yeah</p>",
        "id": 268010882,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642165715
    },
    {
        "content": "<p>[slack] &lt;Dominic Rose&gt; So I think it turned out this was because I had written a scalar noise problem as a non-diagonal one in preparation for a problem where there was more than one noise source, setting the noise_rate_prototype = zeros(4,1).</p>",
        "id": 268039442,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642178641
    },
    {
        "content": "<p>[slack] &lt;Dominic Rose&gt; If I just arbitrarily set it to zeros(4,2) it runs (although dt &lt; dtmin almost immediately).</p>",
        "id": 268039593,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642178692
    },
    {
        "content": "<p>[slack] &lt;Dominic Rose&gt; I can still submit an issue if you think its worth converting this specific case but it seems more like an issue caused by the user <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 268039643,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642178723
    },
    {
        "content": "<p>[slack] &lt;frankschae&gt; hmm yeah I have to look up if the adaptive scheme required a specific noise type. I think it's still worth an issue, because we could definitely use some more adaptive weak solver tests.</p>",
        "id": 268056833,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642186719
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; noted!</p>",
        "id": 268057421,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642186925
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; I've encountered an interesting issue. When solving a DAE, the initialization will use a chunk size based on the number of algebraic variables (2 in this example), whereas Jacobian calculations use a chunk size based on the number of unknowns (100 in this example). This naturally breaks any caching I do to calculate the residual since I have two different chunk sizes which breaks my pre-initialized <code>DiffCache</code> . I've managed to get around this by calling into <code>ForwardDiff</code> myself for the jacobian and turning off autodiff in the solver (so that initialization uses finite differences), but it's strange to me that this doesn't work out of the box.</p>",
        "id": 268062514,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642189490
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; In other words, regardless of what I pass as the <code>chunk_size</code> to the solver (and thus expect to get back), it will always use it's own chunk size based on the number of algebraic variables which won't work with caching.</p>",
        "id": 268062779,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642189641
    },
    {
        "content": "<p>[slack] &lt;Sobhan Mohammadpour&gt; Hi,<br>\nI was trying to run <a href=\"https://diffeqflux.sciml.ai/stable/examples/neural_ode_sciml/\">https://diffeqflux.sciml.ai/stable/examples/neural_ode_sciml/</a> with unevenly spaced training points but the gradient was zero, switching the <code>sensealg</code> to <code>sensealg=ForwardDiffSensitivity()</code> however fixed the problem. Am i doing something wrong or is this the expected behaviour with <code>InterpolatingAdjoint</code> ?</p>",
        "id": 268088625,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642203507
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; Do the linear solvers for stiff differential equations currently specialize well on blockdiagonal jacobians?</p>",
        "id": 268104437,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642221785
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; No automatically, but if you give it a blockdiagonal type in the jac_prototype it will use that type's overloads.</p>",
        "id": 268119740,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642244342
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Could you please open an issue with an example? This is not a behavior that I know about.</p>",
        "id": 268119751,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642244360
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh interesting. That's hard to solve too because you shouldn't use more chunks than the length of the number of variables you're differentiating, so that's going to be 2 while the other is 12</p>",
        "id": 268119862,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642244424
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but the most recent versions of <a href=\"https://github.com/search?q=PreallocationTools.jl&amp;type=Repositories\">PreallocationTools.jl</a> should handle this resizing automatically. Have you been using the updated version? This was a very recent improvement.</p>",
        "id": 268119890,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642244455
    },
    {
        "content": "<p>[slack] &lt;jon.norberg935&gt; a question for using <a href=\"https://github.com/search?q=DataDrivenDiffEq.jl&amp;type=Repositories\">DataDrivenDiffEq.jl</a>: If the input data has breaks in its measurement (for example: 4 months measurements, 2 week break (instrument maintenance), another 3 months, 1 week break (measurement instrument error), another 4 months....etc) can I still apply DataDrivenDiffEq and if so how do I deal with the breaks in the time series (otherwise regularly spaced). Thanks!</p>",
        "id": 268145099,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642278024
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; That should still be okay? It shouldn't require evenly spaced values.</p>",
        "id": 268145579,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642278623
    },
    {
        "content": "<p>[slack] &lt;jon.norberg935&gt; Ok, thanks, I'll give it a go then!</p>",
        "id": 268145810,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642278970
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the derivative approximations of SINDy might be suspect though</p>",
        "id": 268145820,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642278990
    },
    {
        "content": "<p>[slack] &lt;jon.norberg935&gt; That's why I hesitated first. Wondered if one can give the solver a hint about when those breaks occur</p>",
        "id": 268145901,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642279091
    },
    {
        "content": "<p>[slack] &lt;jon.norberg935&gt; I'll try and see how it goes</p>",
        "id": 268145929,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642279155
    },
    {
        "content": "<p>[slack] &lt;Anas Abdelrehim&gt; @jon.norberg935 You could fit a spline with the data if you think the smooth fit would be a good approximation of what's in between. From there, you can just grab the derivative of the spline and get cleaner values across the bound for the fit</p>",
        "id": 268150633,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642285838
    },
    {
        "content": "<p>[slack] &lt;Anas Abdelrehim&gt; There's also the collocation method used in this paper that you can adapt to your problem, same idea in principle as the spline above: <a href=\"https://www.degruyter.com/document/doi/10.1515/sagmb-2020-0025/html\">https://www.degruyter.com/document/doi/10.1515/sagmb-2020-0025/html</a></p>",
        "id": 268150807,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642286100
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the problem is that if you have some kind of discontinuity then putting a spline over it is not correct. And if you have data too far apart then a spline derivative is inaccurate.</p>",
        "id": 268151028,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642286425
    },
    {
        "content": "<p>[slack] &lt;Anas Abdelrehim&gt; Agreed, hence</p>\n<blockquote>\n<p>if you think the smooth fit would be a good approximation of what's in between<br>\nDefinitely proceed with caution <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>",
        "id": 268151128,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642286613
    },
    {
        "content": "<p>[slack] &lt;Anas Abdelrehim&gt; @jon.norberg935 an interesting black-box alternative to SINDY that does handle to some extent your problem and for general inspiration: <a href=\"https://arxiv.org/abs/1907.03907\">https://arxiv.org/abs/1907.03907</a></p>",
        "id": 268151329,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642286893
    },
    {
        "content": "<p>[slack] &lt;Anas Abdelrehim&gt; In principle, if you did succeed with the above, you could use that NN object to then sample derivative information from and use SINDY to explicate it if you so desire</p>",
        "id": 268151435,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642287098
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; I might be completely misinterpreting the equation, but how do the dimensions of the matrix multiplication make sense in equation 6<br>\n<a href=\"https://arxiv.org/pdf/2103.15341.pdf\">https://arxiv.org/pdf/2103.15341.pdf</a> ?</p>",
        "id": 268160073,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642300606
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; Also why are there two minus signs here in equation 30:<br>\n<a href=\"https://arxiv.org/pdf/2001.04385.pdf\">https://arxiv.org/pdf/2001.04385.pdf</a><br>\nCompared to the version in the docs<br>\n<a href=\"https://diffeq.sciml.ai/latest/extras/sensitivity_math/#Adjoint-Sensitivity-Analysis\">https://diffeq.sciml.ai/latest/extras/sensitivity_math/#Adjoint-Sensitivity-Analysis</a></p>",
        "id": 268160543,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642301392
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; Why is there a times -1 here:<br>\n<a href=\"https://github.com/SciML/DiffEqSensitivity.jl/blob/547104399ed173d3a6e077714090bc81235e3044/src/quadrature_adjoint.jl#L192\">https://github.com/SciML/DiffEqSensitivity.jl/blob/547104399ed173d3a6e077714090bc81235e3044/src/quadrature_adjoint.jl#L192</a><br>\nthere is nothing like that in the equations from the documentation</p>",
        "id": 268165330,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642309367
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that's <a href=\"https://github.com/SciML/DiffEqSensitivity.jl/issues/543\">https://github.com/SciML/DiffEqSensitivity.jl/issues/543</a></p>",
        "id": 268176216,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642327432
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; we have a double minus sign in the adjoints. The adjoints use something from the Sundials definition to give the -lambda, and then we use -output to get the correct derivative in the solve dispatches</p>",
        "id": 268176259,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642327474
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's really weird and we should fix that.</p>",
        "id": 268176260,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642327482
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; its not a recent issue though</p>",
        "id": 268176272,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642327530
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; it has always been like that</p>",
        "id": 268176273,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642327532
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it has been</p>",
        "id": 268176404,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642327701
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; Could you also please look into the first comment of this tread, its slightly different issue.</p>",
        "id": 268176500,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642327909
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that's why there's a times -1 there.</p>",
        "id": 268176557,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642328015
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; I mean the dimensions of the matrix multiply comment completely at the top</p>",
        "id": 268176638,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642328136
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh the vector on the left is transposed huh?</p>",
        "id": 268177225,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642329047
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah</p>",
        "id": 268177227,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642329049
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; the zero rows are kinda weird also?</p>",
        "id": 268177244,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642329116
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; the omega transpose will just be multiplied with zeros? It just looks completely wrong</p>",
        "id": 268177359,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642329327
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah, it's the way the neural ODEs paper wrote it in B.2 so I kept it the same, though I pretty much never write it like that</p>",
        "id": 268177408,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642329405
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; The UDE paper description is more clear and shows the index-1 DAE handling</p>",
        "id": 268177413,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642329417
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; I disagree that that is how the original neural ODE paper wrote it. Here is how I think it should be in your paper:: <a href=\"https://files.slack.com/files-pri/T68168MUP-F02U11F2P9C/download/capture.png\">https://files.slack.com/files-pri/T68168MUP-F02U11F2P9C/download/capture.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02U11F2P9C/download/capture.png\"><img src=\"https://uploads.zulipusercontent.net/d60d6e8d2768b64f7561f70b97609d1eaa20eda5/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303255313146325039432f646f776e6c6f61642f636170747572652e706e67\"></a></div>",
        "id": 268177967,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642330385
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; okay</p>",
        "id": 268178019,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642330442
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; They shouldn't be in a column though since that would make them add</p>",
        "id": 268178041,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642330477
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh I see on the diagonal</p>",
        "id": 268178045,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642330493
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah</p>",
        "id": 268178046,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642330494
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oops. yeah that's a typo, but the equation is clear and known so it shouldn't be too much of an issue</p>",
        "id": 268178065,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642330531
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; you are probably confusing it with this, which I think is something slightly different.: <a href=\"https://files.slack.com/files-pri/T68168MUP-F02U7MGFH6E/download/capture2.png\">https://files.slack.com/files-pri/T68168MUP-F02U7MGFH6E/download/capture2.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F02U7MGFH6E/download/capture2.png\"><img src=\"https://uploads.zulipusercontent.net/8e355837d0684c64732fc82c9ce926d5f1cc4661/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303255374d47464836452f646f776e6c6f61642f63617074757265322e706e67\"></a></div>",
        "id": 268178068,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642330541
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes, I agree it should be on the diagonal</p>",
        "id": 268178113,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642330567
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; discrete cost functions can not be directly dependent on p in adjoint sensitivity analysis? I don't see a place for g_p?</p>",
        "id": 268180186,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642334019
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; not continuously dependent because there is no continuous term</p>",
        "id": 268180262,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642334081
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>p</code> only effects discrete times with discrete adjoints, so that term is trivially zero</p>",
        "id": 268180288,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642334120
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; I'm not sure I follow. For g_u(t_i) you have this nudging mechanism to keep d lambda correct for discrete time cost functions. If this cost at t_i also depends on p explicitly is there then also a mechanism to nudge d grad using d g_p(t_i)?</p>",
        "id": 268180684,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642334607
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes, and that's the callbacks</p>",
        "id": 268180754,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642334695
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I assume you're looking into <a href=\"https://github.com/SciML/DiffEqFlux.jl/issues/656\">https://github.com/SciML/DiffEqFlux.jl/issues/656</a> ?</p>",
        "id": 268180770,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642334720
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I'll just respond to the issue</p>",
        "id": 268180772,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642334726
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I've had it in my email for awhile.</p>",
        "id": 268180776,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642334733
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; I conceptually understand how it works now but, I do not find any example of how a discrete time d g_p(t_i) is passed to the low level interface:</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>using OrdinaryDiffEq\nfunction fiip(du,u,p,t)\n  du[1] = dx = p[1]*u[1] - p[2]*u[1]*u[2]\n  du[2] = dy = -p[3]*u[2] + p[4]*u[1]*u[2]\nend\np = [1.5,1.0,3.0,1.0];\nu0 = [1.0;1.0]\nprob = ODEProblem(fiip,u0,(0.0,10.0),p)\nsol = solve(prob,Tsit5(),reltol=1e-6,abstol=1e-6)\ng(u,p,t) = u[1]^2 + p[1]\nfunction dgdu(out,u,p,t,i)\n  out[1] = 2u[1]\n  out[2] = 0.0\nend\nfunction dgdp(out,u,p,t,i) # HOW TO PASS THIS\n  out[1] = 1.0\n  out[2] = 0.0\n  out[2] = 0.0\n  out[2] = 0.0\nend\n\ndu0,dp = adjoint_sensitivities(sol,Tsit5(),dgdu,1.0:9.0,abstol=1e-3,reltol=1e-3,sensealg=QuadratureAdjoint())```\n</code></pre></div>",
        "id": 268182610,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642337462
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/SciML/DiffEqSensitivity.jl/issues/286\">https://github.com/SciML/DiffEqSensitivity.jl/issues/286</a></p>",
        "id": 268182929,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642337964
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the features used in the AD overloads have gotten significantly more love than the ones that aren't <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 268182937,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642337984
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; @chrisrackauckas If one wants to implement a custom nonlinear solver, should this be based on the code in <code>DiffEqBase</code> or in <code>OrdinaryDiffEq</code> ? Both packages have types/functions for doing a nonlinear solve, but it's not clear which code gets actually used.</p>",
        "id": 268199665,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642357642
    },
    {
        "content": "<p>[slack] &lt;jon.norberg935&gt; Oh, these are some interesting avenues! Thanks all!</p>",
        "id": 268204396,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642364015
    },
    {
        "content": "<p>[slack] &lt;Sobhan Mohammadpour&gt; will do</p>",
        "id": 268206156,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642366411
    },
    {
        "content": "<p>[slack] &lt;Sobhan Mohammadpour&gt; but should i open an issue in diffeqflux.jl or differential equation.jl?</p>",
        "id": 268206567,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642366853
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Any, I will just migrate it</p>",
        "id": 268206591,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642366887
    },
    {
        "content": "<p>[slack] &lt;Sobhan Mohammadpour&gt; <a href=\"https://github.com/SciML/DiffEqFlux.jl/issues/675\">https://github.com/SciML/DiffEqFlux.jl/issues/675</a></p>",
        "id": 268207098,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642367503
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; I am not using the latest version. The resizable chunk size was causing large allocations in my solver (probably due to type instability?)</p>",
        "id": 268213923,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642376740
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; I noticed the <code>GPUOffloadFactorization</code> from <code>LinearSolve</code> is using <code>qr</code> rather than <code>lu</code> (but curiously logs about LU factorization). When I use this factorization rather than the default, I immediately get an instability and the solver exits. However, I don't see this instability with the regular <code>QRFactorization</code></p>",
        "id": 268214616,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642377636
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 268214629,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642377657
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; OrdinaryDiffEq’s nonlinear solver is more up-to-date. It’s optimized for stiff equations solving though. The solver would likely fail on general problems.</p>",
        "id": 268225093,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642391689
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; That’s curious indeed. Did <code>GPUOffloadFactorization</code> use Float32 instead of Float64?</p>",
        "id": 268225168,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642391801
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; That is odd</p>",
        "id": 268226001,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642392983
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I can look into it</p>",
        "id": 268226004,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642392990
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; The other thing could be a caching bug, but it should be the same caching setup as the others which would make it safe</p>",
        "id": 268226009,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642393013
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Oh really? It shouldn't change stability at all. That would need an MWE. My guess is that there is something else involved</p>",
        "id": 268226881,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642394269
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 268231087,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642399328
    },
    {
        "content": "<p>[slack] &lt;Sean&gt; Is it possible to use custom callbacks in the <a href=\"https://github.com/search?q=DynamicalSystems.jl&amp;type=Repositories\">DynamicalSystems.jl</a> poincaresos function?  I'm trying to generate Poincare surfaces of section for circular restricted three body problem dynamics, and I think the integrator is choking when the trajectory gets too close to the gravitational bodies. I think I can fix the issue I'm having by halting integration when it gets too close.</p>",
        "id": 268231331,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642399568
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; Hi @Dhairya. Any news regarding this issue? Thanks in advance!</p>",
        "id": 268240830,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642408599
    },
    {
        "content": "<p>[slack] &lt;Dhairya&gt; I was able to replicate it, and I was looking into the pullback generated. So far in my experimentation, <code>iceflow__NN!</code> , <code>SIA</code> , <code>predict_A</code> etc produce identical gradients to ReverseDiff, so the issue may be in the SciML side somewhere. I was following into where that leads me.</p>",
        "id": 268242856,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642409827
    },
    {
        "content": "<p>[slack] &lt;Dhairya&gt; I have a feeling somewhere the gradients are getting dropped incorrectly - may be due to a heuristic or incorrect adjoint</p>",
        "id": 268243048,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642409929
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; So extending <code>AbstractNLSolver</code> in <code>OrdinaryDiffEq</code> and then providing an implementation for <code>nlsolve!</code> should do the trick, then? I guess it might also be possible to provide a custom cache type and then override <code>compute_step!</code> , but what I have in mind is a fairly specialized non-linear solve routine.</p>",
        "id": 268245865,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642411353
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I'm not sure, <a href=\"https://github.com/search?q=DynamicalSystems.jl&amp;type=Repositories\">DynamicalSystems.jl</a> builds on DiffEq but has slightly different APIs. You could build a quick psos callback in DiffEq directly though</p>",
        "id": 268260868,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642420650
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes, let me clean it up today. @yingbo_ma there is a lingering piece in DiffEqBase <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> We need to just move it and delete.</p>",
        "id": 268261034,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642420753
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; Hi Everyone, quick question: I am working on a system of 2 couple PDEs (The equations are on this topic:<a href=\"https://discourse.julialang.org/t/coupled-non-linear-pdes-using-differentialequations-jl-and-the-mol/74139\">https://discourse.julialang.org/t/coupled-non-linear-pdes-using-differentialequations-jl-and-the-mol/74139</a>) and everything is working great. My problem is that I've added a term in my equation that add a non-linearity (basically a term that depends on the sign of 1 of the unknown) and in 1D the computational time has gone from a few seconds to 20 min on 1 of my benchmark. As I need to do that in 2D this is really to slow for me. I've tried lots of different solvers and it doesn't improve. Am i doomed with my equations or do you think I may be able to improve the computational time by playing with the settings of the Newton method?</p>",
        "id": 268271125,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642426626
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @lddingsite stiff or non-stiff? Did you setup sparsity handling and preconditioners?</p>",
        "id": 268271549,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642426852
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; Stiff, with sparsity handling. KrylovJL_GMRES is slower with preconditioners that without it (which puzzled me) but UMFPACKFactorization is faster it's seem (at least in 1D, I guess KrylovJL_GMRES may be faster in 2D).</p>",
        "id": 268271847,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642427031
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; I've tried the multigrid, the jacobian smoother and the incompletelu (With different values of the parameter, I'm not familiar with it, but I've tried 80, 50, or 20 for example)</p>",
        "id": 268272101,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642427127
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; But it seems it is really the nonlinearity slowing it down because if I put my parameter = 1 it runs at a satisfying speed</p>",
        "id": 268272210,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642427164
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; Maybe I can open a discourse</p>",
        "id": 268272242,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642427181
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Krylov needs really large equations</p>",
        "id": 268272506,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642427286
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; UMFPACK is faster than KLU or Pardiso?</p>",
        "id": 268272526,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642427296
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah nonlinearity is just much harder <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> much much harder</p>",
        "id": 268272567,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642427316
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what size equations? Is it getting good multithreading efficiency? Where are the profiles locked up?</p>",
        "id": 268272615,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642427345
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; My benchmark is 501 nodes in space for 2 unkowns so 501* 2 in 1D, but my goal is at least 256<em>256</em>2 in 2D</p>",
        "id": 268273206,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642427673
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; &gt; [slack] &lt;chrisrackauckas&gt; UMFPACK is faster than KLU or Pardiso?</p>\n<p>I will try again with my parameter and I will come back to :)</p>",
        "id": 268273444,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642427781
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; &gt; [slack] &lt;chrisrackauckas&gt; what size equations? Is it getting good multithreading efficiency? Where are the profiles locked up?</p>\n<p>I've not played with multithreading yet, do you mean multithreading in the function I define or by the solver by default?</p>",
        "id": 268273917,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642428014
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; linear solvers should always multithread internally. The percentage of time in the linear solvers will determine the amount of multithreading</p>",
        "id": 268277102,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642429615
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; &gt; [slack] &lt;chrisrackauckas&gt; linear solvers should always multithread internally. The percentage of time in the linear solvers will determine the amount of multithreading</p>\n<p>I see, then how can I check if there is a good multithreading efficiency in the solver?</p>",
        "id": 268279765,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642430962
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; &gt; [slack] &lt;chrisrackauckas&gt; yeah nonlinearity is just much harder <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> much much harder</p>\n<p>Then is there something I can do in the Nnsolver?</p>",
        "id": 268280005,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642431079
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; &gt; [slack] &lt;chrisrackauckas&gt; UMFPACK is faster than KLU or Pardiso?</p>\n<p>Alright, KLU is faster than UMFPACK by 40% so that's already good. I didn't manage to use Pardiso though. <br>\nI've tried this: </p>\n<p>using Pardiso</p>\n<p>MKLPardisoFactorize(;kwargs...) = PardisoJL(;fact_phase=Pardiso.NUM_FACT,<br>\n                                             solve_phase=Pardiso.SOLVE_ITERATIVE_REFINE,<br>\n                                             kwargs...)</p>\n<p>@time sol = DifferentialEquations.solve(prob_sparse, TRBDF2(linsolve=MKLPardisoFactorize()));</p>",
        "id": 268282509,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642432230
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; but it tells me that PardisoJL is not defined</p>",
        "id": 268282542,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642432246
    },
    {
        "content": "<p>[slack] &lt;Vedant&gt; problem is large enough to warrant krylov. try IterativeSolversJL_GMRES for linsolve</p>",
        "id": 268282814,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642432350
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; for the 256x256x2 you mean? Or should it already be faster for 501x2?</p>",
        "id": 268282928,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642432401
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; I am trying to use<br>\n<code>?ImplicitEM</code><br>\nto determine what to cite when I use that algorithm. In this case, there is no paper provided (sam for <code>EM</code>). Should I use cite the StochasticDiffEq paper? Is the case that these method are just so standard that there are no corresponding paper, or that they have mostly been modified for StochastiDiffEq?</p>",
        "id": 268283388,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642432600
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; &gt; [slack] &lt;Vedant&gt; problem is large enough to warrant krylov. try IterativeSolversJL_GMRES for linsolve</p>\n<p>Awesome, thx a lot, it came down to 20 sec. I was using SolversJL_GMRES without the Iterative part before! I will add preconditionners now :)</p>",
        "id": 268283489,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642432664
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; &gt; &gt; [slack] &lt;Vedant&gt; problem is large enough to warrant krylov. try IterativeSolversJL_GMRES for linsolve</p>\n<blockquote>\n<p>Awesome, thx a lot, it came down from 10 min to 20 sec. I was using SolversJL_GMRES without the Iterative part before! I will add preconditionners now :)</p>\n</blockquote>",
        "id": 268283578,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642432696
    },
    {
        "content": "<p>[slack] &lt;Vedant&gt; yes</p>",
        "id": 268283962,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642432885
    },
    {
        "content": "<p>[slack] &lt;Sean&gt; Thanks, I think I’ll do it directly in DiffEq then</p>",
        "id": 268284224,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642433001
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; Are preconditionners supposed to work for IterativeSolversJL_GMRES as they do for KrylovJL_GMRES? None of the preconditionners are faster with it</p>",
        "id": 268287266,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642434510
    },
    {
        "content": "<p>[slack] &lt;Vedant&gt; check out the preconditioner interface on the website. the interface is the same for KrylovJL, IterativeSolversJL. can you set IterativeSolversJL_GMRES(;verbose=true) and see how many iterations you're getting?</p>",
        "id": 268290552,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642436237
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; Thx for your help and your patience. I was looking at <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a> but I should have looked at <a href=\"https://github.com/search?q=LinearSolve.jl&amp;type=Repositories\">LinearSolve.jl</a>. I will dig a bit on that side thx a lot!</p>",
        "id": 268290986,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642436514
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @https://app.slack.com/services/B795XHD0Xe you need to <code>using Pardiso</code></p>",
        "id": 268296460,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642439957
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah, look at <a href=\"https://github.com/search?q=LinearSolve.jl&amp;type=Repositories\">LinearSolve.jl</a> for all of the linear solver customizations, and <a href=\"https://diffeq.sciml.ai/stable/tutorials/advanced_ode_example/\">https://diffeq.sciml.ai/stable/tutorials/advanced_ode_example/</a> walks through a ton of things</p>",
        "id": 268296574,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642440029
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; good to hear it's getting a lot more optimal now</p>",
        "id": 268296585,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642440042
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @torkel.loman yeah just cite the <a href=\"https://github.com/search?q=StochasticDiffEq.jl&amp;type=Repositories\">StochasticDiffEq.jl</a> paper on that one. That algorithm is simple enough that it's hard to know what else to attribute it to.</p>",
        "id": 268296629,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642440076
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; sounds good, will do <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 268297270,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642440511
    },
    {
        "content": "<p>[slack] &lt;ilyaorson&gt; Saw this today and thought you may find it interesting, it explores a related idea idea <a href=\"https://www.osti.gov/servlets/purl/1706214\">https://www.osti.gov/servlets/purl/1706214</a></p>",
        "id": 268301917,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642443663
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; what are some good examples of packages that build a DSL around <code>DifferentialEquations.jl</code>? I'm working on a package for macro-scale modelling on brain networks and wanting some design inspiration. Are programming mood boards a thing?</p>",
        "id": 268303771,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642445024
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/SciML/Catalyst.jl\">https://github.com/SciML/Catalyst.jl</a> is the most complete</p>",
        "id": 268304219,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642445352
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/wsphillips/Conductor.jl\">https://github.com/wsphillips/Conductor.jl</a> is a nice one</p>",
        "id": 268304235,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642445362
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; Thanks! Looking at <code>Catalyst.jl</code> now. It's super cool!</p>",
        "id": 268304325,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642445410
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; &gt; [slack] &lt;chrisrackauckas&gt; @https://app.slack.com/services/B795XHD0Xe you need to <code>using Pardiso</code></p>\n<p>That's why I am confused. I used using Pardiso as you can see in my message, but PardisoJL is still not recognised <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 268315126,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642453445
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; Alright, so I did a bit of research about IterativeSolversJL_GMRES and KrylovJL_GMRES</p>",
        "id": 268316528,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642454717
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; Alright, so I did a bit of research about KrylovJL_GMRES and IterativeSolversJL_GMRES and I am confused about something. In the doc of <a href=\"https://github.com/search?q=IterativeSolvers.jl&amp;type=Repositories\">IterativeSolvers.jl</a>, IterativeSolversJL_GMRES has log and verbose as input (<a href=\"https://iterativesolvers.julialinearalgebra.org/dev/linear_systems/gmres/#GMRES\">https://iterativesolvers.julialinearalgebra.org/dev/linear_systems/gmres/#GMRES</a>), but I can't use it directly with solve if I write that:</p>\n<p>sol = solve(prob, TRBDF2(linsolve=IterativeSolversJL_GMRES(;verbose=1)));</p>\n<p>That's throw me an error. Which work with KrylovJL_GMRES coming from <a href=\"https://github.com/search?q=Krylov.jl&amp;type=Repositories\">Krylov.jl</a>.</p>",
        "id": 268317039,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642455200
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Oh use one of the documented exported algorithms for Pardiso. You're using an internal.</p>",
        "id": 268318847,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642456915
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; &gt; [slack] &lt;chrisrackauckas&gt; Oh use one of the documented exported algorithms for Pardiso. You're using an internal.</p>\n<p>mmh, I thought this is what I was doing? I am using this example in <a href=\"https://github.com/search?q=LinearSolver.jl&amp;type=Repositories\">LinearSolver.jl</a> <a href=\"http://linearsolve.sciml.ai/dev/solvers/solvers/\">http://linearsolve.sciml.ai/dev/solvers/solvers/</a></p>",
        "id": 268319620,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642457606
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; \"The following algorithms are pre-specified:</p>\n<div class=\"codehilite\"><pre><span></span><code>MKLPardisoFactorize(;kwargs...): A sparse factorization method.\nMKLPardisoIterate(;kwargs...): A mixed factorization+iterative method.&quot;\n</code></pre></div>",
        "id": 268319697,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642457648
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>MKLPardisoFactorize()</code> is all that should be needed</p>",
        "id": 268321685,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642459347
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; That's what I thought but I obtain an error:</p>\n<p>using Pardiso<br>\nsol = solve(prob_sparse, TRBDF2(linsolve=MKLPardisoFactorize()), progress = true, progress_steps = 1);</p>",
        "id": 268322017,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642459656
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; LoadError: UndefVarError: MKLPardisoFactorize not defined</p>",
        "id": 268322029,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642459667
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>using Pardiso, LinearSolve</code></p>",
        "id": 268322506,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642460007
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; Alright, it is recognized with LinearSolve! I thought that LinearSolve solvers were loaded by defaut by <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a> though?</p>",
        "id": 268322899,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642460354
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; I have this error now ERROR: LoadError: Reordering problem. but at least it is something different <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> thx for your help!</p>",
        "id": 268323121,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642460472
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it is reexported. Are you on the latest <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a>?</p>",
        "id": 268323980,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642461234
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; yes, 7.1.0</p>",
        "id": 268324196,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642461383
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; Thx for your help, I will try that tomorrow, time to sleep for me!</p>",
        "id": 268324324,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642461486
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; interesting</p>",
        "id": 268326156,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642463289
    },
    {
        "content": "<p>[slack] &lt;Vedant&gt; sciml standard kwargs IterativeSolversJL_GMRES(;verbose=true)</p>",
        "id": 268341409,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642479017
    },
    {
        "content": "<p>[slack] &lt;Vedant&gt; (;verbose=..., abstol=..., reltol=...)</p>",
        "id": 268341444,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642479096
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; I am not sure I understand sorry.. I've tried already verbose=true and it doesn't work. <br>\nI got this error:</p>\n<p>Closest candidates are:<br>\n  gmres_iterable!(::Any, ::Any, ::Any; Pl, Pr, abstol, reltol, restart, maxiter, initially_zero, orth_meth) at .julia/packages/IterativeSolvers/rhYBz/src/gmres.jl:108 got unsupported keyword argument \"verbose\"</p>\n<p>So it seems for me that gmres_iterable! doesn't have a verbose argument</p>",
        "id": 268360051,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642495937
    },
    {
        "content": "<p>[slack] &lt;Vedant&gt; my b. does this work - <code>solve(probODE, algODE(linsolve=algLIN), verbose=true)</code></p>",
        "id": 268367418,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642499827
    },
    {
        "content": "<p>[slack] &lt;Vedant&gt; <a href=\"https://diffeq.sciml.ai/stable/basics/common_solver_opts/#Examples\">https://diffeq.sciml.ai/stable/basics/common_solver_opts/#Examples</a></p>",
        "id": 268367466,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642499855
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that's because in the ODE solver we need to pass on verbose, and we aren't doing that right now. That's an issue that should get an update.</p>",
        "id": 268370679,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642501543
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; OK. Thanks for the update @Dhairya. What’s next then? Do you want me to open an issue somewhere to track things? First we should make sure it comes from SciML and not Zygote?</p>",
        "id": 268376183,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642504725
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; &gt; [slack] &lt;chrisrackauckas&gt; that's because in the ODE solver we need to pass on verbose, and we aren't doing that right now. That's an issue that should get an update.<br>\nAlright, because @Vedant suggestion also doesn't work for IterativeSolversJL_GMRES.</p>",
        "id": 268384761,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642509729
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes, it's something that needs to be changed in <a href=\"https://github.com/search?q=OrdinaryDiffEq.jl&amp;type=Repositories\">OrdinaryDiffEq.jl</a></p>",
        "id": 268384810,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642509753
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; I see, then any suggestions for me to check the effect of the Preconditionners on IterativeSolversJL_GMRES?</p>",
        "id": 268384899,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642509799
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; I will open a topic in discourse, it is better than to spam here <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 268385004,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642509845
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; I see that @vpuri3 opened an issue here about that: <a href=\"https://github.com/SciML/OrdinaryDiffEq.jl/issues/1571\">https://github.com/SciML/OrdinaryDiffEq.jl/issues/1571</a> thx a lot!</p>",
        "id": 268385743,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642510256
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; Alright, fixed my problem! It was coming from a heaviside functionin my new term.. That I now approximate thx to an old discord post (<a href=\"https://discourse.julialang.org/t/handling-instability-when-solving-ode-problems/9019/5\">https://discourse.julialang.org/t/handling-instability-when-solving-ode-problems/9019/5</a>) from @ChrisRackauckas very instructive thx!</p>",
        "id": 268418855,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642523683
    },
    {
        "content": "<p>[slack] &lt;omar.ashour22&gt; This is probably a silly question but I’m trying to solve a pair of coupled PDEs with the spatial part manually discretized as in this example: <a href=\"https://diffeq.sciml.ai/stable/tutorials/advanced_ode_example/\">https://diffeq.sciml.ai/stable/tutorials/advanced_ode_example/</a></p>\n<p>The difference is that I’d like to use Neumann boundary conditions, not periodic. Is this the correct way to do it? Something is wrong with my calculation (u[2] blows up) and I’m trying to figure out what I messed up:</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>  f, m, q, ϵ, ϵ₁, D₁, d₀, K, Θ, dx = p\n  α = 1/dx^2\n  D₂ = D₁/d₀*(1 + (K-1)/(1+3/Θ))^(-3/2)\n  @inbounds for I in CartesianIndices((N, N))\n    i, j = Tuple(I)\n    # Neumann Boundary Conditions, not sure\n    if i == 1 || j == 1 || i == N || j == N\n        du[i,j,1] = 0.\n        du[i,j,2] = 0.\n    else\n        du[i,j,1] = D₁*α*(u[i-1,j,1] + u[i+1,j,1] + u[i,j+1,1] + u[i,j-1,1] - 4*u[i,j,1]) + 1/ϵ*(f*u[i,j,2]*(q-u[i,j,1])./(q+u[i,j,1]) + u[i,j,1]*(1-m*u[i,j,2])./(1-m*u[i,j,2]+ϵ₁) - u[i,j,1].^2)\n        du[i,j,2] = D₂*α*(u[i-1,j,2] + u[i+1,j,2] + u[i,j+1,2] + u[i,j-1,2] - 4*u[i,j,2]) + u[i,j,1]*(1-m*u[i,j,2])./(1-m*u[i,j,2]+ϵ₁) - u[i,j,2]\n    end\n  end\nend```\n</code></pre></div>",
        "id": 268491944,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642567623
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @omar.ashour22 that's not an implementation of a Neumann boundary condition</p>",
        "id": 268492089,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642567828
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the derivative you're looking at is 0 in space, right?</p>",
        "id": 268492094,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642567836
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; So the condition should be that <code>u[end-1,j,1] - u[end,j,1] = 0</code> in first differences</p>",
        "id": 268492109,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642567862
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; at <code>i=end</code><br>\n<code>du[end,j,1] = (u[end-1,j,1] - u[end,j,1])/dx + + 1/ϵ*(f*u[i,j,2]*(q-u[i,j,1])./(q+u[i,j,1]) + u[i,j,1]*(1-m*u[i,j,2])./(1-m*u[i,j,2]+ϵ₁) - u[i,j,1].^2</code></p>",
        "id": 268492170,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642567926
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; for example</p>",
        "id": 268492171,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642567928
    },
    {
        "content": "<p>[slack] &lt;omar.ashour22&gt; Yes, it’s basically no flux boundary condition, derivative at the rectangular boundary is zero. I understand how you reach <code>u[end-1,j,1] - u[end,j,1] = 0</code> but embarrassingly I’m not sure how you got to the second expression, where does the discretized first order derivative come from? Either way I tried coding this up but the result doesn’t change much from what I had, so I definitely did something wrong here. And thank you for the help!</p>\n<div class=\"codehilite\" data-code-language=\"if\"><pre><span></span><code>        du[N,j,1] = (u[N-1,j,1] - u[N,j,1])/dx + 1/ϵ*(f*u[i,j,2]*(q-u[i,j,1])./(q+u[i,j,1]) + u[i,j,1]*(1-m*u[i,j,2])./(1-m*u[i,j,2]+ϵ₁) - u[i,j,1].^2)\n        du[N,j,2] = (u[N-1,j,2] - u[N,j,2])/dx + u[i,j,1]*(1-m*u[i,j,2])./(1-m*u[i,j,2]+ϵ₁) - u[i,j,2]\n    elseif j == N\n        du[i,N,1] = (u[i,N-1,1] - u[i,N,1])/dx + 1/ϵ*(f*u[i,j,2]*(q-u[i,j,1])./(q+u[i,j,1]) + u[i,j,1]*(1-m*u[i,j,2])./(1-m*u[i,j,2]+ϵ₁) - u[i,j,1].^2)\n        du[i,N,2] = (u[i,N-1,2] - u[i,N,2])/dx + u[i,j,1]*(1-m*u[i,j,2])./(1-m*u[i,j,2]+ϵ₁) - u[i,j,2]\n    elseif i == 1\n        du[1,j,1] = (u[2,j,1] - u[1,j,1])/dx + 1/ϵ*(f*u[i,j,2]*(q-u[i,j,1])./(q+u[i,j,1]) + u[i,j,1]*(1-m*u[i,j,2])./(1-m*u[i,j,2]+ϵ₁) - u[i,j,1].^2)\n        du[1,j,2] = (u[2,j,2] - u[1,j,2])/dx + u[i,j,1]*(1-m*u[i,j,2])./(1-m*u[i,j,2]+ϵ₁) - u[i,j,2]\n    elseif j == 1\n        du[i,1,1] = (u[i,2,1] - u[i,1,1])/dx + 1/ϵ*(f*u[i,j,2]*(q-u[i,j,1])./(q+u[i,j,1]) + u[i,j,1]*(1-m*u[i,j,2])./(1-m*u[i,j,2]+ϵ₁) - u[i,j,1].^2)\n        du[i,1,2] = (u[i,2,2] - u[i,1,2])/dx + u[i,j,1]*(1-m*u[i,j,2])./(1-m*u[i,j,2]+ϵ₁) - u[i,j,2]\n    else\n        du[i,j,1] = D₁*α*(u[i-1,j,1] + u[i+1,j,1] + u[i,j+1,1] + u[i,j-1,1] - 4*u[i,j,1]) + 1/ϵ*(f*u[i,j,2]*(q-u[i,j,1])./(q+u[i,j,1]) + u[i,j,1]*(1-m*u[i,j,2])./(1-m*u[i,j,2]+ϵ₁) - u[i,j,1].^2)\n        du[i,j,2] = D₂*α*(u[i-1,j,2] + u[i+1,j,2] + u[i,j+1,2] + u[i,j-1,2] - 4*u[i,j,2]) + u[i,j,1]*(1-m*u[i,j,2])./(1-m*u[i,j,2]+ϵ₁) - u[i,j,2]\n    end```\n</code></pre></div>",
        "id": 268493530,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642569656
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; note that the direction needs to be flipped depending on the direction of the normal vector.</p>",
        "id": 268493980,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642570136
    },
    {
        "content": "<p>[slack] &lt;omar.ashour22&gt; Thank you! Dealing with this right now and reading <a href=\"https://people.sc.fsu.edu/~jpeterson/notes_fd.pdf\">https://people.sc.fsu.edu/~jpeterson/notes_fd.pdf</a> as well. Do I need to deal with the corners separately, i.e., do I need a condition like <code>if i == 1 &amp;&amp; j == 1</code></p>",
        "id": 268495840,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642572404
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes</p>",
        "id": 268496027,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642572619
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://diffeq.sciml.ai/stable/tutorials/faster_ode_example/#Example-Accelerating-Linear-Algebra-PDE-Semi-Discretization\">https://diffeq.sciml.ai/stable/tutorials/faster_ode_example/#Example-Accelerating-Linear-Algebra-PDE-Semi-Discretization</a></p>",
        "id": 268496050,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642572659
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; this is a Neumann condition problem</p>",
        "id": 268496054,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642572664
    },
    {
        "content": "<p>[slack] &lt;omar.ashour22&gt; Thank you so much for pointing me in the right direction. I assume that this example uses dx = 1 and I need to divide the laplacian terms by 1/dx^2 to get things right?</p>",
        "id": 268505565,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642581190
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes</p>",
        "id": 268505735,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642581294
    },
    {
        "content": "<p>[slack] &lt;omar.ashour22&gt; Also, for the optimized <code>gm4!</code> function (full code shown below, copied from the tutorial in bits and pieces), it works perfectly fine using <code>Tsit5()</code> but throws an error with <code>KenCarp3</code> or other stiff solvers. I have no idea what’s causing the issue, but for now I’m stuck using <code>Tsit5</code> in my own code.</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>N = 100\nAx = Array(Tridiagonal([1.0 for i in 1:N-1],[-2.0 for i in 1:N],[1.0 for i in 1:N-1]))\nAy = copy(Ax)\nAx[2,1] = 2.0\nAx[end-1,end] = 2.0\nAy[1,2] = 2.0\nAy[end,end-1] = 2.0\n\nAyu = zeros(N,N)\nuAx = zeros(N,N)\nDu = zeros(N,N)\nAyv = zeros(N,N)\nvAx = zeros(N,N)\nDv = zeros(N,N)\n\np = (1.0,1.0,1.0,10.0,0.001,100.0,Ayu,uAx,Du,Ayv,vAx,Dv) # a,α,ubar,β,D1,D2\nfunction gm4!(dr,r,p,t)\n  a,α,ubar,β,D1,D2,Ayu,uAx,Du,Ayv,vAx,Dv = p\n  u = @view r[:,:,1]\n  v = @view r[:,:,2]\n  du = @view dr[:,:,1]\n  dv = @view dr[:,:,2]\n  mul!(Ayu,Ay,u)\n  mul!(uAx,u,Ax)\n  mul!(Ayv,Ay,v)\n  mul!(vAx,v,Ax)\n  @. Du = D1*(Ayu + uAx)\n  @. Dv = D2*(Ayv + vAx)\n  @. du = Du + a*u*u./v + ubar - α*u\n  @. dv = Dv + a*u*u - β*v\nend\n\na,α,ubar,β,D1,D2 = p\nuss = (ubar+β)/α\nvss = (a/β)*uss^2\nr0 = zeros(100,100,2)\nr0[:,:,1] .= uss.+0.1.*rand.()\nr0[:,:,2] .= vss\n\nprob = ODEProblem(gm4!,r0,(0.0,0.1),p)\nsolve(prob,KenCarp3())```\nerror:\n```MethodError: no method matching Float64(::ForwardDiff.Dual{ForwardDiff.Tag{OrdinaryDiffEq.OrdinaryDiffEqTag, Float64}, Float64, 12})```\n</code></pre></div>",
        "id": 268505737,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642581294
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; See the FAQ on that and <a href=\"https://github.com/SciML/PreallocationTools.jl\">https://github.com/SciML/PreallocationTools.jl</a></p>",
        "id": 268506121,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642581486
    },
    {
        "content": "<p>[slack] &lt;Flemming Holtorf&gt; Hey! I need to frequently call two different integrators in an alternating fashion, passing information between each other. Essentially as in this generic example I just made up:</p>\n<div class=\"codehilite\" data-code-language=\"f\"><pre><span></span><code>g(v,p,t) = p*v\n\ndt = 0.2\nf_integrator = init(ODEProblem(f, 0.1, (0, 1.0), 1.0), Euler(), dt = dt, save_everystep = false)\ng_integrator = init(ODEProblem(g, 0.5, (0, 1.0), 1.0), Euler(), dt = dt, save_everystep = false)\n\nwhile f_integrator.t &lt; 1.0\n    step!(f_integrator, dt, true)\n\n    g_integrator.p = 0.1*f_integrator.u\n    set_u!(g_integrator, g_integrator.u/2)\n    step!(g_integrator, dt, true)\n\n    set_u!(f_integrator, f_integrator.u/2)\n    f_integrator.p = 0.1*g_integrator.u/2\nend```\nExcept this does not work as the changes in the parameters (`f_integrator.p = ...` , and `g_integrator.p = ...` ) do not take effect. I know that usually you want to use callbacks to apply such changes but that seems rather awkward in my case. Thus, I am wondering what is the preferred/most efficient way to change the parameter values in such cases? Is there a way that does not necessitate rebuilding the integrator from scratch?\n</code></pre></div>",
        "id": 268555246,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642605961
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Try making <code>p</code> an array and then updating it in-place?</p>",
        "id": 268556317,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642606370
    },
    {
        "content": "<p>[slack] &lt;Flemming Holtorf&gt; oof, that was too simple ... good call, thanks!</p>",
        "id": 268560192,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642607870
    },
    {
        "content": "<p>[slack] &lt;omar.ashour22&gt; Thank you Chris, that fixed it. The more you learn!</p>",
        "id": 268581725,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642616250
    },
    {
        "content": "<p>[slack] &lt;omar.ashour22&gt; Regarding the same system Chris has been helping me with up there, I currently have the following:</p>\n<div class=\"codehilite\" data-code-language=\"ayu\"><pre><span></span><code>uAx = DiffEqBase.dualcache(zeros(N,N))\nΔ₁ =  DiffEqBase.dualcache(zeros(N,N))\nAyv = DiffEqBase.dualcache(zeros(N,N))\nvAx = DiffEqBase.dualcache(zeros(N,N))\nΔ₂ =  DiffEqBase.dualcache(zeros(N,N))\np = [f, m, q, ϵ, ϵ₁, D₁, d₀, K, Θ, dx, Ayu, uAx, Δ₁, Ayv, vAx, Δ₂]\n\nfunction basic_version!(du,u,p,t)\n  f, m, q, ϵ, ϵ₁, D₁, d₀, K, Θ, dx, Ayu, uAx, Δ₁, Ayv, vAx, Δ₂ = p\n  D₂ = D₁/d₀*(1 + (K-1)/(1+3/Θ))^(-3/2)\n  c₁ = @view u[:,:,1]\n  c₂ = @view u[:,:,2]\n  dc₁ = @view du[:,:,1]\n  dc₂ = @view du[:,:,2]\n\n  Ayu = get_tmp(Ayu, first(u)*t)\n  uAx =  get_tmp(uAx, first(u)*t)\n  Δ₁ = get_tmp(Δ₁, first(u)*t)\n  Ayv = get_tmp(Ayv, first(u)*t)\n  vAx = get_tmp(vAx, first(u)*t)\n  Δ₂ = get_tmp(Δ₂, first(u)*t)\n\n  mul!(Ayu,Ay,c₁)\n  mul!(uAx,c₁,Ax)\n  mul!(Ayv,Ay,c₂)\n  mul!(vAx,c₂,Ax)\n\n  @. Δ₁ = (1/dx^2)*D₁*(Ayu + uAx)\n  @. Δ₂ = (1/dx^2)*D₂*(Ayv + vAx)\n  @. dc₁ = Δ₁ .+ 1/ϵ*(f*c₂.**(q .- c₁)./(q .+ c₁) .+ c₁ .** (1 .- m*c₂)./(1 .- m*c₂ .+ ϵ₁) .- c₁.^2)\n  @. dc₂ = Δ₂ .+ c₁ .* (1 .- m*c₂)./(1 .- m*c₂ .+ ϵ₁) .- c₂\nend```\nIf I try to solve as:\n```prob = ODEProblem(basic_version!,u0,tspan,p)\n@time sol = solve(prob, KenCarp47(linsolve=KrylovJL_GMRES()), saveat=collect(0.0:0.1:1.0))```\nIt runs fine, so things are okay (but extremely slow). Now if I try to incorporate Jacobian sparsity and pursue a different approach:\n```du0 = copy(u0)\njac_sparsity = Symbolics.jacobian_sparsity((du,u)-&gt;basic_version!(du,u,p,0.0),du0,u0)\nf = ODEFunction(basic_version!;jac_prototype=float.(jac_sparsity))\nprob = ODEProblem(f,u0,tspan,p)\n@time sol = solve(prob,TRBDF2())```\nI get the error `no method matching Float64(::Num)` . I am following the tutorials on solving large stiff equations and code optimization and trying to combine them basically\n</code></pre></div>",
        "id": 268582423,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642616594
    },
    {
        "content": "<p>[slack] &lt;omar.ashour22&gt; I changed my code to:</p>\n<div class=\"codehilite\" data-code-language=\"input\"><pre><span></span><code>output = similar(input)\nsparsity_pattern = jacobian_sparsity(basic_version!,output,input,p,0.0)\njac_sparsity = Float64.(sparse(sparsity_pattern))```\nAnd now I get this exact error: https://github.com/SciML/SparsityDetection.jl/issues/37\nEdit: Just realized SparsityDetection is deprecated, back to Symbolics.jl\n</code></pre></div>",
        "id": 268585283,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642617954
    },
    {
        "content": "<p>[slack] &lt;omar.ashour22&gt; I just removed all the optimizations from <a href=\"https://github.com/search?q=PreAllocationTools.jl&amp;type=Repositories\">PreAllocationTools.jl</a> and it works now. Will have to figure out how to put them back in later.</p>",
        "id": 268599577,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642624582
    },
    {
        "content": "<p>[slack] &lt;omar.ashour22&gt; Sorry for the spam but I had another quick question. My solver only works with explicit algorithms for some reason but the problem is clearly PDE derived and hence stiff. No stiff algorithm seems to work, throwing a dt &lt;= dtmin error. I have double checked my model but will continue to do so, I am just curious why the stiff solvers refuse to work when the explicit ones do. <code>adaptive=false</code> doesn’t help, I’d need very small dt.<br>\n<code>@time sol = solve(prob,QNDF(), saveat=range(0, stop=tspan[2], length=11), reltol=1e-8, abstol=1e-10, dt=0.001)</code></p>",
        "id": 268599873,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642624741
    },
    {
        "content": "<p>[slack] &lt;omar.ashour22&gt; I have also tried <code>autodiff=false</code>, which I’m not sure matters since I’m supplying a Jacobian</p>",
        "id": 268600475,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642625041
    },
    {
        "content": "<p>[slack] &lt;omar.ashour22&gt; I can get it to run now without the dreaded <code>dt &lt;= dtmin</code> with higher tolerances, but it takes forever and doesn’t produce a solution after 10 minutes or so. <code>Tsit5()</code> with the same tolerance takes 35 seconds.</p>",
        "id": 268615009,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642632559
    },
    {
        "content": "<p>[slack] &lt;Dale-Black&gt; I have copied over the code from the first part of the &lt;<a href=\"https://diffeqflux.sciml.ai/stable/examples/optimization_sde/#Example-1:-Fitting-Data-with-SDEs-via-Method-of-Moments-and-Parallelism|tutorial\">https://diffeqflux.sciml.ai/stable/examples/optimization_sde/#Example-1:-Fitting-Data-with-SDEs-via-Method-of-Moments-and-Parallelism|tutorial</a>&gt; without any fancy optimization stuff and I want to replace the <code>lotka_volterra!</code> equation with the simple Geometric Brownian Motion equation. The code is almost identical to the tutorial linked above, but after solving the equation, the solution outputs a straight line graph, which is not what I am expecting. Any idea what I am doing wrong?</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    μ, σ = p\n    return μ * u\nend\n\nfunction multiplicative_noise!(du,u,p,t)\n    μ, σ = p\n    return σ * u\nend\n\nu0 = [1.0]\ntspan = (0.0, 10.0)\np = [1.5, 1.0]\n\nprob = SDEProblem(gbm!, multiplicative_noise!, u0, tspan, p)\nsol = solve(prob)\nplot(sol)```\n: https://files.slack.com/files-pri/T68168MUP-F02UP6DSW77/download/image.png\n</code></pre></div>",
        "id": 268618657,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642634447
    },
    {
        "content": "<p>[slack] &lt;Dale-Black&gt; For reference, when I solve this equation using this approach, I get something similar to what i would expect:</p>\n<div class=\"codehilite\" data-code-language=\"begin\"><pre><span></span><code>    μ = 1\n    σ = 0.5\n    f(u, p, t) = μ * u\n    g(u, p, t) = σ * u\n    dt = 1/1000\n    tspan = (0.0, 1.0)\nend\n\nu₀ = 1/2\nf_analytic(u₀, p, t, W) = u₀ * exp((μ - (σ^2) / 2)*t + σ*W)\nff = SDEFunction(f, g, analytic=f_analytic)\nprob = SDEProblem(ff, g, u₀, tspan)\nsol = solve(prob, EM(), dt=dt)\nplot(sol)```\n: https://files.slack.com/files-pri/T68168MUP-F02UKDTKMQW/download/image.png\n</code></pre></div>",
        "id": 268618875,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642634607
    },
    {
        "content": "<p>[slack] &lt;Dale-Black&gt; For reference, when I solve this equation using this approach, I get something similar to what i would expect:</p>\n<div class=\"codehilite\" data-code-language=\"begin\"><pre><span></span><code>    μ = 1\n    σ = 0.5\n    f(u, p, t) = μ * u\n    g(u, p, t) = σ * u\n    dt = 1/1000\n    tspan = (0.0, 1.0)\nend\n\nu₀ = 1/2\nf_analytic(u₀, p, t, W) = u₀ * exp((μ - (σ^2) / 2)*t + σ*W)\nff = SDEFunction(f, g, analytic=f_analytic)\nprob = SDEProblem(ff, g, u₀, tspan)\nsol = solve(prob, EM(), dt=dt)\nplot(sol)```\n: https://files.slack.com/files-pri/T68168MUP-F02US4RDW8J/download/image.png\n</code></pre></div>",
        "id": 268619334,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642634917
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you're not mutating anything, you defined <code>f</code> and <code>g</code> as zero.</p>",
        "id": 268619637,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642635122
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; ```function gbm!(du,u,p,t)<br>\n    μ, σ = p<br>\n    du[1] = μ * u[1]<br>\nend</p>\n<p>function multiplicative_noise!(du,u,p,t)<br>\n    μ, σ = p<br>\n    du[1] = σ * u[1]<br>\nend```</p>",
        "id": 268619690,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642635146
    },
    {
        "content": "<p>[slack] &lt;Dale-Black&gt; Ahh, thank you so much! I now understand why the <code>du</code> is being used!</p>",
        "id": 268620014,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642635405
    },
    {
        "content": "<p>[slack] &lt;omar.ashour22&gt; I am trying the same problem with DiffEqOperators again and I got it working with explicit integrators and stiff solvers with <code>autodiff=off</code> (haven’t confirmed convergence with stiff solvers yet). It seems that having <code>DiffEqOperators</code> stuff in the problem definition does something with the dual numbers used in auto differentiation. Another thing I can’t get to work is <code>Symbolics.jacobian_sparsity</code> , it also throws an error. Is this a limitation or am I doing something wrong?</p>\n<div class=\"codehilite\" data-code-language=\"ord_deriv\"><pre><span></span><code>ord_approx = 2\nΔx = CenteredDifference{1}(ord_deriv, ord_approx, δ, N)\nΔy = CenteredDifference{2}(ord_deriv, ord_approx, δ, N)\nbc = Neumann0BC(δ, 1)\nQx, Qy = MultiDimBC(bc, size(rand(N,N)))\np = [f, m, q, ϵ, ϵ₁, D₁, d₀, K, Θ, Δx, Δy, Qx, Qy]\n\nfunction myModel!(du,u,p,t)\n    f, m, q, ϵ, ϵ₁, D₁, d₀, K, Θ, Δx, Δy, Qx, Qy = p\n    c₁ = @view u[1,:,:]\n    c₂ = @view u[2,:,:]\n    dc₁ = @view du[1,:,:]\n    dc₂ = @view du[2,:,:]\n    dc₁ .= 1/ϵ*(f*c₂.**(q .- c₁)./(q .+ c₁) .+ c₁ .** (1 .- m*c₂)./(1 .- m*c₂ .+ ϵ₁) .- c₁.^2) .+ D₁*(Δx*Qx*c₁ + Δy*Qy*c₁)\n    dc₂ .= c₁ .* (1 .- m*c₂)./(1 .- m*c₂ .+ ϵ₁) .- c₂ .+ D₁/d₀*(1 + (K-1)/(1+3/Θ))^(-3/2)*(Δx*Qx*c₂ + Δy*Qy*c₂)\nend\n\nu0 = rand(Float64, (2, N, N))\n\n# Prepare the Jacobian stuff\ndu0 = copy(u0)\njac_sparsity = Symbolics.jacobian_sparsity((du,u)-&gt;myModel!(du,u,p,0.0),du0,u0)```\nThrows the error:\n```MethodError: no method matching *(::MultiDimDirectionalBC{Float64, RobinBC{Float64, Vector{Float64}}, 1, 2, 1}, ::SubArray{Num, 2, Array{Num, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true})```\n</code></pre></div>",
        "id": 268632690,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642645816
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; @ChrisRackauckas very quick question: you've just replied to my topic here: <a href=\"https://discourse.julialang.org/t/preconditioners-quite-slow-in-pde-system-with-differentialequations-jl/74926\">https://discourse.julialang.org/t/preconditioners-quite-slow-in-pde-system-with-differentialequations-jl/74926</a> (thx)<br>\nWhat do you mean \"share a profile and annotate it\"? Sorry for the dumb question <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 268697351,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642687935
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/SciML/DifferentialEquations.jl/issues/786#issuecomment-991334836\">https://github.com/SciML/DifferentialEquations.jl/issues/786#issuecomment-991334836</a></p>",
        "id": 268698895,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642688587
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; see <a href=\"https://www.youtube.com/watch?v=h-xVBD2Pk9o\">https://www.youtube.com/watch?v=h-xVBD2Pk9o</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"h-xVBD2Pk9o\" href=\"https://www.youtube.com/watch?v=h-xVBD2Pk9o\"><img src=\"https://uploads.zulipusercontent.net/877631e616d0b155646250e76c2f127ca93c6feb/68747470733a2f2f692e7974696d672e636f6d2f76692f682d7856424432506b396f2f64656661756c742e6a7067\"></a></div>",
        "id": 268698989,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642688636
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; for how to read flame graphs and such</p>",
        "id": 268698996,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642688640
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; thx a lot!</p>",
        "id": 268703558,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642690549
    },
    {
        "content": "<p>[slack] &lt;Coba&gt; Hey, I'm implementing a model with a step function (e.g. <code>du[1] = something if condition, something_2 if condition_2</code>). I'm currently defining the equation as <code>du[1] = p[1] * something + p[2] * something_2</code>, and using a <code>ContinuousCallback</code> to toggle <code>p[1]</code> and <code>p[2]</code> between 0 and 1. Is this the best/cleanest way of using step functions?</p>",
        "id": 268758499,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642713166
    },
    {
        "content": "<p>[gitter] &lt;BenChung&gt; Hi, I'm interested in building a solver on top of JuMP for using successive convex optimization to solve OptimizationProblems generated out of ControlSystems, and I had a few questions:</p>\n<ul>\n<li>How are state constraints represented in a ControlSystem? For example limits on control effectiveness, etc.</li>\n<li>How are controls mapped back into continuous space for the purposes of evaluation? Is it just zero-order-hold or similar?</li>\n</ul>",
        "id": 268768099,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642718054
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; &gt; [slack] &lt;Coba&gt; Hey, I'm implementing a model with a step function (e.g. <code>du[1] = something if condition, something_2 if condition_2</code>). I'm currently defining the equation as <code>du[1] = p[1] * something + p[2] * something_2</code>, and using a <code>ContinuousCallback</code> to toggle <code>p[1]</code> and <code>p[2]</code> between 0 and 1. Is this the best/cleanest way of using step functions?</p>\n<p>Maybe look at the discussion? <a href=\"https://discourse.julialang.org/t/handling-instability-when-solving-ode-problems/9019/5\">https://discourse.julialang.org/t/handling-instability-when-solving-ode-problems/9019/5</a> I've recently approximated a Heaviside function for my problem by making it continuous</p>",
        "id": 268768471,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642718343
    },
    {
        "content": "<p>[slack] &lt;Fredrik Bagge Carlson&gt; Ben Chung, <a href=\"https://github.com/search?q=ControlSystems.jl&amp;type=Repositories\">ControlSystems.jl</a> does not support input constraints, only linear systems. The inverse of zero-order hold will be applied if you call the function <code>d2c</code>, assuming the result of the optimization is a rational linear system.</p>",
        "id": 268799452,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642744409
    },
    {
        "content": "<p>[gitter] &lt;BenChung&gt; Fredrik Bagge Carlson, apologies, I should have specified more clearly. I'm asking about <a href=\"https://github.com/search?q=ModelingToolkit.jl&amp;type=Repositories\">ModelingToolkit.jl</a>'s ControlSystem, not <a href=\"https://github.com/search?q=ControlSystems.jl&amp;type=Repositories\">ControlSystems.jl</a> (for this component).</p>",
        "id": 268805806,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642751509
    },
    {
        "content": "<p>[gitter] &lt;BenChung&gt; (I'm also using <a href=\"https://github.com/search?q=ControlSystems.jl&amp;type=Repositories\">ControlSystems.jl</a>, but elsewhere in my project with a linear system, as you say)</p>",
        "id": 268805867,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642751543
    },
    {
        "content": "<p>[slack] &lt;<a href=\"http://johannes.ne\">johannes.ne</a>&gt; The ModelingToolkit Spring-mass tutorial fails for me. Probably me not knowing what I'm doing, therefore here instead of as an issue.<br>\ndocs <a href=\"https://mtk.sciml.ai/dev/tutorials/spring_mass/\">https://mtk.sciml.ai/dev/tutorials/spring_mass/</a> (stable seems identical. Also fails)</p>\n<p>error at line 47:<br>\n```&gt; prob = ODEProblem(sys, [], (0., 3.))</p>\n<p>ERROR: LoadError: MethodError: Cannot <code>convert</code> an object of type Term{Float64, Nothing} to an object of type Float64<br>\nClosest candidates are:<br>\n  convert(::Type{N}, ::DomainSets.Point{&lt;:Number}) where N&lt;:Number at ~/.julia/packages/DomainSets/F4hmL/src/domains/point.jl:14<br>\n  convert(::Type{T}, ::Base.TwicePrecision) where T&lt;:Number at /opt/julia-1.7.0/share/julia/base/twiceprecision.jl:262<br>\n  convert(::Type{T}, ::AbstractChar) where T&lt;:Number at /opt/julia-1.7.0/share/julia/base/char.jl:185<br>\n  ...```</p>\n<div class=\"codehilite\" data-code-language=\"pkg\"><pre><span></span><code>     Project HemoDynamics v0.1.0\n      Status `~/[...]/Project.toml`\n  [a93c6f00] DataFrames v1.3.1\n  [0c46a032] DifferentialEquations v7.1.0\n  [961ee093] ModelingToolkit v8.3.1\n  [1dea7af3] OrdinaryDiffEq v6.4.2\n  [91a5bcdd] Plots v1.25.6\n  [0c5d862f] Symbolics v4.3.0```\n</code></pre></div>",
        "id": 268811684,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642755306
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @yingbo_ma do you know about this?</p>",
        "id": 268814326,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642756599
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; What do I need to do to make this fully inferable? Is providing some iip information enough?</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>function f!(du,u,p,t)\n    du[1] = p[1]*u[1] - p[2]*u[1]*u[2] #prey\n    du[2] = -p[3]*u[2] + p[4]*u[1]*u[2] #predator\nend\n\ntspan = (0.0,10.0)\nu0 = [1.0;1.0]\np = [1.5,1.0,3.0,1.0]\nprob = ODEProblem(f!,u0,tspan,p)\n\ng(sol) = sol[1,end]\n\nfunction h(prob,x)\n    u = @view x[1:2]\n    p = @view x[3:end]\n    prob = remake(prob,u0=u,p=p)\n    sol = solve(prob,Tsit5())\n    g(sol)\nend\n@time h(prob,[u0; p])```\n</code></pre></div>",
        "id": 268816112,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642757515
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that should already infer?</p>",
        "id": 268816692,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642757813
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what is it not inferring?</p>",
        "id": 268816728,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642757825
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; The solve does not fully infer<br>\n@code_warntype h(prob,[u0; p])<br>\n...<br>\n│   %27 = Main.g(sol)::Any<br>\n└──       return %27</p>",
        "id": 268829455,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642764790
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; That might be that Julia revise inference bug.</p>",
        "id": 268841078,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642771370
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; No it is the remake;<br>\n<code>  prob@_7::Union{ODEProblem{SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, Tuple{Float64, Float64}, true, SubArray{Float64, 1, Vector{Float64}, Tuple{UnitRange{Int64}}, true}, ODEFunction{true, typeof(f!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SciMLBase.StandardODEProblem}, ODEProblem{Vector{Float64}, Tuple{Float64, Float64}, true, Vector{Float64}, ODEFunction{true, typeof(f!), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SciMLBase.StandardODEProblem}}</code></p>",
        "id": 268841521,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642771621
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh that's not solvable without specifying a chunk size</p>",
        "id": 268841872,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642771786
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; This is <a href=\"https://github.com/JuliaLang/julia/issues/43642\">https://github.com/JuliaLang/julia/issues/43642</a></p>",
        "id": 268841887,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642771793
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; I can see why a remake can cause it to not know the proper chunk size, but would that express itself as<br>\n<code>Union{ODEProblem{...SubArray...}, ODEProblem{... Vector...}}</code><br>\nIt seems like it can't infer if u0 and p are vectors or subarrays?</p>",
        "id": 268846194,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642773650
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that seems like an inference issue</p>",
        "id": 268849029,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642775001
    },
    {
        "content": "<p>[slack] &lt;Jan Bouwman&gt; The example is working fine on windows 10 with this setup: <code>[a93c6f00] DataFrames v1.3.1</code><br>\n<code>[0c46a032] DifferentialEquations v6.18.0</code><br>\n<code>[961ee093] ModelingToolkit v6.4.7</code><br>\n<code>[1dea7af3] OrdinaryDiffEq v5.55.1</code><br>\n<code>[0c5d862f] Symbolics v3.2.3</code><br>\n<code>[91a5bcdd] Plots v1.25.6</code></p>",
        "id": 268857796,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642778994
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 268880499,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642788557
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; I have some noisy data for a system in  <code>(x, dx/dt)</code>  (see attached). If you squint, it looks like a quadratic. Is it possible to do something like system identification on this?: <a href=\"https://files.slack.com/files-pri/T68168MUP-F030D6H91RN/download/fig.png\">https://files.slack.com/files-pri/T68168MUP-F030D6H91RN/download/fig.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F030D6H91RN/download/fig.png\"><img src=\"https://uploads.zulipusercontent.net/057ef1ce2acc036a5c8094127c05f0fb70239385/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d463033304436483931524e2f646f776e6c6f61642f6669672e706e67\"></a></div>",
        "id": 268880531,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642788573
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Looks like you are on ancient MTK</p>",
        "id": 268885970,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642790727
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <img alt=\":cairo-pyramids:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/7178/emoji/images/14950.png\" title=\"cairo-pyramids\"></p>",
        "id": 268887187,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642791189
    },
    {
        "content": "<p>[slack] &lt;timkim&gt; Hi all, I also posted this in the knet channel, but I was wondering if anyone has experience using DiffEqFlux with Knet. How easy is it to build a model, for example, that uses a Knet RNN that outputs initial conditions for a DiffEqFlux NNODE, and train them simultaneously? Do we need to do something similar to <code>structure</code> or <code>destructure</code> as you would with Flux, so that you have the learnable parameters as input to the model? Thanks!</p>",
        "id": 268890639,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642792877
    },
    {
        "content": "<p>[slack] &lt;avikpal&gt; (Haven't personally done this so take it with a grain of salt) I feel the easiest thing to do would be add a custom rrule for the knet rnn like <code>Zygote.@adjoint myknetrnn(...) = knet_autodiff(...)</code> , and use flux for the neural ode part.</p>\n<p>Using Knet for the NODE might be tricky since IIRC there is no sensitivity code for <a href=\"https://github.com/search?q=AutoGrad.jl&amp;type=Repositories\">AutoGrad.jl</a> in DiffEqSensitivity (though <code>SensitivityADPassThrough</code> might work if correctly combined with structure/destructure)</p>",
        "id": 268892693,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642793936
    },
    {
        "content": "<p>[slack] &lt;<a href=\"http://johannes.ne\">johannes.ne</a>&gt; Any update on this? Should i open an issue?</p>",
        "id": 268971100,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642876353
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; You should update MTK to at least 8.x</p>",
        "id": 268971133,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642876394
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 268971647,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642877074
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It looks like he posted <code>[961ee093] ModelingToolkit v8.3.1</code>?</p>",
        "id": 268971663,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642877130
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Ah, I looked at the wrong post. It looks like a bug</p>",
        "id": 268971792,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642877325
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Do open an issue</p>",
        "id": 268971793,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642877329
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; @chrisrackauckas Do you now recommend Enzyme VJP for mid to large PDE parameter estimation problems? Also with neural networks and/or UPDEs?</p>",
        "id": 269022454,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642950288
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Well what I actually recommend is that most people don't choose a vjp and let it choose one for you <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 269023213,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642951195
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; If you aren't using BLAS and having a non-allocating mutating PDE code, Enzyme is by far the best</p>",
        "id": 269023260,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642951214
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; That was the result of <a href=\"https://arxiv.org/abs/1812.01892\">https://arxiv.org/abs/1812.01892</a></p>",
        "id": 269023269,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642951225
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and in <a href=\"https://arxiv.org/abs/2109.12449\">https://arxiv.org/abs/2109.12449</a></p>",
        "id": 269023276,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642951244
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; if you have linear algebra and higher order ChainRules, then Zygote</p>",
        "id": 269023288,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642951256
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; if you're somewhere in the middle, ReverseDiff until Enzyme supports more constructs</p>",
        "id": 269023303,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642951269
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but we have a compiler-level check that figures out whether it can use Enzyme, compile reversediff, etc.</p>",
        "id": 269023313,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642951283
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; so generally the auto-vjp choice should be good</p>",
        "id": 269023318,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642951290
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; at this point people who are hardcoding vjps and ODE solver choices are usually doing themselves a disservice <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 269023339,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642951318
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; What is \"it\" here? DiffEqFlux? I am a bit out of the loop on the most up-to-date workflow as I haven't done much with this for the last half year or so...</p>",
        "id": 269023982,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642952065
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Is the recommendation to just throw <code>GalacticOptim</code> at your <code>ODEProblem</code> and hope for the best?</p>",
        "id": 269024000,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642952093
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yes</p>",
        "id": 269024181,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642952316
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; If that doesn't pick a good system, then we should fix up the defaults a bit more.</p>",
        "id": 269024183,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642952327
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I just \"AD methods failed, using numerical differntiation\" errors :man-facepalming:</p>",
        "id": 269024263,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642952426
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that's a warning, not an error</p>",
        "id": 269024687,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642953042
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and that's on purpose</p>",
        "id": 269024688,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642953044
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that means your setup fails with all of the AD choices tried, so it just falls back to numerical differentiation</p>",
        "id": 269024691,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642953057
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and if it is fast enough then you won't bother me to fix AD on a problem that doesn't need it <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 269024701,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642953073
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; hmm... I would think that numerical diff would produce pretty inaccurate gradients unless you use extremely low tolerances.</p>",
        "id": 269026448,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642955373
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; depends on the size and type of system</p>",
        "id": 269027093,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642956269
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what I found is that the number of reports went drastically down after fixing that</p>",
        "id": 269027103,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642956285
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's not silent, it gives you the warning that it is doing that</p>",
        "id": 269027106,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642956294
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but I mean, if you run it, it warns you, but it works, then <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> most people then just move on.</p>",
        "id": 269027115,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642956314
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I understand. Seems practical. But I guess I would be worried about the fact that incorrect gradients are not as easy to spot as autodiff errors. Everything would work until you start looking closely at the results, or the optimizer just doesn't converge.</p>",
        "id": 269029354,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642959372
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; It's fine as it is, though. The warning makes it clear to me that I need to figure out what is wrong with autodiff.</p>",
        "id": 269029377,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642959431
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Maybe it's worth modifying the error to say \"Gradients may be inaccurate\" or something.</p>",
        "id": 269029468,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642959516
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Maybe, but then again, they would probably notice when the optimization fails.</p>",
        "id": 269029485,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642959545
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Most people don't even know what autodiff is though <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 269029494,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642959562
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 269029504,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642959579
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; well... this is another problem entirely</p>",
        "id": 269029509,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642959588
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; hey wait... what about the sensitivity algorithm? should we let this be auto-selected as well? or should this be specified without a specific VJP option?</p>",
        "id": 269029696,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642959811
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; sciml_train will auto-select an autodiff method, and if that's Zygote then when it hits the ODE solve that will auto-select an adjoint and a vjp.</p>",
        "id": 269029793,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642959946
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I would recommend that in most cases it's just automatic unless you've sat down and benchmarked your problem</p>",
        "id": 269029801,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642959960
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; if it's <code>ForwardDiff</code> , then I guess it doesn't matter, right? You would only need <code>ForwardDiffSensitivity</code> if using Zygote but differentiating the solve with forward-mode.</p>",
        "id": 269029958,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642960114
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes exactly</p>",
        "id": 269030091,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642960303
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and that would depend on the size of the optimization.</p>",
        "id": 269030099,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642960310
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; If you have a really large <code>p</code> for the optimization but a very small <code>u0</code>, you can hit exactly that case of Zygote + ForwardDiffSensitivity and it will do that combo.</p>",
        "id": 269030152,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642960347
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Normally though, <code>p</code> is small and so ForwardDiff the whole thing, and that's faster than that combination in that scenario (by quite a bit)</p>",
        "id": 269030171,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642960372
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Looking at the publication, I see that. Also seems like Quadrature CASA outperforms everything for <code>length(p) &gt; 50</code></p>",
        "id": 269030289,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642960501
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; if I am reading the plot right</p>",
        "id": 269030295,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642960507
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I am guessing <code>sciml_train</code> knows this, though <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 269030366,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642960569
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes</p>",
        "id": 269030869,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642961125
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but it's more memory intensive.</p>",
        "id": 269030874,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642961138
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Updated multi-language benchmarks: <a href=\"https://benchmarks.sciml.ai/html/MultiLanguage/wrapper_packages.html\">https://benchmarks.sciml.ai/html/MultiLanguage/wrapper_packages.html</a></p>",
        "id": 269030882,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642961150
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; ok, I fixed the issue with <code>ForwardDiff</code> , but I am now getting a hard crash in <code>sciml_train</code> similar to what @AlCap23 reported: <code>not handling more than 6 pointer lookups deep</code></p>",
        "id": 269030974,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642961242
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I am guessing this means it chose <code>Enzyme</code> and something is wrong there...</p>",
        "id": 269030985,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642961269
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I don't know that issue</p>",
        "id": 269030995,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642961279
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; open something on it? @Billy Moses might want to look</p>",
        "id": 269031035,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642961292
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; The Enzyme check is in a try-catch, so as long as it doesn't crash completely or segfault then it'll just see it can't use Enzyme and try something else</p>",
        "id": 269031054,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642961333
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's when Enzyme segfaults that it's an issue <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 269031060,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642961342
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; yeah it crashed completely</p>",
        "id": 269031065,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642961345
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Hmm, I thought I saw this error mentioned somewhere on slack but I don't see it in the other thread.</p>",
        "id": 269031075,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642961370
    },
    {
        "content": "<p>[slack] &lt;Billy Moses&gt; Yeah if you can post the full stack trace as the issue (along with Enzyme and Julia versions)</p>",
        "id": 269031079,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642961376
    },
    {
        "content": "<p>[slack] &lt;Billy Moses&gt; also <code>not handling more than 6 pointer lookups deep</code> but a warning that we should probably silence within julia (but usually indicative that something bad may occur). In essence it comes up when there’s a recursive type the analsis found (which is normally fine, but when coming from julia usually means we didn’t correctly hook into the threading system)</p>",
        "id": 269031179,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642961470
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; should I be making this issue in <code>DiffEqFlux</code> ?</p>",
        "id": 269031341,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642961652
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I don't even know for sure if it is using Enzyme... one of the downsides of <code>sciml_train</code> being so smart, I guess.</p>",
        "id": 269031383,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642961693
    },
    {
        "content": "<p>[slack] &lt;Billy Moses&gt; <a href=\"https://github.com/search?q=Enzyme.jl&amp;type=Repositories\">Enzyme.jl</a>, if possible</p>",
        "id": 269031384,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642961693
    },
    {
        "content": "<p>[slack] &lt;Billy Moses&gt; if you have the <code>not handling more than 6 pointer lookups deep</code> print it is certainly using Enzyme (and if in the backtrace it looks otherwise I’ll recommend you reopen on DiffEqFlux)</p>",
        "id": 269031407,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642961727
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; do you want an MWE or just the error? I was going to make an isolated proof of concept anyway. I can see if it still happens there, without all of my fancy/bloated model code.</p>",
        "id": 269031506,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642961876
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Aha, this seems informative:<br>\n<code>Assertion `0 &amp;&amp; \"attempting to differentiate function without definition\"' failed.</code></p>",
        "id": 269031789,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642962182
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I do use <code>RuntimeGeneratedFunctions</code> so...</p>",
        "id": 269031796,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642962192
    },
    {
        "content": "<p>[slack] &lt;Billy Moses&gt; Yeah if you can put the full stack trace for now I can tell if it's something obvious or if we need a minimal example</p>",
        "id": 269032361,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642962989
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; <a href=\"https://github.com/wsmoses/Enzyme.jl/issues/176\">https://github.com/wsmoses/Enzyme.jl/issues/176</a></p>",
        "id": 269032881,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642963688
    },
    {
        "content": "<p>[slack] &lt;fieldofnodes&gt; I have written a function for a random telegraph signal, where for <code>s(t)</code> can be <code>0</code> or <code>1</code>. When <code>s=0</code> temporally, spatially I have a <code>2d</code> random walk on a finite plane. I have set up a straight interate over time, and a random walk with a hopping rate, <code>h</code> defining the probability of a step being taken in a time step <code>dt</code>. So when <code>s = 0</code> the probability of a step being take in <code>r</code>, but when <code>s=1</code> the probability of taking a step is <code>0</code>. Is there a way this simple model can be solved in <code>DifferentialEquations</code>? Is this essentially a jump diffusion process?</p>",
        "id": 269034720,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642965975
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; @avikpal how about writing the RNN in Flux itself? Seems like that might be the easiest path? Or would there still be a lot of hurdles there?</p>",
        "id": 269035006,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642966391
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; That's just a Gillespie process. See the tutorial on that</p>",
        "id": 269035177,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642966654
    },
    {
        "content": "<p>[slack] &lt;avikpal&gt; That's definitely the easiest option, but I assumed the OP had the original RNN already written in Knet and wanted to compose that with DiffEqFlux</p>",
        "id": 269035267,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642966769
    },
    {
        "content": "<p>[slack] &lt;timkim&gt; Thank you for your answer @avikpal! The reason why I asked was because the last time (~last year) I tried to do this, GRU/LSTMs outputed wrong gradients, and there were some errors I encountered when using them with GPU. Are these resolved currently?</p>",
        "id": 269036992,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642968867
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; @avikpal yeah that makes sense. I have never seen anyone use an RNN in DiffEqFlux, but I imagine it is the same idea as using a NeuralOde. But I wonder if it makes more sense to use a neuralode nowadays instead of an RNN—given training speed.</p>",
        "id": 269037070,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642968966
    },
    {
        "content": "<p>[slack] &lt;fieldofnodes&gt; Thanks man, Is this the tutorial? <a href=\"https://diffeq.sciml.ai/stable/tutorials/discrete_stochastic_example/\">https://diffeq.sciml.ai/stable/tutorials/discrete_stochastic_example/</a></p>",
        "id": 269042500,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642976245
    },
    {
        "content": "<p>[slack] &lt;avikpal&gt; @timkim <a href=\"https://github.com/avik-pal/RegNeuralDE.jl/blob/master/experiments/latent_ode.jl\">https://github.com/avik-pal/RegNeuralDE.jl/blob/master/experiments/latent_ode.jl</a> here is a code which does something similar to what you are looking for. The RNN gives the initial condition for the NeuralODE. I am not totally sure about the incorrect gradients issue (maybe @Dhairya knows about it?). Though the code there uses <a href=\"https://github.com/search?q=Tracker.jl&amp;type=Repositories\">Tracker.jl</a> (for unrelated reasons).</p>",
        "id": 269042907,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642976738
    },
    {
        "content": "<p>[slack] &lt;avikpal&gt; @krishnab if only training speed / prediction speed is concerned, in my experience, explicit models (RNN) would most definitely beat Neural ODEs.</p>",
        "id": 269042989,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642976855
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Thanks @avikpal. I don't have as much experience with NeuralODEs, so I just base my training speed estimates on what I had seen. But thanks for letting me know that training RNNs is faster than neuralodes. I will keep that in mind.</p>",
        "id": 269044203,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642978563
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yes</p>",
        "id": 269044839,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642979435
    },
    {
        "content": "<p>[slack] &lt;fieldofnodes&gt; Cheers</p>",
        "id": 269045168,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642979914
    },
    {
        "content": "<p>[slack] &lt;Dhairya&gt; Gradients should be correct. There has been a lot of changes to the RNNs in the past year. Feel free to open issues if otherwise.</p>",
        "id": 269052597,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1642989909
    },
    {
        "content": "<p>[slack] &lt;<a href=\"http://johannes.ne\">johannes.ne</a>&gt; Here: <a href=\"https://github.com/SciML/ModelingToolkit.jl/issues/1434\">https://github.com/SciML/ModelingToolkit.jl/issues/1434</a></p>",
        "id": 269073294,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643013638
    },
    {
        "content": "<p>[slack] &lt;Tom Clegg&gt; Hey, I’m having some compatibility issues with DiffEqBayes and DiffEqFlux .  Starting from a fresh install of julia 1.7 installing either package alone works fine but together DiffEqFlux gets downgraded v1.44.1 ⇒ v0.7.0!</p>\n<p>Does anyone have any idea how to stop this happening?</p>",
        "id": 269167717,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643055940
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/search?q=Turing.jl&amp;type=Repositories\">Turing.jl</a> does not support v1.7. Go nicely ask #turing about it <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 269169603,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643056821
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; What is the relationship between <code>abstol</code> and <code>reltol</code> in <code>DynamicSS</code> vs in the corresponding <code>solve</code> call? Shouldn't the tolerances of <code>solve</code> be at least as low as the termination condition tolerance in <code>DynamicSS</code> ?</p>",
        "id": 269175062,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643059551
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; After more thought, I guess they don't necessarily need to be, so long as the solver tolerance is low enough to converge.</p>",
        "id": 269182621,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643063774
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; @avikpal I was just starting to look at the code that you linked for <code>latent_ode</code> and the BlackBox paper. I have just started to read it, but I had a question. I was looking at a paper by Onken and Ruthotto <a href=\"https://arxiv.org/abs/2006.00104\">https://arxiv.org/abs/2006.00104</a> on using optimal transport ideas to train a neural ode. In the paper they were training a continuous normalizing flow, but they are using a neural ode to train the continuous normalizing flow. One interesting approach that they took was to use Optimal Transport theory to regularize the neural ODE and encourage more direct paths. It occurs to me that this is similar to what you are engaging in the blackbox paper. I would assume that using optimal transport as a regularizer would encourage straighter or less curvy paths, and hence less stiffness or adaptivity needed by the ODE solver. But of course I am not sure how much additional training effort would be involved in including this optimal transport regularization term--through I suppose it would just be a training time cost. Indeed, a less stiff neural ode would be faster at inference time.</p>",
        "id": 269209878,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643086725
    },
    {
        "content": "<p>[slack] &lt;<a href=\"http://johannes.ne\">johannes.ne</a>&gt; I now have the first building blocks working for making cardiovascular models with ModelingToolkit. After a few days of being completely overwhelmed, stuff suddenly started to click, and I'm quite stoked to have a working demo: <a href=\"https://github.com/JohannesNE/CardiovascularModels.jl/tree/main/demo/three_compartment_model\">https://github.com/JohannesNE/CardiovascularModels.jl/tree/main/demo/three_compartment_model</a></p>\n<p>I'm still not sure about the best way to connect my compartments. Right now resistance and valves are assigned as parameters for each compartment, but it may be more sensible/flexible to make resistance and valve a parameter to the connection of two compartments.</p>\n<p>If anyone wants to contribute on this, it would be very cool! I'm a complete beginner, so do not expect too much (yet).</p>\n<p>Next step is to add inertia to the blood flow.</p>",
        "id": 269224005,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643099913
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @yingbo_ma take a look</p>",
        "id": 269237940,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643107130
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; very cool!</p>",
        "id": 269275442,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643125495
    },
    {
        "content": "<p>[slack] &lt;carstenbauer&gt; Are there any diffeqpy vs direct <a href=\"https://github.com/search?q=DiffEq.jl&amp;type=Repositories\">DiffEq.jl</a> benchmarks, i.e. solving the same ODEs using diffeqpy from Python and <a href=\"https://github.com/search?q=DiffEq.jl&amp;type=Repositories\">DiffEq.jl</a> directly in Julia?</p>",
        "id": 269276090,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643125721
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; diffeqpy is really slow</p>",
        "id": 269276256,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643125789
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you generally need to jit compile the <code>f</code> for it to be competitive</p>",
        "id": 269276369,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643125818
    },
    {
        "content": "<p>[slack] &lt;carstenbauer&gt; That’s what I thought. Any idea how competitive it is if one jit compiles <code>f</code>?</p>",
        "id": 269281951,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643127946
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I don't remember.</p>",
        "id": 269284337,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643128840
    },
    {
        "content": "<p>[slack] &lt;Fabienne Krauer&gt; On that note, you may be interested in Hummod. It was a very big model of human physiology a decade ago. The structure is several thousands of ODE's apparently? I think this model could benefit greatly from being ported to Julia. Unfortunately, the authors are a bit gatekeepers, and have some particular license restrictions. The precursor model is \"<a href=\"https://journals.physiology.org/doi/abs/10.1152/advan.00114.2006\">https://journals.physiology.org/doi/abs/10.1152/advan.00114.2006</a>\", but couldn't find public source code for that one. Rewritting as a Julia software project is probably worth 2 PhDs. see <a href=\"http://hummod.org/\">http://hummod.org/</a> and <a href=\"https://github.com/HumMod/hummod-standalone/tree/master/Structure\">https://github.com/HumMod/hummod-standalone/tree/master/Structure</a>. I don't know if Hummod this is still actively maintained, but I doubt it.</p>",
        "id": 269292529,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643131900
    },
    {
        "content": "<p>[slack] &lt;Tom Clegg&gt; I’ve been watching the 2020 juliacon talk by @chrisrackauckas “Doing Scientific Machine Learning (SciML) With Julia” and was interested by the bit where you train a neural ODE on the Lotka-Volterra and then use it to rediscover the dynamic equations with SInDy.</p>\n<p>Looks like the DataDrivenDiffEq has change a bit since then and the syntax used  (with a direct <code>SInDy</code> function) has been replaced with the more general problem interface. Is it still possible to use SInDy in this way and are there any examples/resources available? Looks like the the LV example is still in the tests in the git repo but uses the old syntax</p>",
        "id": 269326946,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643145928
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I think it was all updated to the new syntax?</p>",
        "id": 269328347,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643146561
    },
    {
        "content": "<p>[slack] &lt;Tom Clegg&gt; The LV example I mentioned is here <a href=\"https://github.com/SciML/DataDrivenDiffEq.jl/blob/master/test/applications/partial_lotka_volterra.jl\">https://github.com/SciML/DataDrivenDiffEq.jl/blob/master/test/applications/partial_lotka_volterra.jl</a> which still uses the SINDy function to do the training</p>",
        "id": 269336411,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643150612
    },
    {
        "content": "<p>[slack] &lt;Emily Nieves&gt; Hello I am new to Julia documentation and I am somewhat confused:</p>\n<p>For <a href=\"https://github.com/search?q=Catalyst.jl&amp;type=Repositories\">Catalyst.jl</a> documentation there are appears to be two different but similar looking resources :<br>\n<a href=\"https://docs.juliahub.com/Catalyst/QGu8a/6.13.0/tutorials/using_catalyst/#Chemical-Langevin-Equation-(CLE)-Stochastic-Differential-Equation-(SDE)-Models\">https://docs.juliahub.com/Catalyst/QGu8a/6.13.0/tutorials/using_catalyst/#Chemical-Langevin-Equation-(CLE)-Stochastic-Differential-Equation-(SDE)-Models</a> and <a href=\"http://catalyst.sciml.ai\">http://catalyst.sciml.ai</a></p>\n<p>They both have an example for <a href=\"https://catalyst.sciml.ai/dev/tutorials/using_catalyst/#Chemical-Langevin-Equation-(CLE)-Stochastic-Differential-Equation-(SDE)-Models\">https://catalyst.sciml.ai/dev/tutorials/using_catalyst/#Chemical-Langevin-Equation-(CLE)-Stochastic-Differential-Equation-(SDE)-Models</a> but the the <a href=\"http://catalyst.sciml.ai\">http://catalyst.sciml.ai</a> does not work.</p>\n<p>JuliaHub Code for reference (This works):</p>\n<div class=\"codehilite\" data-code-language=\"bdp\"><pre><span></span><code>  c₁, X --&gt; 2X\n  c₂, X --&gt; 0\n  c₃, 0 --&gt; X\nend c₁ c₂ c₃\np = (1.0,2.0,50.)\nu₀ = [5.]\ntspan = (0.,4.)\n\n# SDEProblem for CLE\nsprob = SDEProblem(bdp, u₀, tspan, p)\n\n# solve and plot, tstops is used to specify enough points\n# that the plot looks well-resolved\nsol = solve(sprob, LambaEM(), tstops=range(0., step=4e-3, length=1001))\nplot(sol)```\nhttp://Catalyst.sciml.ai code (Doesn't work):\n```bdp = @reaction_network begin\n  c₁, X --&gt; 2X\n  c₂, X --&gt; 0\n  c₃, 0 --&gt; X\nend c₁ c₂ c₃\np = (:c₁ =&gt; 1.0, :c₂ =&gt; 2.0, :c₃ =&gt; 50.)\nu₀ = [:X =&gt; 5.]\ntspan = (0.,4.)\n\n# SDEProblem for CLE\nsprob = SDEProblem(bdp, u₀, tspan, p)\n\n# solve and plot, tstops is used to specify enough points\n# that the plot looks well-resolved\nsol = solve(sprob, LambaEM(), tstops=range(0., step=4e-3, length=1001))\nplot(sol)```\n**This code fails with the following error:**\n\n```ERROR: LoadError: ArgumentError: Term{Real, Base.ImmutableDict{DataType, Any}}[X(t)] are missing from the variable map.```\n\nI am still learning the syntax so I am unsure of what the difference is. At the very least examples should work out of the box\n</code></pre></div>",
        "id": 269342808,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643154439
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Are you on Catalyst 10.4?</p>",
        "id": 269346714,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643156980
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; The Catalyst docs example will only work with that version and up.</p>",
        "id": 269346754,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643156998
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; The JuliaHub version should work with older versions too.</p>",
        "id": 269346808,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643157016
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Actually, the JuliaHub version should work too as it has 10.4.1 docs. You were just looking at a much older version of the docs... Generally I'd recommend using the <a href=\"http://catalyst.sciml.ai\">http://catalyst.sciml.ai</a> docs for the version you have installed locally. We don't have any control over JuliaHub, whereas the <a href=\"http://sciml.ai\">http://sciml.ai</a> docs are the ones we (the Catalyst developers) publish.</p>",
        "id": 269348131,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643158053
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; And for future reference you should be able to look at the lower left corner of the docs to see what version you are seeing docs for. It is always a good idea to make sure this lines up with the version you have installed locally.</p>",
        "id": 269348519,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643158335
    },
    {
        "content": "<p>[slack] &lt;AlCap23&gt; Ah, thats old stuff I’ll merge into the docs. The <a href=\"https://github.com/ChrisRackauckas/universal_differential_equations/tree/master/LotkaVolterra\">https://github.com/ChrisRackauckas/universal_differential_equations/tree/master/LotkaVolterra</a> has the newer version.</p>",
        "id": 269368063,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643177750
    },
    {
        "content": "<p>[slack] &lt;omar.ashour22&gt; Sorry for cross posting this from help-desk:</p>\n<p>I am trying to compute <code>sparsity_pattern = Symbolics.jacobian_sparsity((du,u)-&gt;GS_Neumann0(du,u,p,0.0),du0,u0)</code> where <code>u0:::Array{Float64,3}, </code>du0 = similar(u0)<code>, </code>p::Vector{Float64}<code>` . The function definition is </code>function GS_Periodic!(du::Array{Float64, 3},u::Array{Float64,3},p::Array{Float64, 1},t::Float64)<code> . When I try to compute </code>sparsity_pattern`, I get:</p>\n<div class=\"codehilite\" data-code-language=\"error\"><pre><span></span><code>Closest candidates are:\n  GS_Neumann0!(::Array{Float64, 3}, ::Array{Float64, 3}, ::Vector{Float64}, ::Float64) at ~/.julia/dev/PatternFormation/src/PDEDefs.jl:88```\nAny idea how to fix this? What is even `Num` and what package defines it? `GS_Neumann0(du0, u0, p, 0.0)`  works from the REPL FWIW\n</code></pre></div>",
        "id": 269369270,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643179027
    },
    {
        "content": "<p>[slack] &lt;AlCap23&gt; <code>Num</code>  is the symbolic base type used by Symbolics / SymbolicUtils and MTK. It seems like your method is restricted to using <code>Float64</code>. Try <code>T &lt;: Real</code>  instead inside the method definition.</p>",
        "id": 269370054,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643179931
    },
    {
        "content": "<p>[slack] &lt;AlCap23&gt; Or no restrictions at all<br>\n<code>GS_Neumann0(du, u, p, t) = ...</code></p>",
        "id": 269370174,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643180086
    },
    {
        "content": "<p>[slack] &lt;omar.ashour22&gt; Wouldn’t this affect type stability and performance? It’s one topic I don’t grasp that well</p>",
        "id": 269370631,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643180582
    },
    {
        "content": "<p>[slack] &lt;omar.ashour22&gt; And thank you, I just did it with no types for now</p>",
        "id": 269370653,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643180633
    },
    {
        "content": "<p>[slack] &lt;<a href=\"http://johannes.ne\">johannes.ne</a>&gt; @Fabienne Krauer Thank you for the refs. I will stick to CV, but it would be very cool to have a physiology super-project with sub-projects for CV, biochemistry, neuronal networks etc.</p>",
        "id": 269378250,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643186926
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>Num</code> is the symbolic type from <a href=\"https://github.com/search?q=Symbolics.jl&amp;type=Repositories\">Symbolics.jl</a></p>",
        "id": 269383508,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643189994
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; &gt; The function definition is <code>function GS_Periodic!(du::Array{Float64, 3},u::Array{Float64,3},p::Array{Float64, 1},t::Float64)</code> <br>\nIs there any reason why? That does not effect performance you know?</p>",
        "id": 269383582,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643190020
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; &gt; Wouldn’t this affect type stability and performance? It’s one topic I don’t grasp that well<br>\nNo it does not.</p>",
        "id": 269383604,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643190035
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Discussion is in <a href=\"https://www.stochasticlifestyle.com/type-dispatch-design-post-object-oriented-programming-julia/\">https://www.stochasticlifestyle.com/type-dispatch-design-post-object-oriented-programming-julia/</a></p>",
        "id": 269383642,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643190053
    },
    {
        "content": "<p>[slack] &lt;omar.ashour22&gt; Thanks Chris!</p>",
        "id": 269388009,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643192530
    },
    {
        "content": "<p>[slack] &lt;omar.ashour22&gt; Wasn’t aware it didn’t affect performance! I was using btime and getting different results but I was probably doing something else wrong, thakns for that link</p>",
        "id": 269388140,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643192626
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; Is there Total Variation Diminishing method in <a href=\"https://github.com/search?q=OrdinaryDiffEq.jl&amp;type=Repositories\">OrdinaryDiffEq.jl</a>? Like TVD Runge-Kutta ? If not, what would be a good alternative?</p>",
        "id": 269409595,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643203576
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; there is not</p>",
        "id": 269414112,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643205323
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; maybe @ranocha can suggest what alternative makes sense?</p>",
        "id": 269414143,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643205338
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; Alright thx! Could that be implemented in the future? I think it is quite useful for WENO schemes for example that are quite used in my field.</p>",
        "id": 269414764,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643205575
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Hi, is there a way to display progress in EnsembleThreads computation, like remaning trajectories to be computed?</p>",
        "id": 269416833,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643206296
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Not right now, that's worth adding.</p>",
        "id": 269430583,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643211461
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @lddingsite yes it could be. Open an issue on <a href=\"https://github.com/search?q=OrdinaryDiffEq.jl&amp;type=Repositories\">OrdinaryDiffEq.jl</a> with references. It's a good GSoC topic.</p>",
        "id": 269430636,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643211480
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; OK, useful to know. Thank you</p>",
        "id": 269430759,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643211513
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Hey folks, I was wondering if anyone else using VSCODE experiences this same issue when using DiffEq with vscode. I can't tell if this is a vscode issue, or if it is something related to diffeq? So I open vscode, then update my environment in the package manager, to get the latest version of Diffeq. So there is a compliation step in updating the packages, and that runs just fine. Then when I hit CTRL+ENTER to run the <code>using DifferentialEquations</code> line, I get a message <code>[precompiling DifferentialEquations]</code> that takes a long time again. I am using Julia 1.6.5. Not sure if this happens to anyone else, or if I should ask in the vscode channel.</p>",
        "id": 269437167,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643213616
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; &gt; [slack] &lt;chrisrackauckas&gt; @lddingsite yes it could be. Open an issue on <a href=\"https://github.com/search?q=OrdinaryDiffEq.jl&amp;type=Repositories\">OrdinaryDiffEq.jl</a> with references. It's a good GSoC topic.</p>\n<p>Alright will do!</p>",
        "id": 269437563,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643213779
    },
    {
        "content": "<p>[slack] &lt;Emily Nieves&gt; Ahh gotcha. Good to know. Thank you so much!</p>",
        "id": 269443733,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643216010
    },
    {
        "content": "<p>[slack] &lt;ranocha&gt; @lddingsite TVD Runge-Kutta methods are called strong stability preserving (SSP) methods nowadays. We have lots of them in <a href=\"https://github.com/search?q=OrdinaryDiffEq.jl&amp;type=Repositories\">OrdinaryDiffEq.jl</a></p>",
        "id": 269467348,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643225113
    },
    {
        "content": "<p>[slack] &lt;ranocha&gt; They were called TVD methods in the early days before people realized that it's all about convexity and they can preserve all norms, not just the total variation one</p>",
        "id": 269467514,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643225163
    },
    {
        "content": "<p>[slack] &lt;ranocha&gt; The standard ones are <code>SSPRK22</code> and <code>SSPRK33</code> of Shu et al. <code>SSPRK43</code> is quite nice and has embedded error control. <code>SSPRK104</code> of Ketcheson also has some decent applications.</p>",
        "id": 269467748,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643225282
    },
    {
        "content": "<p>[slack] &lt;ranocha&gt; Just check their docstrings - they should have references to the papers developing them</p>",
        "id": 269467838,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643225312
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; @ranocha Awesome! Thanks a lot, can't wait to try them <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 269469620,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643226037
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I have been using SSPRK22 for solving the non-linear two-phase heat equation <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 269469659,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643226056
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; great, sounds promising!</p>",
        "id": 269470051,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643226207
    },
    {
        "content": "<p>[slack] &lt;ranocha&gt; Let us know if something doesn't work with them</p>",
        "id": 269470708,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643226493
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; Thanks, will do <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 269471451,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643226815
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Ahh didn't know</p>",
        "id": 269478195,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643229452
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; We're using the <code>Rosenbrock23</code> method, and are trying to cut down the number of function evaluations: we're using a fixed timestep, and have defined a custom <code>Wfact</code> and <code>tgrad</code> and are left with 3 evaluations per step:</p>\n<ol>\n<li>once in <code>reset_fsal!</code>  at time <code>t</code> (<a href=\"https://github.com/SciML/OrdinaryDiffEq.jl/blob/774b202f20d63bd1011cfc0dc04d7e8035730b45/src/integrators/integrator_utils.jl#L391\">https://github.com/SciML/OrdinaryDiffEq.jl/blob/774b202f20d63bd1011cfc0dc04d7e8035730b45/src/integrators/integrator_utils.jl#L391</a>) </li>\n<li>once in <code>calc_tderivative!</code> also at time <code>t</code> (<a href=\"https://github.com/SciML/OrdinaryDiffEq.jl/blob/0f74871e199148deec548d78feeff0b0ed9ad621/src/derivative_utils.jl#L37\">https://github.com/SciML/OrdinaryDiffEq.jl/blob/0f74871e199148deec548d78feeff0b0ed9ad621/src/derivative_utils.jl#L37</a>)</li>\n<li>once in <code>perform_step!</code> at time <code>t+dt/2</code> (<a href=\"https://github.com/SciML/OrdinaryDiffEq.jl/blob/e82fa88a79252357340e797f0ac18ca5dac55d38/src/perform_step/rosenbrock_perform_step.jl#L61\">https://github.com/SciML/OrdinaryDiffEq.jl/blob/e82fa88a79252357340e797f0ac18ca5dac55d38/src/perform_step/rosenbrock_perform_step.jl#L61</a>)<br>\nCan evaluations 1 and 2 be combined? (cc: @charliek who found this)</li>\n</ol>",
        "id": 269510236,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643244214
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Reset fsal should only be called on the first step</p>",
        "id": 269517532,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643249989
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Are you using a callback that is not modifying u? Did you set u_modified!(integrator,false)?</p>",
        "id": 269517598,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643250036
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; BTW, why Rosenbrock? I would assume that would not do well for your kinds of models?</p>",
        "id": 269517629,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643250088
    },
    {
        "content": "<p>[slack] &lt;charliek&gt; We didn't have callbacks, and we tested this with</p>\n<div class=\"codehilite\" data-code-language=\"step\"><pre><span></span><code>step!(integrator) # still 3 f calls```\nIf there is machinery outside of `step!` that changes the state of `fsal!`, then we may not be accounting for this.\n\nregarding Rosenbrock, 🤷\n</code></pre></div>",
        "id": 269518721,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643251255
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; We’re using an approximate Jacobian so it’s really a Rosenbrock W</p>",
        "id": 269519903,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643252519
    },
    {
        "content": "<p>[slack] &lt;Vedant&gt; send issue link whenever you open. also add a ref? i will also need a TVD stepper for some spectral pde methods. im looking at burgers turbulence</p>",
        "id": 269521948,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643254777
    },
    {
        "content": "<p>[slack] &lt;omar.ashour22&gt; I’m trying to solve an ODE (code <a href=\"https://github.com/oashour/PatternFormation.jl\">here</a>) and if I set the <code>tspan</code> to (0, 100.0) it gets stuck at 14.6% until I kill the process. Has anyone seen something like this before? I tried with  the default Julia from the website and my custom executable</p>\n<p>The code works perfectly fine for shorter time spans, and I used to be able to run it up to t=3e4, but I changed some stuff while optimizing it</p>",
        "id": 269523453,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643256366
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; Here is a simple reproducible example:</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>function f!(du, u, p, t)\n    println(\"f!: t=$t\")\n    du .= u\nend\n\nprob = ODEProblem(\n    ODEFunction(\n        f!;\n        jac = (J, u, p, t) -&gt; (J[1,1] = 1),\n        jac_prototype = zeros(1,1),\n        tgrad = (dT, u, p, t) -&gt; fill!(dT, 0),\n    ),\n    [1.0],\n    (0.0, 5.0),\n)\n\nsol = solve(\n    prob,\n    Rosenbrock23(),\n    dt = 1.0,\n    adaptive = false,\n)```\nwhich gives output\n```f!: t=0.0\nf!: t=0.0\nf!: t=0.5\nf!: t=1.0\nf!: t=1.0\nf!: t=1.5\nf!: t=2.0\nf!: t=2.0\nf!: t=2.5\nf!: t=3.0\nf!: t=3.0\nf!: t=3.5\nf!: t=4.0\nf!: t=4.0\nf!: t=4.5```\nShould I open an issue?\n</code></pre></div>",
        "id": 269528697,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643262367
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Hi,</p>\n<p>I am computing hitting times to a piece of hyperplane of large number of initial conditions, the system is 3d. I want to do it with threads but the following is way longer then EnsembleSerials. Each traj takes around 1-10ms to compute. Am I doing it wrong?</p>\n<div class=\"codehilite\" data-code-language=\"condition\"><pre><span></span><code>affect_neg!(integrator) = terminate!(integrator)\ncb = DiscreteCallback(condition, affect_neg!)\nhitplane(sol) = condition(sol[end],0,0)\n\nfunction SeparatriceParallel(prob)\n    # prob is the 3d ODEProblem that is passed, it is inplace\n    BLAS.set_num_threads(1) # otherwise, there might be a race condition\n    X = LinRange(0,2,400)\n    Y = LinRange(0.9, 1.1, 100)\n    W = LinRange(-0.14, 0.01, 100)\n    IC = vec([[x,y,w] for x in X, y in Y, w in W])\n    # modify the ODEProblem for // simulations\n    profFunc(prob,i,repeat) = remake(prob, u0 = IC[i])\n    output_func(sol,i) = ((IC[i], hitplane(sol)),false)\n    # change to EnsembleSerial if problem is tiny\n    # do not use progress = true because it opens many progressbars, each one for a simulation\n    # there is no way to monitor global progress for now (from Chris)\n    ensemble_prob = EnsembleProblem(prob, prob_func=profFunc,output_func=output_func)\n    sol = solve(ensemble_prob, Rodas4(), EnsembleThreads(); trajectories = length(IC), abstol = 1e-10, reltol = 1e-8, callback = cb, dense=false)\n    return (X=X, Y=Y, W=W, values = reshape(sol[:], (length(X), length(Y), length(W))))\nend```\n</code></pre></div>",
        "id": 269536838,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643270532
    },
    {
        "content": "<p>[slack] &lt;Vedant&gt; nvm just read later comments</p>",
        "id": 269567848,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643288273
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; &gt; [slack] &lt;Vedant&gt; nvm just read later comments</p>\n<p>Sorry, I've just seen you were talking about TVD</p>",
        "id": 269568341,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643288533
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; how is it dying? Maybe a memory overload? If you save less are you fine?</p>",
        "id": 269568524,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643288666
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; small trajectories?</p>",
        "id": 269568599,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643288710
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; we may need to make a Polyester version</p>",
        "id": 269568601,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643288713
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; small? you mean time span? Then tspan[2] can be large 1e5 because it is sloow-fast dynamics</p>",
        "id": 269568740,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643288780
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; but it is always fast to simulate one as said</p>",
        "id": 269568791,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643288812
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; with EnsembleSerial, it takes ~2-3h</p>",
        "id": 269568829,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643288845
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah open an issue</p>",
        "id": 269570046,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643289522
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I can take a look at this today</p>",
        "id": 269570051,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643289525
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that's odd, but I think I know what is going on.</p>",
        "id": 269570088,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643289548
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; how long to compute per solve? I am wondering if it's threads overhead.</p>",
        "id": 269570242,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643289630
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Id say 1-10ms per solve. So 4e6 * 1ms gives 1-10hours, in practice 3h</p>",
        "id": 269570454,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643289739
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; I notice some TaskFailed when using 60threads so I remove BLAS threading (see function) to enable EnsembleThreads</p>",
        "id": 269570518,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643289779
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh, too many threads may hit Julia GC issues</p>",
        "id": 269570874,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643289982
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; how much was GC time?</p>",
        "id": 269570877,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643289985
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; it did not finish so I killed it <span aria-label=\"disappointed\" class=\"emoji emoji-1f61e\" role=\"img\" title=\"disappointed\">:disappointed:</span></p>",
        "id": 269570916,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643290003
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; I can tell you on smaller run if you want</p>",
        "id": 269570965,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643290026
    },
    {
        "content": "<p>[slack] &lt;Sarder Rafee Musabbir&gt; Can anyone point any discrepancy with the following SDE problem? Also any pointer on how to form a neural network from this SDE will be really appreciated.</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>        xₐ, yₐ, θₐ, δₐ, vₐ = z\n        γₐ, a = u\n        @inbounds begin\n            dz[1] = vₐ * cos(θₐ)  # position: x\n            dz[2] = vₐ * sin(θₐ)   # position: y\n            dz[3] = (vₐ/2.0) * tan(δₐ) # orientation\n            dz[4] = γₐ # steering\n            dz[5] = a # acceleration\n        end\n        nothing\n    end\n\n    function gveh(dz, z, u, t)\n        xₐ, yₐ, θₐ, δₐ, vₐ = z\n        γₐ, a = u\n        μv = 0.5; σv = 0.05\n        Wv = GeometricBrownianMotionProcess(μv,σv,0.0,1.0)\n        @inbounds begin\n            dz[1] = 0.\n            dz[2] = 0.\n            dz[3] = 0.\n            dz[4] = γₐ * rand(Wv)\n            dz[5] = a  * rand(Wv)\n        end\n        nothing\n    end\n\n    vehz = [1., 3., 0.2, 0., 1.]   # initial state\n    vehu = [0.15, 0.6]             # initial control\n    vehdiff_var = [true, true, true, true, true]\n    vTime = (0., 10.)                      # timespan\n    svehprob = SDEProblem(fveh, gveh, vehz, vTime, vehu, differential_vars = vehdiff_var)  ```\n</code></pre></div>",
        "id": 269585215,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643295853
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what do you mean by discrepancy?</p>",
        "id": 269585556,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643295965
    },
    {
        "content": "<p>[slack] &lt;Sarder Rafee Musabbir&gt; In my formation, I used z as the state variables and u as the control variables. There is no parameter in the simple ODEs. Also for the noise part I used the Brownian motion noise on the control variables. I wanted to know if this type of formulation is accurate. And afterwards how to form a neural network for the SDE?</p>",
        "id": 269586028,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643296152
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that looks fine</p>",
        "id": 269587615,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643296766
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; And you can put neural networks in, it's our choice as to how.</p>",
        "id": 269587641,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643296776
    },
    {
        "content": "<p>[gitter] &lt;HelgavonLichtenstein&gt; Hello everyone, if I want to change my solver from <code>CVODE</code> to perhaps <code>TRBDF2</code> or <code>KenCarp4</code>, how would I do that? I understand <code>CVODE</code> uses <code>Vector{Float64}</code>and this would need to change to something else, maybe <code>Array{Float64}</code>, but I can't find in my current code where I set <code>Vector{Float64}</code> as a type.</p>",
        "id": 269598391,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643301067
    },
    {
        "content": "<p>[slack] &lt;omar.ashour22&gt; I'm trying to use the debugger but have to iron out some stuff first (gets stuck on another function call that works in repl). It doesn't die, the progress bar just gets stuck for minutes even though the whole calculation should take a few seconds</p>",
        "id": 269598988,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643301308
    },
    {
        "content": "<p>[slack] &lt;omar.ashour22&gt; I've tried with 2 different executables (default and alder lake open blas linked) and 2 different computers so it's not memory related, but I'll try not saving and see what happens thanks. I'm only saving at 101 points so it should be fine</p>",
        "id": 269599192,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643301384
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; You don't have to do anything</p>",
        "id": 269600044,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643301720
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; just change the solver.</p>",
        "id": 269600067,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643301722
    },
    {
        "content": "<p>[gitter] &lt;HelgavonLichtenstein&gt; Hello Chris, when I do that it gives an error <code>MethodError: no method matching Float64(::ForwardDiff.Dual{ForwardDiff.Tag{OrdinaryDiffEq.OrdinaryDiffEqTag, Float64}, Float64, 12})</code></p>",
        "id": 269601807,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643302437
    },
    {
        "content": "<p>[gitter] &lt;HelgavonLichtenstein&gt; I worked my way backwards and removed certain things I defined as <code>::Float64</code> - the error no longer appears</p>",
        "id": 269604048,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643303249
    },
    {
        "content": "<p>[gitter] &lt;HelgavonLichtenstein&gt; Results in <code>dt &lt;= dtmin. Aborting. There is either an error in your model specification or the true solution is unstable.</code> haha</p>",
        "id": 269604197,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643303306
    },
    {
        "content": "<p>[gitter] &lt;HelgavonLichtenstein&gt; This involves a callback in case that is important</p>",
        "id": 269604356,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643303379
    },
    {
        "content": "<p>[gitter] &lt;HelgavonLichtenstein&gt; I've made it to <a href=\"https://diffeq.sciml.ai/stable/basics/faq/#faq_stability\">https://diffeq.sciml.ai/stable/basics/faq/#faq_stability</a> but am still not sure how to check the ODE for stability</p>",
        "id": 269606842,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643304353
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I'd need the code to see</p>",
        "id": 269608266,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643304906
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; serial<br>\njulia&gt; @you wasted your time separatrice = SeparatriceParallel(prob_unique);<br>\n  4.288363 seconds (7.23 M allocations: 685.585 MiB, 4.77% gc time)</p>",
        "id": 269608521,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643305014
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; threads<br>\njulia&gt; @you wasted your time separatrice = SeparatriceParallel(prob_unique);<br>\n  8.632439 seconds (7.36 M allocations: 690.360 MiB)</p>",
        "id": 269608599,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643305054
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; usinng <code>save_everystep = false</code> did not improve the timings</p>",
        "id": 269609618,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643305459
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; interesting</p>",
        "id": 269610644,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643305857
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; @rveltz say, do you know of any good examples using <code>Approxfun</code> to solve PDEs using spectral methods. I found one example, but <a href=\"https://github.com/SciML/SciMLBenchmarks.jl/blob/master/benchmarks/MOLPDE/ks_spectral_wpd.jmd\">https://github.com/SciML/SciMLBenchmarks.jl/blob/master/benchmarks/MOLPDE/ks_spectral_wpd.jmd</a> for the kuramoto-sivashinsky equation, but was hoping to find a couple more examples, just to make sure I understand how to set it up. I saw you answered this question in discourse, so you might know of some good examples, <a href=\"https://discourse.julialang.org/t/issue-with-ode-solver-for-solving-burgers-equation-using-spectral-method/26224\">https://discourse.julialang.org/t/issue-with-ode-solver-for-solving-burgers-equation-using-spectral-method/26224</a>.</p>",
        "id": 269614978,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643307412
    },
    {
        "content": "<p>[slack] &lt;Flemming Holtorf&gt; Hey, I am trying to solve a simple PDE whose dynamics have been projected onto some basis V. After discretizing the spatial domain, I obtain a rhs for the PDE which is implemented here:</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code># just some generic parameter definition (can ignore)\nm = 100 # parameter realizations\nn_x = 100 # spatial discretization\nr = 20 # approximation rank\n\nl = 1 # length of spatial domain\nΔx = l/n_x # step size\nx_range = Δx/2:Δx:l-Δx/2 # uniform grid\np = range(0.01, 0.06, length = m) # parameter realizations\n\n# periodic bcs\nleft(i) = i &gt; 1 ? i - 1 : n_x\nright(i) = i &lt; n_x ? i + 1 : 1\n\n# Laplacian\nL = spzeros(n_x, n_x)\nfor i in 1:n_x\n    L[i,left(i)] = 1/Δx^2\n    L[i,i] = -2/Δx^2\n    L[i,right(i)] = 1/Δx^2\nend\n\n# gradient\nG = spzeros(n_x, n_x)\nfor i in 1:n_x\n    G[i,left(i)] = -1/2/Δx\n    G[i,right(i)] = 1/2/Δx\nend\n\n# some placeholders\nGK = zeros(n_x, r)\nf = randn(n_x)\n\nfunction K_step!(dK, K, V, t)\n    GK .= G*K\n    refs = [@view V[:,j] for j in 1:r] # should not be too bad ?\n    dK .= L*K*((p .* V)'*V) # much faster than looping over dK[i,j] = sum((L*K)[i,k]*dot(p .* V[:,k],V[:,j]) for k in 1:r)\n    for j in 1:r\n        Δ = sum(refs[j]) # should not be too bad\n        for i in 1:n_x\n            dK[i,j] += f[i]*Δ\n            for k in 1:r\n                dK[i,j] -= K[i,k] * sum(GK[i,l] * dot(refs[k] .* refs[l], refs[j]) for l in 1:r) # this line hurts performance\n            end\n        end\n    end\nend\n\ndK = zeros(n_x,r)\nK0 = ones(n_x,r)\nV = ones(m, r)\n\n@time K_step!(dK, K0, V, 0)```\nHowever, this implementation is really slow. The line,\n```dK[i,j] -= K[i,k] * sum(GK[i,l] * dot(refs[k] .* refs[l], refs[j]) for l in 1:r) ```\nappears to cause most allocations. Essentially everything there, the -= assignment as well as the elementwise multiplication, dot product and sum calls, appear to contribute to the slowness but I am not sure how to avoid any of these things. Does anyone have suggestions or pointers to guidelines that would help me increase performance here?\n</code></pre></div>",
        "id": 269615263,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643307546
    },
    {
        "content": "<p>[slack] &lt;Flemming Holtorf&gt; I should add that the function should truly be parametric in V. Just precomputing all the coefficients is not really the greatest option...</p>",
        "id": 269615605,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643307690
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; I would say no. However, you have this:<br>\n<a href=\"https://benchmarks.sciml.ai/html/MOLPDE/kdv_spectral_wpd.html\">https://benchmarks.sciml.ai/html/MOLPDE/kdv_spectral_wpd.html</a></p>\n<p>Back in the days, there were a folder example in ApproxFun with time solution of linear PDE. It would consider time as space variable, set up Dirichlet BC in time and solve it.</p>",
        "id": 269616223,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643307940
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; surely @s.olver would recommend bettter</p>",
        "id": 269616397,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643308007
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; @rveltz Ahh okay, thanks. Oh you know I just looked in that directory and there are some more spectral examples it seems. So let me take a look at those. There are like 4 total examples, so that might be good.</p>",
        "id": 269619014,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643309163
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Thanks for pointing that out. I will also look at the examples directory in Approxfun to see if there are any more good examples.</p>",
        "id": 269619072,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643309190
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; GK is a global variable as you have written it here. You should put this all inside of a function.</p>",
        "id": 269625308,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643311966
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; or pass it to the function perhaps</p>",
        "id": 269625382,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643311999
    },
    {
        "content": "<p>[slack] &lt;Fabienne Krauer&gt; Is it faster to return only selected ODE states from <code>solve()</code> (compared to returning all modelled states) or is there \"just\" a memory advantage?</p>",
        "id": 269629065,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643313490
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It can help runtime</p>",
        "id": 269629135,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643313525
    },
    {
        "content": "<p>[slack] &lt;Fabienne Krauer&gt; Okay, then it makes sense to return only the necessary states when fitting. Thanks Chris</p>",
        "id": 269629288,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643313600
    },
    {
        "content": "<p>[slack] &lt;Stanley&gt; Hi Everyone, I need help in understanding using <a href=\"https://github.com/search?q=Optim.jl&amp;type=Repositories\">Optim.jl</a> and <a href=\"https://github.com/search?q=DifferentialEquation.jl&amp;type=Repositories\">DifferentialEquation.jl</a>. I know there is the diffEqParamEstim.jl, but I want to gain better understanding on how to apply a hand-written cost function. So in doing that, I ran into dimensionError.</p>\n<p><code>ERROR: LoadError: DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(21),), b has dims (Base.OneTo(1),), mismatch at 1\")</code><br>\n<code>Stacktrace:</code></p>\n<p>This is my code, which is basically a prey-pred model. I'm quite family with using R for optimization work, but need to understand using julia's way.</p>\n<p><code>using DifferentialEquations, Optim, Random</code></p>\n<p><code>## model function</code><br>\n<code>function ecopz(du, u, p, t)</code><br>\n<code>du[1] = (p[1]*(1 - u[1]/p[2])) * u[1] - p[3]*u[1]*u[2]</code><br>\n<code>du[2] = p[3]*u[1]*u[2] - p[4]*u[2]</code><br>\n<code>end</code></p>\n<p><code>## parameters needed to run model</code><br>\n<code>p = [1, 3, 2, 0.3]</code><br>\n<code>tspan = (0.0, 100.0)</code><br>\n<code>u0 = [0.1 0.1]</code></p>\n<p><code>## solve model</code> <br>\n<code>prob = ODEProblem(ecopz, u0, tspan, p, saveat = 0.1)</code><br>\n<code>sol = solve(prob)</code></p>\n<p><code>## prepocess model output</code><br>\n<code>n = size(sol.u, 1)</code><br>\n<code>xobs = zeros(length(collect(1:50:n)), 2)</code><br>\n<code>xobs[:, 1] = vcat(sol.u...)[1:50:n, 1]</code><br>\n<code>xobs[:, 2] = vcat(sol.u...)[1:50:n, 2]</code></p>\n<p><code>## define cost function</code><br>\n<code>function ecopz_cost_fun(pin, obs)</code><br>\n<code>time_cost_fn = (0.0, 100.0)</code><br>\n<code>prob = ODEProblem(ecopz, u0, time_cost_fn, pin, saveat = 5)</code><br>\n<code>sol = solve(prob)</code><br>\n<code>out = vcat(sol.u...)</code><br>\n<code>cost = sum((obs[:, 1] - out[:, 1]).^2 + (obs[:, 2] - out[:, 2]).^2)</code><br>\n<code>return cost</code><br>\n<code>end</code></p>\n<p><code>## create new random observation to optimum with respect to parameters</code><br>\n<code>xobs_rand = zeros(size(xobs))</code><br>\n<code>xobs_rand[:, 1] = xobs[:, 1] + 1e-4*randn(size(xobs[:, 1]))</code><br>\n<code>xobs_rand[:, 2] = xobs[:, 2] + 1e-4*randn(size(xobs[:, 2]))</code></p>\n<p><code>p0 = [0.5, 2, 1.5, 0.1] ## parameter to optimize</code><br>\n<code>tspan = (0.0, 100.0)</code><br>\n<code>u0 = [0.1 0.1]</code></p>\n<p><code>## optimize with cost-function</code><br>\n<code>optim_res = Optim.optimize(x -&gt; ecopz_cost_fun(x, xobs_rand), p0)</code></p>\n<p>@chrisrackauckas et al, can you please help me on basic issue.</p>",
        "id": 269636013,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643316763
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 269636572,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643317012
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what line is the error pointing to?</p>",
        "id": 269638077,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643317640
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>out = Array(sol)</code> is usually a much better idea btw.</p>",
        "id": 269638104,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643317653
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; My guess is that the size of <code>sol</code> and the size of <code>obs</code> are not the same</p>",
        "id": 269638222,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643317685
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; there's no reason for them to be the same: both are simply based on the \"random\" adaptive timestepping choices</p>",
        "id": 269638253,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643317702
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; use <code>saveat</code> to ensure they save at the same time points.</p>",
        "id": 269638271,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643317712
    },
    {
        "content": "<p>[slack] &lt;Stanley&gt; Well, I try to keep use the saveat option, but goes the almost similar error. However, when running the cost without the optim, it seem to provide a result (in term of the cost).</p>",
        "id": 269638603,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643317889
    },
    {
        "content": "<p>[slack] &lt;Stanley&gt; <code>┌ Warning: dt &lt;= dtmin. Aborting. There is either an error in your model specification or the true solution is unstable.</code><br>\n<code>└ @ SciMLBase C:\\Users\\stan\\.julia\\packages\\SciMLBase\\x3z0g\\src\\integrator_interface.jl:345</code><br>\n<code>ERROR: LoadError: DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(21),), b has dims (Base.OneTo(1),), mismatch at 1\")</code><br>\n<code>Stacktrace:</code><br>\n<code>[1] promote_shape</code><br>\n<code>@ .\\indices.jl:178 [inlined]</code><br>\n<code>[2] promote_shape</code><br>\n<code>@ .\\indices.jl:169 [inlined]</code><br>\n<code>[3] -(A::Vector{Float64}, B::Vector{Float64})</code><br>\n<code>@ Base .\\arraymath.jl:38</code></p>",
        "id": 269638754,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643317962
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; well you had a warning and exit and you didn't check for <code>sol.retcode == :Success</code></p>",
        "id": 269638972,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643318078
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://diffeqflux.sciml.ai/dev/examples/divergence/\">https://diffeqflux.sciml.ai/dev/examples/divergence/</a></p>",
        "id": 269639023,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643318107
    },
    {
        "content": "<p>[slack] &lt;Fabienne Krauer&gt; if you add a <code>println(pin)</code> statement inside the cost function, you'll see that the solution is unstable at <code>[0.8701019287109375, -0.1239471435546875, 1.73272705078125, 0.22906188964843752]</code> for the given inits.</p>",
        "id": 269639278,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643318222
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Back to the Rosenbrock23 question though, is there a reason for favoring that over methods which factorize less? Is this for a small ODE?</p>",
        "id": 269639382,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643318276
    },
    {
        "content": "<p>[slack] &lt;Stanley&gt; Hmmmm. Interesting. I try your suggestion. Brb</p>",
        "id": 269640150,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643318670
    },
    {
        "content": "<p>[slack] &lt;Flemming Holtorf&gt; ah thanks that indeed did quite a bit. Unfortunately it is still rather slow (about a factor of 10 slower than a theoretically inefficient alternative). In particular, can you think of any way to rewrite <code>dot(refs[k] .* refs[l], refs[j])</code> to reduce allocations? Or is there a way to cache some memory dedicated for some designated operations in a given function?</p>",
        "id": 269640544,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643318867
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; I'm not sure why exactly (it was what Oswald suggested: it might be useful to have a chat with him at some point in the future), but I think at the moment we're only handling the vertical sound waves implicitly</p>",
        "id": 269640556,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643318872
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; I haven't been that involved in the timestepping stuff (other than figuring out interface issues like this one), but I think they're currently experimenting with different approaches (linear vs non-linear, etc)</p>",
        "id": 269640761,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643318967
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; There are lots of places that you aren't fusing your operations. But for the particular line you mentioned, <code>dot(refs[k] .* refs[l], refs[j])</code>  allocates a temporary array for <code>refs[k] .* refs[l]</code> so that it can pass it to the dot function. You should write that operation into a pre-allocated array and then pass it to dot</p>",
        "id": 269640953,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643319038
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; Are other imex methods we should try? I've asked Dennis to put together a proposal for SciMLCon, so that might be useful as an overview</p>",
        "id": 269640996,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643319055
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; <code>r</code> is also global and so I expect <code>refs</code> isn't type-stable</p>",
        "id": 269641104,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643319098
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Rosenbrock23 isn't IMEX, and because it's not implicit, it cannot reuse Jacobians/Ws between steps, so it's really only for small ODEs.</p>",
        "id": 269641190,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643319124
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Well in theory Ros-W can do more reuse, but in practice that's hard.</p>",
        "id": 269641244,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643319147
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; oh, the implicit part at the moment is linear</p>",
        "id": 269641276,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643319165
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; You should generally just avoid defining variables in the global scope. You can use the <code>const</code> modifier if you really need to, but it's generally unnecessary</p>",
        "id": 269641343,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643319193
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; and so it doesn't need to be refactorized</p>",
        "id": 269641390,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643319211
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; yeah, it should be a Rosenbrock W, from what I undestand</p>",
        "id": 269641435,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643319233
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Oh okay, that makes more sense.</p>",
        "id": 269641682,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643319314
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; or maybe it is no longer linear? I'm not actually sure. But it is vertical only, and the solve reduces to a tridiagonal (hence our use of Wfact)</p>",
        "id": 269641707,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643319326
    },
    {
        "content": "<p>[slack] &lt;Stanley&gt; Great. The <code>sol.retcode == :Success</code>  work!. Thanks @chrisrackauckas and @Fabienne Krauer.</p>",
        "id": 269641758,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643319353
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; (or really, a block diagonal, of tridiagonal blocks)</p>",
        "id": 269641772,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643319357
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; That's probably not convergent with Ros-W though?</p>",
        "id": 269641839,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643319370
    },
    {
        "content": "<p>[slack] &lt;Stanley&gt; Just for question, what the benefit of using remake as suppose to explicity re-specify the problem (aside for synax length)?</p>",
        "id": 269641937,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643319406
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; actually, i think it is linear at the moment, but we do want to move to a non-linear solver (so will need a different method)</p>",
        "id": 269642215,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643319521
    },
    {
        "content": "<p>[slack] &lt;simonbyrne&gt; i.e. a proper IMEX method</p>",
        "id": 269642239,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643319534
    },
    {
        "content": "<p>[slack] &lt;Fabienne Krauer&gt; btw, if this is the Lotka-Volterra model, your parameters must be strictly positive. You'll need to constrain them during the optimization (e.g. fit on a log scale).</p>",
        "id": 269642441,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643319637
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Okay yeah, got it.</p>",
        "id": 269642586,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643319712
    },
    {
        "content": "<p>[slack] &lt;Flemming Holtorf&gt; great input, thanks a lot!</p>",
        "id": 269642771,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643319808
    },
    {
        "content": "<p>[slack] &lt;omar.ashour22&gt; @chrisrackauckas While debugging the debugger itself, I realized this has something to do with $N$. It runs fine up until N = 32 (to t = 1e4). With larger N, it breaks. The ODE system is NxN of course.</p>",
        "id": 269645090,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643320599
    },
    {
        "content": "<p>[slack] &lt;Stanley&gt; @Fabienne Krauer You mean log scale the parameter during the optimization? How will that work when plug into the solver? Not, entirely such how I might implement that if such case is needed.</p>",
        "id": 269645416,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643320735
    },
    {
        "content": "<p>[slack] &lt;Fabienne Krauer&gt; you'll need to exponentiate them before plugging into the solver.</p>",
        "id": 269646129,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643320985
    },
    {
        "content": "<p>[slack] &lt;Stanley&gt; Got it! Thanks</p>",
        "id": 269646435,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643321116
    },
    {
        "content": "<p>[slack] &lt;omar.ashour22&gt; I also defined a split ODE problem that doesn’t seem to get stuck (it’s unoptimized, just used the default KenCarp4 with no preconditioner or change of linear solver). The original problem still gets stuck with <code>save_everystep=false</code> as well. I really need to get a debugger up and running</p>",
        "id": 269647084,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643321379
    },
    {
        "content": "<p>[slack] &lt;omar.ashour22&gt; Removing <code>linsolve=KrylovJL_GMRES()</code> fixes it, but this is not much of a solution since it increases performance significantly</p>",
        "id": 269648630,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643321917
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you'd have to profile to see what's increasing cost significantly</p>",
        "id": 269649574,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643322445
    },
    {
        "content": "<p>[slack] &lt;omar.ashour22&gt; I meant that GMRES is a much better algorithm for this problem. I will profile with N = 32 and N =256 and see what happens</p>",
        "id": 269650766,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643323007
    },
    {
        "content": "<p>[slack] &lt;omar.ashour22&gt; I just tried IterativeSolversJL_GMRES and it fails too. Does this mean there’s something wrong with how the problem is defined?</p>",
        "id": 269664309,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643330166
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; as N increases the stiffness increases and you'll need to make sure the preconditioner decreases the condition in order to have good convergence.</p>",
        "id": 269664381,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643330223
    },
    {
        "content": "<p>[slack] &lt;omar.ashour22&gt; Okay thank you! I’ll mess around with preconditioning then</p>",
        "id": 269664421,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643330260
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @benchung ControlSystem is being replaced by an improved ODESystem which encompasses it.</p>",
        "id": 269855534,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643452866
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yes exactly</p>",
        "id": 269855539,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643452882
    },
    {
        "content": "<p>[slack] &lt;Nick Jordan&gt; Hi folks, I'm new to Julia and wondering if there is a package for generic PDE-constrained optimization problems, is <code>DiffEqFlux.jl</code> the right answer?</p>",
        "id": 269893466,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643496068
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/search?q=DiffEqFlux.jl&amp;type=Repositories\">DiffEqFlux.jl</a>/DiffEqSensitivity.jl are the tools for building it, since that builds the adjoint and the training process for the parameters, but it requires that you come with a PDE discretization.</p>",
        "id": 269893927,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643496702
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I assume you found the tutorial?</p>",
        "id": 269893931,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643496714
    },
    {
        "content": "<p>[slack] &lt;Nick Jordan&gt; I glanced at it quickly, before I had a chance to look at it closely. Yes, obviously it is the correct answer to my question. The one thing I was confused about was how it combined with PINNs to solve the inverse problem. Because the paradigm of <code>DiffEqFlux.jl</code> always includes a separate forward and inverse process, whereas I have seen in other PINNs papers that both are optimized at the same time. If say I want to use PINN as the solver in <code>solve</code> instead, how should I do it?</p>",
        "id": 269894707,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643497653
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/search?q=NeuralPDE.jl&amp;type=Repositories\">NeuralPDE.jl</a> <a href=\"https://neuralpde.sciml.ai/dev/\">https://neuralpde.sciml.ai/dev/</a></p>",
        "id": 269894952,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643497946
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Though PINNs are really really slow, like really really really slow.</p>",
        "id": 269894956,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643497953
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; For inverse problems on Lorenz, DiffEqFlux is a good 10,000x faster than DeepXDE. Try it out.</p>",
        "id": 269894965,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643497971
    },
    {
        "content": "<p>[slack] &lt;Nick Jordan&gt; Thank you. I agree with you on how slow PINNs are. I am thinking about using the output of a moderately trained PINN as an initial value for some classical numerical methods, so it won't take too much time I guess.</p>",
        "id": 269895392,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643498562
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that should be fine</p>",
        "id": 269895437,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643498633
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; or the other thing is to directly train \"PINNs\" against the classical solutions first to get initial neural network weights, and then finish the PINN training.</p>",
        "id": 269895499,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643498669
    },
    {
        "content": "<p>[slack] &lt;Nick Jordan&gt; Great idea! Will have a try. Thank you so much.<span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 269895789,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643499012
    },
    {
        "content": "<p>[gitter] &lt;dynamic-queries&gt; Hello DiffEq community. <br>\nI would like to make contributions to OrdinaryDiffEq especially the intergrators marked as \"new algorithms\". <br>\nHowever I am inundated by the volume of the information that I might have to  become familiar with in the ODEDiffEq package. <br>\nCould you help me get started ?</p>",
        "id": 270035847,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643637920
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @dynamic-queries <a href=\"http://devdocs.sciml.ai/latest/contributing/adding_algorithms/\">http://devdocs.sciml.ai/latest/contributing/adding_algorithms/</a></p>",
        "id": 270039016,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643639237
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Hi,</p>\n<p>If I use <code>solve(prob, TRBDF2(linsolve=KrylovJL_GMRES()))</code> where prob is simply <code>prob = ODEProblem(VF, u0, par, (0,1.))</code> , does it compute automatically with AD the Matrix-free jacobian, ie the evaluation on a vector?</p>",
        "id": 270043635,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643640954
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; For example, in here: <a href=\"https://sciml.ai/news/2022/01/11/linearsolve_preconditioners/#linearsolvejl_integration_into_differentialequationsjl\">https://sciml.ai/news/2022/01/11/linearsolve_preconditioners/#linearsolvejl_integration_into_differentialequationsjl</a></p>\n<p>does it form the sparse jacobian before using GMRES? (that would be quite a waste)</p>",
        "id": 270045215,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643641499
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Ok, I had forgotten about this (the docs dont give too much help), but</p>\n<div class=\"codehilite\" data-code-language=\"jv\"><pre><span></span><code>_f = ODEFunction(Fnfe;jac_prototype=Jv)\nprob_mf = ODEProblem(_f, prob.u0, (0,22.),prob.p)\nsol = @time solve(prob_mf, TRBDF2(linsolve=KrylovJL_GMRES()); abstol = 1e-8, reltol = 1e-6, progress=true, progress_steps = 1, dense = false, save_at = 1:0.1:12);```\nwhich gives\n```ERROR: TypeError: in DiffEqArrayOperator, in AType, expected AType&lt;:AbstractArray{T, 2}, got Type{Bool}\nStacktrace:\n  [1] DiffEqArrayOperator(A::Bool; update_func::Function)\n    @ SciMLBase ~/.julia/packages/SciMLBase/L7Nun/src/operators/basic_operators.jl:85\n  [2] DiffEqArrayOperator\n    @ ~/.julia/packages/SciMLBase/L7Nun/src/operators/basic_operators.jl:85 [inlined]```\n:woman-shrugging:\n</code></pre></div>",
        "id": 270051665,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643643794
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; My spectral code is doing fine, so far, but just in case I need stiff solvers, how can I make them work with complex variables? I first got an error saying that I should define <code>can_dual(::Type{ComplexF64}) = true</code>. After that, I got this error, which I don’t know how to solve: <code>ERROR: LoadError: MethodError: no method matching _mul_partials(::ForwardDiff.Partials{1, Any}, ::ForwardDiff.Partials{2, ComplexF64}, ::ComplexF64, ::ComplexF64)</code>. I don’t know what else I will find. Is there any example out there where these things are implemented?</p>",
        "id": 270051999,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643643903
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it will not form the Jacobian</p>",
        "id": 270052581,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643644081
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; You have to tell it <code>concrete_jac=true</code> to make it build it (say for a preconditioner)</p>",
        "id": 270052674,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643644102
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; autodiff=false is easiest there, unless you want to work on <a href=\"https://github.com/search?q=ForwardDiff.jl&amp;type=Repositories\">ForwardDiff.jl</a>.</p>",
        "id": 270052745,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643644134
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; You don't need to do any of that (and I wouldn't recommend that)</p>",
        "id": 270052800,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643644154
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; ah</p>",
        "id": 270052839,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643644167
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; but this gives another error</p>",
        "id": 270052994,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643644217
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; <code>solve(prob, TRBDF2(linsolve=KrylovJL_GMRES(), concrete_jac=true); abstol = 1e-8, reltol = 1e-6, progress=true, progress_steps = 1, dense = false, save_at = 1:0.1:12)</code></p>",
        "id": 270053019,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643644231
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; <code>ERROR: MethodError: Cannot `convert` an object of type LU{Float64, Matrix{Float64}} to an object of type OrdinaryDiffEq.WOperator{false, Float64, UniformScaling{Bool}, Float64, Matrix{Float64}, Vector{Float64}, Matrix{Float64}, SparseDiffTools.JacVec{SciMLBase.UJacobianWrapper{ODEFunction{false, typeof(Fnfe), UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Float64, NamedTuple{(:β, :aee, :aie, :aei, :aii, :ρ, :θe, :θi, :τ, :Ke, :Ki, :D, :uref, :vref), Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, PaddedConv{Vector{Float64}}, PaddedConv{Vector{Float64}}, SparseMatrixCSC{Float64, Int64}, Vector{Float64}, Vector{Float64}}}}, Vector{ForwardDiff.Dual{ForwardDiff.Tag{SparseDiffTools.DeivVecTag, Float64}, Float64, 1}}, Vector{ForwardDiff.Dual{ForwardDiff.Tag{SparseDiffTools.DeivVecTag, Float64}, Float64, 1}}, Vector{Float64}}}\nClosest candidates are:\n  convert(::Type{T}, ::T) where T at essentials.jl:205\nStacktrace:\n  [1] setproperty!(x::OrdinaryDiffEq.NLNewtonConstantCache{Float64, Float64, Matrix{Float64}, OrdinaryDiffEq.WOperator{false, Float64, UniformScaling{Bool}, Float64, Matrix{Float64}, Vector{Float64}, Matrix{Float64}, SparseDiffTools.JacVec{Sc</code></p>",
        "id": 270053084,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643644253
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; on latest versions?</p>",
        "id": 270053238,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643644314
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; (@v1.6) pkg&gt; st DifferentialEquations<br>\n      Status <code>~/.julia/environments/v1.6/Project.toml</code><br>\n  [0c46a032] DifferentialEquations v7.1.0</p>",
        "id": 270053321,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643644335
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh looks like you're doing something out of place and not in-place? Is there a reason you'd use the slow version and try to get performance? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 270053357,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643644345
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Send me that MWE though so I can take a look anyways, but that's an odd combo.</p>",
        "id": 270053398,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643644359
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; out of place</p>",
        "id": 270053893,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643644519
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; &gt;  Is there a reason you’d use the slow version and try to get performance?<br>\nmemory</p>",
        "id": 270053926,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643644534
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; i am trying to get it to work first and then optimise</p>",
        "id": 270053995,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643644556
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I haven't tested the combination of the preconditioner features with out of place right now, so it looks like that might have a bug. So I'll need an MWE and can start digging through it.</p>",
        "id": 270054338,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643644663
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Though I'm not sure how well it works though, since OOP drops Jacobian reuse</p>",
        "id": 270054380,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643644678
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Getting a mwe is some work, Ill do my best ( I am at a conference)</p>",
        "id": 270054525,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643644714
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; Oh, thanks, yeah. I see, the problem is over at <a href=\"https://github.com/search?q=ForwardDiff.jl&amp;type=Repositories\">ForwardDiff.jl</a> not handling complex, right? Well, I will see if I really need it. It might be interesting to work on that, and it might benefit others doing similar things. I will keep that in mind. Thanks again.</p>",
        "id": 270056767,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643645337
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; ```<br>\nTY = Float64<br>\nAF = Array</p>\n<p>S(u, β) = 1 / (1 + exp(-β * u))</p>\n<h1>ecriture du probleme de masse neurale 1d</h1>\n<h1>vector field</h1>\n<p>function Fnfe(U, par, t = 0)<br>\n    @unpack aee, aei, aie, aii, β, τ, θe, θi = par<br>\n    N = length(U) ÷ 2<br>\n    u = @view U[1:N]<br>\n    v = @view U[N+1:2N]<br>\n    out = similar(U)<br>\n    out[1:N]    .=  -u .+ S.(aee .* (<a href=\"http://par.Ke\">http://par.Ke</a> * u) .- aei .* (<a href=\"http://par.Ki\">http://par.Ki</a> * v) .- θe, β)<br>\n    out[N+1:2N] .= (-v .+ S.(aie .* (<a href=\"http://par.Ke\">http://par.Ke</a> * u) .- aii .* (<a href=\"http://par.Ki\">http://par.Ki</a> * v) .- θi, β) ) ./τ<br>\n    return out<br>\nend</p>\n<p>N = 2^9 # on peut monter a 2^12 = 4096<br>\nL = 90.<br>\nhx = 2L/N |&gt; TY<br>\nX = (TY.(-L .+ hx * collect(0:N-1)))</p>\n<h1>parameters used in the model</h1>\n<p>σe = 5.0<br>\nσi = 0.8 * σe</p>\n<h1>ci = 1 .-(tanh.(8X .+ 8*30) .+ 1)/2</h1>\n<p>ci = AF(TY.(abs.(X .+ 90) .&lt; σe))</p>\n<h1>ci2d = [ 1-(tanh(8x + 8*30) + 1)/2 for x in X , y in X ]</h1>\n<h1>ci2d = [ exp(-(x^2+y^2)/(2*σe^2)) for x in X , y in X ]</h1>\n<p>ci2d = AF(TY.([ (x^2+y^2)&lt;(σe)^2 for x in X , y in X ]))</p>\n<p>ke(x) = (1/(2 * σe)) *  exp(- (abs(x)) / σe) * (abs(x) &lt; L)<br>\nki(x) = (1/(2 * σi)) *  exp(- (abs(x)) / σi) * (abs(x) &lt; L)</p>\n<p>Ke  = [ ke(x - y) for x in X , y in X ]<br>\nKi  = [ ki(x - y) for x in X , y in X ]</p>\n<p>Ke ./= sum(Ke, dims = 2)<br>\nKi ./= sum(Ki, dims = 2)</p>\n<h1>parameters used in the model</h1>\n<p>par_nf1d = (β = 50.0, aee = 1.0,<br>\n    aie = 1.0, aei = 1.5, aii = 0.25,<br>\n    ρ = 2.4, # factor to acccount for 2d scaling compared to 1d<br>\n    θe = 0.125, θi = 0.4,<br>\n    τ = 2.0,<br>\n    Ke = Ke,<br>\n    Ki = Ki)</p>\n<p>Fnfe(AF(vcat(ci,0ci)), par_nf1d)</p>\n<p>using DifferentialEquations<br>\nprob = ODEProblem(Fnfe, vcat(ci,0ci), (0,22.), par_nf1d)<br>\nsol = @time solve(prob, Tsit5(); abstol = 1e-8, reltol = 1e-6, progress=true, progress_steps = 1, dense = false, save_at = 1:0.1:12);</p>\n<p>sol = @time solve(prob, TRBDF2(linsolve=KrylovJL_GMRES(), concrete_jac=true); abstol = 1e-8, reltol = 1e-6, progress=true, progress_steps = 1, dense = false, save_at = 1:0.1:12);```</p>",
        "id": 270056791,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643645346
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; it is simplified, the real thing is 2d</p>",
        "id": 270056873,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643645370
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah ForwardDiff complex support is the issue here, so just not using ForwardDiff is the easy answer.</p>",
        "id": 270057065,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643645418
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; The inplace version works. It is uber slow, it is surprising because I know that you dont need precond here, GMRES should converge fast.</p>",
        "id": 270057972,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643645709
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; with concrete_jac false?</p>",
        "id": 270058770,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643645977
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; no, the command above</p>",
        "id": 270059172,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643646124
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Interesting, this fails:</p>\n<p><code>solve(prob, TRBDF2(linsolve=IterativeSolversJL_GMRES(), concrete_jac=true); abstol = 1e-8, reltol = 1e-6, progress=true, progress_steps = 1, dense = false, save_at = 1:0.1:12);</code></p>",
        "id": 270059406,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643646211
    },
    {
        "content": "<p>[slack] &lt;SebastianM-C&gt; Should I be able to compare 2 <code>ODESolution</code>s with <code>==</code>? I get</p>\n<div class=\"codehilite\" data-code-language=\"error\"><pre><span></span><code>Stacktrace:\n [1] ==(A::ODESolution{...},  B::ODESolution{...})\n   @ Base ./abstractarray.jl:2534\n [2] ==(A::ODESolution{...},  B::ODESolution{...})  (repeats 1427 times)\n   @ Base ./abstractarray.jl:2540\n [3] top-level scope\n   @ REPL[5]:1```\n</code></pre></div>",
        "id": 270060280,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643646540
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; OK, using <code>KrylovJL_GMRES(verbose = 1)</code></p>\n<p>you can see that the linear solves are quick:</p>\n<div class=\"codehilite\" data-code-language=\"gmres\"><pre><span></span><code>    k     ‖rₖ‖   hₖ₊₁.ₖ\n    0  7.9e+01  ✗ ✗ ✗ ✗\n    1  7.2e-01  1.7e-01\n    2  2.3e-04  6.1e-03\n    3  1.3e-07  1.0e-02```\nNot sure why it takes ages, maybe I allocate too much.\n</code></pre></div>",
        "id": 270060343,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643646571
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; BTW this IterativeSolvers are not usable:</p>",
        "id": 270060381,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643646586
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; <code>sol = solve(prob, TRBDF2(linsolve=IterativeSolversJL_GMRES(), concrete_jac=true); abstol = 1e-8, reltol = 1e-6, progress=true, progress_steps = 1, dense = false, save_at = 1:0.1:12);</code><br>\nidem:<br>\n<code>sol = @time solve(prob, TRBDF2(linsolve=IterativeSolversJL_GMRES(;verbose = true), concrete_jac=true); abstol = 1e-8, reltol = 1e-6, progress=true, progress_steps = 1, dense = false, save_at = 1:0.1:12);</code></p>",
        "id": 270060487,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643646616
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yeah</p>",
        "id": 270062262,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643647209
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; don't use it, I don't recommend IterativeSolversJL</p>",
        "id": 270062282,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643647218
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's not defined.</p>",
        "id": 270062334,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643647237
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; it is strange, I use it all the time (with KrylovKit)</p>",
        "id": 270062760,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643647387
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; OK, I removed all allocations, but the gmres version is still way too slow</p>",
        "id": 270063446,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643647630
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; ```function Fnfe(out, U, par, t = 0)<br>\n    @unpack aee, aei, aie, aii, β, τ, θe, θi = par<br>\n    N = length(U) ÷ 2<br>\n    u = @view U[1:N]<br>\n    v = @view U[N+1:2N]<br>\n    # tmp = similar(U, N)<br>\n    @views mul!(out[1:N], <a href=\"http://par.Ke\">http://par.Ke</a>, u, aee, 0)<br>\n    @views mul!(out[1:N], <a href=\"http://par.Ki\">http://par.Ki</a>, v, -aei, 1)<br>\n    @views out[1:N] .=  S.(out[1:N] .- θe, β) .- u<br>\n    # out[1:N]    .=  -u .+ S.(aee .* (<a href=\"http://par.Ke\">http://par.Ke</a> * u) .- aei .* (<a href=\"http://par.Ki\">http://par.Ki</a> * v) .- θe, β)</p>\n<div class=\"codehilite\"><pre><span></span><code>@views mul!(out[N+1:2N], http://par.Ke, u, aie, 0)\n@views mul!(out[N+1:2N], http://par.Ki, v, -aii, 1)\n@views out[N+1:2N] .= (S.(out[N+1:2N] .- θi, β) .- v ) ./τ\n# out[N+1:2N] .= (S.(aie .* (http://par.Ke * u) .- aii .* (http://par.Ki * v) .- θi, β) .- v) ./τ\nreturn out\n</code></pre></div>\n\n<p>end```</p>",
        "id": 270063488,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643647647
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; like 0.34s for Tsit5 versus 15s for TRBDF2</p>",
        "id": 270063613,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643647688
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Maybe that’s unfair comparison. However: <code>CVODE_BDF(linear_solver=:GMRES)</code> takes 3s</p>",
        "id": 270064352,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643647984
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; QNDF is 8s</p>",
        "id": 270064380,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643647993
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; <code>QNDF(linsolve=linsolve=KrylovJL_GMRES(rtol = 1e-2, atol = 1e-8)</code> is 4s</p>",
        "id": 270065034,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643648201
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; that’s getting interesting!</p>",
        "id": 270065060,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643648211
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Another strange mistake:</p>\n<p><code>solve(prob, QNDF(linsolve=KrylovJL_GMRES(rtol = 1e-2, atol = 1e-8, itmax = 10, memory = 20), concrete_jac=true); abstol = 1e-8, reltol = 1e-6, progress=true, progress_steps = 1, dense = false, save_at = 1:0.1:12);</code><br>\nit does not like changing the memory keyword</p>",
        "id": 270066113,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643648561
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Arf, it does not like GPU (the one below), the solver based on Tsit5 is Ok with gpu</p>",
        "id": 270068019,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643649251
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; <code>sol = @time solve(prob, QNDF(linsolve=KrylovJL_GMRES(rtol = 1e-2, atol = 1e-8, itmax = 10), concrete_jac=true); abstol = 1e-8, reltol = 1e-6, progress=true, progress_steps = 1, dense = false, save_at = 1:0.1:12);</code></p>",
        "id": 270068038,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643649262
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; but TRBDF2 accepts GPU <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>\n<p>It feels like some automatic testing is missing <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>\n<p>Anyway, having one method for the gpu is enough for me, hopefull I can get to the 2048x2048 unknowns and hook in BifurcationKit to perform shooting</p>",
        "id": 270069370,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643649768
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; QNDF I don't think has been tested with GPU</p>",
        "id": 270070922,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643650329
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that's worth a test</p>",
        "id": 270070928,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643650332
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; BTW you dont have a logger version of DE where you display linear iterations, newton info, residuals, time steps…?</p>",
        "id": 270071208,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643650433
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; LOL:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"n\">Out</span> <span class=\"n\">of</span> <span class=\"n\">GPU</span> <span class=\"n\">memory</span> <span class=\"n\">trying</span> <span class=\"n\">to</span> <span class=\"n\">allocate</span> <span class=\"mf\">512.000</span> <span class=\"n\">TiB</span>\n<span class=\"n\">Effective</span> <span class=\"n\">GPU</span> <span class=\"n\">memory</span> <span class=\"n\">usage</span><span class=\"o\">:</span> <span class=\"mf\">3.40</span><span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"mf\">1.613</span> <span class=\"n\">GiB</span><span class=\"o\">/</span><span class=\"mf\">47.462</span> <span class=\"n\">GiB</span><span class=\"p\">)</span>\n<span class=\"n\">Memory</span> <span class=\"n\">pool</span> <span class=\"n\">usage</span><span class=\"o\">:</span> <span class=\"mf\">864.062</span> <span class=\"n\">MiB</span> <span class=\"p\">(</span><span class=\"mf\">1.188</span> <span class=\"n\">GiB</span> <span class=\"n\">reserved</span><span class=\"p\">)</span><span class=\"sb\">```</span>\n</code></pre></div>",
        "id": 270072234,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643650789
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; it must be trying to get a dense matrix somewhere</p>",
        "id": 270072362,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643650815
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes</p>",
        "id": 270073216,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643651112
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>concrete_jac</code> gives you the concrete Jacobian</p>",
        "id": 270073231,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643651117
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; if you don't want it, don't set it to true.</p>",
        "id": 270073244,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643651123
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; &gt; BTW you dont have a logger version of DE where you display linear iterations, newton info, residuals, time steps…?<br>\nsol.destats</p>",
        "id": 270073264,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643651134
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; my bad</p>",
        "id": 270073882,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643651353
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; &gt; <code>concrete_jac</code> gives you the concrete Jacobian<br>\nyou mean matrix based?</p>\n<blockquote>\n<p>I find it confusing in the DE docs to say jacobian free when it seems it is matrix free.</p>\n</blockquote>",
        "id": 270074041,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643651410
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Jacobian-free Newton Krylov (JFNK) is the common term <a href=\"https://www.sciencedirect.com/science/article/pii/S0021999103004340\">https://www.sciencedirect.com/science/article/pii/S0021999103004340</a></p>",
        "id": 270074197,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643651479
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I didn't name it, go ask them <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 270074215,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643651488
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; though yeah, it doesn't calculate the Jacobian so I think it makes sense</p>",
        "id": 270074267,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643651512
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; &gt; you mean matrix based?<br>\nYes, it builds the concrete matrix only if you ask for it.</p>",
        "id": 270074349,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643651532
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Jacobian free means … 😂 omg loosers</p>",
        "id": 270074431,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643651561
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; may I ask where concrete_jac is used in the code and where the jacobian evaluation is defined? You said earlier that you advise against JacVecOperator, so you must be defining such function yourself for “Jacobian-free”, arent you?</p>",
        "id": 270074723,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643651655
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; for Krylov it will always evaluate it Jacobian-free</p>",
        "id": 270074783,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643651682
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; with a direct function for J*v</p>",
        "id": 270074795,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643651688
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; concrete_jac is for making the Jacobian actually be calculated when using GMRES, for example if you want to use the Jacobian in a preconditioner definition</p>",
        "id": 270074846,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643651716
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; I see, make sense now, I do the same sometimes in BK</p>",
        "id": 270074945,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643651758
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Thank you a lot, sorry for my buzzing a lot</p>",
        "id": 270075040,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643651783
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; no worries</p>",
        "id": 270076065,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643652116
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 270100516,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643661266
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 270100519,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643661268
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 270100533,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643661276
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 270100661,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643661345
    },
    {
        "content": "<p>[slack] &lt;charliek&gt; I was hoping to compute the convergence rate of one of my problems. I started writing something myself, with the interface <code>test_convergence(integrator, dts::Vector{&lt;:Real})</code>, but then I came across <a href=\"https://github.com/SciML/DiffEqDevTools.jl/blob/master/src/convergence.jl\">https://github.com/SciML/DiffEqDevTools.jl/blob/master/src/convergence.jl</a>, but I can't seem to find docs in <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a> for the interface (<a href=\"https://github.com/search?q=DiffEqDevTools.jl&amp;type=Repositories\">DiffEqDevTools.jl</a> readme says to look in <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a>).</p>\n<p>Also, these should work for problems without analytic solutions, correct?</p>",
        "id": 270115195,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643667554
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; For analyticless you need to use a different function. See this test: <a href=\"https://github.com/SciML/DiffEqDevTools.jl/blob/master/test/analyticless_convergence_tests.jl\">https://github.com/SciML/DiffEqDevTools.jl/blob/master/test/analyticless_convergence_tests.jl</a></p>",
        "id": 270116100,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643667789
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yeah the dev tools aren't documented because it's not for end users really <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> , but it's used all throughout the tests of course so it's relatively stable.</p>",
        "id": 270116178,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643667818
    },
    {
        "content": "<p>[slack] &lt;charliek&gt; Ok, cool</p>",
        "id": 270117180,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643668220
    },
    {
        "content": "<p>[slack] &lt;charliek&gt; I think it might be really useful for the Clima folks, or anyone who deals with implicit solvers for PDEs where they specify left-hand side (LHS) functions. These tests could serve as correctness tests for their LHS implementations</p>",
        "id": 270117318,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643668281
    },
    {
        "content": "<p>[slack] &lt;pabloferz&gt; I have a custom wrapper around an <code>SVector{6}</code> that behaves as a 3x3 matrix (basically a more optimized version of <code>~LowerTriangular~Symmetric{T, N, &lt;: SMatrix{3, 3}}</code> which represent some tensor field at each point of space. I have an array of these at some points of a grid and wanted to use DiffEqOperators to solve a problem via the method of lines strategy. I'm seeing errors from <code>*(::GhostDerivativeOperator{T1}, ::AbstractArray{T2})</code> because the <code>promote_type(T1, T2)</code> there produces <code>Any</code> and then I have <code>zero(::Type{Any})</code> erroring. Is <code>DiffEqOperators</code> written for arrays of scalars only? Or is there a guide over the minimal interface I need to implement to have custom non scalar types working with the library?</p>",
        "id": 270258083,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643738860
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; This sounds scary.</p>",
        "id": 270258732,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643739101
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It's written for arrays and scalars, there be dragons where you're looking.</p>",
        "id": 270258755,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643739113
    },
    {
        "content": "<p>[slack] &lt;pabloferz&gt; I'll have to fight then, I guess</p>",
        "id": 270259189,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643739316
    },
    {
        "content": "<p>[slack] &lt;pabloferz&gt; It's a bit. People modeling liquid crystals...</p>",
        "id": 270259193,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643739322
    },
    {
        "content": "<p>[slack] &lt;pabloferz&gt; By arrays you mean arrays of scalars, right?</p>",
        "id": 270259850,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643739612
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes</p>",
        "id": 270260181,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643739751
    },
    {
        "content": "<p>[slack] &lt;pabloferz&gt; Ok, I'll try to poke around.</p>",
        "id": 270260377,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643739827
    },
    {
        "content": "<p>[slack] &lt;GiggleLiu&gt; Wish for some insight for implementing the optimal checkpointing algorithm for ODE solvers in OrdinaryDiffEq: <a href=\"https://discourse.julialang.org/t/how-to-get-the-full-history-of-step-sizes-and-coefficients/75597?u=1115\">https://discourse.julialang.org/t/how-to-get-the-full-history-of-step-sizes-and-coefficients/75597?u=1115</a> .</p>",
        "id": 270270223,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643743532
    },
    {
        "content": "<p>[slack] &lt;pabloferz&gt; Defined some custom <code>promote_types</code>, and got it to move on, but it seems now that <code>forwarddiff_color_jacobian</code> is only defined for <code>AbstractMatrix{&lt;:Number}</code>.</p>",
        "id": 270283503,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643748668
    },
    {
        "content": "<p>[slack] &lt;pabloferz&gt; I guess I would have to pass all the data as a tensor and then do the packing/unpacking when needed, but I'm not completely sure this will work.</p>",
        "id": 270283722,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643748739
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; if I have a function implementing Jac * du, should I pass it using JacVecOperator?</p>",
        "id": 270285190,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643749229
    },
    {
        "content": "<p>[slack] &lt;charliek&gt; In case people are interested, I started to write a package for this. I'm still not sure if I like the name, though. <a href=\"https://github.com/CliMA/TemporalConvergenceTests.jl\">https://github.com/CliMA/TemporalConvergenceTests.jl</a></p>",
        "id": 270323821,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643768631
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; No, make an operator</p>",
        "id": 270324650,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643769326
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; is there something that was missing from analyticless_convergence ?</p>",
        "id": 270324733,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643769397
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; a MatrixFreeOperator?</p>",
        "id": 270342616,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643785323
    },
    {
        "content": "<p>[slack] &lt;Vedant&gt; if diffeqoperators is written for array and scalars only, you can make your wrapper a subtype of AbstractMatrix</p>",
        "id": 270345370,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643787930
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Hi,</p>\n<p>Is it a mistake to write this <a href=\"https://github.com/SciML/DiffEqOperators.jl/blob/f01a9977cb361479c97fd6d5849ea14ea87c1f19/src/matrixfree_operators.jl#L51\">https://github.com/SciML/DiffEqOperators.jl/blob/f01a9977cb361479c97fd6d5849ea14ea87c1f19/src/matrixfree_operators.jl#L51</a> given that <code>MatrixFreeOperator</code> has 4 parameters <code>{F,N,S,O}</code> ?</p>",
        "id": 270348680,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643790298
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; OK, I got it! I did not know this trick</p>",
        "id": 270357984,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643795340
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; <code>struct B{a,b,c}\n       a::a\n       b::b\n       c::c\n       end\n(::B{a,b})(x) where {a,b} = (a,b)\nb=B(1,1.,\"s\")\nb(0)</code></p>",
        "id": 270358055,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643795385
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; It just picks up the first two types. But it seems unnecessary because F and N are not used.</p>",
        "id": 270358061,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643795389
    },
    {
        "content": "<p>[slack] &lt;Vedant&gt; <a href=\"https://docs.julialang.org/en/v1/manual/interfaces/#man-interface-array\">https://docs.julialang.org/en/v1/manual/interfaces/#man-interface-array</a></p>",
        "id": 270360642,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643796664
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; or take inspiration from JacVecOperator?</p>",
        "id": 270377833,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643806081
    },
    {
        "content": "<p>[slack] &lt;pabloferz&gt; It already is a subtype of AbstractMatrix.</p>",
        "id": 270384907,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643809348
    },
    {
        "content": "<p>[slack] &lt;charliek&gt; I wasn't exactly sure what it was doing (e.g., what is <code>test_dt</code>?). Also, I was already familiar with the analysis that I've added into <a href=\"https://github.com/search?q=TemporalConvergenceTests.jl&amp;type=Repositories\">TemporalConvergenceTests.jl</a>, so I thought that might be the quickest way forward</p>",
        "id": 270395788,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643813584
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; test_dt is just the dt to run the reference at.</p>",
        "id": 270404757,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643816676
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; SDEs are different, you don't need the SDE dispatch</p>",
        "id": 270404811,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643816702
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; ```using OrdinaryDiffEq, StochasticDelayDiffEq, ParameterizedFunctions, Test, Random<br>\nusing ParameterizedFunctions.ModelingToolkit # macro hygiene<br>\nf = @ode_def LotkaVolterra begin<br>\n  dx = 1.5x - x*y<br>\n  dy = -3y + x*y<br>\nend</p>\n<p>prob = ODEProblem(f,big.([1.0;1.0]),(big(0.0),big(10.0)))</p>\n<p>using DiffEqDevTools</p>\n<p>dts = big(1/2).^(8<span aria-label=\"-1\" class=\"emoji emoji-1f44e\" role=\"img\" title=\"-1\">:-1:</span>4)<br>\ntest_setup = Dict(:alg=&gt;Vern9(),:reltol=&gt;1e-25,:abstol=&gt;1e-25)<br>\nsim1 = analyticless_test_convergence(dts,prob,Tsit5(),test_setup)<br>\nsim2 = analyticless_test_convergence(dts,prob,Vern9(),test_setup)</p>\n<p>@test abs(sim1.𝒪est[:final]-5) &lt; 0.2<br>\n@test abs(sim2.𝒪est[:final]-9) &lt; 0.2```</p>",
        "id": 270404836,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643816711
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; there's no test_dt there</p>",
        "id": 270404851,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643816717
    },
    {
        "content": "<p>[slack] &lt;charliek&gt; Ok, thanks, I'll give it a shot. I think the other issue is that we some solve equations in dimensional form, so the error norm needs to be normalized per variable so that one variable's error doesn't dominate the error. Is there a way to do that?</p>",
        "id": 270405066,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643816782
    },
    {
        "content": "<p>[slack] &lt;charliek&gt; Admittedly that's a bit more specific to our configuration.</p>",
        "id": 270405193,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643816817
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh, that's missing: <a href=\"https://github.com/SciML/DiffEqDevTools.jl/issues/5\">https://github.com/SciML/DiffEqDevTools.jl/issues/5</a> yeah we would need to allow a function of the state to define the error. We just have final, l2, and L2</p>",
        "id": 270407230,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643817451
    },
    {
        "content": "<p>[slack] &lt;charliek&gt; Ok, I'll stick with TemporalConvergenceTests for now. Thanks!</p>",
        "id": 270410230,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643818359
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Sorry I am a bit stuck here. Can I have a hint please?</p>",
        "id": 270425702,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643823318
    },
    {
        "content": "<p>[gitter] &lt;simone66b&gt; \\alpha</p>",
        "id": 270488939,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643853058
    },
    {
        "content": "<p>[gitter] &lt;simone66b&gt; Hi, I'm interested in using Julia and StochasticDiffEq to model diffusions on evolutionary trees. Currently, I have been using R and the side package but I would like to switch to Julia because of speed considerations, and the flexibility that is possible. Also, Julia is cool! Because I am new to Julia I would appreciate any guidance on using StochasticDiffEq to solve univariate diffusion equations. A simple working example for writing the diffusion equation for the OU process would help! I'm having problems understanding the correct syntax. I see that you have to write the drift function and the diffusion function in different function definitions but I get lots of errors. Here is my first stab at toy code: function diff(u,p, t)<br>\n    mu, sigma, alpha = p;<br>\n    sigma<br>\nend</p>\n<p>function drift(u, p, t)<br>\n    mu, sigma, alpha = p;<br>\n    alpha * (mu - u)<br>\nend</p>\n<p>u0 = 0.0<br>\np = (0.1, 1.0, 1.5);<br>\ntspan = (0.0, 50.0);<br>\nprob = SDEProblem(drift, diff, u0, tspan, p=p)<br>\nsol = solve(prob)</p>",
        "id": 270489997,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643853703
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @simone66b <code>prob = SDEProblem(drift, diff, u0, tspan, p)</code></p>",
        "id": 270490148,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643853796
    },
    {
        "content": "<p>[gitter] &lt;simone66b&gt; Here is the error. Problems with types?: RROR: MethodError: no method matching __solve(::SDEProblem{Float64, Tuple{Float64, Float64}, true, Tuple{Float64, Float64, Float64}, Nothing, SDEFunction{true, typeof(drift), typeof(diff), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}, typeof(diff), Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Nothing})</p>",
        "id": 270491037,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643854508
    },
    {
        "content": "<p>[gitter] &lt;simone66b&gt; Not naming p makes no difference.</p>",
        "id": 270493405,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643856645
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; did you not do <code>using DifferentialEquations</code>?</p>",
        "id": 270543548,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643893005
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; If you didn't add DiffEq itself then you won't have the automatic algorithm choice @simone66b</p>",
        "id": 270543576,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643893019
    },
    {
        "content": "<p>[slack] &lt;Fabienne Krauer&gt; <code>p = [0.1, 1.0, 1.5];</code> ? @simone66b</p>",
        "id": 270544031,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643893215
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; tuples will be a bit more efficient here.</p>",
        "id": 270544233,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643893281
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; @chrisrackauckas sorry to bug you. I know you are busy, should I ask this on discourse?</p>",
        "id": 270549205,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643895302
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what's the question?</p>",
        "id": 270549660,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643895501
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; How to give my jacobian*vec function to DE?</p>",
        "id": 270554286,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643897367
    },
    {
        "content": "<p>[slack] &lt;ranocha&gt; <a href=\"https://github.com/search?q=OrdinaryDiffEq.jl&amp;type=Repositories\">OrdinaryDiffEq.jl</a> v6.6.6 <span aria-label=\"smiling devil\" class=\"emoji emoji-1f608\" role=\"img\" title=\"smiling devil\">:smiling_devil:</span></p>",
        "id": 270593629,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643912108
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Hi, @isaacsas is it here we ask question for Catalyst?<br>\nI am in trouble for resubmitting a paper, my code does not work anymore</p>",
        "id": 270628997,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643927732
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Sure, here is fine.</p>",
        "id": 270629334,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643927924
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; It doesn't work in the version you used originally either? We have had some breaking changes, but try to make note of them in the HISTORY.md file.</p>",
        "id": 270629395,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643927971
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; I did not save the manifest <span aria-label=\"disappointed\" class=\"emoji emoji-1f61e\" role=\"img\" title=\"disappointed\">:disappointed:</span><br>\nhopefully my student did but I cant get him now.<br>\nI think my transitions matrix has changed. I suspect the function <code>Catalyst.netstoichmat</code> has changed</p>",
        "id": 270629579,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643928086
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; between May and now…<br>\nI remember you cooked up this function for me</p>",
        "id": 270629737,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643928148
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Ahh, probably it is transposed from what you used. We realized we were not following the convention in the literature which is species by reactions.</p>",
        "id": 270630013,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643928315
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; ah</p>",
        "id": 270630040,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643928340
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; let me try</p>",
        "id": 270630047,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643928343
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Looks like we made that change as of version 9. So using 8.3 should have the old convention.</p>",
        "id": 270630527,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643928640
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Thank you for digging out</p>",
        "id": 270631356,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643929099
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; it is very nice from you</p>",
        "id": 270631461,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643929183
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; transpose seems to be indeed what is required</p>",
        "id": 270632000,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643929418
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span><span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 270632019,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643929425
    },
    {
        "content": "<p>[gitter] &lt;simone66b&gt; D'Oh! That was the problem. I was only doing using StochasticDiffEq. Thankyou!!</p>",
        "id": 270645014,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643932002
    },
    {
        "content": "<p>[gitter] &lt;simone66b&gt; <code>code test</code></p>",
        "id": 270645966,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643932624
    },
    {
        "content": "<p>[slack] &lt;ahojukka5&gt; I'm having a system of ODEs, about 30-40 dofs, consisting scalars, vectors and tensors. I'm using <a href=\"https://github.com/search?q=Tensors.jl&amp;type=Repositories\">Tensors.jl</a> to describe these. Is there some good practice on how this could make compatible with integrator interface easily? My initial idea is to create a bits type struct and then use <code>reinterpret</code> to map the data vector to that struct. It's probably going to be work but I'm wondering would there be some good alternatives for this?</p>",
        "id": 270666909,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643949256
    },
    {
        "content": "<p>[slack] &lt;pabloferz&gt; I'm on a similiar quest, and this is exactly the only approach I have found to work.</p>",
        "id": 270671759,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643954484
    },
    {
        "content": "<p>[slack] &lt;ahojukka5&gt; A nice idea would be to just define own type and implement necessary things to make it work with DifferentialEquations, but doing so will end up to <code>MethodError: no method matching oneunit(::Type{Any})</code></p>",
        "id": 270674060,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643957133
    },
    {
        "content": "<p>[slack] &lt;pabloferz&gt; Or <code>zero(::Type{Any})</code> or that <code>SparseDiffTools.jl</code> has only methods implemented for <code>AbstractArray{&lt;:Number}</code>.</p>",
        "id": 270675145,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643958387
    },
    {
        "content": "<p>[slack] &lt;pabloferz&gt; But, yeah. That would be a nicer interface, it was actually the first thing I tried.</p>",
        "id": 270675177,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643958433
    },
    {
        "content": "<p>[slack] &lt;ahojukka5&gt; reinterpreting is causing unnecessary memory allocations. And if a mutable vector is reinterpreted to a struct, the resulting data structure cannot be modified. Making this reinterpret \"trick\" to be quite impractical in this use case.</p>",
        "id": 270675959,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643959274
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Have you tried using <a href=\"https://github.com/search?q=ComponentArrays.jl&amp;type=Repositories\">ComponentArrays.jl</a>?</p>",
        "id": 270676688,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643959953
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; MatrixFreeOperator should do it</p>",
        "id": 270676724,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643960001
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; IIRC that's in SciMLBase or DiffEqOperators</p>",
        "id": 270676739,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643960013
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I thought you took a look at that?</p>",
        "id": 270676746,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643960017
    },
    {
        "content": "<p>[slack] &lt;ahojukka5&gt; Not yet. Better to take a look before starting to potentially reinvent a wheel.</p>",
        "id": 270677012,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643960245
    },
    {
        "content": "<p>[slack] &lt;<a href=\"http://johannes.ne\">johannes.ne</a>&gt; In <a href=\"https://github.com/search?q=ModelingToolkit.jl&amp;type=Repositories\">ModelingToolkit.jl</a>, what is the difference between <code>extend</code> and <code>compose</code> ?</p>\n<p>I want to make a system that uses two instances of a previously defined <code>@connector</code> and (here it seems intuitive to use <code>compose</code>), but it also \"extends\" a more basic system.</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>  @named base = BaseSystem()\n  @named con1 = MyConnector()\n  @named con2 = MyConnector()\n\n  # extend base and compose with connectors\nend```\nShould I just first extend and then compose? or can I do it in \"one fell swoop\"?\n</code></pre></div>",
        "id": 270685398,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643965196
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's inheritance vs composition</p>",
        "id": 270685772,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643965365
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>con1.x</code> and <code>con2.x</code> vs making them both part of the same system as <code>x</code></p>",
        "id": 270685825,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643965397
    },
    {
        "content": "<p>[slack] &lt;<a href=\"http://johannes.ne\">johannes.ne</a>&gt; So compose will keep the hierarchical structure while extend is equivalent to just creating the complete system in one <code>ODESystem</code> call?</p>",
        "id": 270686136,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643965564
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes</p>",
        "id": 270686296,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643965670
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; so it's just like any other programming language</p>",
        "id": 270686356,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643965693
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; \"usually\" composition is preferred (unlike what you're taught in school about object oriented programming <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span>), and inheritance is always a danger because it can make more things equal than you might think. But if you know it's safe, it's a good short hand because composition can get annoying with <code>con1.x ~ con2.x, con1.y ~ con2.y, ...</code>, but you really have to want that all matching variables are truly equal.</p>",
        "id": 270686445,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643965768
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; there's no way to make a subset equal when you inherit for example</p>",
        "id": 270686467,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643965785
    },
    {
        "content": "<p>[slack] &lt;<a href=\"http://johannes.ne\">johannes.ne</a>&gt; Great. Thank you. So if i want to do both should i just:</p>\n<div class=\"codehilite\" data-code-language=\"extended\"><pre><span></span><code>extended_and_composed = compose(extended, con1, con2)```\nwhere `newSystem` already contains eqs regarding `con1` and `con2` states?\n</code></pre></div>",
        "id": 270687558,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643966441
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; I know of MatrixFreeOperator. I thooght there will be a simpler interface. For example, MatrixFreeOperator does not store <code>u</code> like in JacVecOperator.</p>",
        "id": 270687764,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643966573
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; But as long as I know this is where to look, I ll manage</p>",
        "id": 270687828,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643966621
    },
    {
        "content": "<p>[slack] &lt;ahojukka5&gt; Nice tip, thanks. It looks that ComponentArrays is exactly the right tool for this kind of need.</p>",
        "id": 270687848,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643966628
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I don't think I've implemented the exact operator you're looking for then, a MatrixFreeOperator with stored <code>u</code> that is called in the function?</p>",
        "id": 270687948,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643966669
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; I need to know <code>u</code> (and p) to evaluate the differential:</p>\n<p>dF(u,p) . du</p>",
        "id": 270688058,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643966726
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; but</p>\n<p><code>function update_coefficients!(M::MatrixFreeOperator, u, p, t)</code></p>\n<p>is different from</p>\n<p><code>function update_coefficients!(L::JacVecOperator, u, p, t)</code> To me the right thing to do is the one of <code>JacVecOperator</code> , I might be missing a point in MatrixFreeOperator</p>",
        "id": 270688238,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643966836
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Wait, isnt it <code>AnalyticalJacVecOperator</code>?</p>",
        "id": 270688618,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643967053
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that exists? <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I forgot about that one if it's in there.</p>",
        "id": 270689394,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643967515
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; it is not in the docs</p>",
        "id": 270689560,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643967614
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; <a href=\"https://github.com/SciML/DiffEqOperators.jl/blob/master/src/jacvec_operators.jl#L167\">https://github.com/SciML/DiffEqOperators.jl/blob/master/src/jacvec_operators.jl#L167</a></p>",
        "id": 270689575,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643967625
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Can you please confirm (no docs…) that what is required here:<br>\n<a href=\"https://github.com/SciML/DiffEqOperators.jl/blob/master/src/jacvec_operators.jl#L231\">https://github.com/SciML/DiffEqOperators.jl/blob/master/src/jacvec_operators.jl#L231</a></p>\n<p>is to compute</p>\n<p>du = dF(u,p,t) . x</p>\n<p>?</p>",
        "id": 270690476,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643968127
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Krylov wants abstractvectors <span aria-label=\"disappointed\" class=\"emoji emoji-1f61e\" role=\"img\" title=\"disappointed\">:disappointed:</span><br>\nthere we go, reshape and friends</p>",
        "id": 270693497,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643969716
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; thats why I like KrylovKit</p>",
        "id": 270693632,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643969782
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; if this works, it is gona be fantastic: matrix-free stiff solver of neural network on gpu with 33e6 unknows + bifurcations + shooting of periodic orbits =&gt; paper on modulated travelling waves</p>",
        "id": 270694408,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643970216
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; we can wrap KrylovKit</p>",
        "id": 270695174,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643970662
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I thought it didn't allow preconditioners though?</p>",
        "id": 270695183,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643970666
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @Vedant did you ever do the KrylovKit wrapper?</p>",
        "id": 270695198,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643970677
    },
    {
        "content": "<p>[slack] &lt;<a href=\"http://johannes.ne\">johannes.ne</a>&gt; Ended up with</p>\n<div class=\"codehilite\" data-code-language=\"extended\"><pre><span></span><code>extended_and_composed = compose(extended, con1, con2)```\n</code></pre></div>",
        "id": 270695333,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643970744
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; you can precondition but you have to do it yoourself</p>",
        "id": 270695614,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643970920
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; <a href=\"https://github.com/rveltz/BifurcationKit.jl/blob/master/src/LinearSolver.jl#L165\">https://github.com/rveltz/BifurcationKit.jl/blob/master/src/LinearSolver.jl#L165</a></p>",
        "id": 270695657,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643970950
    },
    {
        "content": "<p>[slack] &lt;Vedant&gt; no, but i can work on the krylovkit wrapper for linearsolve.jl this Monday</p>",
        "id": 270695869,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643971055
    },
    {
        "content": "<p>[slack] &lt;Vedant&gt; @rveltz  passing in vec(u) to krylov.jl or iterativesolvers.jl doesn't work? likely because your operators need shape information?</p>",
        "id": 270696040,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643971147
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; sure, but I have to change my vector field. It should be OK, I am just faking my annoyance <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 270696190,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643971217
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; for 2d pde, it is convenient to use Matrices</p>",
        "id": 270696213,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643971237
    },
    {
        "content": "<p>[slack] &lt;Vedant&gt; it's an important problem to fix: matrix free operators and multidim arrays for spatial data</p>",
        "id": 270697378,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643971869
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Ok it is working now, full matrix free with my own jacobian</p>",
        "id": 270699827,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643973141
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; thank you guys</p>",
        "id": 270699835,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643973146
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; trying out the gpu now</p>",
        "id": 270699851,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643973155
    },
    {
        "content": "<p>[slack] &lt;<a href=\"http://johannes.ne\">johannes.ne</a>&gt; In MTK, can I set default values for states (not just initial values)?</p>\n<p>I want to create a reusable module: a function that returns a system (<code>PressurizedCompartment</code>) with am external pressure (<code>P_ext</code>), transmural pressure (<code>P_tm</code>) and an internal pressure (<code>P ~ P_ext + P_tm</code>).<br>\nIn most cases <code>P_ext</code> is 0 (so I want that as a default).</p>\n<p><code>P_tm</code> is usually controlled by a module that extends on this <code>PressurizedCompartment</code>, but in some cases I want to fix it to a specific value or to set it with a forcing function.</p>",
        "id": 270700070,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643973271
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I'm not sure what you mean by a value for a state that's not the initial condition? If it's a function of time it needs to be a function?</p>",
        "id": 270700562,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643973525
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; it runs <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 270702451,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643974621
    },
    {
        "content": "<p>[slack] &lt;<a href=\"http://johannes.ne\">johannes.ne</a>&gt; I some cases I want it to be constant over time, but in other cases I want to set it with a function.</p>\n<p>One extension of <code>PressurizedCompartment</code> is a blood vessel. In most cases it has an external pressure of 0, but in some cases it resides in another <code>PressurizedCompartment</code> e.g. the thorax. If it is in the thorax I want <code>vessel.P_ext ~ thorax.P</code> If it is not inside anything I want <code>vessel.P_ext ~ 0</code> . I also want to set <code>thorax.P_tm</code> to either a constant pressure or <code>forcing_fun(t)</code> based on actual measurements.</p>",
        "id": 270702504,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643974657
    },
    {
        "content": "<p>[slack] &lt;ahojukka5&gt; Hmm. I was a bit too hasty. It does not preserve data types, so e.g. symmetric 2. order tensor converts to just 9 element matrix and so on. Almost working well.</p>",
        "id": 270702952,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643974982
    },
    {
        "content": "<p>[slack] &lt;Fredrik Bagge Carlson&gt; It is possible, this example associates bounds with a state, you could adopt it to set a default value</p>\n<div class=\"codehilite\" data-code-language=\"struct\"><pre><span></span><code>Symbolics.option_to_metadata_type(::Val{:bounds}) = VariableBounds\ngetbounds(x::Num) = getbounds(Symbolics.unwrap(x))\n\n\"\"\"\n    getbounds(x)\n\nGet the bounds associated with symbolc variable `x`.\nCreate parameters with bounds like this```\n@parameters p [bounds=(-1, 1)]\n```\"\"\"\nfunction getbounds(x)\n    p = Symbolics.getparent(x, nothing)\n    p === nothing || (x = p)\n    Symbolics.getmetadata(x, VariableBounds, (-Inf, Inf))\nend```\n</code></pre></div>",
        "id": 270704002,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643975671
    },
    {
        "content": "<p>[slack] &lt;Fredrik Bagge Carlson&gt; It's adopted from the very top of <code>Modelingtoolkit/src/variables.jl</code></p>",
        "id": 270704064,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643975720
    },
    {
        "content": "<p>[slack] &lt;Fredrik Bagge Carlson&gt; You can use this strategy to associate any kind of information with variables, probability distributions, bounds, operating points etc.</p>",
        "id": 270704174,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643975775
    },
    {
        "content": "<p>[slack] &lt;<a href=\"http://johannes.ne\">johannes.ne</a>&gt; Thank you @Fredrik Bagge Carlson<br>\nI think that is still a bit above my Julia-understanding-level. Though it is quickly improving, so i may try to implement it later.</p>\n<p>For now, I will use conditions to set the fixed values, based on parameters in the factory function. Unfortunately that means I have to pass the parameters trough from the functions that extend on <code>PressurizedCompartment</code> .</p>",
        "id": 270710086,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643979274
    },
    {
        "content": "<p>[slack] &lt;<a href=\"http://johannes.ne\">johannes.ne</a>&gt; This is what I ended up with (for now):</p>\n<p>```\"\"\"</p>\n<h1>Arguments</h1>\n<p>- <code>ext_pressure</code> and <code>tm_pressure</code>: If set to a number{Float64}, <br>\n  this will fix the pressure to that value. <br>\n  If set to <code>\"free\"</code>, no equation is made for controling<br>\n  the state (this should be done in an inheriting system (e.g. <code>VascularCompartment()</code>)).</p>\n<p>\"\"\"<br>\nfunction PressurizedCompartment(;name, ext_pressure = 0., tm_pressure = \"free\")</p>\n<div class=\"codehilite\"><pre><span></span><code>sts = @variables P(t) P_ext(t) P_tm(t)\n\neqs = [\n    P ~ P_ext + P_tm\n]\n\nif tm_pressure != &quot;free&quot;\n    @assert typeof(tm_pressure) == Float64\n\n    push!(eqs, P_tm ~ tm_pressure)\nend\n\nif ext_pressure != &quot;free&quot;\n    @assert typeof(ext_pressure) == Float64\n\n    push!(eqs, P_ext ~ ext_pressure)\nend\n\nODESystem(eqs, t, sts, []; name)\n</code></pre></div>\n\n<p>end```</p>",
        "id": 270715697,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643982067
    },
    {
        "content": "<p>[slack] &lt;xyz230695&gt; @Weiqi Ji @chrisrackauckas <a href=\"https://arxiv.org/abs/2103.15341\">https://arxiv.org/abs/2103.15341</a><br>\nDoes  techniques used in this paper on this stiff Neural ODE generalize it's finding to optimization of stuff ODEs(without neural nets) ??</p>",
        "id": 270737292,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643991627
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes, it's really about eigenvalues of fitting equation</p>",
        "id": 270738164,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1643991976
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Hello, Projects!</p>\n<p>NumFOCUS is pleased to invite proposals for our <strong>1st round of Small Development Grants</strong> for 2022!</p>\n<p>We are excited to announce that the funding cap for proposals has been increased from $5,000 to $10,000.   This increase was approved by the NumFOCUS Board on January 13, 2022.</p>\n<p>**Apply Here:<a href=\"https://numfocus.typeform.com/to/mbtH7w**\">https://numfocus.typeform.com/to/mbtH7w**</a></p>\n<p>Timeline:<br>\n• <strong>Deadline for Proposal Submission: March 4, 2022</strong><br>\n• Projects will be Notified: April 15, 2022 (or sooner)<br>\nAvailable Funding:<br>\n• $49,000 plus $21,000 (discretionary) up to a maximum of $70,000<br>\n• Up to $10,000 per proposal<br>\nEligibility:<br>\n• Any NumFOCUS Fiscally Sponsored or Affiliated project may submit one proposal on behalf of the project per grant cycle.<br>\n    ◦ If you wish to solicit proposal ideas from your project community, the project leaders must organize their own review process to select the proposal that the leadership will put forward to NumFOCUS.<br>\n• Funding can be used for: code development, documentation work; website updates; workshops and sprints; educational, sustainability, and diversity initiatives, or other types of projects.<br>\n• Proposed work must be achievable within the 12 months following the award.<br>\n• The call is open to applicants from any nationality and can be performed at any university, institute, or business worldwide (US export laws permitting).<br>\nFunding Distribution:</p>\n<p>• For fiscally sponsored projects only, NumFOCUS can <strong>deposit the grant funding directly into the project’s account</strong>. The project would then submit invoices through the usual channels (i.e. Rocket) to pay the grant expenses.<br>\n• NumFOCUS can set up an <strong>independent contractor agreement</strong> with an individual or company.<br>\n• NumFOCUS can award the money as a <strong>grant or subcontract to a student or postdoc at a university</strong> (depending on the university's rules).<br>\n• NumFOCUS can <strong>directly pay for expenses</strong> associated with the grant (e.g. booking flights on behalf of project leaders to attend a workshop, per diems for travel days)<br>\nYou can see past successful proposals here:  <a href=\"https://numfocus.org/programs/small-development-grants\">https://numfocus.org/programs/small-development-grants</a>.</p>\n<p>_Please feel free to mailto:<a href=\"mailto:help@numfocus.org\">help@numfocus.org</a> if you have any questions._</p>",
        "id": 270784206,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644015353
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; hey! If i have some (noisy) data in the  (x, dx/dt) plane, can i find the ode using DataDrivenDiffEq?</p>",
        "id": 270830126,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644071812
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; data looks like:: <a href=\"https://files.slack.com/files-pri/T68168MUP-F031TLUUBMZ/download/summary.png\">https://files.slack.com/files-pri/T68168MUP-F031TLUUBMZ/download/summary.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F031TLUUBMZ/download/summary.png\"><img src=\"https://uploads.zulipusercontent.net/160b1e0629ef525baff13fb8febd10d78350ebf6/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303331544c5555424d5a2f646f776e6c6f61642f73756d6d6172792e706e67\"></a></div>",
        "id": 270830139,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644071838
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; I've been playing around but not sure about the right constructor to use for <code>ContinuousDataDrivenProblem</code></p>",
        "id": 270830163,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644071878
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; That would just be the direct symbolic regression call</p>",
        "id": 270830315,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644072090
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; I see -- thanks! What are the different use cases for SINDy vs symbolic regression? My undestanding of sindy was that it was basically sparse regression with some basis to find the equations (which is maybe totally wrong <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> )</p>",
        "id": 270830467,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644072295
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; SINDy takes timeseries data, computes derivatives, and then does symbolic regression</p>",
        "id": 270831053,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644073172
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; so you can just call the symbolic regression part with your data</p>",
        "id": 270831060,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644073179
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; Ah ok. Thank you, as always!</p>",
        "id": 270832819,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644075409
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 270859778,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644109954
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; While tracking down some sign issues in the adjoints of <a href=\"https://github.com/search?q=DiffEqSensitivity.jl&amp;type=Repositories\">DiffEqSensitivity.jl</a> I wrote down these notes to organize my thoughts, perhaps they are useful for other people here:<br>\n<a href=\"https://arnostrouwen.com/post/adjoint-sensitivity/\">https://arnostrouwen.com/post/adjoint-sensitivity/</a></p>",
        "id": 270915042,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644185735
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; nice!</p>",
        "id": 270916895,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644188464
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I like this derivation</p>",
        "id": 270916898,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644188467
    },
    {
        "content": "<p>[slack] &lt;Frans Zdyb&gt; Hello,<br>\nI have a physical system which I think could be modeled with a Neural ODE, but I need some help formulating the problem - I hope that's ok to ask for..<br>\nI have two input time series, <code>mod(t)</code> and <code>temp(t)</code>, and an output time series <code>ac(t)</code>. I'd like to estimate a function <code>f(mod(t), temp(t)) = ac(t)</code>, on a dataset of measurements of all three variables.<br>\nPhysically, <code>mod</code> is a measurement of <code>ac</code>, heavily distorted by <code>temp</code>. My task is to remove <code>temp</code> dependence from <code>mod</code>, thus recovering <code>ac</code>.<br>\nHere's a sample of the data, where the <code>ac</code> is constant throughout.<br>\nAny thoughts/tips/links are much appreciated!: <a href=\"https://files.slack.com/files-pri/T68168MUP-F031S1VSFRU/download/calibration.png\">https://files.slack.com/files-pri/T68168MUP-F031S1VSFRU/download/calibration.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F031S1VSFRU/download/calibration.png\"><img src=\"https://uploads.zulipusercontent.net/f26e1bedc030ec0f01aa41a6d9c5b897654afb3b/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303331533156534652552f646f776e6c6f61642f63616c6962726174696f6e2e706e67\"></a></div>",
        "id": 270990761,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644246254
    },
    {
        "content": "<p>[slack] &lt;Frans Zdyb&gt; Hello,<br>\nI have a physical system which I think could be modeled with a Neural ODE, but I need some help formulating the problem - I hope that's ok to ask for..<br>\nI have two input time series, <code>mod(t)</code> and <code>temp(t)</code>, and an output time series <code>ac(t)</code>. I'd like to estimate a function <code>f(mod(t), temp(t)) = ac(t)</code>, on a dataset of measurements of all three variables.<br>\nPhysically, <code>mod</code> is a measurement of <code>ac</code>, heavily distorted by <code>temp</code>. My task is to remove <code>temp</code> dependence from <code>mod</code>, thus recovering <code>ac</code>.<br>\nMy thinking is to formulate the problem as <code>ac' = NN(mod(t), temp(t))</code> , but I'm not sure that's the correct framing.<br>\nHere's a sample of the data, where the <code>ac</code> is constant throughout.<br>\nAny thoughts/tips/links are much appreciated!</p>",
        "id": 270990968,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644246323
    },
    {
        "content": "<p>[slack] &lt;Frans Zdyb&gt; Hello,<br>\nI have a physical system which I think could be modeled with a Neural ODE, but I need some help formulating the problem - I hope that's ok to ask for..<br>\nI have two input time series, <code>mod(t)</code> and <code>temp(t)</code>, and an output time series <code>ac(t)</code>. I'd like to estimate a function <code>f(mod(t), temp(t)) = ac(t)</code>, on a dataset of measurements of all three variables.<br>\nPhysically, <code>mod</code> is a measurement of <code>ac</code>, heavily distorted by <code>temp</code>. My task is to remove <code>temp</code> dependence from <code>mod</code>, thus recovering <code>ac</code>.<br>\nMy thinking is to formulate the problem as <code>ac' = NN(mod(t), temp(t))</code> , but I'm not sure that's the correct framing.<br>\nHere's a sample of the data, where the <code>ac</code> is constant throughout, for three different instances of the system.<br>\nAny thoughts/tips/links are much appreciated!</p>",
        "id": 270991200,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644246408
    },
    {
        "content": "<p>[slack] &lt;nathanaelbosch&gt; Hi, I recently found out about \"parallel-in-time\" methods (<a href=\"https://parallel-in-time.org/\">https://parallel-in-time.org/</a>), e.g. Parareal, RIDC, PFASST. Are there any Julia / DiffEq implementations of methods of that type?</p>",
        "id": 271037329,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644265641
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah, some people have done it.</p>",
        "id": 271038066,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644266017
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Those methods are really really suboptimal though. I think the best application I've seen is more efficient than standard methods at 128 cores</p>",
        "id": 271038136,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644266043
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; There's a much much better way to do this though, and we should have a paper go out some time this year on it...</p>",
        "id": 271038173,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644266073
    },
    {
        "content": "<p>[slack] &lt;nathanaelbosch&gt; That's also why I'm intrigued. O(log(N)) instead of O(N) sounds really nice, but I didn't hear about that topic until recently. And from what I read, either they consider very large-scale problems, or don't discuss actual implementation in detail.</p>",
        "id": 271038286,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644266145
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what's the O(log(N)) vs O(N) thing?</p>",
        "id": 271038384,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644266183
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I think parallel in time is just the wrong way to parallelize unless you're solving an inverse problem</p>",
        "id": 271038408,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644266198
    },
    {
        "content": "<p>[slack] &lt;nathanaelbosch&gt; Even though from what I read, RIDC for example doesn't even aim for the supercomputer case but rather more \"normal\" problems.</p>",
        "id": 271038464,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644266226
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah, I haven't seen it hit the right performance from normal cases</p>",
        "id": 271038523,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644266267
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I've had a few students over the years work on a few things they didn't release, and benchmark a few things.</p>",
        "id": 271038569,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644266282
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It's just the convergence rate is really slow.</p>",
        "id": 271038606,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644266289
    },
    {
        "content": "<p>[slack] &lt;nathanaelbosch&gt; &gt; what's the O(log(N)) vs O(N) thing?<br>\nI thought that's basically the theoretical speed-up of most of these (when you have enough cores, and I'd assume disregarding additional communication overhead etc).</p>",
        "id": 271038607,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644266292
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah... though the constant is the hard part <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 271038716,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644266374
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; though it's an interesting research area, and it has more to explore</p>",
        "id": 271038763,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644266394
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and we have a few things for parallelism, just not fully in time.</p>",
        "id": 271038816,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644266403
    },
    {
        "content": "<p>[slack] &lt;nathanaelbosch&gt; Well I'm looking forward to your paper then <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 271038839,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644266415
    },
    {
        "content": "<p>[slack] &lt;wnoise&gt; Are there standard or \"best-practice\" ways to feed external data to a simulation?</p>\n<p>Currently I'm using a <code>PeriodicCallback</code> to alter the state values <code>u</code> .  This does work, and has the nice feature of saving the history of the driving values with the driven values.  The downside is that the obvious way of constructing the updating function creates a closure (capturing the lookup table) so it can be called standalone by the <code>PeriodicCallback</code>.  I suppose passing the lookup table via the parameters would work.</p>\n<p>However, this is actually sampled data.  I was thinking I should be interpolating between the sample times.  But updating the <code>u</code> values in this case seems not great as it would then happen on every timestep.  I could instead not make the external drivers part of the state (instead directly calculating them from the lookup tables in the update function), but then  the history isn't saved, and plotting the solution with the drivers is harder.</p>",
        "id": 271038880,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644266441
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that's probably best. Using an interpolant via DataInterpolations can work, but it can be slow.</p>",
        "id": 271038921,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644266474
    },
    {
        "content": "<p>[slack] &lt;nathanaelbosch&gt; But it's a bit unfortunate if there's not a ready Julia implementation to play around with, I'm not looking forward to trying the C++ / Fortran codes <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 271039269,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644266691
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I can probably dig an old one up out of my email</p>",
        "id": 271039559,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644266861
    },
    {
        "content": "<p>[slack] &lt;wnoise&gt; By that you mean update the state with <code>PeriodicCallback</code> ?</p>",
        "id": 271041843,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644268011
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes</p>",
        "id": 271042718,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644268472
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; unless the data is very dense compared to the dt</p>",
        "id": 271042741,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644268486
    },
    {
        "content": "<p>[slack] &lt;wnoise&gt; Great, thanks.</p>",
        "id": 271042915,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644268577
    },
    {
        "content": "<p>[slack] &lt;nathanaelbosch&gt; If it's no effort and rather usable code I would be interested to have a look <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> If not don't worry. Thanks anyways!</p>",
        "id": 271045404,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644269846
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://bitbucket.org/sperugin/parareal-implementation-and-simulation-in-julia/src/master/parareal.jl\">https://bitbucket.org/sperugin/parareal-implementation-and-simulation-in-julia/src/master/parareal.jl</a> and a private one</p>",
        "id": 271046761,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644270418
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; let me ask about the private one, it went stale.</p>",
        "id": 271046783,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644270423
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; for the record, I feed in forcing data by having it as a field nested somewhere in my step function type (which is a callable struct), and I use an interpolation from <code>Interpolations.jl</code> evaluated at the current solver <code>t</code>. This is, in some sense, less correct than using a callback, but it is much more convenient and seems to work so long as the forcing is not varying too much within the solver's <code>dt</code> .</p>",
        "id": 271047355,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644270590
    },
    {
        "content": "<p>[slack] &lt;nathanaelbosch&gt; Thanks!</p>",
        "id": 271047427,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644270614
    },
    {
        "content": "<p>[slack] &lt;nathanaelbosch&gt; Oh wow, Julia 0.5.1 <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 271047433,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644270617
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; remind me tomorrow and I'll send you a code.</p>",
        "id": 271051110,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644272274
    },
    {
        "content": "<p>[slack] &lt;George Gkountouras&gt; Would parallel-in-time schemes work for fully implicit equations?</p>",
        "id": 271059394,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644276886
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes</p>",
        "id": 271059423,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644276907
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; well, index 1</p>",
        "id": 271059440,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644276919
    },
    {
        "content": "<p>[slack] &lt;George Gkountouras&gt; Oof <img alt=\":today-i-learned:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/7178/emoji/images/16512.png\" title=\"today-i-learned\"></p>",
        "id": 271060292,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644277433
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; Do reverse-mode (adjoint) sensitivity analysis methods support callbacks? The documentation makes it sound like only <code>ForwardDiffSensitivity</code> does.</p>",
        "id": 271129362,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644328123
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes they do. @frankschae did that this summer</p>",
        "id": 271129576,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644328183
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; which part of the docs makes it sound like it's not supported?</p>",
        "id": 271129589,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644328190
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; <a href=\"https://diffeq.sciml.ai/stable/analysis/sensitivity/\">https://diffeq.sciml.ai/stable/analysis/sensitivity/</a></p>",
        "id": 271129697,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644328221
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; It's only mentioned for <code>ForwardDiffSensitivity</code></p>",
        "id": 271129718,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644328236
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh @frankschae could you update it? Maybe reverse it now: mention which ones don't support callbacks.</p>",
        "id": 271129766,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644328268
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; ForwardSensitivity and the LSS methods are the ones?</p>",
        "id": 271129850,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644328317
    },
    {
        "content": "<p>[slack] &lt;frankschae&gt; oh yeah. Good catch. I think we always just updated: <a href=\"https://diffeqflux.sciml.ai/dev/examples/hybrid_diffeq/\">https://diffeqflux.sciml.ai/dev/examples/hybrid_diffeq/</a> (and the page that follows). I’ll send a PR.</p>",
        "id": 271130495,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644328598
    },
    {
        "content": "<p>[slack] &lt;Lorenz&gt; Hi everyone, I'm currently looking into the CG3 algorithm in <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a> but I cannot seem to find the used parameters from the Butcher tableau. Do you know where can I find them?</p>",
        "id": 271138576,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644331787
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; not in <a href=\"https://github.com/SciML/OrdinaryDiffEq.jl/tree/master/src/tableaus\">https://github.com/SciML/OrdinaryDiffEq.jl/tree/master/src/tableaus</a>?</p>",
        "id": 271139738,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644332284
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/SciML/OrdinaryDiffEq.jl/blob/b563fcce03ee83d354c957a8a9c4f71bb85a56c1/src/perform_step/linear_perform_step.jl#L163-L181\">https://github.com/SciML/OrdinaryDiffEq.jl/blob/b563fcce03ee83d354c957a8a9c4f71bb85a56c1/src/perform_step/linear_perform_step.jl#L163-L181</a></p>",
        "id": 271139830,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644332328
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; looks like it's just baked into the perform_step.</p>",
        "id": 271139842,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644332336
    },
    {
        "content": "<p>[slack] &lt;Lorenz&gt; ah yes, I couldn't find the tableau, but the second link is exactly what I was looking for thx</p>",
        "id": 271140027,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644332406
    },
    {
        "content": "<p>[slack] &lt;Lorenz&gt; To me it seems like they differ from Geometric Numerical Integration Structure-Preserving Algorithms for Ordinary Differential Equations Second Edition by Hairer (<a href=\"https://link.springer.com/book/10.1007/3-540-30666-8\">https://link.springer.com/book/10.1007/3-540-30666-8</a>) Table 8.1 in that A31 and A21 are switched, did I misunderstand the code or is that also a valid parametrization?</p>",
        "id": 271140832,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644332761
    },
    {
        "content": "<p>[slack] &lt;Lorenz&gt; on line 174</p>",
        "id": 271140970,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644332807
    },
    {
        "content": "<p>[slack] &lt;ilyaorson&gt; Does DiffEq has a spectral methods package (like the ones in ApproxFun)?</p>",
        "id": 271147859,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644335560
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; hmm check the PR</p>",
        "id": 271151413,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644336905
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I think that might've been a case where we found a typo in the book?</p>",
        "id": 271151431,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644336914
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; not yet</p>",
        "id": 271151445,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644336921
    },
    {
        "content": "<p>[slack] &lt;Lorenz&gt; you mean this one?<br>\n<a href=\"https://github.com/SciML/OrdinaryDiffEq.jl/pull/1240\">https://github.com/SciML/OrdinaryDiffEq.jl/pull/1240</a></p>",
        "id": 271152271,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644337260
    },
    {
        "content": "<p>[gitter] &lt;adrianaprotondo&gt; Hello, I am defining an ODEProbelm with modellingtoolkit using ODESytem and structural_simplify. Is it possible to access some of the observable states through a callback function? I know I can access the states through the integrator but I need the observable states that have been reduced by the structural_simplify function.</p>",
        "id": 271158752,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644340003
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it should just work to use them, does it not?</p>",
        "id": 271160246,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644340635
    },
    {
        "content": "<p>[slack] &lt;contradict&gt; <a href=\"https://github.com/SciML/ModelingToolkit.jl/issues/1396\">https://github.com/SciML/ModelingToolkit.jl/issues/1396</a></p>",
        "id": 271166709,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644343335
    },
    {
        "content": "<p>[slack] &lt;nathanaelbosch&gt; Hey @chrisrackauckas, you wanted me to remind you to send me another code</p>",
        "id": 271192564,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644355174
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/ignace-computing/DiffEqParareal.jl\">https://github.com/ignace-computing/DiffEqParareal.jl</a></p>",
        "id": 271193371,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644355604
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 271228957,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644380163
    },
    {
        "content": "<p>[slack] &lt;Nick Jordan&gt; Hello, this could be a stupid question, I'm am wondering why even we want to use symbolic regression for the lotka-volterra equation instead of just numerical regression. Is it just a showcase that symbolic regression works? Or somehow we can benefit from the expression for this equation particularly?</p>",
        "id": 271237869,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644389941
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; This example broke:<br>\n<a href=\"https://turing.ml/dev/tutorials/10-bayesian-differential-equations/\">https://turing.ml/dev/tutorials/10-bayesian-differential-equations/</a><br>\nsearch for \"converge\" the nearby picture makes it clear that that is not the case.</p>",
        "id": 271239663,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644391776
    },
    {
        "content": "<p>[slack] &lt;devmotion&gt; There are some open issues and PRs IIRC.</p>",
        "id": 271242009,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644393849
    },
    {
        "content": "<p>[slack] &lt;ignace-computing&gt; Hi @nathanaelbosch, I am one of the authors of the code above (<a href=\"https://github.com/search?q=DiffEqParareal.jl&amp;type=Repositories\">DiffEqParareal.jl</a>). If you want to get in touch, here I am <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>. What are you planning to use PinT for?</p>",
        "id": 271244280,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644395573
    },
    {
        "content": "<p>[slack] &lt;Lorenz&gt; I feel like the condition sum_{ij} b_i * a_{ij} c_j = 1/6 is fulfilled by table 8.1 in the book, while it is not in the code as is</p>",
        "id": 271246228,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644396848
    },
    {
        "content": "<p>[slack] &lt;sofiajohn&gt; Hello, I am running into an error where whenever I add this function asking to call the maximum of two values. The error states First function call produced NaNs when I attempt to solve the ODE. This is my code. Any advice?</p>",
        "id": 271248384,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644398216
    },
    {
        "content": "<p>[slack] &lt;sofiajohn&gt; ```function bladder_cancer_ode(du,u, p,t) HI, HN, LI, LN, A, S = u<br>\n ρHI, ρHN, ρLI, ρLN, K, ρA, ρS, λA, λS, β, η, λAS = p<br>\n du[1] = dHI = ρHI<em>HI</em>(1-(HI+ HN + LI + LN)/K)-((2 * max((A/(S+A)-0.5),0))*HI)<br>\ndu[2] = dHN = ρHN<em>HN</em>(1-(HI+ HN + LI + LN)/K)<br>\ndu[3] = dLI = ρLI<em>LI</em>(1-(HI+ HN + LI + LN)/K)<br>\ndu[4] = dLN = ρLN<em>LN</em>(1-(HI+ HN + LI + LN)/K)<br>\ndu[5] = dA  = ρA<em>(HI + LI)+ β</em>BCG/(η + BCG) - λA*A<br>\ndu[6] = dS  = ρS<em>(HN + LN) - λS</em>S</p>\n<p>end ```</p>",
        "id": 271248464,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644398278
    },
    {
        "content": "<p>[slack] &lt;nathanaelbosch&gt; Thanks for sharing the repo! And hi @ignace-computing <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> I'm doing a PhD on probabilistic ODE solvers (such as those implemented here: <a href=\"https://github.com/nathanaelbosch/ProbNumDiffEq.jl\">https://github.com/nathanaelbosch/ProbNumDiffEq.jl</a>) and I wondered if it makes sense to look a bit more into time parallelization, so I mostly want to get a feel for how parareal works and how useful it can be. Don't expect any actual applications on real-world problems from me <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 271251118,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644399777
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; For what application? The UDE? From the UDE you would learn mechanism, which is the point of many scientific applications, not prediction.</p>",
        "id": 271255169,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644401809
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Are you dividing by zero at your initial condition?</p>",
        "id": 271255219,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644401833
    },
    {
        "content": "<p>[slack] &lt;sofiajohn&gt; yes, is there a way to keep the initial condition at zero while still using the max function?</p>",
        "id": 271264651,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644407098
    },
    {
        "content": "<p>[slack] &lt;George Gkountouras&gt; Does DiffEq support fractional order derivatives? I found some .jl packages, but it would be nice to have the common <code>solve</code> interface. Specifically, half-a-capacitor comes up in some MTK applications.</p>",
        "id": 271274081,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644412446
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; only through the PDE interface</p>",
        "id": 271274644,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644412751
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but <a href=\"https://github.com/SciFracX/FractionalDiffEq.jl\">https://github.com/SciFracX/FractionalDiffEq.jl</a> does it.</p>",
        "id": 271274650,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644412753
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; I think some of the code in that tutorial is old. Like they are still using the <code>mapreduce</code> command I believe. Can you post the code and error, so that we can see @Arno Strouwen</p>",
        "id": 271290620,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644418909
    },
    {
        "content": "<p>[slack] &lt;Antoine Levitt&gt; DiffEq is trying to use autodiff behind my back, I'm just trying to do an implicit method with an explicit jacobian (it's tridiagonal) and it's giving me a forwarddiff-related error. Am I doing something wrong?</p>\n<div class=\"codehilite\" data-code-language=\"prob\"><pre><span></span><code>@time sol = solve(prob, Rodas5(), reltol=1e-4, abstol=1e-4)```\ngets me an Float(Dual) conversion error. It shouldn't do anything like that if I pass the jacobian explicitly, right?\n</code></pre></div>",
        "id": 271298046,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644421783
    },
    {
        "content": "<p>[slack] &lt;Antoine Levitt&gt; I had to search quite a bit in the docs for that jac option because the docs really don't want me to pass a jacobian explicitly</p>",
        "id": 271298303,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644421871
    },
    {
        "content": "<p>[slack] &lt;Antoine Levitt&gt; well KenCarp4 works...</p>",
        "id": 271299273,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644422233
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>Rodas5(autodiff=false)</code></p>",
        "id": 271300489,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644422637
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; rosenbrock uses a tgrad too</p>",
        "id": 271300550,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644422646
    },
    {
        "content": "<p>[slack] &lt;Antoine Levitt&gt; ah I see, so I should pass it an explicit time derivative, thanks</p>",
        "id": 271302025,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644423201
    },
    {
        "content": "<p>[slack] &lt;Nick Jordan&gt; I see, forgive my ingnorance</p>",
        "id": 271312912,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644426942
    },
    {
        "content": "<p>[slack] &lt;Pengfei Song&gt; Hello all! Except for the simple discretization, are there better ways to solve differential equations with integral? How to couple <a href=\"https://github.com/search?q=Quadrature.jl&amp;type=Repositories\">Quadrature.jl</a> and <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a> in a good way? For example. Thank you: <a href=\"https://files.slack.com/files-pri/T68168MUP-F032BS7KAE9/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F032BS7KAE9/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F032BS7KAE9/download/image.png\"><img src=\"https://uploads.zulipusercontent.net/98562517f9600d8454c48b3b4aa1ecaae9afa974/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d463033324253374b4145392f646f776e6c6f61642f696d6167652e706e67\"></a></div>",
        "id": 271360369,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644447529
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; integral in time or space?</p>",
        "id": 271360837,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644447754
    },
    {
        "content": "<p>[slack] &lt;Gabriel Baraldi&gt; the examples seem to be in space</p>",
        "id": 271361176,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644447946
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; writing down an analytical solution of the interpolation scheme in space is usually a good idea.</p>",
        "id": 271361282,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644447988
    },
    {
        "content": "<p>[slack] &lt;Pengfei Song&gt; Happy for idol's response. Thank you all. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 271363569,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644449436
    },
    {
        "content": "<p>[slack] &lt;Nikhil Yewale&gt; Went through DMDs from DataDrivenDiffEq packages again. Overall it seems like DMD's (the standard ones) can't predict forward time much accurately(at least for the fluid-flow problems). I have no experience with Control with DMD(or DMDc). Does it also generalize poorly if we used different input/forcing than the ones used in training purpose of <code>x'=Ax + Bu</code>?</p>",
        "id": 271382681,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644464463
    },
    {
        "content": "<p>[slack] &lt;Fredrik Bagge Carlson&gt; One big weakness of DMD for control applications is that it does not estimate a noise model and observer along with the dynamics. Hence, if you have any disturbance acting on the system other than pure measurement noise, it's going to suffer.</p>\n<p>DMDc is basically a naive version of the subspace identification methods that were developed in the 90s,like N4sid, MOESP, CVA and ERA/OKID. I expect them all to be better suited for actual control applications</p>",
        "id": 271387783,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644470790
    },
    {
        "content": "<p>[slack] &lt;Nikhil Yewale&gt; @Fredrik Bagge Carlson I meant about the use of DMDc with Data generated from high-fidelity simulations(so they do not have measurement noise) for creating a reduced order-model.</p>",
        "id": 271389059,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644472381
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; You would need to use a conditional instead of <code>max</code></p>",
        "id": 271404893,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644484884
    },
    {
        "content": "<p>[slack] &lt;Jason Pekos&gt; Is there a way I can set <code>dt</code> to be less than one? e.g. I am attempting to solve:<br>\n<code>solution = solve(prob_markov, FunctionMap(), scale_by_time = true, dt = 1/2)</code><br>\nAnd this throws an error: <code>ERROR: InexactError: Int64(0.5)</code>. Guessing that I can’t and I’ll need to change my time vector, but any help is greatly appreciated.</p>",
        "id": 271502233,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644530821
    },
    {
        "content": "<p>[slack] &lt;Jose Daniel Lara&gt; hi @chrisrackauckas any hints on how to try to fix this? I am testing DABDF2 and DFBDF with PSID and post callback it throws this error.</p>\n<p>```┌ Error: Execution failed<br>\n│   exception =<br>\n│    type Nothing has no field α<br>\n│    Stacktrace:<br>\n│      [1] setproperty!(x::Nothing, f::Symbol, v::Float64)<br>\n│        @ Base ./Base.jl:43<br>\n│      [2] calc_W!<br>\n│        @ ~/.julia/packages/OrdinaryDiffEq/Op0Oq/src/derivative_utils.jl:549 [inlined]<br>\n│      [3] update_W!<br>\n│        @ ~/.julia/packages/OrdinaryDiffEq/Op0Oq/src/derivative_utils.jl:653 [inlined]<br>\n│      [4] nlsolve!(nlsolver::OrdinaryDiffEq.NLSolver{NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Rational{Int64}, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, SparseArrays.SparseMatrixCSC{Float64, Int64}, SparseArrays.SparseMatrixCSC{Float64, Int64}, Nothing, Nothing, LinearSolve.LinearCache{SparseArrays.SparseMatrixCSC{Float64, Int64}, Vector{Float64}, Vector{Float64}, SciMLBase.NullParameters, Nothing, SuiteSparse.UMFPACK.UmfpackLU{Float64, Int64}, LinearSolve.InvPreconditioner{LinearAlgebra.Diagonal{Float64, Vector{Float64}}}, LinearAlgebra.Diagonal{Float64, Vector{Float64}}, Float64}}}, integrator::OrdinaryDiffEq.ODEIntegrator{DABDF2{12, true, Nothing, NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, typeof(OrdinaryDiffEq.DEFAULT_PRECS), Val{:forward}, true, nothing}, true, Vector{Float64}, Vector{Float64}, Float64, PowerSimulationsDynamics.SimulationInputs, Float64, Float64, Float64, Float64, Vector{Vector{Float64}}, DAESolution{Float64, 2, Vector{Vector{Float64}}, Nothing, Nothing, Nothing, Vector{Float64}, DAEProblem{Vector{Float64}, Vector{Float64}, Tuple{Float64, Float64}, true, PowerSimulationsDynamics.SimulationInputs, DAEFunction{true, PowerSimulationsDynamics.SystemModel{ResidualModel, PowerSimulationsDynamics.SimCache{typeof(PowerSimulationsDynamics.system_residual!)}}, Nothing, PowerSimulationsDynamics.var\"<a href=\"https://github.com/JuliaLang/julia/issues/179\">#179</a>#180\", PowerSimulationsDynamics.JacobianFunctionWrapper{PowerSimulationsDynamics.var\"<a href=\"https://github.com/JuliaLang/julia/issues/52\">#52</a>#54\"{ForwardDiff.JacobianConfig{ForwardDiff.Tag{PowerSimulationsDynamics.var\"<a href=\"https://github.com/JuliaLang/julia/issues/51\">#51</a>#53\"{PowerSimulationsDynamics.SystemModel{ResidualModel, PowerSimulationsDynamics.JacobianCache{typeof(PowerSimulationsDynamics.system_residual!), ForwardDiff.Dual{ForwardDiff.Tag{typeof(PowerSimulationsDynamics.system_residual!), Float64}, Float64, 12}}}, Int64}, Float64}, Float64, 12, Tuple{Vector{ForwardDiff.Dual{ForwardDiff.Tag{PowerSimulationsDynamics.var\"<a href=\"https://github.com/JuliaLang/julia/issues/51\">#51</a>#53\"{PowerSimulationsDynamics.SystemModel{ResidualModel, PowerSimulationsDynamics.JacobianCache{typeof(PowerSimulationsDynamics.system_residual!), ForwardDiff.Dual{ForwardDiff.Tag{typeof(PowerSimulationsDynamics.system_residual!), Float64}, Float64, 12}}}, Int64}, Float64}, Float64, 12}}, Vector{ForwardDiff.Dual{ForwardDiff.Tag{PowerSimulationsDynamics.var\"<a href=\"https://github.com/JuliaLang/julia/issues/51\">#51</a>#53\"{PowerSimulationsDynamics.SystemModel{ResidualModel, PowerSimulationsDynamics.JacobianCache{typeof(PowerSimulationsDynamics.system_residual!), ForwardDiff.Dual{ForwardDiff.Tag{typeof(PowerSimulationsDynamics.system_residual!), Float64}, Float64, 12}}}, Int64}, Float64}, Float64, 12}}}}, PowerSimulationsDynamics.var\"<a href=\"https://github.com/JuliaLang/julia/issues/51\">#51</a>#53\"{PowerSimulationsDynamics.SystemModel{ResidualModel, PowerSimulationsDynamics.JacobianCache{typeof(PowerSimulationsDynamics.system_residual!), ForwardDiff.Dual{ForwardDiff.Tag{typeof(PowerSimulationsDynamics.system_residual!), Float64}, Float64, 12}}}, Int64}, Int64}, SparseArrays.SparseMatrixCSC{Float64, Int64}}, Nothing, Nothing, SparseArrays.SparseMatrixCSC{Float64, Int64}, SparseArrays.SparseMatrixCSC{Float64, Int64}, Nothing, Nothing, Nothing, Nothing, Nothing}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Vector{Bool}}, DABDF2{12, true, Nothing, NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, typeof(OrdinaryDiffEq.DEFAULT_PRECS), Val{:forward}, true, nothing}, OrdinaryDiffEq.InterpolationData{DAEFunction{true, PowerSimulationsDynamics.SystemModel{ResidualModel, PowerSimulationsDynamics.SimCache{typeof(PowerSimulationsDynamics.system_residual!)}}, Nothing, PowerSimulationsDynamics.var\"<a href=\"https://github.com/JuliaLang/julia/issues/179\">#179</a>#180\", PowerSimulationsDynamics.JacobianFunctionWrapper{PowerSimulationsDynamics.var\"<a href=\"https://github.com/JuliaLang/julia/issues/52\">#52</a>#54\"{ForwardDiff.JacobianConfig{ForwardDiff.Tag{PowerSimulationsDynamics.var\"<a href=\"https://github.com/JuliaLang/julia/issues/51\">#51</a>#53\"{PowerSimulationsDynamics.SystemModel{ResidualModel, PowerSimulationsDynamics.JacobianCache{typeof(PowerSimulationsDynamics.system_residual!), ForwardDiff.Dual{ForwardDiff.Tag{typeof(PowerSimulationsDynamics.system_residual!), Float64}, Float64, 12}}}, Int64}, Float64}, Float64, 12, Tuple{Vector{ForwardDiff.Dual{ForwardDiff.Tag{PowerSimulationsDynamics.var\"<a href=\"https://github.com/JuliaLang/julia/issues/51\">#51</a>#53\"{PowerSimulationsDynamics.SystemModel{ResidualModel, PowerSimulationsDynamics.JacobianCache{typeof(PowerSimulationsDynamics.system_residual!), ForwardDiff.Dual{ForwardDiff.Tag{typeof(PowerSimulationsDynamics.system_residual!), Float64}, Float64, 12}}}, Int64}, Float64}, Float64, 12}}, Vector{ForwardDiff.Dual{ForwardDiff.Tag{PowerSimulationsDynamics.var\"<a href=\"https://github.com/JuliaLang/julia/issues/51\">#51</a>#53\"{PowerSimulationsDynamics.SystemModel{ResidualModel, PowerSimulationsDynamics.JacobianCache{typeof(PowerSimulationsDynamics.system_residual!), ForwardDiff.Dual{ForwardDiff.Tag{typeof(PowerSimulationsDynamics.system_residual!), Float64}, Float64, 12}}}, Int64}, Float64}, Float64, 12}}}}, PowerSimulationsDynamics.var\"<a href=\"https://github.com/JuliaLang/julia/issues/51\">#51</a>#53\"{PowerSimulationsDynamics.SystemModel{ResidualModel, PowerSimulationsDynamics.JacobianCache{typeof(PowerSimulationsDynamics.system_residual!), ForwardDiff.Dual{ForwardDiff.Tag{typeof(PowerSimulationsDynamics.system_residual!), Float64}, Float64, 12}}}, Int64}, Int64}, SparseArrays.SparseMatrixCSC{Float64, Int64}}, Nothing, Nothing, SparseArrays.SparseMatrixCSC{Float64, Int64}, SparseArrays.SparseMatrixCSC{Float64, Int64}, Nothing, Nothing, Nothing, Nothing, Nothing}, Vector{Vector{Float64}}, Vector{Float64}, Vector{Vector{Vector{Float64}}}, OrdinaryDiffEq.DABDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.NLSolver{NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Rational{Int64}, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, SparseArrays.SparseMatrixCSC{Float64, Int64}, SparseArrays.SparseMatrixCSC{Float64, Int64}, Nothing, Nothing, LinearSolve.LinearCache{SparseArrays.SparseMatrixCSC{Float64, Int64}, Vector{Float64}, Vector{Float64}, SciMLBase.NullParameters, Nothing, SuiteSparse.UMFPACK.UmfpackLU{Float64, Int64}, LinearSolve.InvPreconditioner{LinearAlgebra.Diagonal{Float64, Vector{Float64}}}, LinearAlgebra.Diagonal{Float64, Vector{Float64}}, Float64}}}, Float64}}, DiffEqBase.DEStats}, DAEFunction{true, PowerSimulationsDynamics.SystemModel{ResidualModel, PowerSimulationsDynamics.SimCache{typeof(PowerSimulationsDynamics.system_residual!)}}, Nothing, PowerSimulationsDynamics.var\"<a href=\"https://github.com/JuliaLang/julia/issues/179\">#179</a>#180\", PowerSimulationsDynamics.JacobianFunctionWrapper{PowerSimulationsDynamics.var\"<a href=\"https://github.com/JuliaLang/julia/issues/52\">#52</a>#54\"{ForwardDiff.JacobianConfig{ForwardDiff.Tag{PowerSimulationsDynamics.var\"<a href=\"https://github.com/JuliaLang/julia/issues/51\">#51</a>#53\"{PowerSimulationsDynamics.SystemModel{ResidualModel, PowerSimulationsDynamics.JacobianCache{typeof(PowerSimulationsDynamics.system_residual!), ForwardDiff.Dual{ForwardDiff.Tag{typeof(PowerSimulationsDynamics.system_residual!), Float64}, Float64, 12}}}, Int64}, Float64}, Float64, 12, Tuple{Vector{ForwardDiff.Dual{ForwardDiff.Tag{PowerSimulationsDynamics.var\"<a href=\"https://github.com/JuliaLang/julia/issues/51\">#51</a>#53\"{PowerSimulationsDynamics.SystemModel{ResidualModel, PowerSimulationsDynamics.JacobianCache{typeof(PowerSimulationsDynamics.system_residual!), ForwardDiff.Dual{ForwardDiff.Tag{typeof(PowerSimulationsDynamics.system_residual!), Float64}, Float64, 12}}}, Int64}, Float64}, Float64, 12}}, Vector{ForwardDiff.Dual{ForwardDiff.Tag{PowerSimulationsDynamics.var\"<a href=\"https://github.com/JuliaLang/julia/issues/51\">#51</a>#53\"{PowerSimulationsDynamics.SystemModel{ResidualModel, PowerSimulationsDynamics.JacobianCache{typeof(PowerSimulationsDynamics.system_residual!), ForwardDiff.Dual{ForwardDiff.Tag{typeof(PowerSimulationsDynamics.system_residual!), Float64}, Float64, 12}}}, Int64}, Float64}, Float64, 12}}}}, PowerSimulationsDynamics.var\"<a href=\"https://github.com/JuliaLang/julia/issues/51\">#51</a>#53\"{PowerSimulationsDynamics.SystemModel{ResidualModel, PowerSimulationsDynamics.JacobianCache{typeof(PowerSimulationsDynamics.system_residual!), ForwardDiff.Dual{ForwardDiff.Tag{typeof(PowerSimulationsDynamics.system_residual!), Float64}, Float64, 12}}}, Int64}, Int64}, SparseArrays.SparseMatrixCSC{Float64, Int64}}, Nothing, Nothing, SparseArrays.SparseMatrixCSC{Float64, Int64}, SparseArrays.SparseMatrixCSC{Float64, Int64}, Nothing, Nothing, Nothing, Nothing, Nothing}, OrdinaryDiffEq.DABDF2Cache{Vector{Float64}, Vector{Float64}, Vector{Float64}, OrdinaryDiffEq.NLSolver{NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, true, Vector{Float64}, Rational{Int64}, Nothing, Float64, OrdinaryDiffEq.NLNewtonCache{Vector{Float64}, Float64, Float64, Vector{Float64}, SparseArrays.SparseMatrixCSC{Float64, Int64}, SparseArrays.SparseMatrixCSC{Float64, Int64}, Nothing, Nothing, LinearSolve.LinearCache{SparseArrays.SparseMatrixCSC{Float64, Int64}, Vector{Float64}, Vector{Float64}, SciMLBase.NullParameters, Nothing, SuiteSparse.UMFPACK.UmfpackLU{Float64, Int64}, LinearSolve.InvPreconditioner{LinearAlgebra.Diagonal{Float64, Vector{Float64}}}, LinearAlgebra.Diagonal{Float64, Vector{Float64}}, Float64}}}, Float64}, OrdinaryDiffEq.DEOptions{Float64, Float64, Float64, Float64, PIController{Rational{Int64}}, typeof(DiffEqBase.ODE_DEFAULT_NORM), typeof(LinearAlgebra.opnorm), Nothing, CallbackSet{Tuple{}, Tuple{DiscreteCallback{PowerSimulationsDynamics.var\"<a href=\"https://github.com/JuliaLang/julia/issues/61\">#61</a>#62\"{BranchTrip}, PowerSimulationsDynamics.var\"<a href=\"https://github.com/JuliaLang/julia/issues/25\">#25</a>#26\"{Line}, typeof(SciMLBase.INITIALIZE_DEFAULT), typeof(SciMLBase.FINALIZE_DEFAULT)}}}, typeof(DiffEqBase.ODE_DEFAULT_ISOUTOFDOMAIN), typeof(DiffEqBase.ODE_DEFAULT_PROG_MESSAGE), typeof(DiffEqBase.ODE_DEFAULT_UNSTABLE_CHECK), DataStructures.BinaryHeap{Float64, DataStructures.FasterForward}, DataStructures.BinaryHe<br>\n[message truncated]</p>",
        "id": 271502492,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644530973
    },
    {
        "content": "<p>[gitter] &lt;Pine-Z-hub&gt; I have a question, how to solve a higher dimensional system of equations using <a href=\"https://github.com/search?q=StochasticDelayDiffEq.jl&amp;type=Repositories\">StochasticDelayDiffEq.jl</a>. I tried it, but found that it gives an error</p>",
        "id": 271557633,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644575853
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what did you try? Did you first try it without delays?</p>",
        "id": 271557722,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644575890
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what's the error?</p>",
        "id": 271557743,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644575905
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; There's nothing to go off of there.</p>",
        "id": 271557754,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644575910
    },
    {
        "content": "<p>[gitter] &lt;Pine-Z-hub&gt; The error is \"no method matching copyto\"</p>",
        "id": 271557844,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644575967
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; please share the full error message.</p>",
        "id": 271557874,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644575983
    },
    {
        "content": "<p>[gitter] &lt;Pine-Z-hub&gt; ok</p>",
        "id": 271557895,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644575996
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and the code you used</p>",
        "id": 271557902,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644576001
    },
    {
        "content": "<p>[gitter] &lt;Pine-Z-hub&gt; MethodError: no method matching copyto!(::Float64, ::Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Tuple{}, typeof(identity), Tuple{Int64}})<br>\nClosest candidates are:<br>\n  copyto!(::DiffEqArrayOperator, ::Any) at C:\\Users\\21610\\.julia\\packages\\SciMLBase\\x3z0g\\src\\operators\\basic_operators.jl:113<br>\n  copyto!(::OrdinaryDiffEq.ArrayFuse{AT, T, P}, ::Base.Broadcast.Broadcasted{F1, Axes, F, Args}) where {AT, T, P, F1&lt;:Base.Broadcast.AbstractArrayStyle{0}, Axes, F, Args&lt;:Tuple} at C:\\Users\\21610\\.julia\\packages\\OrdinaryDiffEq\\JsAS0\\src\\wrappers.jl:27<br>\n  copyto!(::OrdinaryDiffEq.ArrayFuse{AT, T, P}, ::Base.Broadcast.Broadcasted) where {AT, T, P} at C:\\Users\\21610\\.julia\\packages\\OrdinaryDiffEq\\JsAS0\\src\\wrappers.jl:22<br>\n  ...</p>",
        "id": 271557963,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644576013
    },
    {
        "content": "<p>[gitter] &lt;Pine-Z-hub&gt; function hayes_modelf(du,u,h,p,t)<br>\n    α,β,η,ϵ = p<br>\n    hist = h(p,t-τ)[1]<br>\n    du[1] = u[2] <br>\n    du[2] = -u[1] .+ η.*hist<br>\nend<br>\nfunction hayes_modelg(du,u,h,p,t)<br>\n    α,β,η,ϵ,τ = p<br>\n    hist = h(p,t-τ)[1]<br>\n    du[1] .= 1<br>\n    du[2] .= ϵ^0.5<br>\n    # du = A * ...<br>\nend</p>",
        "id": 271557986,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644576029
    },
    {
        "content": "<p>[gitter] &lt;Pine-Z-hub&gt; h(p,t) = ones(2);<br>\ntspan =  (0.,0.1)</p>\n<p>p1 = 0.1;<br>\nT = 50;<br>\nτ = 0.5;<br>\nη = 0.5;<br>\nϵ = 0.27;<br>\nα = sqrt((1-η)/(2<em>p1</em>T));<br>\nβ = 2*p1/(1-η);<br>\npmul = [α,β,η,ϵ,τ]<br>\npadd = [α,β,η,ϵ,τ]<br>\nlags = [τ]<br>\n#prob = SDDEProblem(hayes_modelf, [0.8,0.8], h, tspan, pmul;constant_lags=lags);<br>\nprob = SDDEProblem(hayes_modelf, hayes_modelg, [0.8,0.8], h, tspan, pmul;);<br>\nalg = EM()<br>\nsol = solve(prob,alg,dt = 0.01)</p>",
        "id": 271557999,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644576042
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>function hayes_modelg(du,u,h,p,t)\n   α,β,η,ϵ,τ = p\n   hist = h(p,t-τ)[1]\n   du[1] = 1\n   du[2] = ϵ^0.5\n   # du = A * ...\nend</code></p>",
        "id": 271558359,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644576267
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you were doing <code>du[1] .= 1</code>  which doesn't make sense, you cannot broadcast into a scalar.</p>",
        "id": 271558375,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644576282
    },
    {
        "content": "<p>[gitter] &lt;Pine-Z-hub&gt; I'll try it first, thank you</p>",
        "id": 271558507,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644576369
    },
    {
        "content": "<p>[gitter] &lt;Pine-Z-hub&gt; maybe I might be back soon</p>",
        "id": 271558552,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644576408
    },
    {
        "content": "<p>[gitter] &lt;Pine-Z-hub&gt; Do I need to write the diffusion term as #function hayes_modelg(du,u,h,p,t)<br>\n    #τ,a,b,c,α,β,γ = p<br>\n    #du .= α.*u .+ γ<br>\nend like this?</p>",
        "id": 271559231,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644576786
    },
    {
        "content": "<p>[gitter] &lt;Pine-Z-hub&gt; Sorry, maybe the format is ugly</p>",
        "id": 271559296,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644576826
    },
    {
        "content": "<p>[gitter] &lt;Pine-Z-hub&gt; I found my problem, thank you, friend</p>",
        "id": 271560039,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644577196
    },
    {
        "content": "<p>[gitter] &lt;Pine-Z-hub&gt; Maybe I'm too stupid, :)</p>",
        "id": 271560201,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644577238
    },
    {
        "content": "<p>[slack] &lt;jonatan&gt; Hello! I’m solving an ODE <code>u_tt = f(u,u_t)</code> to time the <code>T</code>. Is there an easy and efficient way of calculating the integral of <code>phi(t) * u(t)</code>, for <code>0</code> to <code>T</code> where <code>phi(t)</code> is a known function? (<code>u</code> is expected to be a large vector). I guess I could differentiate the integral and write the whole thing as a first-order ODE but it seems I’ll be wasting memory that way.</p>",
        "id": 271585487,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644590325
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that's generally how it would be done. I plan to add something extra for this soon though.</p>",
        "id": 271589318,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644592040
    },
    {
        "content": "<p>[gitter] &lt;nicholasfox&gt; Hi, there. Can I use Progress Bar in python? thanks.</p>",
        "id": 271592611,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644593467
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; ?</p>",
        "id": 271592916,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644593616
    },
    {
        "content": "<p>[gitter] &lt;nicholasfox&gt; using Logging: global_logger<br>\nusing TerminalLoggers: TerminalLogger<br>\nglobal_logger(TerminalLogger())</p>",
        "id": 271595369,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644594684
    },
    {
        "content": "<p>[gitter] &lt;nicholasfox&gt; like this: progress=true</p>",
        "id": 271595408,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644594701
    },
    {
        "content": "<p>[gitter] &lt;nicholasfox&gt; using Logging: global_logger<br>\nusing TerminalLoggers: TerminalLogger<br>\nglobal_logger(TerminalLogger())</p>\n<p>using OrdinaryDiffEq</p>\n<p>solve(<br>\n    ODEProblem((u, p, t) -&gt; (sleep(0.01); -u), 1.0, nothing),<br>\n    Euler();<br>\n    dt = 0.5,<br>\n    tspan = (0.0, 1000.0),<br>\n    progress = true,<br>\n    progress_steps = 1,<br>\n)</p>",
        "id": 271595560,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644594756
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I don't get the relation to Python there?</p>",
        "id": 271596168,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644594980
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; You want the Julia logging forwarded to Python?</p>",
        "id": 271596185,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644594987
    },
    {
        "content": "<p>[slack] &lt;Jason Pekos&gt; managed to figure it out!</p>",
        "id": 271600122,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644596601
    },
    {
        "content": "<p>[slack] &lt;jonatan&gt; Ah cool! Is there any issue or PR to follow?</p>",
        "id": 271600293,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644596684
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; no</p>",
        "id": 271600532,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644596785
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; because it's just some random thread in the adjoints work.</p>",
        "id": 271600557,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644596794
    },
    {
        "content": "<p>[gitter] &lt;nicholasfox&gt; from diffeqpy import de<br>\n...<br>\nprob = de.ODEProblem(f, u0, tspan)<br>\nres=de.solve(prob, de.Vern9(),  progress=True)</p>",
        "id": 271602090,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644597504
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah that would need Julia logging forwarded to Python</p>",
        "id": 271602244,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644597577
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; open a pyjulia issue on that</p>",
        "id": 271602256,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644597582
    },
    {
        "content": "<p>[gitter] &lt;nicholasfox&gt; I don't really understand.<br>\nWhat exactly should I do?</p>",
        "id": 271602563,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644597706
    },
    {
        "content": "<p>[gitter] &lt;nicholasfox&gt; this one? <a href=\"https://github.com/JuliaPy/pyjulia\">https://github.com/JuliaPy/pyjulia</a></p>",
        "id": 271602812,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644597813
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes</p>",
        "id": 271603869,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644598264
    },
    {
        "content": "<p>[gitter] &lt;nicholasfox&gt; Thank you, I'll get to know that one.</p>",
        "id": 271604078,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644598348
    },
    {
        "content": "<p>[slack] &lt;johntfoster&gt; &lt;@U6788D83U&gt; After expanding derivatives in a system of equations, only one of the terms is the state variable, and it appears that <code>ODESystem</code> requires the equations in the form <code>d/dt(P) ~ ...</code> .  So for example, after I call <code>expand_derivatives</code> I have: <a href=\"https://files.slack.com/files-pri/T68168MUP-F033FQYT0JC/download/screen_shot_2022-02-11_at_12.41.55_pm.png\">https://files.slack.com/files-pri/T68168MUP-F033FQYT0JC/download/screen_shot_2022-02-11_at_12.41.55_pm.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F033FQYT0JC/download/screen_shot_2022-02-11_at_12.41.55_pm.png\"><img src=\"https://uploads.zulipusercontent.net/17ac9bea791004e5a2611e842f7cc92441840741/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d4630333346515954304a432f646f776e6c6f61642f73637265656e5f73686f745f323032322d30322d31315f61745f31322e34312e35355f706d2e706e67\"></a></div>",
        "id": 271619528,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644604945
    },
    {
        "content": "<p>[slack] &lt;johntfoster&gt; Is there a way to get the equations into the form <code>ODESystem</code> wants from here?</p>",
        "id": 271619622,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644604988
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Try the latest release and run structural_simplify</p>",
        "id": 271619664,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644605006
    },
    {
        "content": "<p>[slack] &lt;johntfoster&gt; Don't I have to form an ODESystem to run structural_simplify?  I'm getting an error on construction of the ODESystem.  Think I'm on the latest, but I'll verify.</p>",
        "id": 271619901,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644605118
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Ah, you need to provide the full list of states and parameters as well</p>",
        "id": 271620050,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644605195
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; We should fix/relax that</p>",
        "id": 271620069,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644605205
    },
    {
        "content": "<p>[slack] &lt;johntfoster&gt; Using the example form the docs, this works (of course):<br>\n<code>@variables RHS(t)\n@named fol_separate = ODESystem([ RHS  ~ (1 - x)/τ,\n                                  D(x) ~ RHS ])</code><br>\nWhat I want to be able to do is:<br>\n<code>@variables RHS(t)\n@named fol_separate = ODESystem([ τ * RHS  ~ (1 - x),\n                                  D(x) ~ RHS ])</code></p>",
        "id": 271620315,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644605324
    },
    {
        "content": "<p>[slack] &lt;johntfoster&gt; How would I have to change things to make it work?</p>",
        "id": 271620345,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644605334
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; I am on my phone right now, so I will be brief. You could use the constructor with the signature ODESystem(eqs, iv, sts, ps)</p>",
        "id": 271620551,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644605428
    },
    {
        "content": "<p>[slack] &lt;johntfoster&gt; Okay, will try.</p>",
        "id": 271620607,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644605453
    },
    {
        "content": "<p>[slack] &lt;johntfoster&gt; @yingbo_ma This does not work w/ <code>DifferentialEquations v7.1.0</code> and <code>ModelingToolkit v8.4.0</code><br>\n<code>@named fol_separate = ODESystem([ τ * RHS  ~ (1 - x),\n                                  D(x) ~ RHS ],\n                                  [x =&gt; 0.0], (0.0,10.0), [τ =&gt; 3.0])</code></p>",
        "id": 271624627,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644607325
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; That’s not supposed to work ;p. You are confusing ODEProblem and ODESystem</p>",
        "id": 271624783,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644607424
    },
    {
        "content": "<p>[slack] &lt;johntfoster&gt; Okay, I'll look deeper. I'd appreciate it if you could provide a template example when/if you have time.</p>",
        "id": 271624946,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644607510
    },
    {
        "content": "<p>[slack] &lt;johntfoster&gt; This does work:</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>@variables t x(t) RHS(t)  # independent and dependent variables\n@parameters τ       # parameters\nD = Differential(t) # define an operator for the differentiation w.r.t. time\n\n# your first ODE, consisting of a single equation, indicated by ~\n@named fol_separate = ODESystem([ τ * RHS  ~ (1 - x),\n                                  D(x) ~ RHS ], t, [x, RHS], [τ])\n\nusing DifferentialEquations: solve\nusing Plots: plot\n\nprob = ODEProblem(structural_simplify(fol_separate), [x =&gt; 0.0, RHS =&gt; 1 / 3.0], (0.0,10.0), [τ =&gt; 3.0])\nsol = solve(prob)\nplot(sol)```\n</code></pre></div>",
        "id": 271626448,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644608259
    },
    {
        "content": "<p>[slack] &lt;johntfoster&gt; Note I had to explicitly specify the initial condition for <code>RHS</code> which is strange and is not required when the equations are written in state variable form like the original example.</p>",
        "id": 271626632,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644608342
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; That’s exactly what structural_simplify is for</p>",
        "id": 271626788,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644608415
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Ah, I see. <code>τ</code> is not simplified away</p>",
        "id": 271626848,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644608463
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; That’s easy to fix.</p>",
        "id": 271626999,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644608529
    },
    {
        "content": "<p>[slack] &lt;johntfoster&gt; So it works on the example problem, but when I try on my eqns, i.e.<br>\n<code>@named odes = ODESystem(eqns, t, [P₁, P₂, Q₁, Q₂], [Vp₁, Vp₂, Psc, Tsc, Pwf, n, J₁, J₂, T₁, T₂, ρ, R, T])</code>: <a href=\"https://files.slack.com/files-pri/T68168MUP-F033G6TTDNU/download/screen_shot_2022-02-11_at_1.54.16_pm.png\">https://files.slack.com/files-pri/T68168MUP-F033G6TTDNU/download/screen_shot_2022-02-11_at_1.54.16_pm.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F033G6TTDNU/download/screen_shot_2022-02-11_at_1.54.16_pm.png\"><img src=\"https://uploads.zulipusercontent.net/f85b1a7ff66d37e6ef634cbb4fb9918d651b9b98/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d4630333347365454444e552f646f776e6c6f61642f73637265656e5f73686f745f323032322d30322d31315f61745f312e35342e31365f706d2e706e67\"></a></div>",
        "id": 271628340,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644609263
    },
    {
        "content": "<p>[slack] &lt;johntfoster&gt; And then <code>structural_simplify(odes)</code> gives: <a href=\"https://files.slack.com/files-pri/T68168MUP-F032SEKRH99/download/screen_shot_2022-02-11_at_1.54.50_pm.png\">https://files.slack.com/files-pri/T68168MUP-F032SEKRH99/download/screen_shot_2022-02-11_at_1.54.50_pm.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F032SEKRH99/download/screen_shot_2022-02-11_at_1.54.50_pm.png\"><img src=\"https://uploads.zulipusercontent.net/a9ec84ae5501f459cfe9dd0f60b130d0b6d1ed5d/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d4630333253454b524839392f646f776e6c6f61642f73637265656e5f73686f745f323032322d30322d31315f61745f312e35342e35305f706d2e706e67\"></a></div>",
        "id": 271628389,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644609297
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; <a href=\"https://github.com/SciML/ModelingToolkit.jl/pull/1451\">https://github.com/SciML/ModelingToolkit.jl/pull/1451</a></p>",
        "id": 271628391,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644609299
    },
    {
        "content": "<p>[slack] &lt;johntfoster&gt; And, then<br>\n<code>prob = ODEProblem(structural_simplify(odes), [P₁ =&amp;gt; 20.0, P₂ =&amp;gt; 20.0], (0.0,10.0), params)</code>: <a href=\"https://files.slack.com/files-pri/T68168MUP-F032SEP141Z/download/screen_shot_2022-02-11_at_1.55.27_pm.png\">https://files.slack.com/files-pri/T68168MUP-F032SEP141Z/download/screen_shot_2022-02-11_at_1.55.27_pm.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F032SEP141Z/download/screen_shot_2022-02-11_at_1.55.27_pm.png\"><img src=\"https://uploads.zulipusercontent.net/83c05c9647aa9595b1bf56852566f5ace0a78925/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d463033325345503134315a2f646f776e6c6f61642f73637265656e5f73686f745f323032322d30322d31315f61745f312e35352e32375f706d2e706e67\"></a></div>",
        "id": 271628451,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644609335
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; You can solve it as a DAEProblem</p>",
        "id": 271628659,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644609431
    },
    {
        "content": "<p>[slack] &lt;johntfoster&gt; Doesn't appear to isolate the state varaibles to the right on my problem.</p>",
        "id": 271628682,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644609440
    },
    {
        "content": "<p>[slack] &lt;johntfoster&gt; Okay, I'll give that a try.</p>",
        "id": 271628700,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644609452
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 271686984,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644669467
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 271687045,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644669514
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; Hi all, there is something that changed for me since I updated my packages with <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a> for printing the timesteps of my models:<br>\nif I use print(sol.t[1]), it works, but print(\"$sol.t[1]\") print a very very long statement. Is this expected or can someone reproduce that?</p>",
        "id": 271737695,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644745608
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; for example here:</p>\n<p>using DifferentialEquations<br>\nf(u,p,t) = 1.01*u<br>\nu0 = 1/2<br>\ntspan = (0.0,1.0)<br>\nprob = ODEProblem(f,u0,tspan)<br>\nsol = solve(prob, Tsit5(), reltol=1e-8, abstol=1e-8)</p>\n<p>print(sol.t[1])<br>\nprint(\"$sol.t[1]\")</p>",
        "id": 271737971,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644746079
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>print(\"$(sol.t[1])\")</code> ?</p>",
        "id": 271744748,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644756840
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; &gt; [slack] &lt;chrisrackauckas&gt; <code>print(\"$(sol.t[1])\")</code> ?</p>\n<p>yes</p>",
        "id": 271745751,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644758354
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; &gt; [slack] &lt;chrisrackauckas&gt; <code>print(\"$(sol.t[1])\")</code> ?</p>\n<p>make sense aha, don't know why it was working before though, but I will change it to that!</p>",
        "id": 271745814,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644758443
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; thx!</p>",
        "id": 271745835,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644758501
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Hey folks, and @devmotion or @chrisrackauckas, I was wondering which solver algoritihms are best for solving DDEs. I am hitting warnings about <code>dt &lt; dtmin</code> which just tells me the that adaptive stepsize is running into trouble. I am actually trying to optimize the model over different combinations of integer lags, and so some combinations seems to give the solver heartburn. I was using <code>Tsit</code> since my system is not particularly stiff, but perhaps the model becomes very still for certain combinations of lags? Any suggestion for perhaps a stiff solver for <code>MethodofSteps</code> ? I imagine something implicit is probably best.</p>\n<p>Also, is there any way to check for stiffness or solver failure given a problem? I would like to catch situations that make the solver fail, so that I can essentially discard those combinations. I am getting some strange <code>Dimension mismatch</code> errors after I get the warnings, so perhaps they are related. But either way it causes the solver to fail.</p>",
        "id": 271763278,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644783596
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Check the eigrnvalues</p>",
        "id": 271764655,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644785273
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Did you try Rosenbrock?</p>",
        "id": 271764675,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644785282
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; I did not think of that, but great idea. I will try that.--The eigenvalues I mean <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>.</p>",
        "id": 271765296,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644786079
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; I can give Rosenbrock a try.</p>",
        "id": 271765304,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644786088
    },
    {
        "content": "<p>[slack] &lt;Flemming Holtorf&gt; Hey! I would like to create an integrator and change its state before stepping the first time. In essence I want to do something like</p>\n<div class=\"codehilite\" data-code-language=\"prob\"><pre><span></span><code>integrator = init(prob, Tsit5(), save_everystep = false)\nset_u!(integrator, 2*ones(2))\nstep!(integrator, 0.01, true) ```\nThe problem is `set_u!`  does not actually work as intended (I think?). While `integrator.u` is indeed updated, it seems that the integrator internals still use the initial specified at the time of initialization. Is this intended? Should I be updating the initial condition differently in this scenario or is there some other way around it?\n</code></pre></div>",
        "id": 271771377,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644794122
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; Hi all, I am solving a PDE system with non-linear interdiffusion. It works fine without autodiff, but I got an error with it and it starts like this:<br>\n    LoadError: MethodError: no method matching Float64(::ForwardDiff.Dual{ForwardDiff.Tag{OrdinaryDiffEq.OrdinaryDiffEqTag, Float64}, Float64, 12})</p>",
        "id": 271814401,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644838512
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; from experience, I would say that it happens when there is a discontinuity. My coefficient diffusion is a matrix with an additional term in the diagonals (kronecker), could it come from there? <br>\nThe loop to compute it looks like that:<br>\n    D[i,j,k] = term * Identity - something<br>\nIs it a bad idea to use an identity matrix here?</p>",
        "id": 271814812,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644838782
    },
    {
        "content": "<p>[gitter] &lt;Pine-Z-hub&gt; there is a multiplicative noise and an additive noise in SDE, how can I use the SDE solver to calculate</p>",
        "id": 271828864,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644847039
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; &gt; Hi all, I am solving a PDE system with non-linear interdiffusion. It works fine without autodiff, but I got an error with it and it starts like this:</p>\n<blockquote>\n<p>'''LoadError: MethodError: no method matching Float64(::ForwardDiff.Dual{ForwardDiff.Tag{OrdinaryDiffEq.OrdinaryDiffEqTag, Float64}, Float64, 12})'''</p>\n</blockquote>\n<p>I think I've found my problem: I should update a parameter inside a call function, not inside the main function, sorry for that</p>",
        "id": 271850143,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644855624
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @channel 10 years of Julia. Please contribute to the writeup of what brought you to Julia! <a href=\"https://hackmd.io/LAPXPT5YRRCEC6mrH3wK2A?both\">https://hackmd.io/LAPXPT5YRRCEC6mrH3wK2A?both</a></p>",
        "id": 271853276,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644856967
    },
    {
        "content": "<p>[slack] &lt;Roger Powell&gt; This is a bit left field, but we are working with FMI technology to let physics engines tell controllers their sensitivities at time varying states.. (I know we should be using MTK). Some of our flexible objects that we need the physics engines for are 80 tonnes and over 10 mteres in length. But I am just scratching the FMI surface. We're using <a href=\"https://github.com/search?q=FMI.jl&amp;type=Repositories\">FMI.jl</a> obviously.</p>",
        "id": 271859348,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644859553
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; @devmotion Say, just a clarifying question about declaring lags in a <code>DDEProblem</code>. In reading the docs it seems best to always declare constant lags if you know them, so that is fine. But if I have 3 different lags in my model, and all of them are <code>(t-1)</code>, then would I declare three lags like <code>[1, 1, 1]</code> or just one lag <code>[1]</code>. I think it would be the former, but the docs did not specify. Do the numbers in the constant lag field need to be unique? Here is a simple MWE for the model</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    lag_prom_f2 = p.lag_prom_f2\n    lag_prom_f3 = p.lag_prom_f3\n    lag_attr_f3 = p.lag_attr_f3\n    p = logistic.(p)\n\n    du[1] = p.rhire_f1*u[1]*((10 - u[1])/10)\n    du[2] = p.prom_f2*h(p, t-lag_prom_f2)[1] - p.prom_f3*h(p, t-lag_prom_f3)[2]\n    du[3] = p.prom_f3*h(p, t-lag_prom_f3)[2] - p.attr_f3*h(p, t-lag_attr_f3)[3]\nend```\n</code></pre></div>",
        "id": 271859538,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644859637
    },
    {
        "content": "<p>[slack] &lt;Roger Powell&gt; Effectively, we're trying to do co-simulation by linking the simulator variables and the controller variables (and time-steps) at a very low level.</p>",
        "id": 271859592,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644859667
    },
    {
        "content": "<p>[slack] &lt;devmotion&gt; I don't understand, why would you want to declare the same lag multiple times?</p>",
        "id": 271861691,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644860605
    },
    {
        "content": "<p>[slack] &lt;devmotion&gt; If you know that they are all 1 it's more efficient to use only <code>(1,)</code> (tuples should be more efficient or at least avoid allocations).</p>",
        "id": 271861873,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644860685
    },
    {
        "content": "<p>[slack] &lt;devmotion&gt; But it should also work if you specify them multiple times. Will probably be slower since more lags are checked though. So I don't think there's any reason to specify them multiple times</p>",
        "id": 271862096,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644860767
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; @devmotion Haha, yes, that was my question as well. I have a lag of 1 for variable x_1, and a lag of 1 for variable x_2. But I think that the lags refer to the column of the history functio <code>h</code> right.</p>",
        "id": 271862744,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644861089
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; In the documentation, the example problem just uses the single lag<br>\n<code> hist3 = h(p, t-tau)[3]</code><br>\nso then <code>tau</code> is related to x_2 or du[3]. In my case, I have like <code>h(p, t-1)[1]</code> and <code>h(p, t-1)[2]</code>, and <code>h(p, t-1)[3]</code>. But from what you are saying, I can just specify <code>(1, )</code>.</p>",
        "id": 271863137,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644861270
    },
    {
        "content": "<p>[slack] &lt;devmotion&gt; The variable doesn't matter, it just matters that you need the value of (part of) the system at an earlier time point.</p>",
        "id": 271863450,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644861413
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Great, thanks for clarifying that @devmotion. That makes sense.</p>",
        "id": 271864309,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644861748
    },
    {
        "content": "<p>[gitter] &lt;Pine-Z-hub&gt; <a href=\"https://files.gitter.im/57bf79b040f3a6eec0615ecf/xFD9/image.png\">![image.png](https://files.gitter.im/57bf79b040f3a6eec0615ecf/xFD9/thumb/image.png)</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.gitter.im/57bf79b040f3a6eec0615ecf/xFD9/image.png\" title=\"![image.png](https://files.gitter.im/57bf79b040f3a6eec0615ecf/xFD9/thumb/image.png)\"><img src=\"https://uploads.zulipusercontent.net/46733a95eab9894c9afb37352266f3e8371f1c9a/68747470733a2f2f66696c65732e6769747465722e696d2f3537626637396230343066336136656563303631356563662f784644392f696d6167652e706e67\"></a></div>",
        "id": 271927047,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644900812
    },
    {
        "content": "<p>[gitter] &lt;Pine-Z-hub&gt; I only found a solution to noise, how to deal with multiple noises in SDE, the equation is probably as follows</p>",
        "id": 271927164,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644900910
    },
    {
        "content": "<p>[gitter] &lt;Pine-Z-hub&gt; <a href=\"https://files.gitter.im/57bf79b040f3a6eec0615ecf/irQA/image.png\">![image.png](https://files.gitter.im/57bf79b040f3a6eec0615ecf/irQA/thumb/image.png)</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.gitter.im/57bf79b040f3a6eec0615ecf/irQA/image.png\" title=\"![image.png](https://files.gitter.im/57bf79b040f3a6eec0615ecf/irQA/thumb/image.png)\"><img src=\"https://uploads.zulipusercontent.net/24f6f537b6abaabab1dcd03575eb199f7c5e77f9/68747470733a2f2f66696c65732e6769747465722e696d2f3537626637396230343066336136656563303631356563662f697251412f696d6167652e706e67\"></a></div>",
        "id": 271927167,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644900920
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 271929947,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644903930
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @Pine-Z-Hub what's the question?</p>",
        "id": 271951533,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644919734
    },
    {
        "content": "<p>[slack] &lt;Trent Ming&gt; function hayes_modelf(du,u,h,p,t)<br>\n    α,β,γ,ϵ,k,w0,r= p<br>\n    hist = h(p,t-τ)[1]<br>\n    du[1] = u[2]<br>\n    du[2] = -w0^2*u[1]<br>\nend<br>\nfunction hayes_modelg(du,u,h,p,t)<br>\n    α,β,γ,ϵ,k,w0,r = p<br>\n    hist = h(p,t-τ)[1]<br>\n    du[1] = 1<br>\n    du[2] = ϵ^0.5<br>\nend</p>",
        "id": 271963055,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644926218
    },
    {
        "content": "<p>[slack] &lt;Trent Ming&gt; SDDE function definitions are generally like the above</p>",
        "id": 271963115,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644926253
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes</p>",
        "id": 271963203,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644926287
    },
    {
        "content": "<p>[slack] &lt;Trent Ming&gt; But I want to have multiple noises, dW1 and dw2...</p>",
        "id": 271963207,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644926290
    },
    {
        "content": "<p>[slack] &lt;Trent Ming&gt; I don't know how to deal with the problem of multi-noise</p>",
        "id": 271963268,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644926334
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that has two noises in diagonal form</p>",
        "id": 271963358,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644926399
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; see <a href=\"https://diffeq.sciml.ai/stable/tutorials/sde_example/#Example-2:-Systems-of-SDEs-with-Diagonal-Noise\">https://diffeq.sciml.ai/stable/tutorials/sde_example/#Example-2:-Systems-of-SDEs-with-Diagonal-Noise</a></p>",
        "id": 271963457,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644926417
    },
    {
        "content": "<p>[slack] &lt;Trent Ming&gt; <code>dx = f1\ndy = f2 + g21*dw1+g22*dw2</code></p>",
        "id": 271964032,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644926762
    },
    {
        "content": "<p>[slack] &lt;Trent Ming&gt; I don't quite understand it, I think the example in the diagonal noise is not quite the same as mine, my equation looks like this</p>",
        "id": 271964102,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644926813
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes, so you need to use non-diagonal noise.</p>",
        "id": 271966466,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644928174
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://diffeq.sciml.ai/stable/tutorials/sde_example/#Example-4:-Systems-of-SDEs-with-Non-Diagonal-Noise\">https://diffeq.sciml.ai/stable/tutorials/sde_example/#Example-4:-Systems-of-SDEs-with-Non-Diagonal-Noise</a></p>",
        "id": 271966473,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644928180
    },
    {
        "content": "<p>[slack] &lt;Trent Ming&gt; i think i figured it out</p>",
        "id": 271966850,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644928386
    },
    {
        "content": "<p>[slack] &lt;Trent Ming&gt; thanks</p>",
        "id": 271966872,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644928397
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; Is there an easy way to print the nb of iteration per timestep that Newton's method is doing in nlsolve?</p>",
        "id": 271968548,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644929311
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the total is in sol.destats</p>",
        "id": 271969208,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644929665
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but per iteration, no. It's easy to modify the solver to store it though</p>",
        "id": 271969229,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644929675
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; great, thx!</p>",
        "id": 271969284,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644929708
    },
    {
        "content": "<p>[slack] &lt;Pengfei Song&gt; I am trying to calculate the principal eigenvalue (smallest eigenvalue) of the time-periodic PDE  under the condition  Frequency w is very SMALL (exp(-8) for example),   I change the PDE into time-periodic ODE system, and then calculate floquet multiplier, finally  do some transforms.</p>\n<p>But I find that the algorithm becomes unstable, when Frequency w is very SMALL (exp(-8) for example). My question here is</p>\n<p>(1) How to solve ODE system like this with very small frequency?</p>\n<p>(2) Are some better ways to calculate the principle eigenvalue?: <a href=\"https://files.slack.com/files-pri/T68168MUP-F03369VE2P5/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F03369VE2P5/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F03369VE2P5/download/image.png\"><img src=\"https://uploads.zulipusercontent.net/e59cc4861158203f505e1324b29eb09982c91a43/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303333363956453250352f646f776e6c6f61642f696d6167652e706e67\"></a></div>",
        "id": 272000522,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644942983
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what solver did you use?</p>",
        "id": 272011945,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644947418
    },
    {
        "content": "<p>[slack] &lt;Pengfei Song&gt; I use KenCarp4(), it said: <a href=\"https://files.slack.com/files-pri/T68168MUP-F0339RXNCUC/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F0339RXNCUC/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F0339RXNCUC/download/image.png\"><img src=\"https://uploads.zulipusercontent.net/4d8a3d0efbe7b8598121fe122baafd9ef302329e/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d463033333952584e4355432f646f776e6c6f61642f696d6167652e706e67\"></a></div>",
        "id": 272026847,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644953842
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; are all methods aborting the same way</p>",
        "id": 272034491,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644957501
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; ?</p>",
        "id": 272034495,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644957504
    },
    {
        "content": "<p>[slack] &lt;Pengfei Song&gt; I tested Vern7(), Rosenbrock23(), Tsits5(), BS5(), RK4(), TRBDF2(). The same situations.</p>",
        "id": 272044488,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644962502
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and Sundials?</p>",
        "id": 272044902,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644962705
    },
    {
        "content": "<p>[slack] &lt;Pengfei Song&gt; I test CVODE_BDF().: <a href=\"https://files.slack.com/files-pri/T68168MUP-F032TP6GM55/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F032TP6GM55/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F032TP6GM55/download/image.png\"><img src=\"https://uploads.zulipusercontent.net/d85a95736e4680eff3446c367bbb9e65837ee83c/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303332545036474d35352f646f776e6c6f61642f696d6167652e706e67\"></a></div>",
        "id": 272045548,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644963082
    },
    {
        "content": "<p>[slack] &lt;Pengfei Song&gt; and test ARKODE().<br>\n [ARKode ERROR]  ARKode<br>\n  At t = 0.293299 and h = 1.78743e-016, the solver convergence test failed repeatedly or with |h| = hmin.</p>",
        "id": 272045708,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644963170
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah so I would think the problem is the model here.</p>",
        "id": 272045770,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1644963212
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; Hi! Is there a way to use the solver <code>AutoTsit5(Rosenbrock23());</code> with <code>DEDataVector</code>?</p>",
        "id": 272140620,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645029351
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; probably not. DEDataVector doesn't work well with linear algebra, which is why it was mostly deprecated for MTK</p>",
        "id": 272142602,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645030218
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; thanks @chrisrackauckas! Is there a way to use MTK in this kind of application? where you need to store local data that is modified in callbacks but you must save those points for analysis?</p>",
        "id": 272144247,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645030869
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; You'd make it a state that you effect with callbacks</p>",
        "id": 272153692,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645034435
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; hum, even if those variables are symbols, ints, another structures, etc?</p>",
        "id": 272153811,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645034473
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; <a href=\"https://files.slack.com/files-pri/T68168MUP-F033FUU8H2Q/download/captura_de_tela_2022-02-16_a__s_15.02.11.png\">https://files.slack.com/files-pri/T68168MUP-F033FUU8H2Q/download/captura_de_tela_2022-02-16_a__s_15.02.11.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F033FUU8H2Q/download/captura_de_tela_2022-02-16_a__s_15.02.11.png\"><img src=\"https://uploads.zulipusercontent.net/1301a1831d3e143bbbbf30998fa17301859bed24/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303333465555384832512f646f776e6c6f61642f636170747572615f64655f74656c615f323032322d30322d31365f615f5f735f31352e30322e31312e706e67\"></a></div>",
        "id": 272154056,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645034539
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; here is one example</p>",
        "id": 272154061,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645034542
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; It is not shown, but I have a variable <code>control_mode::Symbol</code>that changes the control algorithm.</p>",
        "id": 272159021,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645036567
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Oh that's much harder and would take a bit to support. Ehh</p>",
        "id": 272173005,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645042862
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; I see, thanks for the answer @chrisrackauckas!</p>",
        "id": 272176002,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645044473
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; I will keep using DEDataVectors in the mean time :)</p>",
        "id": 272176101,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645044517
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and for stiff, you could look into ROCK2/ROCK4 for now</p>",
        "id": 272178045,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645045353
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; Nice! Thanks!</p>",
        "id": 272208399,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645066959
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; I am looking for good data format to save timesteps where the system is quite big. I think I will head towards HDF5 files. I want something which can contain all the information of the model for reproducity and transparency and this one seems appealing. <br>\nWould any one of you recommand something else? What is commonly used in the community for lots of data?</p>",
        "id": 272233597,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645090141
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I usually use NetCDF, which is HDF5 compliant (for NetCDF 4+)</p>",
        "id": 272234732,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645090785
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; This is particularly good for PDEs, where there is usually some spatial discretization. NetCDF was designed for spatio-temporal data and stores axis coordinates along with the data. The files can be easily read in python with <code>xarray</code> and in julia with <code>Rasters.jl</code> /<code>NCDatasets</code> .</p>",
        "id": 272235031,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645090955
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; Interesting! I am also working with PDEs. What about opening it with Paraview or software like that? <br>\nI remember that I had to write a script to generate a description of my HDF5 file for Paraview to be able to read it as you can organise it as you wish last time I used that. Which was definitely not great.</p>",
        "id": 272236002,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645091538
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; Hi @chrisrackauckas!</p>\n<p>I think I could solve the problem with the <code>AutoTsit5(Rosenbrock23())</code>! The problem is that the declaration of the workspace was not allowing the <code>x</code> vector to propagate dual numbers. I created a MWE that seems to be working:</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>using OrdinaryDiffEq\n\nmutable struct Workspace{T1, T2, V&lt;:AbstractVector{T1}} &lt;: DEDataVector{T1}\n    x::V\n    f::T2\nend\n\nconst tstops = collect(0:0.01:10)\n\nfunction condition(u, t, integrator)\n    return t ∈ tstops\nend\n\nfunction affect!(integrator)\n    t = integrator.t\n\n    if (t ≥ 5) &amp;&amp; (t &lt; 8)\n        integrator.u.f = +1.5\n    else\n        integrator.u.f = -1.5\n    end\n\n    for c in full_cache(integrator)\n        c.f = integrator.u.f\n    end\n\n    return nothing\nend\n\ncb = DiscreteCallback(condition, affect!, save_positions = (true, true))\n\nfunction f!(du, u, p, t)\n    du[1] = -0.5 * u[1] + u.f\n    du[2] = -0.5 * u[2]\n\n    return nothing\nend\n\nu0 = Workspace([10.0; 10.0], 0.0)\nprob = ODEProblem(f!, u0, (0.0, 10.0))\nsol = solve(prob, AutoTsit5(Rosenbrock23()), callback = cb, tstops = tstops)```\nDo you think this is an acceptable solution? Should I make a PR to write this information to some place?\n</code></pre></div>",
        "id": 272266999,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645108270
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I  think that can be acceptable</p>",
        "id": 272271406,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645109997
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I have never tried using software like that, so I am not sure. But theoretically, any software able to read HDF5 should be able to read NetCDF 4 files.</p>",
        "id": 272273443,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645110735
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; &gt; [slack] &lt;Brian Groenke&gt; I have never tried using software like that, so I am not sure. But theoretically, any software able to read HDF5 should be able to read NetCDF 4 files.</p>\n<p>Alright, thx @Brian Groenke !</p>",
        "id": 272280176,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645113429
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 272286234,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645116021
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; Hi! I am revisiting the attitude propagation using Quaternions in MTK. The current code is:</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>using OrdinaryDiffEq\nusing ReferenceFrameRotations\nusing StaticArrays\n\nfunction vectdquat(vq, w)\n    q = Quaternion(vq)\n    dq = dquat(q, w)\n    return @SVector [dq[1], dq[2], dq[3], dq[4]]\nend\n\n@variables t vq[1:4](t)\n@parameters w[1:3]\n@register vectdquat(vq, w)\nD = Differential(t)\n\neqs = [\n    collect(D.(vq) .~ vectdquat(vq, w))...\n]\n\n@named att_prop = ODESystem(eqs)\n\nprob = ODEProblem(\n    att_prop,\n    [vq[1] =&gt; 1.0, vq[2] =&gt; 0.0, vq[3] =&gt; 0.0, vq[4] =&gt; 0.0],\n    (0.0, 100.0),\n    [w[1] =&gt; 0.05, w[2] =&gt; 0.0, w[3] =&gt; 0.0]\n)\n\nsol = solve(prob, Tsit5())```\nIt seems to be working fine, which is awesome because it did not sometime ago!\n\nHowever, now I need to add the restriction that `vq` must be unitary. Something like `norm(vq) ~ 1`. However, I cannot do this. Can anyone help me?\n</code></pre></div>",
        "id": 272293572,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645118830
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; My first attempt was:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code>           <span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"n\">D</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">vq</span><span class=\"p\">)</span> <span class=\"o\">.~</span> <span class=\"n\">vectdquat</span><span class=\"p\">(</span><span class=\"n\">vq</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">))</span><span class=\"o\">...</span>\n           <span class=\"n\">norm</span><span class=\"p\">(</span><span class=\"n\">vq</span><span class=\"p\">)</span> <span class=\"o\">~</span> <span class=\"mi\">1</span>\n       <span class=\"p\">]</span>\n<span class=\"mi\">5</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Equation</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"n\">Differential</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)(</span><span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">))</span> <span class=\"o\">~</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">w</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">w</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">w</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n <span class=\"n\">Differential</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)(</span><span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">))</span> <span class=\"o\">~</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">w</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">w</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">w</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n <span class=\"n\">Differential</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)(</span><span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">))</span> <span class=\"o\">~</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">w</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">w</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">w</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n <span class=\"n\">Differential</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)(</span><span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">))</span> <span class=\"o\">~</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">w</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">w</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">w</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n <span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">Symbolics</span><span class=\"o\">.</span><span class=\"n\">_mapreduce</span><span class=\"p\">(</span><span class=\"c\">#248, +, map(Symbolics.CallWith((t,)), vq), Colon(), (:init =&gt; false,))) ~ 1</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@named</span> <span class=\"n\">att_prop</span> <span class=\"o\">=</span> <span class=\"n\">ODESystem</span><span class=\"p\">(</span><span class=\"n\">eqs</span><span class=\"p\">)</span>\n<span class=\"n\">Model</span> <span class=\"n\">att_prop</span> <span class=\"n\">with</span> <span class=\"mi\">5</span> <span class=\"n\">equations</span>\n<span class=\"n\">States</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"o\">:</span>\n  <span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">)</span>\n  <span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">)</span>\n  <span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">)</span>\n  <span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">)</span>\n<span class=\"n\">Parameters</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">:</span>\n  <span class=\"n\">w</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n  <span class=\"n\">w</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n  <span class=\"n\">w</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">Incidence</span> <span class=\"n\">matrix</span><span class=\"o\">:</span><span class=\"n\">sparse</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">],</span> <span class=\"n\">Num</span><span class=\"p\">[</span><span class=\"o\">×</span><span class=\"p\">,</span> <span class=\"o\">×</span><span class=\"p\">,</span> <span class=\"o\">×</span><span class=\"p\">,</span> <span class=\"o\">×</span><span class=\"p\">,</span> <span class=\"o\">×</span><span class=\"p\">,</span> <span class=\"o\">×</span><span class=\"p\">,</span> <span class=\"o\">×</span><span class=\"p\">,</span> <span class=\"o\">×</span><span class=\"p\">,</span> <span class=\"o\">×</span><span class=\"p\">,</span> <span class=\"o\">×</span><span class=\"p\">,</span> <span class=\"o\">×</span><span class=\"p\">,</span> <span class=\"o\">×</span><span class=\"p\">,</span> <span class=\"o\">×</span><span class=\"p\">,</span> <span class=\"o\">×</span><span class=\"p\">,</span> <span class=\"o\">×</span><span class=\"p\">,</span> <span class=\"o\">×</span><span class=\"p\">,</span> <span class=\"o\">×</span><span class=\"p\">,</span> <span class=\"o\">×</span><span class=\"p\">,</span> <span class=\"o\">×</span><span class=\"p\">,</span> <span class=\"o\">×</span><span class=\"p\">],</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">structural_simplify</span><span class=\"p\">(</span><span class=\"n\">att_prop</span><span class=\"p\">)</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"n\">ExtraEquationsSystemException</span><span class=\"o\">:</span> <span class=\"n\">The</span> <span class=\"n\">system</span> <span class=\"n\">is</span> <span class=\"n\">unbalanced</span><span class=\"o\">.</span> <span class=\"n\">There</span> <span class=\"n\">are</span> <span class=\"mi\">4</span> <span class=\"n\">highest</span> <span class=\"n\">order</span> <span class=\"n\">derivative</span> <span class=\"n\">variables</span> <span class=\"n\">and</span> <span class=\"mi\">5</span> <span class=\"n\">equations</span><span class=\"o\">.</span>\n<span class=\"n\">More</span> <span class=\"n\">equations</span> <span class=\"n\">than</span> <span class=\"n\">variables</span><span class=\"p\">,</span> <span class=\"n\">here</span> <span class=\"n\">are</span> <span class=\"n\">the</span> <span class=\"n\">potential</span> <span class=\"n\">extra</span> <span class=\"n\">equation</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"o\">:</span>\n\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span><span class=\"sb\">```</span>\n</code></pre></div>",
        "id": 272293920,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645118946
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you would need to remove an equation</p>",
        "id": 272294044,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645119000
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; but the only equation I can remove is the equation that indicates that the norm must be unitary</p>",
        "id": 272294339,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645119093
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; No</p>",
        "id": 272294495,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645119155
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>eqs = [\n    collect(D.(vq) .~ vectdquat(vq, w))...\n]</code></p>",
        "id": 272294500,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645119156
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you'd have to remove one of these</p>",
        "id": 272294506,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645119161
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; one of those are overconstrained, since 3 of them determine the fourth if it's unitary.</p>",
        "id": 272294552,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645119183
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; Ok, but this is actually is very hard. Those 4 eqs will provide a unitary quaternion if the initial state is unitary. It does not happen due to numerical errors. Writing the differential equation to somehow force this would be extremely difficult. I think my only solution is then adding a callback and to force unitary norm. Using <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a>, what I always do is <code>u[1:4] /= norm(u[1:4])</code> at the beginning of the dynamic function.</p>",
        "id": 272294976,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645119359
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes, so you have a redundant equation in there that should be replaced by the algebraic relationship</p>",
        "id": 272295447,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645119531
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>eqs = [\n    collect(D.(vq)[1:3] .~ vectdquat(vq, w)[1:3])...,\n    0 ~ 1 - vq[1] - vq[2] - vq[3] - vq[4]\n]</code><br>\nis a valid system</p>",
        "id": 272295551,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645119575
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; This should work, but I am getting the same error. Am I missing something?</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code>           <span class=\"n\">collect</span><span class=\"p\">(</span><span class=\"n\">D</span><span class=\"o\">.</span><span class=\"p\">(</span><span class=\"n\">vq</span><span class=\"p\">)</span> <span class=\"o\">.~</span> <span class=\"n\">vectdquat</span><span class=\"p\">(</span><span class=\"n\">vq</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">))</span><span class=\"o\">...</span>\n           <span class=\"mi\">0</span> <span class=\"o\">~</span> <span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n           <span class=\"p\">]</span>\n<span class=\"mi\">5</span><span class=\"o\">-</span><span class=\"n\">element</span> <span class=\"kt\">Vector</span><span class=\"p\">{</span><span class=\"kt\">Equation</span><span class=\"p\">}</span><span class=\"o\">:</span>\n <span class=\"n\">Differential</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)(</span><span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">))</span> <span class=\"o\">~</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">w</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">w</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">w</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n <span class=\"n\">Differential</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)(</span><span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">))</span> <span class=\"o\">~</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">w</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">w</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">w</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n <span class=\"n\">Differential</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)(</span><span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">))</span> <span class=\"o\">~</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">w</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">w</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">w</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n <span class=\"n\">Differential</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)(</span><span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">))</span> <span class=\"o\">~</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">w</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">w</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">//</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"n\">w</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n <span class=\"mi\">0</span> <span class=\"o\">~</span> <span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"nd\">@named</span> <span class=\"n\">att_prop</span> <span class=\"o\">=</span> <span class=\"n\">ODESystem</span><span class=\"p\">(</span><span class=\"n\">eqs</span><span class=\"p\">)</span>\n<span class=\"n\">Model</span> <span class=\"n\">att_prop</span> <span class=\"n\">with</span> <span class=\"mi\">5</span> <span class=\"n\">equations</span>\n<span class=\"n\">States</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"o\">:</span>\n  <span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">)</span>\n  <span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">)</span>\n  <span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">)</span>\n  <span class=\"n\">vq</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">](</span><span class=\"n\">t</span><span class=\"p\">)</span>\n<span class=\"n\">Parameters</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">:</span>\n  <span class=\"n\">w</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n  <span class=\"n\">w</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n  <span class=\"n\">w</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">Incidence</span> <span class=\"n\">matrix</span><span class=\"o\">:</span><span class=\"n\">sparse</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">],</span> <span class=\"n\">Num</span><span class=\"p\">[</span><span class=\"o\">×</span><span class=\"p\">,</span> <span class=\"o\">×</span><span class=\"p\">,</span> <span class=\"o\">×</span><span class=\"p\">,</span> <span class=\"o\">×</span><span class=\"p\">,</span> <span class=\"o\">×</span><span class=\"p\">,</span> <span class=\"o\">×</span><span class=\"p\">,</span> <span class=\"o\">×</span><span class=\"p\">,</span> <span class=\"o\">×</span><span class=\"p\">,</span> <span class=\"o\">×</span><span class=\"p\">,</span> <span class=\"o\">×</span><span class=\"p\">,</span> <span class=\"o\">×</span><span class=\"p\">,</span> <span class=\"o\">×</span><span class=\"p\">,</span> <span class=\"o\">×</span><span class=\"p\">,</span> <span class=\"o\">×</span><span class=\"p\">,</span> <span class=\"o\">×</span><span class=\"p\">,</span> <span class=\"o\">×</span><span class=\"p\">,</span> <span class=\"o\">×</span><span class=\"p\">,</span> <span class=\"o\">×</span><span class=\"p\">,</span> <span class=\"o\">×</span><span class=\"p\">,</span> <span class=\"o\">×</span><span class=\"p\">],</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)</span>\n\n<span class=\"n\">julia</span><span class=\"o\">&gt;</span> <span class=\"n\">structural_simplify</span><span class=\"p\">(</span><span class=\"n\">att_prop</span><span class=\"p\">)</span>\n<span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"n\">ExtraEquationsSystemException</span><span class=\"o\">:</span> <span class=\"n\">The</span> <span class=\"n\">system</span> <span class=\"n\">is</span> <span class=\"n\">unbalanced</span><span class=\"o\">.</span> <span class=\"n\">There</span> <span class=\"n\">are</span> <span class=\"mi\">4</span> <span class=\"n\">highest</span> <span class=\"n\">order</span> <span class=\"n\">derivative</span> <span class=\"n\">variables</span> <span class=\"n\">and</span> <span class=\"mi\">5</span> <span class=\"n\">equations</span><span class=\"o\">.</span>\n<span class=\"n\">More</span> <span class=\"n\">equations</span> <span class=\"n\">than</span> <span class=\"n\">variables</span><span class=\"p\">,</span> <span class=\"n\">here</span> <span class=\"n\">are</span> <span class=\"n\">the</span> <span class=\"n\">potential</span> <span class=\"n\">extra</span> <span class=\"n\">equation</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"o\">:</span>\n\n<span class=\"n\">Stacktrace</span><span class=\"o\">:</span><span class=\"sb\">```</span>\n</code></pre></div>",
        "id": 272295787,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645119669
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; ops</p>",
        "id": 272295941,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645119732
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; sorry, I see now</p>",
        "id": 272295944,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645119734
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; Thanks @chrisrackauckas! I could create the problem finally! Now I just need to check why I am hitting</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">ERROR</span><span class=\"o\">:</span> <span class=\"n\">LinearAlgebra</span><span class=\"o\">.</span><span class=\"n\">SingularException</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"sb\">````</span>\n</code></pre></div>",
        "id": 272301003,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645121784
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; I think I hit a bug. I am using this eqs:</p>\n<div class=\"codehilite\" data-code-language=\"eqs\"><pre><span></span><code>    collect(D.(vq)[2:4] .~ vectdquat(vq, w)[2:4])...\n    0 ~ 1 - vq[1] * vq[1] - vq[2] * vq[2] - vq[3] * vq[3] - vq[4] * vq[4]\n]```\n(Notice how I start from index 2, because 2:4 is my vectorial part). Then, I define the problem as follows:\n\n```julia&gt; prob = ODEProblem(\n           att_prop,\n           [vq[1] =&gt; 1.0, vq[2] =&gt; 0.0, vq[3] =&gt; 0.0, vq[4] =&gt; 0.0],\n           (0.0, 100.0),\n           [w[1] =&gt; 0.05, w[2] =&gt; 0.0, w[3] =&gt; 0.0]\n       )\nODEProblem with uType Vector{Float64} and tType Float64. In-place: true\ntimespan: (0.0, 100.0)\nu0: 4-element Vector{Float64}:\n 0.0\n 0.0\n 0.0\n 1.0```\nNotice that `vq[1] = 1.0` , but the `u0` vector has `u0[4] = 1.0`.\n</code></pre></div>",
        "id": 272301314,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645121941
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; It solves the problem, but of course with wrong values since the initial condition is different</p>",
        "id": 272301366,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645121974
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; <a href=\"https://github.com/SciML/ModelingToolkit.jl/issues/1458\">https://github.com/SciML/ModelingToolkit.jl/issues/1458</a></p>",
        "id": 272302186,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645122314
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; did you structural simplify?</p>",
        "id": 272304601,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645123391
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; Well, I think I cannot move to MTK yet. @yingbo_ma pointed out that this is expected (the variables can be reordered). Hence, I would need to pass a vector to the callbacks to track the symbol position. In my problem, this will add an enormous complication to track and debug things. However, it is amazing to see how MTK is evolving! We now can propagate attitude using the Quaternion from <a href=\"https://github.com/search?q=ReferenceFrameRotations.jl&amp;type=Repositories\">ReferenceFrameRotations.jl</a>! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> Thanks @chrisrackauckas for the support as always!</p>",
        "id": 272304618,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645123399
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; Yes! I did call <code>structural_simplify</code>. The index really changes.</p>",
        "id": 272304680,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645123427
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>sol[vq]</code></p>",
        "id": 272304690,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645123431
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; Yes! The confusion will happed inside the callback.</p>",
        "id": 272304796,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645123463
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; Since the state vector is reordered.</p>",
        "id": 272304809,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645123470
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; In my case, the dynamic function has 100 lines more or less and the callback more than 20,000 <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> I though I could adapt, but I cannot without a huge rework</p>",
        "id": 272304882,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645123511
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Yeah, we have to reorder equations and variables to optimize the system.</p>",
        "id": 272305110,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645123598
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; Btw, I can now close some issues I opened in the past! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 272305333,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645123691
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Ah, cool. What is it?</p>",
        "id": 272305388,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645123718
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; I just closed 3 issues, all related to this particular problem</p>",
        "id": 272305519,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645123796
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 272305522,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645123801
    },
    {
        "content": "<p>&lt;system&gt; file 8392463-aam.pdf too big to download (3247740 &gt; allowed size: 1000000)</p>",
        "id": 272305987,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645124023
    },
    {
        "content": "<p>[slack] &lt;Fredrik Bagge Carlson&gt; A common trick to make it easier to integrate or optimize systems with quaternion representations of orientation is to not add the constraint, but rather add dynamics that make the norm converge to one, kind of like a stiff spring. For accurate simulations, the approach is not that good unless you use formulas for rotation with non unit quaternion. The attached paper is quite lightweight and details one approach</p>",
        "id": 272305988,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645124024
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; Thanks for the paper @Fredrik Bagge Carlson!</p>",
        "id": 272306551,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645124289
    },
    {
        "content": "<p>[slack] &lt;Jonnie&gt; ^ MATLAB’s Aerospace Blockset uses the trick from this paper too. It's nice for its simplicity, but you have to deal with the issue of how quickly you want it to converge. If you make it too fast, your solver needs to take more steps because you're just introducing faster dynamics into your system.</p>",
        "id": 272323408,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645132470
    },
    {
        "content": "<p>[slack] &lt;wnoise&gt; Generically handling cases where the derivative naturally happens in a different space than the underlying state is hard.  And usually it's a small corner case.   Lie group cases should always have a way to do it with the exponential map.</p>",
        "id": 272330604,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645135337
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; we could do <code>integrator[vq]</code></p>",
        "id": 272332147,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645136245
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; That’s not a good idea… The look up will occur everytime</p>",
        "id": 272332514,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645136343
    },
    {
        "content": "<p>[slack] &lt;Fredrik Bagge Carlson&gt; The nice thing woth the particular paper above is that they use the formulas to rotate with non unit quaternions, so they don't need  the norm to converge very fast, they just need the dynamics to not let the norm drift off to where the numerics goes bad.</p>",
        "id": 272370917,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645171051
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; It is hard but <a href=\"https://github.com/JuliaManifolds/ManifoldDiffEq.jl\">https://github.com/JuliaManifolds/ManifoldDiffEq.jl</a> has fully generic Crouch-Grossman and RKMK schemes <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 272373762,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645173262
    },
    {
        "content": "<p>[slack] &lt;mateuszbaran89&gt; They seem to work quite well</p>",
        "id": 272373785,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645173284
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; Was lsoda solver deleted? I can't make it work.</p>",
        "id": 272419788,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645200200
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; did you <code>using LSODA</code>?</p>",
        "id": 272419851,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645200240
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; mb, didn't know it was required</p>",
        "id": 272419927,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645200260
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; maybe it could be useful to specify it here? <a href=\"https://diffeq.sciml.ai/stable/solvers/ode_solve/#ode_solve\">https://diffeq.sciml.ai/stable/solvers/ode_solve/#ode_solve</a></p>",
        "id": 272419967,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645200281
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; alright, it is writing on the Translations from MATLAB/Python/R section</p>",
        "id": 272420129,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645200364
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://diffeq.sciml.ai/stable/solvers/ode_solve/#LSODA.jl\">https://diffeq.sciml.ai/stable/solvers/ode_solve/#LSODA.jl</a></p>",
        "id": 272420167,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645200381
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; ```This setup provides a wrapper to the algorithm LSODA, a well-known method which uses switching to solve both stiff and non-stiff equations.</p>\n<p>lsoda - The LSODA wrapper algorithm.<br>\nNote that this setup is not automatically included with <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a>. To use the following algorithms, you must install and use <a href=\"https://github.com/search?q=LSODA.jl&amp;type=Repositories\">LSODA.jl</a>:</p>\n<p>]add LSODA<br>\nusing LSODA```</p>",
        "id": 272420172,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645200385
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>lsoda –&gt; lsoda(), though AutoTsit5(Rosenbrock23()) or AutoVern7(Rodas5()) may be more efficient. Note that lsoda() requires the LSODA.jl extension, which can be added via ]add LSODA; using LSODA.</code></p>",
        "id": 272420184,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645200392
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It says it twice <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 272420195,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645200396
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; yes, I was just reading from the recommended Methods section, sorry <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 272420268,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645200441
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; Hi! I need an advice.</p>\n<p>I have inside the dynamics function a vector that is computed using a lot of things from the state vector. However, to compute an input (force) I need the time derivative of this vector. Is there any thing I can to do obtain this time-derivative inside the dynamics? What I am doing is creating a callback to compute it by storing previous values.</p>",
        "id": 272456865,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645218065
    },
    {
        "content": "<p>[slack] &lt;Allan&gt; Is there a good guide on how to write your own structures and functions so that they perform well normally but also work well with Differential equations and AD stuff as well?  For example, If I know I need to write float64 because the algos really need the precision, should I put in AbstractFloats so they work with autodiffs?  Same with matrix and abstract matrix in linear algebra stuff.  I haven't located the guide to using some of these advanced sciml tools well.</p>",
        "id": 272475887,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645229036
    },
    {
        "content": "<p>[slack] &lt;Mutaz Jaber&gt; Hi All,<br>\nI’m trying to simulate metabolite system, but I’m getting a MethodError after trying to solve.</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    #define parameters\n    Cl_renal, V, Vmax, Km, ktr = pop_param\n    # define covariates\n    CrCl, wt = covar\n    # define individual parameters\n    Cl_i = Cl_renal * (CrCl/85 * 70/wt) * (wt/70)^.75\n    V_i  = V * (wt/70)\n    vmax_i = Vmax * (wt/70)^.75\n    km_i  = Km\n    ktr_i = ktr * (wt/70)^.25\n\n    lin_elim = (Cl_i/V_i) * y[3]\n    nonlin_elim = vmax_i*(y[3]/V_i)/(y[3]/V_i + km_i)\n    \"\"\"---------------------------\n    # System definition\n    # initial states:\n    #  y_1(0) = 50mg/kg\n    #  y_2(0) = 0\n    #  y_3(0) = 0\n    ---------------------------\"\"\"\n    dy[1] = - ktr_i * y[1]\n    dy[2] = ktr_i * y[1] - ktr_i * y[2]\n    dy[3] = ktr_i * y[2] - (lin_elim + nonlin_elim)\nend\n\ntime_span = (0.0,48.0)\ncovar       = (85.0, 70.0)\ny0        = [3500, 0.0, 0.0]\npop_param = (14.9, 525.0, 81.2, 0.514, 1.3)\nmustard_ode = ODEProblem(mustard_system, y0,time_span; pop_param, covar)\nmustard_sol = solve(mustard_ode, Tsit5())```\nAny tips? Thanks\n</code></pre></div>",
        "id": 272478959,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645231534
    },
    {
        "content": "<p>[slack] &lt;vaibhavdixit02&gt; Hey Mutaz, can you share the stack trace?</p>",
        "id": 272491770,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645244378
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; Has anyone an opinion on Pseudotransient method? <br>\nIt is getting quite popular in my field for large system as it is Jacobian free with an explicit implementation. Has anyone tried to combine it with <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a>, or does it not make any sense to do that?</p>",
        "id": 272511716,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645269252
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you need <code>&lt;: Real</code> for forward diff.</p>",
        "id": 272515028,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645273135
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>mustard_ode = ODEProblem(mustard_system, y0,time_span; pop_param, covar)</code></p>",
        "id": 272515041,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645273155
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; parameters are not a keyword argument</p>",
        "id": 272515050,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645273164
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>mustard_ode = ODEProblem(mustard_system, y0,time_span, pop_param; covar)</code></p>",
        "id": 272515055,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645273170
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and what the heck is covar?</p>",
        "id": 272515057,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645273175
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that should be parameters too</p>",
        "id": 272515062,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645273185
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; look at the documentation</p>",
        "id": 272515066,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645273187
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://diffeq.sciml.ai/stable/tutorials/ode_example/\">https://diffeq.sciml.ai/stable/tutorials/ode_example/</a></p>",
        "id": 272515071,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645273200
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's <code>f(du,u,p,t)</code> , you cannot make up other signatures.</p>",
        "id": 272515116,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645273209
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It's not Jacobian-free when done well though <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> , at least not necessarily</p>",
        "id": 272515130,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645273246
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but yes there's some stuff being constructed.</p>",
        "id": 272515133,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645273256
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; Interesting. Thx for the answer Chris.</p>",
        "id": 272523899,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645283814
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; As I have interior boundaries in a PDE system, I need to check for my system of 3 unknowns if there are all = 0 for each point. As u is a dual number, I can't use sum(u[i,:]). For now I am using a callback function to save at every step u in a parameter, so I can sum it. Is there a clever way to do it? <br>\nHere is the idea:<br>\n&lt;<br>\nfor i in 2:nx-1<br>\n    if sum(u[i,:]) !== 0.0<br>\n        for j in 1:size(u, 2) <br>\n            du[i, j] = something<br>\n    end<br>\n    else<br>\n        du[i, :] .= 0<br>\n    end<br>\nend<br>\n&gt;</p>",
        "id": 272526461,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645286723
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Just use a mass matrix form?</p>",
        "id": 272526660,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645286925
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; mmh, I am pretty ignorant so I don't know what this is. Google tells me it is something that is used a lot in finite element.<br>\nBut for my case, I guess you mean a matrix with 1 for where my points are and 0 when it is a boundary?</p>",
        "id": 272527000,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645287325
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; just to precise that I am using finite differences in my case</p>",
        "id": 272527078,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645287390
    },
    {
        "content": "<p>[slack] &lt;Mutaz Jaber&gt; <code>covar</code> is defined as you can see as <code>covariates</code> . I was able to run if I combine both <code>pop_param</code> and <code>covar</code> as <code>p</code>. I thought one can add another arguments as <code>kwargs</code>  In ODE problem. (That is defined in a function.</p>",
        "id": 272556946,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645321490
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Hi,</p>\n<p>I have an issue wih setting up a jacobian free method to solve an implicit ODE (aka an ODE with a mass matrix). I dont understand the error that is thrown. Can we use jacobian-free methods with implicit ode?</p>\n<p>The code is basically</p>\n<div class=\"codehilite\" data-code-language=\"jv\"><pre><span></span><code>_f = ODEFunction{false}(Fwave;  mass_matrix = spdiagm(0 =&gt; vcat(ones(2N),0.)), jac_prototype = Jv);\nprobFreez_ode = ODEProblem(_f, wave0, (0,12.), par_nf)\nsolFreez = @time solve(probFreez_ode, Rodas4P2(linsolve =\n    KrylovJL_GMRES(rtol = 1e-8, atol = 1e-9, itmax = 10, verbose = 0), concrete_jac=false),\n    progress = true; reltol = 1e-6, abstol = 1e-10, dt =1e-3)```\nI get:\n\n```ERROR: MethodError: Cannot `convert` an object of type\n  AnalyticalJacVecOperator{Float64, typeof(dFwave), Vector{Float64}, NamedTuple{(:β, :aee, :aie, :aei, :aii, :θe, :θi, :τ, :σe, :σi, :updateσi, :Ke, :Ki, :D, :N, :L, :X, :hx, :uref, :vref), Tuple{Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Bool, PaddedConv{Vector{Float64}}, PaddedConv{Vector{Float64}}, SparseMatrixCSC{Float64, Int64}, Int64, Float64, Vector{Float64}, Float64, Vector{Float64}, Vector{Float64}}}, Float64, Bool} to an object of type\n  AbstractMatrix{T} where T\nClosest candidates are:\n  convert(::Type{AbstractMatrix{T} where T}, ::LinearMaps.WrappedMap) at /Users/rveltz/.julia/packages/LinearMaps/1cWDb/src/conversion.jl:65\n  convert(::Type{AbstractMatrix{T} where T}, ::DiffEqOperators.DiffEqOperatorCombination) at /Users/rveltz/.julia/packages/DiffEqOperators/z4eVP/src/composite_operators.jl:47\n  convert(::Type{AbstractMatrix{T} where T}, ::LinearMaps.UniformScalingMap) at /Users/rveltz/.julia/packages/LinearMaps/1cWDb/src/conversion.jl:58\n  ...```\n</code></pre></div>",
        "id": 272594972,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645366591
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; I guess the solver is confused because a mass matrix is used and a jacobian free method is provided</p>",
        "id": 272599950,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645372369
    },
    {
        "content": "<p>[slack] &lt;Nick Jordan&gt; Hi, what your thoughts on Message Passing Neural PDE Solvers? I'd love to see some benchmarks.</p>",
        "id": 272602431,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645374970
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; What if you do it without the analytical JacVec operator?</p>",
        "id": 272607367,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645380501
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; We need an implementation first</p>",
        "id": 272607385,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645380536
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; itt works well!</p>",
        "id": 272608649,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645382095
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; do you have an idea?</p>",
        "id": 272612525,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645386909
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; i dont know if it matters, but in SDIRK you dont have lines like</p>\n<div class=\"codehilite\" data-code-language=\"if\"><pre><span></span><code>    W = update_coefficients!(W, ustep, p, tstep)\n  end```\n</code></pre></div>",
        "id": 272618265,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645393130
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; so that’s why Rodas cannot be Jacobian Free ??</p>",
        "id": 272618280,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645393152
    },
    {
        "content": "<p>[slack] &lt;Nick Jordan&gt; Yeah I'm willing to implement it but I'm just a beginner in Julia</p>",
        "id": 272620649,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645395669
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Rodas does do Jacobian free. It's in the tutorial</p>",
        "id": 272621339,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645396466
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; You literally just switch to GMREE</p>",
        "id": 272621345,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645396478
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; OK, so I dont understand the mistake</p>",
        "id": 272621844,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645397150
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It only occurs when you use AnalyticalJacVecOperator?</p>",
        "id": 272621903,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645397190
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; we already have this discussion for ODE and it works fine (although with TRBDF2</p>",
        "id": 272621912,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645397201
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; but with mass matrix and Rodas, nope</p>",
        "id": 272621925,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645397220
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; even just GMRES?</p>",
        "id": 272621933,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645397233
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; not sure I got it</p>",
        "id": 272621945,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645397260
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; ?<br>\nGMRES =</p>\n<div class=\"codehilite\" data-code-language=\"solve\"><pre><span></span><code>    KrylovJL_GMRES(rtol = 1e-8, atol = 1e-9, itmax = 10, verbose = 0), concrete_jac=false),\n    progress = true; reltol = 1e-6, abstol = 1e-10, dt =1e-3)```\n</code></pre></div>",
        "id": 272621950,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645397274
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; well there's two things here, one a discussion matrix-free, but secondly a discussion of analytical Jac Vec</p>",
        "id": 272621996,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645397290
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; let's keep those separate</p>",
        "id": 272621998,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645397295
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; OK, this is with AnalyticalJacVecOperator</p>",
        "id": 272622011,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645397317
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; let me try GMRES without it</p>",
        "id": 272622016,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645397327
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; so then what's the issue Jacobian free?</p>",
        "id": 272622020,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645397338
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; it seems to work</p>",
        "id": 272622048,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645397391
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; so the issue is probably with analytical Jac Vec</p>",
        "id": 272622107,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645397428
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; okay yeah, that'll need an issue.</p>",
        "id": 272622114,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645397443
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; the issue is then this line:</p>\n<p><code>dz = _reshape(W \\ _vec(ztmp), axes(ztmp))</code></p>",
        "id": 272622139,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645397488
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; I thinks \\ is not defined</p>",
        "id": 272622146,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645397498
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; so out of place only?</p>",
        "id": 272622154,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645397514
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; yes</p>",
        "id": 272622157,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645397521
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; <span aria-label=\"disappointed\" class=\"emoji emoji-1f61e\" role=\"img\" title=\"disappointed\">:disappointed:</span></p>",
        "id": 272622197,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645397529
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; I remember that now, last time inplace turned the odds</p>",
        "id": 272622205,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645397548
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah out of place needs to gets its linear solve handling upgraded</p>",
        "id": 272622215,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645397564
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; ill try this but that need some serious refactoring. Ill report here. Thank you a lot</p>",
        "id": 272622231,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645397597
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; no problem</p>",
        "id": 272622236,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645397614
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Hi,</p>\n<p>In catalyst, in order to extract the deterministic equations associatted to a reaction, I used to do</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>  f = open(filename, \"w\")\n  for i in ChangCaMKII_simpler.syms\n      write(f, @sprintf(\"%s=%s \\n\", i, ChangCaMKII_simpler.f_func[ChangCaMKII_simpler.syms.==i][]))\n  end\n  close(f)\nend```\nCan someone please help me do this with the new Catalyst synthax?\n\nThanks a lot\n</code></pre></div>",
        "id": 272646465,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645424774
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; @isaacsas can you give me a push please? It is for a paper in revision</p>",
        "id": 272690230,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645451282
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Do you want the symbolic ODEs, the generated Julia code for <code>f(u)</code> in <code>du/dt = f(u)</code>, or the symbolic rate law associated with each reaction?</p>",
        "id": 272692783,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645452536
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; I don't think we have a list of the individual ODEs' Julia code anymore, just a single expression for the whole function that ModelingToolkit returns.</p>",
        "id": 272693191,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645452739
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; I want the generated Julia code for <code>f(u)</code></p>",
        "id": 272693860,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645453080
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; You can get the generated Julia code for the ODEs like:</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>rn = @reaction_network begin\n     k, A --&gt; B\n    end k\nosys = convert(ODESystem, rn)\nf_gen = generate_function(osys, states(osys), parameters(osys); expression=Val{false}, checkbounds=false)\nf_gen[1] # out of place version\nf_gen[2] # in place version```\n</code></pre></div>",
        "id": 272693920,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645453096
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; I have it in my code buut I have to show the reviewers how I got it</p>",
        "id": 272693940,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645453107
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; from the reactions</p>",
        "id": 272693954,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645453116
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Unfortunately it isn't very readable anymore.</p>",
        "id": 272694026,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645453165
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Maybe I was not very clear. I want to end up with the right hand side like this</p>\n<p><code>∂CaM0=(((((-((kf_2C / 2) * CaM0 * Ca ^ 2) + kb_2C * CaM2C) - (kf_2N / 2) * CaM0 * Ca ^ 2) + kb_2N * CaM2N) - kf_CaM0 * CaM0 * mKCaM) + kb_CaM0 * KCaM0) + k2 * PCaM0\n    ∂CaM2C=((((((kf_2C / 2) * CaM0 * Ca ^ 2 - kb_2C * CaM2C) - (kf_2N / 2) * CaM2C * Ca ^ 2) + kb_2N * CaM4) - kf_CaM2C * CaM2C * mKCaM) + kb_CaM2C * KCaM2C) + k2 * PCaM2C\n    ∂CaM2N=((((((kf_2N / 2) * CaM0 * Ca ^ 2 - kb_2N * CaM2N) - (kf_2C / 2) * CaM2N * Ca ^ 2) + kb_2C * CaM4) - kf_CaM2N * CaM2N * mKCaM) + kb_CaM2N * KCaM2N) + k2 * PCaM2N</code><br>\nnot the out of place function</p>",
        "id": 272694182,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645453238
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; let me try your suggestion</p>",
        "id": 272694293,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645453299
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Just type <code>equations(osys)</code> that will give the symbolic equations. You can even run Latexify on it to get latexed ODEs.</p>\n<p>Right now you can either get the symbolic ODEs, or you can get the full Julia-generated functions which are not really aimed at being human readable.</p>",
        "id": 272694544,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645453420
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Oh I think this is it!</p>",
        "id": 272696418,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645454356
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; I ll check with my collaborators</p>",
        "id": 272696431,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645454367
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; thanks a lot! that seems to do it</p>",
        "id": 272699056,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645455675
    },
    {
        "content": "<p>[slack] &lt;nathanaelbosch&gt; Is there any way to check inside <code>OrdinaryDiffEq.alg_cache</code> if the given problem corresponds to a <code>SecondOrderODEProblem</code> or a <code>DynamicalODEProblem</code>? As far as I can tell, I can only check that <code>f isa DynamicalODEFunction</code>, but that does not provide enough information.</p>",
        "id": 272730605,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645474102
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that would need a trait. Don't we specify that trait in the <code>prob</code>?</p>",
        "id": 272740140,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645481912
    },
    {
        "content": "<p>[slack] &lt;nathanaelbosch&gt; Yes the information is available in <code>prob</code>, but not in <code>f</code>. The context is that I'd like to build specialized ODE filters in <a href=\"https://github.com/search?q=ProbNumDiffEq.jl&amp;type=Repositories\">ProbNumDiffEq.jl</a> for different problem types. They are essentially all the same algorithm (Kalman filters), but need different \"information operators\". Since right now I build the solvers inside <code>OrdinaryDiffEq.alg_cache</code>  I wondered if it would work to specialize in there, but now I wonder if that's the point where I should write my own <code>solve</code> function... Alternatively I might do the things that rely on the specific problem in <code>OrdinaryDiffEq.initialize!</code></p>",
        "id": 272741268,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645482990
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; ok it works with a preconditioner. IDA is 7x faster though, very impressive</p>",
        "id": 272797277,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645533944
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; IDA with preconditioner?</p>",
        "id": 272830869,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645548342
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; I have a problem with CVODE_BDF solver when I add a callback function. It works fine with the ones from differentialequations.jl but CVODE_BDF crash. Is there something I should be aware of with Sundials? <br>\nI am working on multi-component diffusion, and my callback simply update the values of D between each time step:<br>\n´´´<br>\nfunction Diffusion_para_1D!(D, D0, u)<br>\n    @inbounds for i in 1:nx<br>\n        # loop over the matrix D for each point<br>\n        @inbounds for I in CartesianIndices((size(D,2), size(D,3)))<br>\n            j, k = Tuple(I)</p>\n<div class=\"codehilite\"><pre><span></span><code>        # sum of elements\n        sum = D0[1] .* u[i, 1] + D0[2] .* u[i, 2]  + D0[3] .* u[i, 3] +\n            D0[4] .* (1 .- u[i, 1] .- u[i, 2] .- u[i, 3])\n\n        # update D with experimental data and previous concentrations\n        D[i, j, k] = D0[j] * Id[j,k] - D0[j] * u[i, j] / sum * (D0[k] - D0[end])\n    end\nend\n</code></pre></div>\n\n<p>end</p>\n<h1>function to update diffusion coefficients at each timestep</h1>\n<p>function affect!(u, t, integrator)<br>\n    Diffusion_para_1D!(integrator.p[1], integrator.p[2], u);<br>\nend</p>\n<h1>callback function to update diffusion coefficients at each timestep</h1>\n<p>diff_call = FunctionCallingCallback(affect!; funcat=Vector{Float64}(), func_everystep=true, func_start = false, tdir=1);</p>\n<p>using Sundials<br>\nsol = solve(prob, CVODE_BDF(linear_solver=:GMRES), callback = diff_call, progress = true, progress_steps = 1, save_start=true);<br>\n´´´</p>",
        "id": 272833038,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645549093
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; and the error:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code> <span class=\"p\">[</span><span class=\"n\">CVODES</span> <span class=\"n\">ERROR</span><span class=\"p\">]</span>  <span class=\"n\">CVode</span>\n  <span class=\"n\">At</span> <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"mf\">2.60395e-08</span> <span class=\"n\">and</span> <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"mf\">5.23713e-12</span><span class=\"p\">,</span> <span class=\"n\">the</span> <span class=\"n\">corrector</span> <span class=\"n\">convergence</span> <span class=\"n\">test</span> <span class=\"n\">failed</span> <span class=\"n\">repeatedly</span> <span class=\"n\">or</span> <span class=\"n\">with</span> <span class=\"o\">|</span><span class=\"n\">h</span><span class=\"o\">|</span> <span class=\"o\">=</span> <span class=\"n\">hmin</span><span class=\"o\">.</span>\n</code></pre></div>",
        "id": 272833263,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645549181
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what about with a different linear solver?</p>",
        "id": 272835372,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645550002
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; I have some questions regarding sensealgs:</p>\n<ol>\n<li>For <code>InterplatingAdjoint</code>, does it use all the timesteps of the forward pass by default? If checkpointing is used, does it mean that it will use <strong>less</strong> information from the forward pass than by default? In that case, checkpointing is used to reduce memory usage while making the computation of the backprop harder/more expensive?</li>\n<li>For <code>BacksolveAdjoint</code>, if I’m not mistaken the behaviour is the opposite to <code>InterpolatingAdjoint</code>? <strong>Not</strong> using checkpointing will save a lot of memory but will make the backprop very unstable. Using checkpointing increases memory usage while increasing stability.<br>\nAm I getting it right? I’m investigating ways to speed up the backpropagation of UDEs. So far the default option with <code>InterpolatingAdjoint</code> is the fastest, but I’m curious to see if using checkpointing or attempting <code>BacksolveAdjoint</code> with checkpointing could speed things up. Thanks!</li>\n</ol>",
        "id": 272846371,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645554519
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Does someone recognize this test failure? <a href=\"https://github.com/SciML/ModelingToolkit.jl/runs/5292741836?check_suite_focus=true\">https://github.com/SciML/ModelingToolkit.jl/runs/5292741836?check_suite_focus=true</a></p>",
        "id": 272854706,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645558151
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; 1. yes, no (I think you still need to adjust the solution saving yourself, but I am not 100% sure), and yes</p>\n<ol start=\"2\">\n<li>yes</li>\n</ol>",
        "id": 272855015,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645558321
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; I doubt BacksolveAdjoint speeds up any system that's not limited by memory. Even then, you should be better of using checkpointing. Did see the adjoint benchmark paper?</p>",
        "id": 272855258,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645558429
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; <a href=\"https://arxiv.org/pdf/1812.01892.pdf\">https://arxiv.org/pdf/1812.01892.pdf</a></p>",
        "id": 272855432,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645558510
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; Hi Yingbo, thanks for the info! Nope, that paper went under my radar. I’ll have a look!</p>",
        "id": 272855612,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645558606
    },
    {
        "content": "<p>[slack] &lt;Jordi Bolibar&gt; And a bonus parallel question: in the same scope of trying to speed things up, if I compute the loss based on a matrix of MxN size, should I expect a faster backprop if I just computed it for a random subset of points (e.g. 10) of that matrix? I’m doing some tests and so far I don’t have any clear results.</p>",
        "id": 272856174,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645558912
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Just glancing at the error, it seems like SBMLToolkit is generating reaction rate laws with non-integer stoichiometry, which Catalyst only just started supporting a couple days ago. It may be that something didn't crash before by luck and is now hitting an error check. We didn't make a breaking release as this wasn't supported before (and I'm actually surprised their old code didn't crash).</p>",
        "id": 272856238,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645558925
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; &gt; [slack] &lt;chrisrackauckas&gt; what about with a different linear solver?</p>\n<p>Same issue with :Dense</p>\n<p>´´´<br>\nsol = solve(prob, CVODE_BDF(linear_solver=:Dense), callback = diff_call, progress = true, progress_steps = 1, save_start=true);<br>\n´´´<br>\n´´´<br>\n[CVODES ERROR]  CVode<br>\n  At t = 2.60395e-08 and h = 5.2491e-12, the corrector convergence test failed repeatedly or with |h| = hmin.<br>\n´´´</p>",
        "id": 272856310,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645558959
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; I will open an issue if you don't see anything weird</p>",
        "id": 272856496,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645559054
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; That works totally fine with TRBDF2 or FBDF</p>",
        "id": 272856587,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645559096
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @anandj</p>",
        "id": 272859335,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645560326
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; You always need the full forward. The difference is how you compute it</p>",
        "id": 272859453,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645560369
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Back solve recomputes it</p>",
        "id": 272859460,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645560374
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Interpolating and quadrature store it</p>",
        "id": 272859496,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645560393
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Checkpoints means you store only a few and recompute as needed</p>",
        "id": 272859524,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645560420
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; <a href=\"https://github.com/SciML/SBMLToolkit.jl/blob/eb458c4cc017118e55c8363cafcaac6bcddaefd7/test/reactionsystem.jl#L56-L67\">https://github.com/SciML/SBMLToolkit.jl/blob/eb458c4cc017118e55c8363cafcaac6bcddaefd7/test/reactionsystem.jl#L56-L67</a></p>",
        "id": 272866869,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645563967
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; for example is using floating point stoichiometry but not using <code>combinatoric_ratelaws=false</code> when generating the ODESystem.</p>",
        "id": 272866921,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645563995
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; thanks Sam. SBML has always returned floats, but they’ve always been floats of ints so it didn’t matter</p>",
        "id": 272866924,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645563998
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; Mirek doesn’t like dynamic dispatch so there’s little chance that we can actually have SBML return Ints. but ill just add the kwarg everywhere</p>",
        "id": 272866998,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645564042
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Ahh, that's going to really reduce functionality though. Most network functions are still constrained to integer. When generating a Catakyst <code>ReactionSystem</code> you can't check if the float is an integer value, and convert if it is for stoichiometry?</p>",
        "id": 272867160,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645564112
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; You probably want <code>combinatoric_ratelaws=false</code> anyways I'm guessing.</p>",
        "id": 272867225,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645564158
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; Okay, I’ll ask to have it fixed in SBML, but if it doesn’t I can try to just convert to Int, but that’s sort of messy</p>",
        "id": 272867475,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645564299
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; You could just add a check around <a href=\"https://github.com/SciML/SBMLToolkit.jl/blob/eb458c4cc017118e55c8363cafcaac6bcddaefd7/src/reactionsystem.jl#L114\">https://github.com/SciML/SBMLToolkit.jl/blob/eb458c4cc017118e55c8363cafcaac6bcddaefd7/src/reactionsystem.jl#L114</a> that if all the stoichiometry values are actually integer, the should be converted to integer and that is passed.</p>",
        "id": 272867501,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645564316
    },
    {
        "content": "<p>[slack] &lt;anandj&gt; good idea</p>",
        "id": 272867789,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645564457
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Seems like the path of least resistance <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 272867813,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645564478
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; withourt</p>",
        "id": 272872994,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645567499
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Basically Rodas4p (jac free + precond) vs IDA(linear_solver=:LapackDense)</p>",
        "id": 272873039,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645567528
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; I am impressed by IDA</p>",
        "id": 272873068,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645567545
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's going to scale better for larger equations. is this more than 100 equations?</p>",
        "id": 272874128,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645568157
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; 1025</p>",
        "id": 272874829,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645568409
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; you are right</p>",
        "id": 272874910,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645568454
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; in term of implicit solver, what would be the closest to IDA?</p>",
        "id": 272874936,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645568474
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; DFBDF</p>",
        "id": 272874949,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645568488
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but we haven't finished optimizing it yet</p>",
        "id": 272874954,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645568494
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it should work though, just not as optimally</p>",
        "id": 272874961,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645568501
    },
    {
        "content": "<p>[gitter] &lt;falbarelli&gt; Is there a simple way to have a progress bar in Jupyter notebook?</p>",
        "id": 273220026,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645790444
    },
    {
        "content": "<p>[gitter] &lt;falbarelli&gt; I thought it would be something easy to find, but I've been struggling to find an answer on this on google for 40 minutes...</p>",
        "id": 273220076,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1645790476
    },
    {
        "content": "<p>[gitter] &lt;NilsBruch&gt; Hey! The tutorial on Boundary Value Problems states that: \"The third argument of BVProblem is the initial guess of the solution, which is constant in this example.\" However, it does not say how to give a non constant initial solution to the solver. I mean something like, instead of u(t)=pi/2 and u'(t)=pi/2 for all t, you have something like u(t)=sin(t) and u'(t)=cos(t). Thanks!</p>",
        "id": 274595027,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1646768324
    },
    {
        "content": "<p>[gitter] &lt;NilsBruch&gt; I completely forgot the question. ^^ Could somebody elaborate on how to define a nontrivial initial guess? I already looked into the code itself and apparently there is a way of doing that but I don't understand how.</p>",
        "id": 274598178,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1646769712
    },
    {
        "content": "<p>[gitter] &lt;dynamic-queries&gt; Hello DiffEq community. <br>\nI plan to apply for GSoC 2022 and I would like to contribute to <a href=\"https://github.com/SciML/OrdinaryDiffEq.jl/issues/1063\">https://github.com/SciML/OrdinaryDiffEq.jl/issues/1063</a> <br>\nI'd be thankful if you could help me with my application and help me make relevant decisions during this project. <br>\nRahul</p>",
        "id": 276068591,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1647876591
    },
    {
        "content": "<p>[gitter] &lt;ChrisRackauckas&gt; @dynamic-queries as a starer PR, you should try doing <a href=\"https://github.com/SciML/OrdinaryDiffEq.jl/issues/1601\">https://github.com/SciML/OrdinaryDiffEq.jl/issues/1601</a> and write about that in your application. <a href=\"http://devdocs.sciml.ai/latest/contributing/adding_algorithms/\">http://devdocs.sciml.ai/latest/contributing/adding_algorithms/</a> would be helpful.</p>",
        "id": 276093743,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1647886937
    },
    {
        "content": "<p>[gitter] &lt;dynamic-queries&gt; Thanks @ChrisRackauckas.</p>",
        "id": 276173130,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1647948049
    },
    {
        "content": "<p>[gitter] &lt;ChrisRackauckas&gt; Hello everyone! SciMLCon is starting soon! Information below!</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">Hi</span> <span class=\"n\">SciMLCon</span> <span class=\"n\">attendees</span><span class=\"p\">,</span>\n\n<span class=\"n\">This</span> <span class=\"n\">is</span> <span class=\"n\">to</span> <span class=\"n\">quickly</span> <span class=\"n\">recap</span> <span class=\"n\">the</span> <span class=\"n\">gameplan</span> <span class=\"k\">for</span> <span class=\"n\">today</span> <span class=\"n\">at</span> <span class=\"n\">SciMLCon</span> <span class=\"mi\">22</span><span class=\"o\">!</span> <span class=\"n\">The</span> <span class=\"n\">conference</span> <span class=\"n\">will</span> <span class=\"n\">take</span> <span class=\"n\">place</span> <span class=\"n\">on</span> <span class=\"n\">YouTube</span> <span class=\"o\">+</span> <span class=\"n\">Discord</span><span class=\"o\">/</span><span class=\"n\">Slack</span> <span class=\"n\">from</span> <span class=\"mi\">9</span> <span class=\"n\">AM</span> <span class=\"n\">to</span> <span class=\"mi\">6</span> <span class=\"n\">PM</span> <span class=\"n\">EDT</span> <span class=\"n\">on</span> <span class=\"n\">March</span> <span class=\"mi\">23</span><span class=\"n\">rd</span> <span class=\"mf\">2022.</span> <span class=\"n\">If</span> <span class=\"n\">you</span> <span class=\"n\">have</span> <span class=\"n\">not</span> <span class=\"n\">registered</span> <span class=\"n\">yet</span><span class=\"p\">,</span> <span class=\"n\">please</span> <span class=\"n\">sign</span> <span class=\"n\">up</span> <span class=\"k\">for</span> <span class=\"n\">the</span> <span class=\"n\">free</span> <span class=\"n\">ticket</span> <span class=\"n\">here</span> <span class=\"n\">at</span> <span class=\"n\">EventBrite</span><span class=\"o\">.</span>\n\n<span class=\"n\">All</span> <span class=\"n\">talks</span> <span class=\"n\">will</span> <span class=\"n\">be</span> <span class=\"n\">livestreamed</span> <span class=\"n\">on</span> <span class=\"n\">YouTube</span><span class=\"p\">,</span> <span class=\"n\">on</span> <span class=\"n\">the</span> <span class=\"n\">Julia</span> <span class=\"n\">programming</span> <span class=\"n\">language</span> <span class=\"n\">channel</span> <span class=\"n\">at</span> <span class=\"n\">the</span> <span class=\"n\">following</span> <span class=\"n\">link</span> <span class=\"n\">https</span><span class=\"o\">://</span><span class=\"n\">www</span><span class=\"o\">.</span><span class=\"n\">youtube</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">watch</span><span class=\"o\">?</span><span class=\"n\">v</span><span class=\"o\">=</span><span class=\"n\">NSIAfccnq</span><span class=\"o\">-</span><span class=\"mf\">0.</span> <span class=\"n\">Attendees</span> <span class=\"n\">are</span> <span class=\"n\">encouraged</span> <span class=\"n\">to</span> <span class=\"n\">join</span> <span class=\"n\">the</span> <span class=\"n\">conference</span> <span class=\"n\">chat</span> <span class=\"n\">platform</span> <span class=\"n\">Discord</span> <span class=\"n\">to</span> <span class=\"n\">interact</span> <span class=\"n\">with</span> <span class=\"n\">other</span> <span class=\"n\">attendees</span> <span class=\"n\">and</span> <span class=\"n\">ask</span> <span class=\"n\">questions</span> <span class=\"n\">after</span> <span class=\"n\">each</span> <span class=\"n\">talk</span><span class=\"o\">.</span>\n\n<span class=\"n\">To</span> <span class=\"n\">join</span> <span class=\"n\">the</span> <span class=\"n\">server</span><span class=\"p\">,</span> <span class=\"n\">click</span> <span class=\"n\">on</span> <span class=\"n\">the</span> <span class=\"n\">following</span> <span class=\"n\">URL</span><span class=\"o\">:</span> <span class=\"n\">https</span><span class=\"o\">://</span><span class=\"n\">discord</span><span class=\"o\">.</span><span class=\"n\">gg</span><span class=\"o\">/</span><span class=\"n\">PRqc3NehEr</span><span class=\"o\">.</span> <span class=\"n\">Make</span> <span class=\"n\">sure</span> <span class=\"n\">to</span> <span class=\"n\">find</span> <span class=\"n\">the</span> <span class=\"c\">#scimlcon channel. We have also created #scimlcon on the Julia Slack where you can find attendees and ask questions too.</span>\n\n<span class=\"n\">Speakers</span><span class=\"p\">,</span> <span class=\"n\">check</span> <span class=\"n\">your</span> <span class=\"n\">emails</span> <span class=\"k\">for</span> <span class=\"n\">the</span> <span class=\"n\">calendar</span> <span class=\"n\">invite</span> <span class=\"k\">for</span> <span class=\"n\">when</span> <span class=\"n\">you</span> <span class=\"n\">should</span> <span class=\"n\">join</span> <span class=\"n\">the</span> <span class=\"n\">Streamyard</span> <span class=\"n\">platform</span><span class=\"o\">.</span> <span class=\"n\">If</span> <span class=\"n\">there</span> <span class=\"n\">are</span> <span class=\"n\">any</span> <span class=\"n\">questions</span> <span class=\"n\">on</span> <span class=\"n\">anything</span> <span class=\"k\">else</span><span class=\"p\">,</span> <span class=\"n\">join</span> <span class=\"n\">the</span> <span class=\"n\">chats</span> <span class=\"n\">and</span> <span class=\"n\">ask</span> <span class=\"n\">away!</span>\n\n<span class=\"n\">Have</span> <span class=\"n\">a</span> <span class=\"n\">great</span> <span class=\"n\">conference!</span>\n\n<span class=\"n\">Best</span><span class=\"p\">,</span>\n\n<span class=\"n\">The</span> <span class=\"n\">SciMLCon</span> <span class=\"mi\">22</span> <span class=\"n\">Organizing</span> <span class=\"n\">Committee</span>\n</code></pre></div>",
        "id": 276324751,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1648038137
    },
    {
        "content": "<p>[gitter] &lt;acubed3&gt; Selam!</p>\n<p>Could anyone please clarify how can I use WienerProcess in SDEProblem in the Python package diffeqpy?</p>",
        "id": 276775395,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1648369740
    },
    {
        "content": "<p>[gitter] &lt;acubed3&gt; I try to use <code>diffeqpy.WienerProcess(1,1)</code> but it seems that this does not work</p>",
        "id": 276775421,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1648369790
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; Hi, first, congrats for the SciMLCon for people who participated/organized, I had lots of fun following some of the talks. <br>\nI am trying to implement a callback function with StepsizeLimiter and I am a bit confused about the function dtFE I should give. Should this function return my max timestep at the end of it?</p>",
        "id": 276805926,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1648412637
    },
    {
        "content": "<p>[gitter] &lt;ChrisRackauckas&gt; yes</p>",
        "id": 276806206,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1648412993
    },
    {
        "content": "<p>[gitter] &lt;ChrisRackauckas&gt; what is your errir?</p>",
        "id": 276806222,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1648413002
    },
    {
        "content": "<p>[gitter] &lt;Iddingsite&gt; Thx!</p>",
        "id": 276806298,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1648413090
    },
    {
        "content": "<p>[gitter] &lt;acubed3&gt; I have the set of equations look like:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">du</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"n\">dt</span> <span class=\"o\">+</span> <span class=\"n\">g</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">dW</span><span class=\"p\">,</span>\n</code></pre></div>\n<p>where <code>dW</code> is the Wiener process with zero mean and volatility equals to <code>2*T</code> is pre-defined constant</p>\n<p>As I understand, <code>diffeqpy</code>uses Wiener process of zero mean and unit volatility by default. To understand how can I use the desired Wiener process, I have tried the following:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">from</span> <span class=\"n\">diffeqpy</span> <span class=\"k\">import</span> <span class=\"n\">de</span>\n\n<span class=\"n\">D</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>\n<span class=\"n\">W</span> <span class=\"o\">=</span> <span class=\"n\">de</span><span class=\"o\">.</span><span class=\"n\">WienerProcess</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"n\">D</span><span class=\"p\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"o\">:</span>\n    <span class=\"k\">return</span> <span class=\"mf\">1.01</span><span class=\"o\">*</span><span class=\"n\">u</span>\n\n<span class=\"n\">def</span> <span class=\"n\">g</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">,</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"o\">:</span>\n    <span class=\"k\">return</span> <span class=\"mf\">0.87</span><span class=\"o\">*</span><span class=\"n\">u</span>\n\n<span class=\"n\">u0</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span>\n<span class=\"n\">tspan</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"n\">prob</span> <span class=\"o\">=</span> <span class=\"n\">de</span><span class=\"o\">.</span><span class=\"n\">SDEProblem</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"n\">g</span><span class=\"p\">,</span><span class=\"n\">u0</span><span class=\"p\">,</span><span class=\"n\">tspan</span><span class=\"p\">,</span> <span class=\"n\">noise</span><span class=\"o\">=</span><span class=\"n\">W</span><span class=\"p\">)</span>\n<span class=\"n\">sol</span> <span class=\"o\">=</span> <span class=\"n\">de</span><span class=\"o\">.</span><span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">prob</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>During evaluation, this code snippet raises:<br>\n<code>RuntimeError: &lt;PyCall.jlwrap (in a Julia function called from Python)\nJULIA: type Array has no field dW</code></p>",
        "id": 276836366,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1648452806
    },
    {
        "content": "<p>[gitter] &lt;acubed3&gt; In addition, it highlights the ver last line as suspicious:</p>",
        "id": 276836457,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1648452864
    },
    {
        "content": "<p>[gitter] &lt;acubed3&gt; ```<br>\nsol = de.solve(prob)</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code>\n</code></pre></div>",
        "id": 276836485,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1648452893
    },
    {
        "content": "<p>[gitter] &lt;acubed3&gt; I follows the documentation: <a href=\"https://diffeq.sciml.ai/stable/features/noise_process/\">https://diffeq.sciml.ai/stable/features/noise_process/</a><br>\n(section \"Using Noise Processes\", subsection \"Passing a Noise Process to a Problem Type\")</p>",
        "id": 276836592,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1648452974
    },
    {
        "content": "<p>[gitter] &lt;ChrisRackauckas&gt; it seems the auto-generated wrapper is messing up for that case. Can you open an issue?</p>",
        "id": 276845630,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1648458700
    },
    {
        "content": "<p>[gitter] &lt;acubed3&gt; I have opened the issue, see: <a href=\"https://github.com/SciML/diffeqpy/issues/102\">https://github.com/SciML/diffeqpy/issues/102</a></p>",
        "id": 276855546,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1648464992
    },
    {
        "content": "<p>[gitter] &lt;divyanshutwt_twitter&gt; Hola people,</p>",
        "id": 277606614,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1648980324
    },
    {
        "content": "<p>[gitter] &lt;divyanshutwt_twitter&gt; Hola people,<br>\nI'm Divyanshu, a final-year undergrad from India. I wanna apply for Google Season of Docs'22. To be specific, I wanna apply for the project <code>Tutorial Writing</code>. Can anyone please guide me with the process? I will be grateful for the initiative.</p>",
        "id": 277607512,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1648980814
    },
    {
        "content": "<p>[gitter] &lt;ChrisRackauckas&gt; @divyanshu I recommend joining the Julia slack <a href=\"https://julialang.org/slack/\">https://julialang.org/slack/</a> with the #diffeq-bridged channel. Most people are on the Slack.</p>",
        "id": 277608514,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1648981420
    },
    {
        "content": "<p>[gitter] &lt;ChrisRackauckas&gt; The tutorials are in <a href=\"https://github.com/SciML/SciMLTutorials.jl\">https://github.com/SciML/SciMLTutorials.jl</a></p>",
        "id": 277608542,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1648981432
    },
    {
        "content": "<p>[gitter] &lt;ChrisRackauckas&gt; The weave files in <a href=\"https://github.com/SciML/SciMLTutorials.jl/tree/master/tutorials\">https://github.com/SciML/SciMLTutorials.jl/tree/master/tutorials</a> are used in the CI process to automatically generate the run tutorials, so you don't need to build the outputs just the scripts</p>",
        "id": 277608628,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1648981465
    },
    {
        "content": "<p>[gitter] &lt;ChrisRackauckas&gt; A good starting point might be to update some old tutorials, like <a href=\"https://github.com/SciML/SciMLTutorials.jl/issues/38\">https://github.com/SciML/SciMLTutorials.jl/issues/38</a></p>",
        "id": 277608659,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1648981480
    },
    {
        "content": "<p>[gitter] &lt;divyanshutwt_twitter&gt; Thank you so much for the information. Btw, I'm already on the slack. Going to join the channel and start working on the issue.</p>",
        "id": 277608750,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1648981527
    },
    {
        "content": "<p>[gitter] &lt;pri1311&gt; Hey everyone! I was looking forward to participating in GSoC this year, and one particular project that really caught my eye was - Physics-Informed Neural Networks (PINNs) and Solving Differential Equations with Deep Learning. <br>\nHopefully, this is the right place to discuss this. If not please guide me to a suitable channel and apologies for any disturbance caused.<br>\nA little background about me - I have a deep interest in mathematical subjects be it Calculus, Statistics, Linear Algebra, or anything else. Python has been my primary language for quite some time now, however as I got into deep learning, I have been exploring Julia too lately. Any input on how to move forward would be really appreciated. I have started reading about PINNs and relevant papers and found them quite interesting.</p>",
        "id": 277636811,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1648996918
    },
    {
        "content": "<p>[gitter] &lt;dynamic-queries&gt; Hello Chris, <br>\nI have some questions regarding the initial PR. <br>\nYou write new RK coefficients in the header of the issue. So am I right in assuming that you want me implement an Adaptive RK method with no interpolation?</p>",
        "id": 277659494,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1649017899
    },
    {
        "content": "<p>[gitter] &lt;dynamic-queries&gt; <a href=\"https://files.gitter.im/57bf79b040f3a6eec0615ecf/ZGuK/image.png\">![image.png](https://files.gitter.im/57bf79b040f3a6eec0615ecf/ZGuK/thumb/image.png)</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.gitter.im/57bf79b040f3a6eec0615ecf/ZGuK/image.png\" title=\"![image.png](https://files.gitter.im/57bf79b040f3a6eec0615ecf/ZGuK/thumb/image.png)\"><img src=\"https://uploads.zulipusercontent.net/fcff2724c4722199206ff6de76f5ec7e3e95f3d1/68747470733a2f2f66696c65732e6769747465722e696d2f3537626637396230343066336136656563303631356563662f5a47754b2f696d6167652e706e67\"></a></div>",
        "id": 277659610,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1649018099
    },
    {
        "content": "<p>[gitter] &lt;dynamic-queries&gt; <a href=\"https://files.gitter.im/57bf79b040f3a6eec0615ecf/WeDc/image.png\">![image.png](https://files.gitter.im/57bf79b040f3a6eec0615ecf/WeDc/thumb/image.png)</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.gitter.im/57bf79b040f3a6eec0615ecf/WeDc/image.png\" title=\"![image.png](https://files.gitter.im/57bf79b040f3a6eec0615ecf/WeDc/thumb/image.png)\"><img src=\"https://uploads.zulipusercontent.net/6bcab30e636f726185c71de70bd2b23d949e6d40/68747470733a2f2f66696c65732e6769747465722e696d2f3537626637396230343066336136656563303631356563662f576544632f696d6167652e706e67\"></a></div>",
        "id": 277659612,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1649018103
    },
    {
        "content": "<p>[gitter] &lt;dynamic-queries&gt; Furthermore, I am lost in interpreting the ambiguous btilde coefficients in the paper.<br>\nSince it is FSAL, b is clearly defined. <br>\nHowever, I cannot think of a better way to implement the coefficients of btilde but to hard code the linear combination. <br>\nEg.: &lt;l1,l2,l3&gt; . &lt;d1,d2,d3&gt;. where &lt;l1.l2.l3&gt; = &lt;1,0,0&gt;</p>",
        "id": 277659818,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1649018392
    },
    {
        "content": "<p>[gitter] &lt;dynamic-queries&gt; I'd really like your feedback on this matter :D</p>",
        "id": 277659876,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1649018416
    },
    {
        "content": "<p>[gitter] &lt;ChrisRackauckas&gt; @dynamic-queries first worry about just implementing it and getting the convergence tests to pass correctly. Open up a WIP PR at that stage</p>",
        "id": 277660077,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1649018728
    },
    {
        "content": "<p>[gitter] &lt;ChrisRackauckas&gt; for the interpolation, we can just use the derivative at the start and finish for a Hermite spline, which is the default. Don't worry about that at the first PR though</p>",
        "id": 277660083,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1649018758
    },
    {
        "content": "<p>[gitter] &lt;ChrisRackauckas&gt; I would recommend joining the Slack to get easier feedback. This does connect to the Slack but right now the message bridge back from the Slack is broken.</p>",
        "id": 277660129,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1649018794
    },
    {
        "content": "<p>[gitter] &lt;ChrisRackauckas&gt; Hey, there's a few starter issues we have up. Quoting Zoe:</p>\n<p>Hi,<br>\nI carefully re-read several of the relevant papers and wrote up some notes for implementation notes for their algorithms, and how difficult I think the implementation would be within our system, and opened up issues specific to them.<br>\nRanked by approximate increasing difficulty:<br>\nMultiscale Fourier Features <a href=\"https://github.com/SciML/NeuralPDE.jl/issues/498\">https://github.com/SciML/NeuralPDE.jl/issues/498</a><br>\nNeural Tangent Kernel Adaptive Loss <a href=\"https://github.com/SciML/NeuralPDE.jl/issues/501\">https://github.com/SciML/NeuralPDE.jl/issues/501</a><br>\nMagnitude Normalization Adaptive Loss: <a href=\"https://github.com/SciML/NeuralPDE.jl/issues/499\">https://github.com/SciML/NeuralPDE.jl/issues/499</a><br>\nI think that either of the first two would be great intro projects to get to know the systems in the project more while not being too difficult.<br>\nThe Multiscale Fourier Features is an exercise in implementing neural network architectures, and the Inverse Dirichlet Adaptive Loss is a good exercise in understanding the internals of the adaptive loss, but the actual required change is not that large to implement.<br>\nThey could be good intro projects to get to know the system before making more substantative changes (sPDE's, etc).<br>\nLet me know if you have any questions or need extra pointers.</p>",
        "id": 277660143,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1649018848
    },
    {
        "content": "<p>[gitter] &lt;ChrisRackauckas&gt; So take a look at those as some places to get started.</p>",
        "id": 277660146,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1649018855
    },
    {
        "content": "<p>[gitter] &lt;ChrisRackauckas&gt; I would recommend joining the Slack where you can ping more of the developers: <a href=\"https://julialang.org/slack/\">https://julialang.org/slack/</a></p>",
        "id": 277660152,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1649018880
    },
    {
        "content": "<p>[gitter] &lt;dynamic-queries&gt; Thanks again Chris</p>",
        "id": 277660437,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1649019233
    },
    {
        "content": "<p>[gitter] &lt;jianqixi&gt; Hi everyone, I have one question about the tolerance (Rel_tol and abs_tol) setting when using the direct-dense matrix solvers. I have met one very strange issue when testing different tolerance settings.  My code can work normally if I used Rel_tol=1e-8 and Abs_tol=1e-10, even though the code is slow. Then when I tried to use small precision, like rel_tol=1e-6 and abs_tol=1e-8, then the code would not provide any outputs after a long time, there are no errors even. I have no idea why this issue occurs. Would you like to give me some hints and suggestions? Thank you!</p>",
        "id": 278236081,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1649371485
    },
    {
        "content": "<p>[gitter] &lt;jianqixi&gt; @GitterIRCbot Hello, I have one question about the tolerance (Rel_tol and abs_tol) setting when using the direct-dense matrix solvers. I have met one very strange issue when testing different tolerance settings.  My code can work normally if I used Rel_tol=1e-8 and Abs_tol=1e-10, even though the code is slow. Then when I tried to use small precision, like rel_tol=1e-6 and abs_tol=1e-8, then the code would not provide any outputs after a long time, there are no errors even. I have no idea why this issue occurs. Would you like to give me some hints and suggestions? Thank you!</p>",
        "id": 278236201,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1649371574
    },
    {
        "content": "<p>[gitter] &lt;ChrisRackauckas&gt; @jianqixi it could be in a cycle of rejecting steps. As you increase the tolerances, it can become more difficult to solve the equations</p>",
        "id": 278240311,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1649374808
    },
    {
        "content": "<p>[gitter] &lt;jianqixi&gt; I see, thank you for your response. I just thought the increased tolerance may speed up the code, since it may be easier to be converged.</p>",
        "id": 278240914,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1649375269
    },
    {
        "content": "<p>[gitter] &lt;chenrongxing&gt; Hi everyone, I have a question about how to add Julia( <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a> and <a href=\"https://github.com/search?q=DiffEqFlux.jl&amp;type=Repositories\">DiffEqFlux.jl</a> )package to  Juliapro . I want to use <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a> and DiffEqFlux to solve ODE</p>",
        "id": 278502528,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1649643879
    },
    {
        "content": "<p>[gitter] &lt;chenrongxing&gt; the error isERROR: LoadError: Unsatisfiable requirements detected for package OrdinaryDiffEq [1dea7af3]:<br>\n OrdinaryDiffEq [1dea7af3] log:<br>\n ├─possible versions are: [0.0.1-0.0.5, 0.1.0-0.1.1, 0.2.0-0.2.1, 0.3.0-0.3.1, 0.4.0-0.4.2, 0.5.0, 0.6.0, 1.0.0-1.0.2, 1.1.0, 1.2.0, 1.3.0-1.3.1, 1.4.0-1.4.1, 1.5.0, 1.6.0-1.6.1, 1.7.0, 1.8.0, 2.0.0-2.0.3, 2.1.0, 2.2.0-2.2.1, 2.3.1-2.3.2, 2.4.0, 2.5.0, 2.6.0-2.6.1, 2.7.0-2.7.1, 2.8.0, 2.9.0, 2.10.0, 2.11.0-2.11.3, 2.12.0, 2.13.0, 2.14.0, 2.15.0, 2.16.0, 2.17.0, 2.18.0, 2.19.0-2.19.1,<br>\n2.20.0, 2.21.0-2.21.2, 2.22.0, 2.23.0, 2.24.0-2.24.1, 2.25.0-2.25.2, 2.26.0, 2.27.0, 2.28.0, 2.29.0-2.29.1, 2.30.0, 2.31.0-2.31.1, 2.32.0-2.32.1, 2.33.0-2.33.2, 2.34.0, 2.35.0-2.35.1, 2.36.0, 2.37.0, 3.0.0-3.0.3, 3.1.0-3.1.1, 3.2.0, 3.3.0, 3.4.0, 3.5.0, 3.6.0, 3.7.0, 3.8.0, 3.9.0-3.9.1, 3.10.0, 3.11.0, 3.12.0, 3.13.0, 3.14.0, 3.15.0-3.15.1, 3.16.1, 3.17.0, 3.18.0, 3.19.0-3.19.1, 3.20.0, 3.21.0, 4.0.0, 4.1.0, 4.2.0, 4.3.0, 4.4.0-4.4.1, 4.5.0, 4.6.0, 4.7.0-4.7.1, 4.8.0-4.8.1, 4.9.0, 4.10.0, 4.11.0-4.11.1, 4.12.0-4.12.2] or uninstalled<br>\n └─restricted to versions 6.0.0-6 by DifferentialEquations [0c46a032] — no versions left<br>\n   └─DifferentialEquations [0c46a032] log:<br>\n     ├─possible versions are: 7.1.0 or uninstalled<br>\n     └─DifferentialEquations [0c46a032] is fixed to version 7.1.0</p>",
        "id": 278502901,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1649644430
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; no, that doesn't have sufficient information.</p>",
        "id": 280053319,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1650885093
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Maybe <a href=\"https://discourse.julialang.org/t/blog-post-about-my-experiences-with-julia/79976/28\">https://discourse.julialang.org/t/blog-post-about-my-experiences-with-julia/79976/28</a> issues about docstrings could get some headway by just adding short docstrings that link to the relevant <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a> doc section? As @chrisrackauckas mentions there the issue is one probably doesn't want detailed docstrings for every solution type, but we could add short docstrings to each that simply link to the relevant reference section in the main docs. That would at least point users on where to go when looking via the REPL or VS Code.</p>",
        "id": 280066973,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1650892463
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I think just going and adding a link to the solution handling docs for each of them would make sense. And the problem pages can be converted into docstrings.</p>",
        "id": 280067508,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1650892684
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Hey folks. Say, I needed to implement a DifferentialEquations callback to handle cases where the ODE and DDE models go outside of certain hard limits. Then I need to estimate some parameters using DiffEqFlux. I was just wondering if having these callbacks will interfere with the optimization routines in DiffEqFlux? I was watching @chrisrackauckas Juliacon 2020 talk and I believe he mentioned something about issues with callback and adjoint calculations, but then again it might fine now? Just wanted to check before I go down that road and run into a dead end.</p>",
        "id": 280106359,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1650909526
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's fine by now</p>",
        "id": 280106407,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1650909549
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Ahh excellent. then I will give it a whirl.</p>",
        "id": 280106437,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1650909565
    },
    {
        "content": "<p>[slack] &lt;George Gkountouras&gt; What is our ecosystem's equivalent to Controlled Differential Equations by Patrick Kidger? @chrisrackauckas</p>",
        "id": 280215472,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1650982345
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; just stick DataInterpolations in the right hand side</p>",
        "id": 280220295,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1650984318
    },
    {
        "content": "<p>[slack] &lt;Fabienne Krauer&gt; What does the argument <code>convert_tspan=false</code> do in <code>sensealg=ForwardDiffSensivitity()</code>?</p>",
        "id": 280224601,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1650985845
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it makes it differentiate with respect to time.</p>",
        "id": 280225118,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1650986094
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that should all be done automatically</p>",
        "id": 280225137,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1650986103
    },
    {
        "content": "<p>[slack] &lt;Vedant&gt; which sciml package interacts with boundary value problems, <code>SciMLBase.BVProblem</code> ?</p>\n<p>Edit: is there sciml functionality for solving boundary value PDEs? Or enforcing spatial boundary conditions in an ODE solve?</p>",
        "id": 280267465,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1651004798
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/search?q=BoundaryValueDiffEq.jl&amp;type=Repositories\">BoundaryValueDiffEq.jl</a></p>",
        "id": 280280839,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1651012125
    },
    {
        "content": "<p>[slack] &lt;Vedant&gt; does it dispatch to <a href=\"https://github.com/search?q=NonlinearSolve.jl&amp;type=Repositories\">NonlinearSolve.jl</a> or <a href=\"https://github.com/search?q=LinearSolve.jl&amp;type=Repositories\">LinearSolve.jl</a>?</p>",
        "id": 280400508,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1651088205
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; no, it's way too old</p>",
        "id": 280401101,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1651088510
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's like, 2017 old <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 280401108,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1651088515
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it desperately needs some love.</p>",
        "id": 280401169,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1651088526
    },
    {
        "content": "<p>[slack] &lt;Vedant&gt; yeah i have some PDE bvp work to do. let's talk about it in p2d tomorrow</p>",
        "id": 280401403,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1651088661
    },
    {
        "content": "<p>[slack] &lt;George Gkountouras&gt; Apparently Pro/Max have 2 and Ultra has 4. This is reflected in <a href=\"https://twitter.com/danieldekok/status/1511348597215961093?s=21&amp;t=2v6pZmDWSYGtShH61THtPA\">https://twitter.com/danieldekok/status/1511348597215961093?s=21&amp;t=2v6pZmDWSYGtShH61THtPA</a>.</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/danieldekok/status/1511348597215961093?s=21&amp;t=2v6pZmDWSYGtShH61THtPA\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/9157ccd1bd8412e5ceb1793b558eb8cc7c122311/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313434363339303638313434323836313035362f5262644a6b7a385f5f6e6f726d616c2e6a7067\"></a><p>A colleague benchmarked sgemm  on the <a href=\"https://twitter.com/Apple\">@Apple</a> M1 Ultra. As expected, the dual-dies (probably) doubles the number of AMX units, but it is still awesome to see such great matrix multiplication performance 🤩. #apple #m1 #m1ultra <a href=\"https://t.co/Ee3xe0mskY\">https://twitter.com/danieldekok/status/1511348597215961093/photo/1</a></p><span>- Daniël de Kok (@danieldekok)</span><div class=\"twitter-image\"><a href=\"https://t.co/Ee3xe0mskY\"><img src=\"https://uploads.zulipusercontent.net/52aeb38c38a4f232fbb30b96b76c9b6a43ec1109/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f46506c6a696578584d4163764845692e6a70673a736d616c6c\"></a></div></div></div>",
        "id": 280553465,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1651178956
    },
    {
        "content": "<p>wheres this bridged from ?</p>",
        "id": 280655478,
        "sender_full_name": "arbitrandomuser",
        "timestamp": 1651249395
    },
    {
        "content": "<p>[gitter] &lt;youainti:<a href=\"http://matrix.org\">matrix.org</a>&gt; Gitter, matrix, slack, and zulip are all linked together. Not sure which is the official part.</p>",
        "id": 280676839,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1651259803
    },
    {
        "content": "<p>[gitter] &lt;ChrisRackauckas&gt; Slack is by far the most used.</p>",
        "id": 280677027,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1651259897
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; In general, yes. I think the issue is, what eigenvalue solver is that using?</p>",
        "id": 282637340,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652793011
    },
    {
        "content": "<p>[slack] &lt;Baiyi&gt; just <code>eigvals</code> from <code>LinearAlgebra</code></p>",
        "id": 282637966,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652793315
    },
    {
        "content": "<p>[slack] &lt;Baiyi&gt; But I use  <code>QuantumOptics.</code><br>\nI got the error message here:</p>\n<div class=\"codehilite\" data-code-language=\"error\"><pre><span></span><code>Closest candidates are:\n  (::Type{T})(::Real, ::RoundingMode) where T&lt;:AbstractFloat at C:\\Users\\dell\\AppData\\Local\\Programs\\Julia-1.7.2\\share\\julia\\base\\rounding.jl:200\n  (::Type{T})(::T) where T&lt;:Number at C:\\Users\\dell\\AppData\\Local\\Programs\\Julia-1.7.2\\share\\julia\\base\\boot.jl:770\n  (::Type{T})(::AbstractChar) where T&lt;:Union{AbstractChar, Number} at C:\\Users\\dell\\AppData\\Local\\Programs\\Julia-1.7.2\\share\\julia\\base\\char.jl:50\n  ...\nStacktrace:\n  [1] convert(#unused#::Type{Float64}, x::ForwardDiff.Dual{ForwardDiff.Tag{var\"#25#27\"{Float64, Float64, Operator{PositionBasis{-54.0, 9.0, Int64, Float64}, PositionBasis{-54.0, 9.0, Int64, Float64}, Matrix{ComplexF64}}, Operator{PositionBasis{-54.0, 9.0, Int64, Float64}, PositionBasis{-54.0, 9.0, Int64, Float64}, Matrix{ComplexF64}}}, Float64}, Float64, 1})\n    @ Base .\\number.jl:7\n  [2] ComplexF64(re::ForwardDiff.Dual{ForwardDiff.Tag{var\"#25#27\"{Float64, Float64, Operator{PositionBasis{-54.0, 9.0, Int64, Float64}, PositionBasis{-54.0, 9.0, Int64, Float64}, Matrix{ComplexF64}}, Operator{PositionBasis{-54.0, 9.0, Int64, Float64}, PositionBasis{-54.0, 9.0, Int64, Float64}, Matrix{ComplexF64}}}, Float64}, Float64, 1}, im::ForwardDiff.Dual{ForwardDiff.Tag{var\"#25#27\"{Float64, Float64, Operator{PositionBasis{-54.0, 9.0, Int64, Float64}, PositionBasis{-54.0, 9.0, Int64, Float64}, Matrix{ComplexF64}}, Operator{PositionBasis{-54.0, 9.0, Int64, Float64}, PositionBasis{-54.0, 9.0, Int64, Float64}, Matrix{ComplexF64}}}, Float64}, Float64, 1})\n    @ Base .\\complex.jl:14\n  [3] ComplexF64(z::Complex{ForwardDiff.Dual{ForwardDiff.Tag{var\"#25#27\"{Float64, Float64, Operator{PositionBasis{-54.0, 9.0, Int64, Float64}, PositionBasis{-54.0, 9.0, Int64, Float64}, Matrix{ComplexF64}}, Operator{PositionBasis{-54.0, 9.0, Int64, Float64}, PositionBasis{-54.0, 9.0, Int64, Float64}, Matrix{ComplexF64}}}, Float64}, Float64, 1}})\n    @ Base .\\complex.jl:43\n  [4] convert(#unused#::Type{ComplexF64}, x::Complex{ForwardDiff.Dual{ForwardDiff.Tag{var\"#25#27\"{Float64, Float64, Operator{PositionBasis{-54.0, 9.0, Int64, Float64}, PositionBasis{-54.0, 9.0, Int64, Float64}, Matrix{ComplexF64}}, Operator{PositionBasis{-54.0, 9.0, Int64, Float64}, PositionBasis{-54.0, 9.0, Int64, Float64}, Matrix{ComplexF64}}}, Float64}, Float64, 1}})\n    @ Base .\\number.jl:7\n  [5] setindex!\n    @ .\\array.jl:905 [inlined]\n  [6] eigvalue(a2::ForwardDiff.Dual{ForwardDiff.Tag{var\"#25#27\"{Float64, Float64, Operator{PositionBasis{-54.0, 9.0, Int64, Float64}, PositionBasis{-54.0, 9.0, Int64, Float64}, Matrix{ComplexF64}}, Operator{PositionBasis{-54.0, 9.0, Int64, Float64}, PositionBasis{-54.0, 9.0, Int64, Float64}, Matrix{ComplexF64}}}, Float64}, Float64, 1}; a3::Float64, a4::Float64, H_kin_x::Operator{PositionBasis{-54.0, 9.0, Int64, Float64}, PositionBasis{-54.0, 9.0, Int64, Float64}, Matrix{ComplexF64}}, cacheH::Operator{PositionBasis{-54.0, 9.0, Int64, Float64}, PositionBasis{-54.0, 9.0, Int64, Float64}, Matrix{ComplexF64}})\n    @ Main f:\\Simulation\\Trap simulation\\2layers trap\\BEM2Layers\\ElectronTrapPost\\DC_1D\\State1DTheoretic2.jl:47\n  [7] smallest_gap(a2::ForwardDiff.Dual{ForwardDiff.Tag{var\"#25#27\"{Float64, Float64, Operator{PositionBasis{-54.0, 9.0, Int64, Float64}, PositionBasis{-54.0, 9.0, Int64, Float64}, Matrix{ComplexF64}}, Operator{PositionBasis{-54.0, 9.0, Int64, Float64}, PositionBasis{-54.0, 9.0, Int64, Float64}, Matrix{ComplexF64}}}, Float64}, Float64, 1}; a3::Float64, a4::Float64, H_kin_x::Operator{PositionBasis{-54.0, 9.0, Int64, Float64}, PositionBasis{-54.0, 9.0, Int64, Float64}, Matrix{ComplexF64}}, cacheH::Operator{PositionBasis{-54.0, 9.0, Int64, Float64}, PositionBasis{-54.0, 9.0, Int64, Float64}, Matrix{ComplexF64}})\n    @ Main f:\\Simulation\\Trap simulation\\2layers trap\\BEM2Layers\\ElectronTrapPost\\DC_1D\\State1DTheoretic2.jl:58\n  [8] #25\n    @ f:\\Simulation\\Trap simulation\\2layers trap\\BEM2Layers\\ElectronTrapPost\\DC_1D\\State1DTheoretic2.jl:64 [inlined]\n  [9] derivative(f::var\"#25#27\"{Float64, Float64, Operator{PositionBasis{-54.0, 9.0, Int64, Float64}, PositionBasis{-54.0, 9.0, Int64, Float64}, Matrix{ComplexF64}}, Operator{PositionBasis{-54.0, 9.0, Int64, Float64}, PositionBasis{-54.0, 9.0, Int64, Float64}, Matrix{ComplexF64}}}, x::Float64)\n    @ ForwardDiff C:\\Users\\dell\\.julia\\packages\\ForwardDiff\\rJAbI\\src\\derivative.jl:14\n [10] (::var\"#24#26\"{Float64, Float64, Operator{PositionBasis{-54.0, 9.0, Int64, Float64}, PositionBasis{-54.0, 9.0, Int64, Float64}, Matrix{ComplexF64}}, Operator{PositionBasis{-54.0, 9.0, Int64, Float64}, PositionBasis{-54.0, 9.0, Int64, Float64}, Matrix{ComplexF64}}})(a2::Float64)\n    @ Main f:\\Simulation\\Trap simulation\\2layers trap\\BEM2Layers\\ElectronTrapPost\\DC_1D\\State1DTheoretic2.jl:64\n [11] top-level scope\n    @ f:\\Simulation\\Trap simulation\\2layers trap\\BEM2Layers\\ElectronTrapPost\\DC_1D\\State1DTheoretic2.jl:67 ```\n</code></pre></div>",
        "id": 282638191,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652793438
    },
    {
        "content": "<p>[slack] &lt;Baiyi&gt; Part of the code</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    b=H_kin_x.basis_l\n    dx=T(spacing(b))\n    for j in 1:b.N, i in 1:b.N\n        if i==j\n            cacheH.data[i,j]=H_kin_x.data[i,j]+(e/E_unit) * potential(b.xmin + (i-1)*dx;a2=a2,a3=a3,a4=a4)\n        else\n            cacheH.data[i,j]=H_kin_x.data[i,j]\n        end\n    end\n    eigvals!(Hermitian(cacheH.data))\nend\nfunction smallest_gap(a2::T;a3,a4,H_kin_x::Operator{B,B},cacheH::Operator{B,B}) where {T,B}\n    if a2&lt;=0\n        throw(error(\"a2 should be larger than 0\"))\n    end\n    eigcache=eigvalue(a2;a3=a3,a4=a4,H_kin_x=H_kin_x,cacheH=cacheH)\n    val=ħ*sqrt(abs(a2) * e * 2 / mₑ)/E_unit\n    _,index=findmin(x-&gt;abs(x-val),eigcache)\n    min(abs(eigcache[index]-eigcache[index-1]),abs(eigcache[index+1]-eigcache[index]))\n\nend\nfunction gap_derivative(a3,a4,H_kin_x::Operator{B,B},cacheH::Operator{B,B}) where {B}\n    a2-&gt;ForwardDiff.derivative(a2-&gt;smallest_gap(a2,a3=a3,a4=a4,H_kin_x=H_kin_x,cacheH=cacheH),a2)\nend\ngap_derivative(a3,a4,H_kin_x,1H_kin_x)(0.001a20)```\n</code></pre></div>",
        "id": 282638262,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652793473
    },
    {
        "content": "<p>[slack] &lt;Baiyi&gt; Here I try to calculate the smallest gap around some specific energy <code>eigcache(index)</code></p>",
        "id": 282639263,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652793870
    },
    {
        "content": "<p>[slack] &lt;Baiyi&gt; If eliminate the dependence of QuantumOptics inside the function. Similar error here</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    for j in 1:size(H_kin_x_data,1), i in 1:size(H_kin_x_data,1)\n        if i==j\n            cacheH_data[i,j]=H_kin_x_data[i,j]+(e/E_unit) * potential(xmin + (i-1)*dx;a2=a2,a3=a3,a4=a4)\n        else\n            cacheH_data[i,j]=H_kin_x_data[i,j]\n        end\n    end\n    T.(eigvals!(Hermitian(cacheH_data)))\nend\nfunction smallest_gap(a2::T;a3,a4,H_kin_x_data,cacheH_data,dx,xmin) where {T}\n    if a2&lt;=0\n        throw(error(\"a2 should be larger than 0\"))\n    end\n    eigcache=eigvalue(a2;a3=a3,a4=a4,H_kin_x_data=H_kin_x_data,cacheH_data=cacheH_data,dx=dx,xmin=xmin)\n    val=T(ħ*sqrt(abs(a2) * e * 2 / mₑ)/E_unit)\n    _,index=findmin(x-&gt;abs(x-val),eigcache)\n    T(min(abs(eigcache[index]-eigcache[index-1]),abs(eigcache[index+1]-eigcache[index])))\nend\nfunction gap_derivative(a3,a4,H_kin_x_data,cacheH_data,dx,xmin)\n    a2-&gt;ForwardDiff.derivative(a2-&gt;smallest_gap(a2,a3=a3,a4=a4,H_kin_x_data=H_kin_x_data,cacheH_data=cacheH_data,dx=dx,xmin=xmin),a2)\nend\ngap_derivative(a3,a4,H_kin_x.data,1H_kin_x.data,dx,x_pos[1])(0.001a20)```\n```ERROR: MethodError: no method matching Float64(::ForwardDiff.Dual{ForwardDiff.Tag{var\"#38#40\"{Float64, Float64, Matrix{ComplexF64}, Matrix{ComplexF64}, Float64, Float64}, Float64}, Float64, 1})\nClosest candidates are:\n  (::Type{T})(::Real, ::RoundingMode) where T&lt;:AbstractFloat at C:\\Users\\dell\\AppData\\Local\\Programs\\Julia-1.7.2\\share\\julia\\base\\rounding.jl:200\n  (::Type{T})(::T) where T&lt;:Number at C:\\Users\\dell\\AppData\\Local\\Programs\\Julia-1.7.2\\share\\julia\\base\\boot.jl:770\n  (::Type{T})(::AbstractChar) where T&lt;:Union{AbstractChar, Number} at C:\\Users\\dell\\AppData\\Local\\Programs\\Julia-1.7.2\\share\\julia\\base\\char.jl:50\n  ...\nStacktrace:\n  [1] convert(#unused#::Type{Float64}, x::ForwardDiff.Dual{ForwardDiff.Tag{var\"#38#40\"{Float64, Float64, Matrix{ComplexF64}, Matrix{ComplexF64}, Float64, Float64}, Float64}, Float64, 1})\n    @ Base .\\number.jl:7\n  [2] ComplexF64(re::ForwardDiff.Dual{ForwardDiff.Tag{var\"#38#40\"{Float64, Float64, Matrix{ComplexF64}, Matrix{ComplexF64}, Float64, Float64}, Float64}, Float64, 1}, im::ForwardDiff.Dual{ForwardDiff.Tag{var\"#38#40\"{Float64, Float64, Matrix{ComplexF64}, Matrix{ComplexF64}, Float64, Float64}, Float64}, Float64, 1})\n    @ Base .\\complex.jl:14\n  [3] ComplexF64(z::Complex{ForwardDiff.Dual{ForwardDiff.Tag{var\"#38#40\"{Float64, Float64, Matrix{ComplexF64}, Matrix{ComplexF64}, Float64, Float64}, Float64}, Float64, 1}})\n    @ Base .\\number.jl:7\n  [5] setindex!\n    @ .\\array.jl:905 [inlined]\n  [6] eigvalue(a2::ForwardDiff.Dual{ForwardDiff.Tag{var\"#38#40\"{Float64, Float64, Matrix{ComplexF64}, Matrix{ComplexF64}, Float64, Float64}, Float64}, Float64, 1}; a3::Float64, a4::Float64, H_kin_x_data::Matrix{ComplexF64}, cacheH_data::Matrix{ComplexF64}, dx::Float64, xmin::Float64)\n    @ Main f:\\Simulation\\Trap simulation\\2layers trap\\BEM2Layers\\ElectronTrapPost\\DC_1D\\State1DTheoretic2.jl:46  [7] smallest_gap(a2::ForwardDiff.Dual{ForwardDiff.Tag{var\"#38#40\"{Float64, Float64, Matrix{ComplexF64}, Matrix{ComplexF64}, Float64, Float64}, Float64}, Float64, 1}; a3::Float64, a4::Float64, H_kin_x_data::Matrix{ComplexF64}, cacheH_data::Matrix{ComplexF64}, dx::Float64, xmin::Float64)\n    @ Main f:\\Simulation\\Trap simulation\\2layers trap\\BEM2Layers\\ElectronTrapPost\\DC_1D\\State1DTheoretic2.jl:57  [8] #38\n    @ f:\\Simulation\\Trap simulation\\2layers trap\\BEM2Layers\\ElectronTrapPost\\DC_1D\\State1DTheoretic2.jl:63 [inlined]\n  [9] derivative\n    @ C:\\Users\\dell\\.julia\\packages\\ForwardDiff\\rJAbI\\src\\derivative.jl:14 [inlined]\n [10] (::var\"#37#39\"{Float64, Float64, Matrix{ComplexF64}, Matrix{ComplexF64}, Float64, Float64})(a2::Float64)\n    @ Main f:\\Simulation\\Trap simulation\\2layers trap\\BEM2Layers\\ElectronTrapPost\\DC_1D\\State1DTheoretic2.jl:63\n [11] top-level scope\n    @ f:\\Simulation\\Trap simulation\\2layers trap\\BEM2Layers\\ElectronTrapPost\\DC_1D\\State1DTheoretic2.jl:65```\n</code></pre></div>",
        "id": 282640304,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652794264
    },
    {
        "content": "<p>[slack] &lt;Baiyi&gt; Full code is here</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>    LinearAlgebra, BenchmarkTools, DataFrames, CSV, LoopVectorization, ProfileView, FFTW, Octavian, Interpolations\nusing MKL\nimport OrdinaryDiffEq\ninclude(\"turbo.jl\")\ninclude(\"QuantumOpticsExtra.jl\")\n# CairoMakie.activate!()\nGLMakie.activate!()\nconst mₑ = 9.1093837015e-31    # electron mass\nconst e = 1.602176634e-19      # elementary charge\nconst ħ = 1.054571817e-34      # reduced Planck constant\nconst L_unit = 1e-6                 # 1L_unit:1\nconst T_unit = mₑ * L_unit^2 / ħ    # 1T_unit:1\nconst E_unit = ħ^2 / (mₑ * L_unit^2)# 1E_unit:1\n##\nfunction potential(x;a2, a3, a4)\n    V = a2 * (x * 1e-6)^2 + a3 * (x * 1e-6)^3 + a4 * (x * 1e-6)^4\nend\n##\nd=40e-6     # m\nω=2π*300e6  # Hz\na20=1/2*mₑ*ω^2/e\na3=2a20/3d\na4=3a3/4d\n##\nN=4096\nx_pos = range(-54, 9, length=N)\n# V=potential.(x_pos,a2=0,a3=a3,a4=a4)\n# lines(x_pos,V)\n##\nb_position = PositionBasis(x_pos[1], x_pos[end], N)\ndx=spacing(b_position)\nb_momentum = MomentumBasis(b_position)\nx = position(b_position)\np = momentum(b_momentum)\nTpx = QuantumOptics.transform(b_momentum, b_position)\nTxp = dagger(Tpx)\nH_kin = p^2 / 2\nH_kin_x = Txp * dense(H_kin) * Tpx\nHermitian!(H_kin_x)\nH_kin_lazy = LazyProduct(Txp, H_kin, Tpx)\n##\nfunction eigvalue(a2::T;a3,a4,H_kin_x_data,cacheH_data,dx,xmin) where {T}\n    for j in 1:size(H_kin_x_data,1), i in 1:size(H_kin_x_data,1)\n        if i==j\n            cacheH_data[i,j]=H_kin_x_data[i,j]+(e/E_unit) * T(potential(xmin + (i-1)*dx;a2=a2,a3=a3,a4=a4))\n        else\n            cacheH_data[i,j]=H_kin_x_data[i,j]\n        end\n    end\n    T.(eigvals!(Hermitian(cacheH_data)))\nend\nfunction smallest_gap(a2::T;a3,a4,H_kin_x_data,cacheH_data,dx,xmin) where {T}\n    if a2&lt;=0\n        throw(error(\"a2 should be larger than 0\"))\n    end\n    eigcache=eigvalue(a2;a3=a3,a4=a4,H_kin_x_data=H_kin_x_data,cacheH_data=cacheH_data,dx=dx,xmin=xmin)\n    val=T(ħ*sqrt(abs(a2) * e * 2 / mₑ)/E_unit)\n    _,index=findmin(x-&gt;abs(x-val),eigcache)\n    T(min(abs(eigcache[index]-eigcache[index-1]),abs(eigcache[index+1]-eigcache[index])))\nend\nsmallest_gap(0.001a20,a3=a3,a4=a4,H_kin_x_data=H_kin_x.data,cacheH_data=1.0H_kin_x.data,dx=dx,xmin=x_pos[1])*E_unit/ħ/2π\nfunction gap_derivative(a3,a4,H_kin_x_data,cacheH_data,dx,xmin)\n    a2-&gt;ForwardDiff.derivative(a2-&gt;smallest_gap(a2,a3=a3,a4=a4,H_kin_x_data=H_kin_x_data,cacheH_data=cacheH_data,dx=dx,xmin=xmin),a2)\nend\ngap_derivative(a3,a4,H_kin_x.data,1H_kin_x.data,dx,x_pos[1])(0.001a20)```\n</code></pre></div>",
        "id": 282641184,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652794664
    },
    {
        "content": "<p>[slack] &lt;Baiyi&gt; It got stuck here: <a href=\"https://files.slack.com/files-pri/T68168MUP-F03FL798EDU/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F03FL798EDU/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F03FL798EDU/download/image.png\"><img src=\"https://uploads.zulipusercontent.net/4501ff5d0b43793163e5fb973f11002d96b08e4c/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d463033464c3739384544552f646f776e6c6f61642f696d6167652e706e67\"></a></div>",
        "id": 282643154,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652795539
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Is the cache using dual values?</p>",
        "id": 282647505,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652797304
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; You may need to use <a href=\"https://github.com/search?q=PreallocationTools.jl&amp;type=Repositories\">PreallocationTools.jl</a></p>",
        "id": 282647518,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652797311
    },
    {
        "content": "<p>[slack] &lt;Baiyi&gt; the cache is just a ComplexF64 Matrix</p>",
        "id": 282648849,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652797837
    },
    {
        "content": "<p>[slack] &lt;Baiyi&gt; OK, I'll try this package</p>",
        "id": 282648928,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652797872
    },
    {
        "content": "<p>[slack] &lt;Baiyi&gt; Thank you very much!</p>",
        "id": 282648960,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652797881
    },
    {
        "content": "<p>[slack] &lt;Baiyi&gt; It works!!!<br>\nJust like magic! love Julia<span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span><br>\nThanks again! Wonderful package!<br>\nBesides using <code>PreallocationTools</code>, to make it work I add some codes find from <a href=\"https://github.com/JuliaDiff/ForwardDiff.jl/issues/111#issuecomment-638474501\">https://github.com/JuliaDiff/ForwardDiff.jl/issues/111#issuecomment-638474501</a><br>\nwith tiny changes. Share it here.</p>\n<div class=\"codehilite\" data-code-language=\"import\"><pre><span></span><code>import LinearAlgebra: eigvals\nfunction eigvals(A::Hermitian{&lt;:Dual{Tg,T,N}}) where {Tg,T&lt;:Real,N}\n    λ,Q = eigen(Hermitian(getproperty.(parent(A), :value)))\n    partials = ntuple(j -&gt; diag(Q' * getindex.(getproperty.(A, :partials), j) * Q), N)\n    Dual{Tg}.(λ, tuple.(partials...))\nend```\n</code></pre></div>",
        "id": 282651012,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652798737
    },
    {
        "content": "<p>[slack] &lt;Flemming Holtorf&gt; Hey! Is there an interface that allows me to use the (avg) derivative approximation as implemented in various explicit RK methods? In particular, given an explicit RK method that implements an update of the form x_{k+1} = x_{k} + dt*F(x_{k}, t_k, dt), I would like to call F directly. Is that possible?</p>",
        "id": 282665792,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652804135
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; OrdinaryDiffEq.perform_step!</p>",
        "id": 282668548,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652805199
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; There’s also step!</p>",
        "id": 282668581,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652805212
    },
    {
        "content": "<p>[slack] &lt;Flemming Holtorf&gt; Thanks! Unfortunately, step! and perform_step! do the whole update, i.e., they compute x_{k+1} = x_{k} + dt*F(x_{k}, t_{k}, dt). For a rather specific reason I would like to only compute the derivative approximation F. Computing that approximation as (x_{k+1}  - x_{k})/dt is unfortunately currently quite suboptimal for my use case ... After looking at the source code for perform_step!, however, it looks like there is no hope. Thanks anyway though!</p>",
        "id": 282669616,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652805614
    },
    {
        "content": "<p>[slack] &lt;Daniel Wennberg&gt; <a href=\"https://github.com/SciML/DiffEqNoiseProcess.jl/issues/101\">https://github.com/SciML/DiffEqNoiseProcess.jl/issues/101</a>, <a href=\"https://github.com/SciML/DiffEqNoiseProcess.jl/issues/102\">https://github.com/SciML/DiffEqNoiseProcess.jl/issues/102</a></p>",
        "id": 282672384,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652806704
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; @xtalax say, did you use BandedMatrices in creating the discretization matrix of MethodOfLines, or did you use something different? I was just trying to figure out the most efficient way to do these types of FD and finite volume discretizations in Julia.</p>",
        "id": 282695124,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652815945
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It doesn't use a discretization matrix because using a matrix is a slow way to discretize</p>",
        "id": 282696695,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652816715
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Oh thanks @chrisrackauckas. I was looking in the source for where the discretization occurs. Is that in the MOL package, or does that happen in a different package. I can look through the commit history, but if you know off hand it . . .</p>",
        "id": 282697409,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652817070
    },
    {
        "content": "<p>[slack] &lt;xtalax&gt; @krishnab look in <a href=\"https://github.com/SciML/MethodOfLines.jl/blob/master/src/discretization/differential_discretizer.jl\">https://github.com/SciML/MethodOfLines.jl/blob/master/src/discretization/differential_discretizer.jl</a> for the actual application of the stencils, stencil generation is above in that file and calls out to DiffEqOperators</p>",
        "id": 282698082,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652817370
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Thanks @xtalax. Yeah I was looking in the wrong file, so thanks for pointing that out <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> .</p>",
        "id": 282698269,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652817452
    },
    {
        "content": "<p>[slack] &lt;xtalax&gt; for when each term is recognized and the specific schemes applied see <code>discretization/generate_finite_difference_rules.jl</code></p>",
        "id": 282698389,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652817504
    },
    {
        "content": "<p>[slack] &lt;xtalax&gt; <a href=\"https://symbolicutils.juliasymbolics.org/rewrite/\">https://symbolicutils.juliasymbolics.org/rewrite/</a> is a useful companion</p>",
        "id": 282698476,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652817559
    },
    {
        "content": "<p>[slack] &lt;xtalax&gt; and feel free to pm me with any questions</p>",
        "id": 282698536,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652817596
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Ahh okay. I was trying out some finite volume schemes, so I was just trying to write my demos as close to a performant implementation as I could, without getting too bogged down. Great, I will read through the links.</p>",
        "id": 282698816,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652817692
    },
    {
        "content": "<p>[slack] &lt;xtalax&gt; oh, and <a href=\"https://github.com/SciML/MethodOfLines.jl/blob/e24d5b904a5c1049933e69f7eefa75226c9bccf4/src/discretization/MOL_discretization.jl#L137\">https://github.com/SciML/MethodOfLines.jl/blob/e24d5b904a5c1049933e69f7eefa75226c9bccf4/src/discretization/MOL_discretization.jl#L137</a> for the outer loop, interior is an array of <code>CartesianIndex</code></p>",
        "id": 282698848,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652817707
    },
    {
        "content": "<p>[slack] &lt;xtalax&gt; this could be much more performant. Emphasis is given to flexibility so the most different systems work. This will be much faster when we have the stencil interfaces - those should be much more intelligable too to those who want to come along and contribute discretization schemes</p>",
        "id": 282699184,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652817834
    },
    {
        "content": "<p>[slack] &lt;xtalax&gt; the reason that it works is that this is essentially a compilation step, fast code is generated as a result.</p>\n<p>See <a href=\"http://methodoflines.sciml.ai/dev/howitworks/\">http://methodoflines.sciml.ai/dev/howitworks/</a> for a useful overview</p>",
        "id": 282699614,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652818001
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Oh yeah, I just read \"How it works\" and that is really helpful. I probably have to read it a few time and go through the code, but that is very helpful. Thanks for pointing that out.</p>",
        "id": 282700429,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652818347
    },
    {
        "content": "<p>[slack] &lt;logicmurad&gt; Are there fixed-point (or optimization type) methods for solving differential equations? I was wondering if there are methods to solve differential eqs. on a whole. : as far as I know, explicit schemes build the trajectory using discrete steps directly. Could one not use something akin to Newton-Rhapson on a discretized representation of the solution (say polynomial basis) like one would do in FEM? Would probably not be the best solution numerically or performance wise...</p>",
        "id": 282715982,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652826768
    },
    {
        "content": "<p>[slack] &lt;Daniel Wennberg&gt; Typically the choice of method corresponds to the problem type. Stepwise integration is appropriate for initial value problems, while direct solution across the whole domain is appropriate for boundary value problems. <a href=\"https://en.wikipedia.org/wiki/Numerical_methods_for_ordinary_differential_equations#Numerical_solutions_to_second-order_one-dimensional_boundary_value_problems\">https://en.wikipedia.org/wiki/Numerical_methods_for_ordinary_differential_equations#Numerical_solutions_to_second-order_one-dimensional_boundary_value_problems</a></p>",
        "id": 282719698,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652829429
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It's just slow because the Jacobian is huge. It's basically just using a BVP solver to solve an IVP, which you can do, but it doesn't scale very well</p>",
        "id": 282725728,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652834491
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; FWIW, we're building out some tooling to allow this from MTK.</p>",
        "id": 282725740,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652834500
    },
    {
        "content": "<p>[slack] &lt;Baiyi&gt; First image is the derivative.<br>\nSecond image is the function.<br>\nThe derivative should be continuous. What happened here?: <a href=\"https://files.slack.com/files-pri/T68168MUP-F03FYQ6D9GC/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F03FYQ6D9GC/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F03FYQ6D9GC/download/image.png\"><img src=\"https://uploads.zulipusercontent.net/de02c27f4dba4f6cf38ce54d87bd90fcac8ac497/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303346595136443947432f646f776e6c6f61642f696d6167652e706e67\"></a></div>",
        "id": 282731834,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652841140
    },
    {
        "content": "<p>[slack] &lt;Baiyi&gt; <a href=\"https://files.slack.com/files-pri/T68168MUP-F03FFRX7KST/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F03FFRX7KST/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F03FFRX7KST/download/image.png\"><img src=\"https://uploads.zulipusercontent.net/f14203c2f7afcd2ead1f09c356dfb6401f5bdb6f/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303346465258374b53542f646f776e6c6f61642f696d6167652e706e67\"></a></div>",
        "id": 282731835,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652841140
    },
    {
        "content": "<p>[slack] &lt;Baiyi&gt; <code>gapf=gap_f(a3,a4,H_kin_x_diag_datad,cacheH_datad,dx,x_pos[1])\ngapdfda2=a2-&gt;ForwardDiff.derivative(gapf,a2)\na2list=range(a21,a22,length=20)\nlines(a2list,gapf.(a2list))\nlines(a2list,gapdfda2.(a2list))\nfind_zeros(gapdfda2,a21,a22)</code></p>",
        "id": 282731971,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652841322
    },
    {
        "content": "<p>[slack] &lt;Baiyi&gt; And the expected zero position is not right</p>",
        "id": 282732113,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652841533
    },
    {
        "content": "<p>[slack] &lt;Baiyi&gt; <code>lines(a2list,gapf.(a2list))</code><br>\nthis plot the second figure I uploaded</p>",
        "id": 282732309,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652841802
    },
    {
        "content": "<p>[slack] &lt;Baiyi&gt; Could it result from this function?</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    λ,Q = eigen(Hermitian(getproperty.(parent(A), :value)))\n    partials = ntuple(j -&gt; diag(Q' * getindex.(getproperty.(A, :partials), j) * Q), N)\n    Dual{Tg}.(λ, tuple.(partials...))\nend```\nSince I changed the function of original post argument `Symmetric` to `Hermitian` but I did not change the calculation steps inside.\n</code></pre></div>",
        "id": 282734859,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652845332
    },
    {
        "content": "<p>[slack] &lt;Baiyi&gt; If only the diagonal element of a matrix depend on the parameter, is there a way to avoid pre-allocate the matrix as <code>dualcache</code>  while one can still get the derivative of the function calculated from the matrix <code>eigvals</code> ? Notice that other element of the matrix can be calculated by FFT before I call the function.</p>",
        "id": 282751852,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652860753
    },
    {
        "content": "<p>[slack] &lt;Baiyi&gt; The full code:</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>    LinearAlgebra, BenchmarkTools, DataFrames, CSV, LoopVectorization, ProfileView, FFTW, Octavian, Interpolations\nusing MKL\nimport OrdinaryDiffEq\nimport ForwardDiff: Dual\nimport LinearAlgebra: eigvals\nfunction eigvals(A::Hermitian{&lt;:Dual{Tg,T,N}}) where {Tg,T&lt;:Real,N}\n    λ,Q = eigen(Hermitian(getproperty.(parent(A), :value)))\n    partials = ntuple(j -&gt; diag(Q' * getindex.(getproperty.(A, :partials), j) * Q), N)\n    Dual{Tg}.(λ, tuple.(partials...))\nend\ninclude(\"turbo.jl\")\ninclude(\"QuantumOpticsExtra.jl\")\nCairoMakie.activate!()\n# GLMakie.activate!()\nconst mₑ = 9.1093837015e-31    # electron mass\nconst e = 1.602176634e-19      # elementary charge\nconst ħ = 1.054571817e-34      # reduced Planck constant\nconst L_unit = 1e-6                 # 1L_unit:1\nconst T_unit = mₑ * L_unit^2 / ħ    # 1T_unit:1\nconst E_unit = ħ^2 / (mₑ * L_unit^2)# 1E_unit:1\n##\nfunction potential(x;a2, a3, a4)\n    V = a2 * x^2 + a3 * x^3 + a4 * x^4\nend\n##\nd=20e-6     # m\nω=2π*300e6  # Hz\na20=1/2*mₑ*ω^2/e\na3=2a20/3d\na4=3a3/4d\n##\nd=20        # μm\nω=2π*300e6  # Hz\na20=1/2*mₑ*ω^2/E_unit*L_unit^2  # E/L^2\na3=2a20/3d  # E/L^3\na4=3a3/4d   # E/L^4\n##\nN=2048\nx_pos = range(-28, 9, length=N)\n##\nb_position = PositionBasis(x_pos[1], x_pos[end], N)\ndx=spacing(b_position)\nb_momentum = MomentumBasis(b_position)\nx = position(b_position)\np = momentum(b_momentum)\nTpx = QuantumOptics.transform(b_momentum, b_position)\nTxp = dagger(Tpx)\nH_kin = p^2 / 2\nH_kin_x = Txp * dense(H_kin) * Tpx\nHermitian!(H_kin_x)\nH_kin_lazy = LazyProduct(Txp, H_kin, Tpx)\n##\ncacheH_datad=dualcache(H_kin_x.data)\nH_kin_x_diag_datad=dualcache(1.0diag(H_kin_x.data))\nfunction eigvalue(a2::T;a3,a4,H_kin_x_diag_data,cacheH_data,dx,xmin) where {T}\n    cacheH_data=get_tmp(cacheH_data,a2)\n    H_kin_x_diag_data=get_tmp(H_kin_x_diag_data,a2)\n    for i in 1:length(H_kin_x_diag_data)\n        cacheH_data[i,i]=H_kin_x_diag_data[i]+potential(xmin + (i-1)*dx;a2=a2,a3=a3,a4=a4)\n    end\n    eigvals(Hermitian(cacheH_data))\nend\nfunction smallest_gap(a2::T;a3,a4,H_kin_x_diag_data,cacheH_data,dx,xmin) where {T}\n    eigcache=eigvalue(a2;a3=a3,a4=a4,H_kin_x_diag_data=H_kin_x_diag_data,cacheH_data=cacheH_data,dx=dx,xmin=xmin)\n    val=sqrt(a2/2)\n    _,index=findmin(x-&gt;abs(x-val),eigcache)\n    if index == 1\n        abs(eigcache[index+1]-eigcache[index])\n    elseif index==length(eigcache)\n        abs(eigcache[index]-eigcache[index-1])\n    else\n        min(abs(eigcache[index]-eigcache[index-1]),abs(eigcache[index+1]-eigcache[index]))\n    end\nend\nfunction gap_f(a3,a4,H_kin_x_diag_data,cacheH_data,dx,xmin)\n    a2-&gt;smallest_gap(a2,a3=a3,a4=a4,H_kin_x_diag_data=H_kin_x_diag_data,cacheH_data=cacheH_data,dx=dx,xmin=xmin)\nend\ngapf=gap_f(a3,a4,H_kin_x_diag_datad,cacheH_datad,dx,x_pos[1])\ngapdfda2=a2-&gt;ForwardDiff.derivative(gapf,a2)\n##\na21=5.712e+05*e/E_unit*L_unit^2\na22=5.694e+05*e/E_unit*L_unit^2\na2list=range(a21,a22,length=20)\nscatter(a2list,gapf.(a2list)*(E_unit/ħ/2π),axis =(xreversed=true,))\nscatter(a2list,gapdfda2.(a2list),axis =(xreversed=true,))```\n</code></pre></div>",
        "id": 282755983,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652863011
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I'm not sure it's possible</p>",
        "id": 282765658,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652868329
    },
    {
        "content": "<p>[slack] &lt;Or&gt; Hey, if my my function has 2 allocations of 144 bytes, but the <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a> solve has ~20k allocations which take 1.36 MB, what can I investigate in order to make the solution faster? I'd provide a code example, but there are many different functions and structs involved.</p>",
        "id": 282803603,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652887229
    },
    {
        "content": "<p>[slack] &lt;Or&gt; Also, there are about 650 iterations in the solver to solve the equation</p>",
        "id": 282804383,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652887599
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; why are there 2 allocations? Probably they can be removed somehow</p>",
        "id": 282804749,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652887747
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; show code.</p>",
        "id": 282804756,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652887749
    },
    {
        "content": "<p>[slack] &lt;Or&gt; ```function qliouville!(drho::Matrix{T}, rho::Matrix{T}, p, t::Float64) where {N, T}<br>\n    H, C = p<br>\n    mul!(C, rho, 1.0im)<br>\n    commutator!(C, H(t), drho)<br>\nend</p>\n<p>function mul!(A::Matrix, B::Matrix, c::Number)<br>\n    for i in eachindex(B)<br>\n        A[i] = c * B[i]<br>\n    end<br>\nend</p>\n<p>function commutator!(A::Matrix, B::Matrix, C::Matrix)<br>\n    mul!(C, A, B)<br>\n    mul!(C, B, A, -1.0, 1.0)<br>\nend```</p>",
        "id": 282804979,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652887835
    },
    {
        "content": "<p>[slack] &lt;Or&gt; ```julia&gt; @benchmark qliouville!(drho, rho.mat, H, 0.3)<br>\nBenchmarkTools.Trial: 10000 samples with 755 evaluations.<br>\n Range (min … max):  167.246 ns …   8.041 μs  ┊ GC (min … max): 0.00% … 96.76%<br>\n Time  (median):     185.132 ns               ┊ GC (median):    0.00%<br>\n Time  (mean ± σ):   211.281 ns ± 263.241 ns  ┊ GC (mean ± σ):  4.69% ±  3.73%</p>\n<p>█▆▄▃▄▃▃▄▆▅▅▄▃▃▂▂▂▁▁▁▁▁▁                                       ▂<br>\n  ██████████████████████████▇▇██▇▇▇▇▇▆▅▅▆▆▇▅▅▆▆▅▅▆▅▅▄▅▅▅▄▅▄▅▅▅▅ █<br>\n  167 ns        Histogram: log(frequency) by time        426 ns &lt;</p>\n<p>Memory estimate: 144 bytes, allocs estimate: 2.```</p>",
        "id": 282805098,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652887882
    },
    {
        "content": "<p>[slack] &lt;Or&gt; (for 2x2 matrices)</p>",
        "id": 282805134,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652887897
    },
    {
        "content": "<p>[slack] &lt;Or&gt; I tested each line of qliouville separately, and each of these has 0 allocations</p>",
        "id": 282805495,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652888030
    },
    {
        "content": "<p>[slack] &lt;Or&gt; as well as the inputs</p>",
        "id": 282805509,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652888035
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; change to return nothing</p>",
        "id": 282806796,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652888528
    },
    {
        "content": "<p>[slack] &lt;Or&gt; Doesn't change anything</p>",
        "id": 282808181,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652889030
    },
    {
        "content": "<p>[slack] &lt;Daniel Wennberg&gt; This could be just an artifact of using global variables when benchmarking. Try interpolating the variables with <code>$</code>:<br>\n<code>@benchmark qliouville!($drho, $rho.mat, $H, 0.3)</code></p>",
        "id": 282810226,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652889890
    },
    {
        "content": "<p>[slack] &lt;Daniel Wennberg&gt; Technically a property access like <code>rho.mat</code> could also be allocating (not sure what type <code>rho</code> is?). To see the difference, compare <code>$rho.mat</code> and <code>$(rho.mat)</code>.</p>",
        "id": 282810730,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652890100
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; Does <code>H(t)</code> return a new matrix?</p>",
        "id": 282810901,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652890175
    },
    {
        "content": "<p>[slack] &lt;Or&gt; ```julia&gt; @benchmark qliouville!($drho, $(rho.mat), $H, 0.3)<br>\nBenchmarkTools.Trial: 10000 samples with 888 evaluations.<br>\n Range (min … max):  130.472 ns …   6.011 μs  ┊ GC (min … max): 0.00% … 96.94%<br>\n Time  (median):     132.940 ns               ┊ GC (median):    0.00%<br>\n Time  (mean ± σ):   156.117 ns ± 227.667 ns  ┊ GC (mean ± σ):  5.96% ±  3.99%</p>\n<p>▆█▄▂ ▁▁ ▁           ▃▄▄▅▄▃▃▃▃▂                                ▂<br>\n  ██████████▆▅▇██▆▇▆▅█████████████▇▇▇▆▆▆▆▆▆▅▅▆▆▅▆▅▆▆▆▆▆▄▅▅▄▄▁▄▅ █<br>\n  130 ns        Histogram: log(frequency) by time        228 ns &lt;</p>\n<p>Memory estimate: 144 bytes, allocs estimate: 2.```<br>\nthis didn't change the allocations.</p>\n<p>By the way, I gave the wrong function definition for qliouville:</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    commutator!(1.0im * rho, H(t), drho)\nend```\nH generates a new matrix, but it's not clear why:\n```julia&gt; @benchmark $H(0.3)\nBenchmarkTools.Trial: 10000 samples with 981 evaluations.\n Range (min … max):  63.925 ns …  5.178 μs  ┊ GC (min … max): 0.00% … 98.45%\n Time  (median):     67.286 ns              ┊ GC (median):    0.00%\n Time  (mean ± σ):   68.263 ns ± 70.956 ns  ┊ GC (mean ± σ):  1.46% ±  1.39%\n\n  ▅█▆▂ ▁▁▁▄▄▅▇▆▆▄▂▂▂▁             ▁▁                          ▂\n  ████▇██████████████▇█▇█▇▇▅▆▅▆▆▇████▇▆▅▄▃▄▃▃▄▅▃▃▄▅▄▄▅▅▅▃▅▁▃▅ █\n  63.9 ns      Histogram: log(frequency) by time      85.1 ns &lt;\n\n Memory estimate: 16 bytes, allocs estimate: 1.\n\nfunction (H::TimeDependentHamiltonian)(t::Float64)\n    mapsum!(H.operators, t, H.cache)\n    add!(H.cache, H.time_independent_part.mat)\n    H.cache\nend\n\nstruct TimeDependentHamiltonian{N}\n    n_body::Int\n    operators::Vector{TimeDependentOperator}\n    time_independent_part::TimeIndependentHamiltonian\n    cache::Matrix{ComplexF64}\nend```\n</code></pre></div>",
        "id": 282811905,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652890567
    },
    {
        "content": "<p>[slack] &lt;Or&gt; The operators part do not allocate</p>",
        "id": 282811973,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652890607
    },
    {
        "content": "<p>[slack] &lt;Or&gt; ```julia&gt; @benchmark $H.operators<a href=\"http://0.3\">1</a><br>\nBenchmarkTools.Trial: 10000 samples with 990 evaluations.<br>\n Range (min … max):  43.083 ns … 155.301 ns  ┊ GC (min … max): 0.00% … 0.00%<br>\n Time  (median):     44.206 ns               ┊ GC (median):    0.00%<br>\n Time  (mean ± σ):   45.148 ns ±   5.653 ns  ┊ GC (mean ± σ):  0.00% ± 0.00%</p>\n<p>▄▄█▃▃▃                                                       ▁<br>\n  ██████▆▆▅▄▁▄▅█▆▄▄▄▄▃▄▄▄▄▃▁▃▁▃▄▁▄▁▁▃▁▅▆█▇▆▅▁▃▃▆▇█▇▅▄▃▁▁▁▃▁▃▄▄ █<br>\n  43.1 ns       Histogram: log(frequency) by time      70.9 ns &lt;</p>\n<p>Memory estimate: 0 bytes, allocs estimate: 0.```</p>",
        "id": 282812040,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652890640
    },
    {
        "content": "<p>[slack] &lt;Daniel Wennberg&gt; H doesn't generate a new matrix (that would be a larger allocation than 16 bytes) but it's probably opening a boxed variable. Are <code>TimeDependentOperator</code> and <code>TimeIndependentHamiltonian</code> concrete types?</p>",
        "id": 282821927,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652895163
    },
    {
        "content": "<p>[slack] &lt;Daniel Wennberg&gt; In other words, there are probably variables within <code>H(t)</code> whose type can't be inferred at compile time, so the appropriate method of <code>mapsum!</code> and/or <code>add!</code> has to be looked up at runtime. That's often associated with a small allocation of 16, 32, or 48 bytes (though, in my experience, performance wise the bigger problem is the runtime lookup, not the allocation itself).</p>",
        "id": 282822875,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652895655
    },
    {
        "content": "<p>[slack] &lt;Daniel Wennberg&gt; What does <code>@code_warntype H(t)</code> output?</p>",
        "id": 282822919,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652895675
    },
    {
        "content": "<p>[slack] &lt;George Gkountouras&gt; I'm doing a very long (actually as long as the program runs) solve via stepping and hitting the <code>maxiters</code> limit. As I understand it, this limit is cumulative across steps. Is there some way to disable it (<code>maxiters=:forever</code>) or at least reset it every step to 0?</p>",
        "id": 282829816,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652898957
    },
    {
        "content": "<p>[slack] &lt;George Gkountouras&gt; <code>for i in 1:20_000\n    step!(integrator, dt, true)\nend</code></p>",
        "id": 282829990,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652899046
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; What method? One for stiff equations?</p>",
        "id": 282830181,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652899111
    },
    {
        "content": "<p>[slack] &lt;George Gkountouras&gt; <code>Tsit5()</code>, <a href=\"http://mtkstdlib.sciml.ai/dev/tutorials/rc_circuit/\">http://mtkstdlib.sciml.ai/dev/tutorials/rc_circuit/</a>.</p>",
        "id": 282830942,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652899443
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that example is only for some equations</p>",
        "id": 282830975,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652899458
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; is your equation stiff? Did you try say Rodas5?</p>",
        "id": 282830986,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652899464
    },
    {
        "content": "<p>[slack] &lt;George Gkountouras&gt; I can reproduce it from the example with <code>dt=1.0e-6</code>, final time <code>1.0</code> and low frequency (e.g. <code>0.3</code>) sinusoidal input. Rodas5 allocates proportionally to solution length, which is a problem for infinite/\"very long\" simulations. Is there some way to preallocate this? Saving intermediate steps is not required.</p>",
        "id": 282840468,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1652903835
    },
    {
        "content": "<p>[gitter] &lt;ludomori99&gt; Hello everyone. Have recently began using diffeqpy and it was great to see how it outperformed mathematica. Thank you to all who support the project.</p>",
        "id": 284493072,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1654010972
    },
    {
        "content": "<p>[gitter] &lt;ludomori99&gt; Had a question and wanted to know if someone could help me out. Is <a href=\"https://github.com/SciML/diffeqpy\">https://github.com/SciML/diffeqpy</a> all the documentation there is available on the topic in general?</p>",
        "id": 284493593,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1654011091
    },
    {
        "content": "<p>[gitter] &lt;ludomori99&gt; I am failing to find a way to perform parallel simulations, that in julia are easily managed by EnsembleProblem</p>",
        "id": 284493997,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1654011183
    },
    {
        "content": "<p>[gitter] &lt;ludomori99&gt; but even besides this, that is a small example, often I need just to try out until the python code \"matches\" the corresponding julia code, which often is easy, but can be tedious at times. So was wondering if there was some other material on how to work on this end. Thanks</p>",
        "id": 284494509,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1654011413
    },
    {
        "content": "<p>Hmm, I think the bridge is down</p>",
        "id": 285013402,
        "sender_full_name": "Brenhin Keller",
        "timestamp": 1654398242
    },
    {
        "content": "<p>[slack] &lt;oxinabox&gt; Should be back shortly</p>",
        "id": 286922648,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655822090
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Hey everyone, comments on a new standardized badge setup?</p>\n<p><a href=\"https://github.com/SciML/DiffEqSensitivity.jl/pull/651\">https://github.com/SciML/DiffEqSensitivity.jl/pull/651</a></p>",
        "id": 286923557,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655822502
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I want to do the same badge setup on all packages, and that seems to cover it all</p>",
        "id": 286923579,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655822516
    },
    {
        "content": "<p>Looks cool!</p>",
        "id": 286977180,
        "sender_full_name": "Brenhin Keller",
        "timestamp": 1655847219
    },
    {
        "content": "<p>[slack] &lt;oxinabox&gt; <a href=\"https://files.slack.com/files-pri/T68168MUP-F03LPDF2LMS/download/screenshot_20220622-003703.png\">https://files.slack.com/files-pri/T68168MUP-F03LPDF2LMS/download/screenshot_20220622-003703.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F03LPDF2LMS/download/screenshot_20220622-003703.png\"><img src=\"https://uploads.zulipusercontent.net/1f51a00c9cfa0b96b507908cbc50765e253d0491/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d4630334c504446324c4d532f646f776e6c6f61642f73637265656e73686f745f32303232303632322d3030333730332e706e67\"></a></div>",
        "id": 286987424,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655854711
    },
    {
        "content": "<p>[slack] &lt;oxinabox&gt; I wonder if Zulip+docs should be on one line.<br>\nAnd CI + coverage on another</p>",
        "id": 286987482,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655854788
    },
    {
        "content": "<p>[slack] &lt;ashton.bradley&gt; @chrisrackauckas MatrixFreeOperator is not exported by SciMLOperators</p>",
        "id": 286993681,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655860984
    },
    {
        "content": "<p>[slack] &lt;ashton.bradley&gt; oh, wait, so I still need to use DiffEqOperators with it</p>",
        "id": 286993784,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655861059
    },
    {
        "content": "<p>[slack] &lt;Vedant&gt; FunctionOperator</p>",
        "id": 286993922,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655861186
    },
    {
        "content": "<p>[slack] &lt;Lasse Hjuler Christiansen&gt; Hi all - I have just started to experiment with SciML in Julia - and I am new to the language - To get a feel for the workflows, I was looking into the Poisson Equation PINN tutorial: <a href=\"https://docs.sciml.ai/dev/modules/NeuralPDE/pinn/poisson/\">https://docs.sciml.ai/dev/modules/NeuralPDE/pinn/poisson/</a>  - I have tried to run the code, but I get the follow error: “Use OptimizationFunction to pass the derivatives or automatically generate them with one of the autodiff backends” - I assume that the call to prob = NeuralPDE.discretize(pde_system,discretization) should specify the way to calculate gradients ?  Is this a known issue or am I perhaps missing something obvious ? Thanks in advance</p>",
        "id": 287041318,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655898476
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Hey yeah sorry about that. We recently did a rename of <a href=\"https://github.com/search?q=GalacticOptim.jl&amp;type=Repositories\">GalacticOptim.jl</a> to <a href=\"https://github.com/search?q=Optimization.jl&amp;type=Repositories\">Optimization.jl</a> and it looks like those docs needed to still rebuild for that. The updated docs there are <a href=\"https://neuralpde.sciml.ai/dev/pinn/poisson/\">https://neuralpde.sciml.ai/dev/pinn/poisson/</a> and it'll get through the system ASAP. I'm actually going around and enabling a bunch of checks on NeuralPDE right now as we speak so <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> , just let me know if this updated docs is good.</p>",
        "id": 287041578,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655898641
    },
    {
        "content": "<p>[slack] &lt;Lasse Hjuler Christiansen&gt; Thanks for the reply @chrisrackauckas - Works perfectly, thanks</p>",
        "id": 287043552,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655899693
    },
    {
        "content": "<p>[slack] &lt;Vedant&gt; @avikpal @chrisrackauckas is there a neuralode tutorial with lux</p>",
        "id": 287048525,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655902285
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://diffeqflux.sciml.ai/dev/examples/neural_ode/\">https://diffeqflux.sciml.ai/dev/examples/neural_ode/</a> that one uses lux</p>",
        "id": 287048659,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655902330
    },
    {
        "content": "<p>[slack] &lt;Vedant&gt; thanks</p>",
        "id": 287048677,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655902342
    },
    {
        "content": "<p>[slack] &lt;Vedant&gt; is anybody else getting errors /warnings when <code>using DiffEqSensitivity</code> ?</p>",
        "id": 287070151,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655911592
    },
    {
        "content": "<p>[slack] &lt;Vedant&gt; <code>``[vp@MBP test]:jl                                                                     [289/1984]]               _                                                                                 _       _ _(_)_     |  Documentation: https://docs.julialang.org                              (_)     | (_) (_)    |                                                                          _ _   _| |_  __ _   |  Type \"?\" for help, \"]?\" for Pkg help.                                \n  | | | | | | |/ _</code> |  |                                                                       <br>\n  | | |_| | | | (_| |  |  Version 1.8.0-rc1 (2022-05-27)                                       <br>\n _/ |\\__'_|_|_|\\__'_|  |  Official <a href=\"https://julialang.org/\">https://julialang.org/</a> release                              |__/                   |                                                                                                                                                                      (test) pkg&gt; st                                                                                 <br>\nStatus <code>~/.julia/dev/PDEInterfaces/test/Project.toml</code>                                          <br>\n  [6e4b80f9] BenchmarkTools v1.3.1                                                             <br>\n  [41bf760c] DiffEqSensitivity v6.79.0                                                           [7ed4a6bd] LinearSolve v1.19.0                                                                 [b2108857] Lux v0.4.6                                                                          [1dea7af3] OrdinaryDiffEq v6.17.0                                                            <br>\n  [91a5bcdd] Plots v1.30.2                                                                     <br>\n  [1bc83da4] SafeTestsets v0.0.1                                                               <br>\n  [c0aeaf25] SciMLOperators v0.1.3                                                             <br>\n  [e88e6eb3] Zygote v0.6.40                                                                    <br>\n  [37e2e46d] LinearAlgebra                                                                     <br>\n  [8dfed614] Test                                                                                                                                                                             <br>\njulia&gt; using DiffEqSensitivity                                                                 <br>\n[ Info: Precompiling DiffEqSensitivity [41bf760c-e81c-5289-8e54-58b1f1f8abe2]                  <br>\nWARNING: Method definition adjoint(ZygoteRules.AContext, typeof(ZygoteRules.literal_getproperty<br>\n), SciMLBase.EnsembleSolution{T, N, S} where S where N where T, Base.Val{:u}) in module DiffEqB<br>\nase overwritten in module DiffEqBase.                                                          <br>\n<strong>* incremental compilation may be fatally broken for this module </strong>*</p>\n<p>WARNING: Method definition adjoint(ZygoteRules.AContext, typeof(ZygoteRules.literal_getproperty<br>\n), SciMLBase.AbstractNoTimeSolution{T, N} where N where T, Base.Val{:u}) in module DiffEqBase o<br>\nverwritten in module DiffEqBase.<br>\n<strong>* incremental compilation may be fatally broken for this module </strong>*</p>\n<p>WARNING: Method definition adjoint(ZygoteRules.AContext, typeof(ZygoteRules.literal_getproperty<br>\n), SciMLBase.AbstractTimeseriesSolution{T, N, A} where A where N where T, Base.Val{:u}) in modu<br>\nle DiffEqBase overwritten in module DiffEqBase. <br>\n<strong>* incremental compilation may be fatally broken for this module </strong>*```</p>",
        "id": 287070159,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655911596
    },
    {
        "content": "<p>[slack] &lt;Vedant&gt; stuck at</p>",
        "id": 287070215,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655911635
    },
    {
        "content": "<p>[slack] &lt;Vedant&gt; <code>┌ Warning: Replacing module `DiffEqBase`\n└ @ Base loading.jl:1117\n┌ Warning: Module DiffEqBase with build ID 2675945239523459 is missing from the cache.\n│ This may mean DiffEqBase [2b5f629d-d688-5b77-993f-72d75c75574e] does not support precompilation but is imported by a module that does.\n└ @ Base loading.jl:1190\n┌ Warning: Module DiffEqBase with build ID 2675945239523459 is missing from the cache.\n│ This may mean DiffEqBase [2b5f629d-d688-5b77-993f-72d75c75574e] does not support precompilation but is imported by a module that does.\n└ @ Base loading.jl:1190\n┌ Warning: Module DiffEqBase with build ID 2675945239523459 is missing from the cache.\n│ This may mean DiffEqBase [2b5f629d-d688-5b77-993f-72d75c75574e] does not support precompilation but is imported by a module that does.\n└ @ Base loading.jl:1190</code></p>",
        "id": 287070218,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655911636
    },
    {
        "content": "<p>[slack] &lt;Vedant&gt; <code>\n┌ Warning: Replacing module `DiffEqBase`                                                       \n└ @ Base loading.jl:1117                                                                       \n┌ Warning: Module DiffEqBase with build ID 2675941142735453 is missing from the cache.         \n│ This may mean DiffEqBase [2b5f629d-d688-5b77-993f-72d75c75574e] does not support precompilati\non but is imported by a module that does.                                                      \n└ @ Base loading.jl:1190                                                                       \nWARNING: both StochasticDiffEq and DiffEqBase export \"DiffEqBase\"; uses of it in module DiffEqS\nensitivity must be qualified                                                                   \nERROR: LoadError: UndefVarError: DiffEqBase not defined                                        \nStacktrace:                                                                                    \n [1] top-level scope                                                                           \n   @ ~/.julia/packages/DiffEqSensitivity/Pn9H4/src/sensitivity_algorithms.jl:3                 \n [2] include(mod::Module, _path::String)                                                       \n   @ Base ./Base.jl:422                                                                        \n [3] include(x::String)                                                                        \n   @ DiffEqSensitivity ~/.julia/packages/DiffEqSensitivity/Pn9H4/src/DiffEqSensitivity.jl:1\n [4] top-level scope                                                                           \n   @ ~/.julia/packages/DiffEqSensitivity/Pn9H4/src/DiffEqSensitivity.jl:30\n [5] include                                                                                   \n   @ ./Base.jl:422 [inlined]                                                                   \n [6] include_package_for_output(pkg::Base.PkgId, input::String, depot_path::Vector{String}, dl_\nload_path::Vector{String}, load_path::Vector{String}, concrete_deps::Vector{Pair{Base.PkgId, UI\nnt64}}, source::Nothing)                                                                       \n   @ Base ./loading.jl:1407\n [7] top-level scope                                                                           \n   @ stdin:1                                   \nin expression starting at /Users/vp/.julia/packages/DiffEqSensitivity/Pn9H4/src/sensitivity_alg\norithms.jl:3                                   \nin expression starting at /Users/vp/.julia/packages/DiffEqSensitivity/Pn9H4/src/DiffEqSensitivi\nty.jl:1                                        \nin expression starting at stdin:1\nERROR: Failed to precompile DiffEqSensitivity [41bf760c-e81c-5289-8e54-58b1f1f8abe2] to /Users/\nvp/.julia/compiled/v1.8/DiffEqSensitivity/jl_m8EucU.\nStacktrace:                                    \n [1] error(s::String)                          \n   @ Base ./error.jl:35\n [2] compilecache(pkg::Base.PkgId, path::String, internal_stderr::IO, internal_stdout::IO, igno\nre_loaded_modules::Bool)\n   @ Base ./loading.jl:1558 \n [3] compilecache                              \n   @ ./loading.jl:1502 [inlined]\n [4] _require(pkg::Base.PkgId)\n   @ Base ./loading.jl:1203\n [5] _require_prelocked(uuidkey::Base.PkgId)\n   @ Base ./loading.jl:1091\n [6] macro expansion\n   @ ./loading.jl:1071 [inlined]\n [7] macro expansion\n   @ ./lock.jl:223 [inlined]\n [8] require(into::Module, mod::Symbol)\n   @ Base ./loading.jl:1035</code></p>",
        "id": 287071097,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655912010
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Are you on the latest of that and DiffEqBase?</p>",
        "id": 287105019,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655927901
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; New REPL session?</p>",
        "id": 287105032,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655927909
    },
    {
        "content": "<p>[slack] &lt;Vedant&gt; same error</p>",
        "id": 287105614,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655928182
    },
    {
        "content": "<p>[slack] &lt;Vedant&gt; <code>``[vp@MBP test]:jl                                                                                              _                                                                                  _       _ _(_)_     |  Documentation: https://docs.julialang.org                              (_)     | (_) (_)    |                                                                          _ _   _| |_  __ _   |  Type \"?\" for help, \"]?\" for Pkg help.                                \n  | | | | | | |/ _</code> |  |                                                                       <br>\n  | | |_| | | | (_| |  |  Version 1.8.0-rc1 (2022-05-27)                                       <br>\n _/ |\\__'_|_|_|\\__'_|  |  Official <a href=\"https://julialang.org/\">https://julialang.org/</a> release                              |__/                   |                                                                                                                                                                      (test) pkg&gt; st                                                                                 <br>\nStatus <code>~/.julia/dev/PDEInterfaces/test/Project.toml</code>                                          <br>\n  [6e4b80f9] BenchmarkTools v1.3.1                                                             <br>\n  [41bf760c] DiffEqSensitivity v6.79.0                                                           [7ed4a6bd] LinearSolve v1.19.0                                                                 [b2108857] Lux v0.4.6                                                                          [1dea7af3] OrdinaryDiffEq v6.17.0                                                            <br>\n  [91a5bcdd] Plots v1.30.2                                                                     <br>\n  [1bc83da4] SafeTestsets v0.0.1                                                               <br>\n  [c0aeaf25] SciMLOperators v0.1.3                                                             <br>\n  [e88e6eb3] Zygote v0.6.40                                                                    <br>\n  [37e2e46d] LinearAlgebra                                                                     <br>\n  [8dfed614] Test                                                                                                                                                                             <br>\n(test) pkg&gt; up                                                                                 <br>\n    Updating registry at <code>~/.julia/registries/General.toml</code>                                    <br>\n  No Changes to <code>~/.julia/dev/PDEInterfaces/test/Project.toml</code>                                 <br>\n  No Changes to <code>~/.julia/dev/PDEInterfaces/test/Manifest.toml</code></p>\n<p>(test) pkg&gt; precompile</p>\n<p>julia&gt; using DiffEqSensitivity<br>\n[ Info: Precompiling DiffEqSensitivity [41bf760c-e81c-5289-8e54-58b1f1f8abe2]<br>\nWARNING: Method definition adjoint(ZygoteRules.AContext, typeof(ZygoteRules.literal_getproperty<br>\n), SciMLBase.EnsembleSolution{T, N, S} where S where N where T, Base.Val{:u}) in module DiffEqB<br>\nase overwritten in module DiffEqBase.<br>\n<strong>* incremental compilation may be fatally broken for this module </strong>*```</p>",
        "id": 287105619,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655928184
    },
    {
        "content": "<p>[slack] &lt;Nick Jordan&gt; It seems it will not work on the GPU. If you need to run on GPU, you can find an example in <a href=\"http://lux.csail.mit.edu/dev/examples/generated/intermediate/NeuralODE/main/\">http://lux.csail.mit.edu/dev/examples/generated/intermediate/NeuralODE/main/</a></p>",
        "id": 287110361,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655930502
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh I didn't know that example page. Awesome.</p>",
        "id": 287110446,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655930540
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; The only thing to make this run on GPU should be making the arrays on GPU?</p>",
        "id": 287110467,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655930557
    },
    {
        "content": "<p>[slack] &lt;Nick Jordan&gt; <code>diffeqsol_to_array</code> needs to be different. And something is wrong with <code>Optimization</code> , see <a href=\"https://github.com/SciML/DiffEqSensitivity.jl/issues/646\">https://github.com/SciML/DiffEqSensitivity.jl/issues/646</a></p>",
        "id": 287110974,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655930752
    },
    {
        "content": "<p>[slack] &lt;avikpal&gt; @chrisrackauckas do you think the tutorials rn are not visible enough? Should I have a central page linking all of them?</p>",
        "id": 287137152,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655952212
    },
    {
        "content": "<p>[slack] &lt;Sobhan&gt; am i doing something wrong?: <a href=\"https://files.slack.com/files-pri/T68168MUP-F03LR8FCV53/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F03LR8FCV53/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F03LR8FCV53/download/image.png\"><img src=\"https://uploads.zulipusercontent.net/542373b95b0c1f4af78215bf608ebd889164a0b1/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d4630334c523846435635332f646f776e6c6f61642f696d6167652e706e67\"></a></div>",
        "id": 287147961,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655964462
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; What versions? @elrodc do you know what could cause this?</p>",
        "id": 287161326,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655974505
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; No, you're not the issue here. The Lux docs are fine. I'll say, there was an unfortunate mishap which had caused all of the <a href=\"https://github.com/search?q=DiffEqSensitivity.jl&amp;type=Repositories\">DiffEqSensitivity.jl</a> and <a href=\"https://github.com/search?q=DiffEqFlux.jl&amp;type=Repositories\">DiffEqFlux.jl</a> docs to be merged with a bunch of bugs at the same time as the <a href=\"https://github.com/search?q=GalacticOptim.jl&amp;type=Repositories\">GalacticOptim.jl</a> -&gt; <a href=\"https://github.com/search?q=Optimization.jl&amp;type=Repositories\">Optimization.jl</a> change, and so I've been going around fixing them all one by one. Today should be the last batch. In general, I think the Lux tutorials have been very helpful, though the one issue I found is that the interaction with ComponentArrays is something that I don't think is explained well enough for someone not familiar with ComponentArrays (I don't think it's seen until the NeuralODE example? And not mentioned in the manual parts), and its interaction with <a href=\"https://github.com/search?q=Requires.jl&amp;type=Repositories\">Requires.jl</a> is weird.</p>",
        "id": 287161595,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655974673
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; Yes</p>",
        "id": 287178899,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655985478
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; <a href=\"https://github.com/JuliaSIMD/StrideArraysCore.jl/commit/372ab99c022c18240e7598126f6bbc95443f07cc\">https://github.com/JuliaSIMD/StrideArraysCore.jl/commit/372ab99c022c18240e7598126f6bbc95443f07cc</a></p>",
        "id": 287180475,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655986421
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; ahhh</p>",
        "id": 287180491,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655986437
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; ripping it off.</p>",
        "id": 287180543,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655986448
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I just updated and am now getting</p>",
        "id": 287180634,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655986523
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; ```WARNING: Method definition reshape(StrideArraysCore.StrideArray{S, D, T, N, C, B, R, X, O, A} where A&lt;:Union{AbstractArray{T, N} where N where T, ManualMemory.MemoryBuffer{N, T} where T where N} where O where X where R where B where C where N where T where D where S, Tuple{Integer, Vararg{Integer}}) in module StrideArraysCore at C:\\Users\\accou\\.julia\\packages\\StrideArraysCore\\Q0XBa\\src\\reshape.jl:48 overwritten at C:\\Users\\accou\\.julia\\packages\\StrideArraysCore\\Q0XBa\\src\\reshape.jl:42.<br>\n<strong>* incremental compilation may be fatally broken for this module </strong>*</p>\n<p>WARNING: Method definition reshape(StrideArraysCore.StrideArray{S, D, T, N, C, B, R, X, O, A} where A&lt;:Union{AbstractArray{T, N} where N where T, ManualMemory.MemoryBuffer{N, T} where T where N} where O where X where R where B where C where N where T where D where S, Tuple{Vararg{Integer}}) in module StrideArraysCore at C:\\Users\\accou\\.julia\\packages\\StrideArraysCore\\Q0XBa\\src\\reshape.jl:45 overwritten at C:\\Users\\accou\\.julia\\packages\\StrideArraysCore\\Q0XBa\\src\\reshape.jl:39.<br>\n<strong>* incremental compilation may be fatally broken for this module </strong>*</p>\n<p>WARNING: Method definition reshape(StrideArraysCore.PtrArray{S, D, T, N, C, B, R, X, O} where O where X where R where B where C where N where T, Tuple{Integer, Vararg{Integer}}) where {S, D} in module StrideArraysCore at C:\\Users\\accou\\.julia\\packages\\StrideArraysCore\\Q0XBa\\src\\reshape.jl:28 overwritten at C:\\Users\\accou\\.julia\\packages\\StrideArraysCore\\Q0XBa\\src\\reshape.jl:21.<br>\n<strong>* incremental compilation may be fatally broken for this module </strong>*</p>\n<p>WARNING: Method definition reshape(StrideArraysCore.PtrArray{S, D, T, N, C, B, R, X, O} where O where X where R where B where C where N where T, Tuple{Vararg{Integer}}) where {S, D} in module StrideArraysCore at C:\\Users\\accou\\.julia\\packages\\StrideArraysCore\\Q0XBa\\src\\reshape.jl:17 overwritten at C:\\Users\\accou\\.julia\\packages\\StrideArraysCore\\Q0XBa\\src\\reshape.jl:13.<br>\n<strong>* incremental compilation may be fatally broken for this module </strong>*</p>\n<p>WARNING: Method definition reshape(StrideArraysCore.StrideArray{S, D, T, N, C, B, R, X, O, A} where A&lt;:Union{AbstractArray{T, N} where N where T, ManualMemory.MemoryBuffer{N, T} where T where N} where O where X where R where B where C where N where T where D where S, Tuple{Integer, Vararg{Integer}}) in module StrideArraysCore at C:\\Users\\accou\\.julia\\packages\\StrideArraysCore\\Q0XBa\\src\\reshape.jl:48 overwritten at C:\\Users\\accou\\.julia\\packages\\StrideArraysCore\\Q0XBa\\src\\reshape.jl:42.<br>\n<strong>* incremental compilation may be fatally broken for this module </strong>*</p>\n<p>WARNING: Method definition reshape(StrideArraysCore.StrideArray{S, D, T, N, C, B, R, X, O, A} where A&lt;:Union{AbstractArray{T, N} where N where T, ManualMemory.MemoryBuffer{N, T} where T where N} where O where X where R where B where C where N where T where D where S, Tuple{Vararg{Integer}}) in module StrideArraysCore at C:\\Users\\accou\\.julia\\packages\\StrideArraysCore\\Q0XBa\\src\\reshape.jl:45 overwritten at C:\\Users\\accou\\.julia\\packages\\StrideArraysCore\\Q0XBa\\src\\reshape.jl:39.<br>\n<strong>* incremental compilation may be fatally broken for this module </strong>*</p>\n<p>WARNING: Method definition reshape(StrideArraysCore.PtrArray{S, D, T, N, C, B, R, X, O} where O where X where R where B where C where N where T, Tuple{Integer, Vararg{Integer}}) where {S, D} in module StrideArraysCore at C:\\Users\\accou\\.julia\\packages\\StrideArraysCore\\Q0XBa\\src\\reshape.jl:28 overwritten at C:\\Users\\accou\\.julia\\packages\\StrideArraysCore\\Q0XBa\\src\\reshape.jl:21.<br>\n<strong>* incremental compilation may be fatally broken for this module </strong>*</p>\n<p>WARNING: Method definition reshape(StrideArraysCore.PtrArray{S, D, T, N, C, B, R, X, O} where O where X where R where B where C where N where T, Tuple{Vararg{Integer}}) where {S, D} in module StrideArraysCore at C:\\Users\\accou\\.julia\\packages\\StrideArraysCore\\Q0XBa\\src\\reshape.jl:17 overwritten at C:\\Users\\accou\\.julia\\packages\\StrideArraysCore\\Q0XBa\\src\\reshape.jl:13.<br>\n<strong>* incremental compilation may be fatally broken for this module </strong>*</p>\n<p>WARNING: Method definition reshape(StrideArraysCore.StrideArray{S, D, T, N, C, B, R, X, O, A} where A&lt;:Union{AbstractArray{T, N} where N where T, ManualMemory.MemoryBuffer{N, T} where T where N} where O where X where R where B where C where N where T where D where S, Tuple{Integer, Vararg{Integer}}) in module StrideArraysCore at C:\\Users\\accou\\.julia\\packages\\StrideArraysCore\\Q0XBa\\src\\reshape.jl:48 overwritten at C:\\Users\\accou\\.julia\\packages\\StrideArraysCore\\Q0XBa\\src\\reshape.jl:42.<br>\n<strong>* incremental compilation may be fatally broken for this module </strong>*</p>\n<p>WARNING: Method definition reshape(StrideArraysCore.StrideArray{S, D, T, N, C, B, R, X, O, A} where A&lt;:Union{AbstractArray{T, N} where N where T, ManualMemory.MemoryBuffer{N, T} where T where N} where O where X where R where B where C where N where T where D where S, Tuple{Vararg{Integer}}) in module StrideArraysCore at C:\\Users\\accou\\.julia\\packages\\StrideArraysCore\\Q0XBa\\src\\reshape.jl:45 overwritten at C:\\Users\\accou\\.julia\\packages\\StrideArraysCore\\Q0XBa\\src\\reshape.jl:39.<br>\n<strong>* incremental compilation may be fatally broken for this module </strong>*</p>\n<p>WARNING: Method definition reshape(StrideArraysCore.PtrArray{S, D, T, N, C, B, R, X, O} where O where X where R where B where C where N where T, Tuple{Integer, Vararg{Integer}}) where {S, D} in module StrideArraysCore at C:\\Users\\accou\\.julia\\packages\\StrideArraysCore\\Q0XBa\\src\\reshape.jl:28 overwritten at C:\\Users\\accou\\.julia\\packages\\StrideArraysCore\\Q0XBa\\src\\reshape.jl:21.<br>\n<strong>* incremental compilation may be fatally broken for this module </strong>*</p>\n<p>WARNING: Method definition reshape(StrideArraysCore.PtrArray{S, D, T, N, C, B, R, X, O} where O where X where R where B where C where N where T, Tuple{Vararg{Integer}}) where {S, D} in module StrideArraysCore at C:\\Users\\accou\\.julia\\packages\\StrideArraysCore\\Q0XBa\\src\\reshape.jl:17 overwritten at C:\\Users\\accou\\.julia\\packages\\StrideArraysCore\\Q0XBa\\src\\reshape.jl:13.<br>\n<strong>* incremental compilation may be fatally broken for this module </strong>*</p>\n<p>WARNING: Method definition reshape(StrideArraysCore.StrideArray{S, D, T, N, C, B, R, X, O, A} where A&lt;:Union{AbstractArray{T, N} where N where T, ManualMemory.MemoryBuffer{N, T} where T where N} where O where X where R where B where C where N where T where D where S, Tuple{Integer, Vararg{Integer}}) in module StrideArraysCore at C:\\Users\\accou\\.julia\\packages\\StrideArraysCore\\Q0XBa\\src\\reshape.jl:48 overwritten at C:\\Users\\accou\\.julia\\packages\\StrideArraysCore\\Q0XBa\\src\\reshape.jl:42.<br>\n<strong>* incremental compilation may be fatally broken for this module </strong>*</p>\n<p>WARNING: Method definition reshape(StrideArraysCore.StrideArray{S, D, T, N, C, B, R, X, O, A} where A&lt;:Union{AbstractArray{T, N} where N where T, ManualMemory.MemoryBuffer{N, T} where T where N} where O where X where R where B where C where N where T where D where S, Tuple{Vararg{Integer}}) in module StrideArraysCore at C:\\Users\\accou\\.julia\\packages\\StrideArraysCore\\Q0XBa\\src\\reshape.jl:45 overwritten at C:\\Users\\accou\\.julia\\packages\\StrideArraysCore\\Q0XBa\\src\\reshape.jl:39.<br>\n<strong>* incremental compilation may be fatally broken for this module </strong>*</p>\n<p>WARNING: Method definition reshape(StrideArraysCore.PtrArray{S, D, T, N, C, B, R, X, O} where O where X where R where B where C where N where T, Tuple{Integer, Vararg{Integer}}) where {S, D} in module StrideArraysCore at C:\\Users\\accou\\.julia\\packages\\StrideArraysCore\\Q0XBa\\src\\reshape.jl:28 overwritten at C:\\Users\\accou\\.julia\\packages\\StrideArraysCore\\Q0XBa\\src\\reshape.jl:21.<br>\n<strong>* incremental compilation may be fatally broken for this module </strong>*</p>\n<p>WARNING: Method definition reshape(StrideArraysCore.PtrArray{S, D, T, N, C, B, R, X, O} where O where X where R where B where C where N where T, Tuple{Vararg{Integer}}) where {S, D} in module StrideArraysCore at C:\\Users\\accou\\.julia\\packages\\StrideArraysCore\\Q0XBa\\src\\reshape.jl:17 overwritten at C:\\Users\\accou\\.julia\\packages\\StrideArraysCore\\Q0XBa\\src\\reshape.jl:13.<br>\n<strong>* incremental compilation may be fatally broken for this module </strong>*```</p>",
        "id": 287180637,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655986525
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; Is that 0.3.13?</p>",
        "id": 287184381,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655988673
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 287184581,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655988773
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; ```julia&gt; using StrideArraysCore<br>\n[ Info: Precompiling StrideArraysCore [7792a7ef-975c-4747-a70f-980b88e8d1da]</p>\n<p>(lvdev) pkg&gt; st -m Static StrideArraysCore<br>\nStatus <code>~/Documents/progwork/julia/env/lvdev/Manifest.toml</code><br>\n⌅ [aedffcd0] Static v0.6.6```</p>",
        "id": 287184591,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655988778
    },
    {
        "content": "<p>[slack] &lt;Sobhan&gt; am i doing something wrong?</p>",
        "id": 287184612,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655988787
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code> Static [aedffcd0] log:\n ├─possible versions are: 0.1.0-0.7.3 or uninstalled\n ├─restricted to versions 0.7 by an explicit requirement, leaving only versions 0.7.0-0.7.3\n └─restricted by compatibility requirements with Polyester [f517fe37] to versions: 0.2.4-0.6.6 — no versions left\n   └─Polyester [f517fe37] log:\n     ├─possible versions are: 0.3.0-0.6.12 or uninstalled\n     └─restricted to versions 0.3-0.6 by OrdinaryDiffEq [1dea7af3], leaving only versions 0.3.0-0.6.12\n       └─OrdinaryDiffEq [1dea7af3] log:\n         ├─possible versions are: 6.17.0 or uninstalled\n         └─OrdinaryDiffEq [1dea7af3] is fixed to version 6.17.0</code></p>",
        "id": 287184751,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655988853
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Polyester</p>",
        "id": 287184752,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1655988854
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @elrodc it's <a href=\"https://github.com/search?q=LoopVectorization.jl&amp;type=Repositories\">LoopVectorization.jl</a></p>",
        "id": 287218775,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656003358
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>   Resolving package versions...\n   Installed StructArrays ───── v0.6.10\n   Installed StrideArraysCore ─ v0.3.13\n    Updating `C:\\Users\\accou\\.julia\\environments\\v1.8\\Project.toml`\n  [1dea7af3] ~ OrdinaryDiffEq v6.17.0 `https://github.com/SciML/OrdinaryDiffEq.jl.git#master` ⇒ v6.17.0 `C:\\Users\\accou\\.julia\\dev\\OrdinaryDiffEq`\n    Updating `C:\\Users\\accou\\.julia\\environments\\v1.8\\Manifest.toml`\n  [1dea7af3] ~ OrdinaryDiffEq v6.17.0 `https://github.com/SciML/OrdinaryDiffEq.jl.git#master` ⇒ v6.17.0 `C:\\Users\\accou\\.julia\\dev\\OrdinaryDiffEq`\n⌅ [aedffcd0] ~ Static v0.6.0 `C:\\Users\\accou\\.julia\\dev\\Static` ⇒ v0.6.6\n  [7792a7ef] ↑ StrideArraysCore v0.3.12 ⇒ v0.3.13\n  [09ab397b] ↑ StructArrays v0.6.8 ⇒ v0.6.10</code></p>",
        "id": 287218875,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656003391
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; blocking it</p>",
        "id": 287218879,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656003392
    },
    {
        "content": "<p>[slack] &lt;Vedant Puri&gt; what's the correct way of passing in <code>ps,st</code>  to Lux with <code>ODEProblem</code> ?</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>using Zygote, Random, DiffEqSensitivity, ComponentArrays\n\nN = 10\nw = 5\nmodel = Lux.Chain(\n                  Lux.Dense(N, w, tanh),\n                  Lux.Dense(w, N),\n                 )\n\nrng = Random.default_rng()\nps, st = Lux.setup(rng, model)\n\n# ODE setup\nu0 = rand(N)\ntspan = (0.0, 1.0)\ntsave = range(tspan...; length=10)\nprob = ODEProblem(model, u0, tspan, saveat=tsave)\n\nps = ComponentArray(ps)\nsolve(prob, Tsit5(), p=(ps, st))```\nerror in thread\n</code></pre></div>",
        "id": 287220643,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656004105
    },
    {
        "content": "<p>[slack] &lt;Vedant Puri&gt; <code>julia&gt; include(\"examples/lux_baby.jl\")                                               [114/1983]\nERROR: LoadError: MethodError: no method matching (::Chain{NamedTuple{(:layer_1, :layer_2), Tup\nle{Dense{true, typeof(NNlib.tanh_fast), typeof(Lux.glorot_uniform), typeof(Lux.zeros32)}, Dense\n{true, typeof(identity), typeof(Lux.glorot_uniform), typeof(Lux.zeros32)}}}})(::Vector{Float64}\n, ::Tuple{ComponentVector{Float32, Vector{Float32}, Tuple{Axis{(layer_1 = ViewAxis(1:55, Axis(w\neight = ViewAxis(1:50, ShapedAxis((5, 10), NamedTuple())), bias = ViewAxis(51:55, ShapedAxis((5\n, 1), NamedTuple())))), layer_2 = ViewAxis(56:115, Axis(weight = ViewAxis(1:50, ShapedAxis((10,\n 5), NamedTuple())), bias = ViewAxis(51:60, ShapedAxis((10, 1), NamedTuple())))))}}}, NamedTupl\ne{(:layer_1, :layer_2), Tuple{NamedTuple{(), Tuple{}}, NamedTuple{(), Tuple{}}}}}, ::Float64)  \nClosest candidates are:                                                                        \n  (::Chain)(::Any, ::Any, ::NamedTuple) at ~/.julia/packages/Lux/SApdg/src/layers/basic.jl:533 \nStacktrace:                                                                                    \n  [1] (::ODEFunction{false, Chain{NamedTuple{(:layer_1, :layer_2), Tuple{Dense{true, typeof(NNl\nib.tanh_fast), typeof(Lux.glorot_uniform), typeof(Lux.zeros32)}, Dense{true, typeof(identity), \ntypeof(Lux.glorot_uniform), typeof(Lux.zeros32)}}}}, LinearAlgebra.UniformScaling{Bool}, Nothin\ng, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, No\nthing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing})(::Vector{Float64}, ::Vararg{Any})         \n    @ SciMLBase ~/.julia/packages/SciMLBase/byoKQ/src/scimlfunctions.jl:1613</code></p>",
        "id": 287220653,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656004109
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; Did we make a new ArrayInterfaceStaticArrays release?</p>",
        "id": 287220716,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656004139
    },
    {
        "content": "<p>[slack] &lt;elrodc&gt; I know LV is blocking it. I made a few updates locally, but didn’t get tests passing with the new StaticInt yet.</p>",
        "id": 287220762,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656004159
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/JuliaRegistries/General/pulls?q=is%3Apr+arrayinterfacestaticarrays+is%3Aclosed\">https://github.com/JuliaRegistries/General/pulls?q=is%3Apr+arrayinterfacestaticarrays+is%3Aclosed</a> none in awhile.</p>",
        "id": 287220820,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656004184
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; componentarray, and st separate</p>",
        "id": 287220935,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656004219
    },
    {
        "content": "<p>[slack] &lt;Vedant Puri&gt; <code>solve(prob, Tsit5(), p=ComponentArray(ps), st)</code><br>\ndoesn't work either</p>",
        "id": 287221287,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656004429
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; st you handle separately</p>",
        "id": 287221309,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656004440
    },
    {
        "content": "<p>[slack] &lt;Vedant Puri&gt; in here, <code>st</code> is outside.<br>\n<a href=\"https://github.com/SciML/DiffEqFlux.jl/blob/3d6dca88576a785115cabba67c2b2939dd8debeb/src/neural_de.jl#L100\">https://github.com/SciML/DiffEqFlux.jl/blob/3d6dca88576a785115cabba67c2b2939dd8debeb/src/neural_de.jl#L100</a></p>",
        "id": 287221390,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656004472
    },
    {
        "content": "<p>[slack] &lt;Vedant Puri&gt; <code>julia&gt; solve(prob, Tsit5(), p=ComponentArray(ps))                                              \nERROR: MethodError: no method matching (::Chain{NamedTuple{(:layer_1, :layer_2), Tuple{Dense{tr\nue, typeof(NNlib.tanh_fast), typeof(Lux.glorot_uniform), typeof(Lux.zeros32)}, Dense{true, type\nof(identity), typeof(Lux.glorot_uniform), typeof(Lux.zeros32)}}}})(::Vector{Float64}, ::Compone\nntVector{Float32, Vector{Float32}, Tuple{Axis{(layer_1 = ViewAxis(1:55, Axis(weight = ViewAxis(\n1:50, ShapedAxis((5, 10), NamedTuple())), bias = ViewAxis(51:55, ShapedAxis((5, 1), NamedTuple(\n))))), layer_2 = ViewAxis(56:115, Axis(weight = ViewAxis(1:50, ShapedAxis((10, 5), NamedTuple()\n)), bias = ViewAxis(51:60, ShapedAxis((10, 1), NamedTuple())))))}}}, ::Float64)                \nClosest candidates are:                                                                        \n  (::Chain)(::Any, ::Any, ::NamedTuple) at ~/.julia/packages/Lux/SApdg/src/layers/basic.jl:533 \nStacktrace:                                                                                    </code></p>",
        "id": 287221456,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656004505
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; make it a global</p>",
        "id": 287221484,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656004515
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that's the easy way</p>",
        "id": 287221493,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656004519
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; see how it's function local in that case.</p>",
        "id": 287221497,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656004523
    },
    {
        "content": "<p>[slack] &lt;Vedant Puri&gt; oh ok</p>",
        "id": 287221639,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656004593
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; then you can use a functor, let block, etc.</p>",
        "id": 287221663,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656004607
    },
    {
        "content": "<p>[slack] &lt;Vedant Puri&gt; thanks</p>",
        "id": 287222715,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656005160
    },
    {
        "content": "<p>[slack] &lt;avikpal&gt; I actually wrote up a parameter interface section in the manual yesterday <a href=\"https://github.com/avik-pal/Lux.jl/blob/9662ecb41e18de62723027fd0d61a85de5f00273/docs/src/manual/interface.md#parameter-interface\">https://github.com/avik-pal/Lux.jl/blob/9662ecb41e18de62723027fd0d61a85de5f00273/docs/src/manual/interface.md#parameter-interface</a> (merging is blocked because DiffEqSensitivity is not compiling correctly on CI servers)</p>",
        "id": 287284418,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656040979
    },
    {
        "content": "<p>[slack] &lt;avikpal&gt; Also one of the reasons ComponentArrays doesn't show up in too many places is <a href=\"https://github.com/avik-pal/Lux.jl/issues/49\">https://github.com/avik-pal/Lux.jl/issues/49</a></p>",
        "id": 287284431,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656041013
    },
    {
        "content": "<p>[slack] &lt;avikpal&gt; Anyone seen a recent DiffEqSensitivity precompile failure on CI? <a href=\"https://github.com/avik-pal/Lux.jl/runs/7035938219?check_suite_focus=true#step:7:173\">https://github.com/avik-pal/Lux.jl/runs/7035938219?check_suite_focus=true#step:7:173</a> seems to be happening since yesterday</p>",
        "id": 287289164,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656046520
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; interesting, we don't see it on our CI</p>",
        "id": 287305447,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656060476
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; If I had to guess, it might be the whole <a href=\"https://github.com/search?q=Static.jl&amp;type=Repositories\">Static.jl</a> thing</p>",
        "id": 287305495,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656060486
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; we're really ripping off every bandaid we can this week <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 287305500,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656060495
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; is there no more of a stack trace than that?</p>",
        "id": 287305948,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656060858
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; julia&gt; ComponentArray(p)<br>\nERROR: CuArray only supports element types that are stored inline<br>\nStacktrace:<br>\n  [1] error(s::String)<br>\n    @ Base .\\error.jl:35<br>\n  [2] CuArray{Vector{Any}, 2, CUDA.Mem.DeviceBuffer}(#unused#::UndefInitializer, dims::Tuple{Int64, Int64})<br>\n    @ CUDA C:\\Users\\accou\\.julia\\packages\\CUDA\\tTK8Y\\src\\array.jl:34<br>\n  [3] similar(a::CuArray{Float32, 2, CUDA.Mem.DeviceBuffer}, #unused#::Type{Vector{Any}}, dims::Tuple{Int64, Int64})<br>\n    @ CUDA C:\\Users\\accou\\.julia\\packages\\CUDA\\tTK8Y\\src\\array.jl:166<br>\n<code>  [4] _mapreduce(f::typeof(identity), op::ComponentArrays.var\"#28#29\", As::CuArray{Float32, 2, CUDA.Mem.DeviceBuffer}; dims::Colon, init::Vector{Any})</code></p>",
        "id": 287309260,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656063154
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @avikpal do you have a solution for the componentarray gpu constructor?</p>",
        "id": 287309275,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656063168
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Lux works forwards broadcasting the GPU construction to the elements of the named tuple</p>",
        "id": 287309400,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656063250
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; import DiffEqFlux, Lux, CUDA, OrdinaryDiffEq</p>\n<p>dudt2 = Lux.Chain(Lux.ActivationFunction(x -&gt; x^3),<br>\n            Lux.Dense(2,50,tanh),<br>\n            Lux.Dense(50,2))</p>\n<p>u0 = Float32[2.; 0.] |&gt; gpu<br>\nrng = Random.default_rng()<br>\np, st = Lux.setup(rng, dudt2) .|&gt; gpu</p>\n<p>dudt2_(u, p, t) = dudt2(u,p,st)[1]</p>\n<h1>Simulation interval and intermediary points</h1>\n<p>tspan = (0f0, 10f0)<br>\ntsteps = 0f0:1f-1:10f0</p>\n<p>prob_gpu = ODEProblem(dudt2_, u0, tspan, p)</p>\n<h1>Runs on a GPU</h1>\n<p><code>sol_gpu = solve(prob_gpu, Tsit5(), saveat = tsteps)</code></p>",
        "id": 287309409,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656063256
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but runs into issues with the ComponentArray form</p>",
        "id": 287309418,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656063265
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Hmm</p>",
        "id": 287310462,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656063999
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I can get it onto the GPU</p>",
        "id": 287310467,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656064002
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>x = ComponentArray(p)\npinit = ComponentArray(x |&gt; gpu,getfield(x,:axes))</code></p>",
        "id": 287310469,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656064004
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but then it's having issues broadcasting</p>",
        "id": 287310483,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656064017
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>CUDA.GPUArrays.backend(x::ComponentArray) = CUDA.CuArrayBackend()\npinit * 2</code></p>",
        "id": 287310485,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656064018
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Full current example:</p>",
        "id": 287310793,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656064233
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; ```using Flux, DiffEqFlux, Optimization, OptimizationFlux, Zygote, <br>\n      OrdinaryDiffEq, Plots, CUDA, DiffEqSensitivity, Random, ComponentArrays<br>\nCUDA.allowscalar(false)</p>\n<p>rng = Random.default_rng()</p>\n<p>u0 = Float32[2.0; 0.0]<br>\ndatasize = 30<br>\ntspan = (0.0f0, 1.5f0)<br>\ntsteps = range(tspan[1], tspan[2], length = datasize)</p>\n<p>function trueODEfunc(du, u, p, t)<br>\n    true_A = [-0.1 2.0; -2.0 -0.1]<br>\n    du .= ((u.^3)'true_A)'<br>\nend<br>\nprob_trueode = ODEProblem(trueODEfunc, u0, tspan)<br>\node_data = gpu(solve(prob_trueode, Tsit5(), saveat = tsteps))</p>\n<p>dudt2 = Lux.Chain(x -&gt; x.^3,<br>\n            Lux.Dense(2,50,tanh),<br>\n            Lux.Dense(50,2))</p>\n<p>u0 = Float32[2.; 0.] |&gt; gpu<br>\nrng = Random.default_rng()<br>\np, st = Lux.setup(rng, dudt2)</p>\n<p>dudt2_(u, p, t) = dudt2(u,p,st)[1]</p>\n<p>function predict_neuralode(p)<br>\n    prob_gpu = ODEProblem(dudt2_, u0, tspan, p)<br>\n    sol_gpu = solve(prob_gpu, Tsit5(), saveat = tsteps)<br>\n    sol_gpu |&gt; gpu<br>\nend<br>\nfunction loss_neuralode(p)<br>\n    pred = predict_neuralode(p)<br>\n    loss = sum(abs2, ode_data .- pred)<br>\n    return loss, pred<br>\nend</p>\n<p>list_plots = []<br>\niter = 0<br>\ncallback = function (p, l, pred; doplot = false)<br>\n  global list_plots, iter<br>\n  if iter == 0<br>\n    list_plots = []<br>\n  end<br>\n  iter += 1<br>\n  display(l)</p>\n<p>plt = scatter(tsteps, Array(ode_data[1,:]), label = \"data\")<br>\n  scatter!(plt, tsteps, Array(pred[1,:]), label = \"prediction\")<br>\n  push!(list_plots, plt)<br>\n  if doplot<br>\n    display(plot(plt))<br>\n  end<br>\n  return false<br>\nend</p>\n<p>x = ComponentArray(p)<br>\npinit = ComponentArray(x |&gt; gpu,getfield(x,:axes))<br>\nCUDA.GPUArrays.backend(x|&gt;gpu)</p>\n<p>adtype = Optimization.AutoZygote()<br>\noptf = Optimization.OptimizationFunction((x,p)-&gt;loss_neuralode(x), adtype)<br>\noptprob = Optimization.OptimizationProblem(optf, pinit)<br>\nresult_neuralode = Optimization.solve(optprob,ADAM(0.05),callback = callback,maxiters = 300)```</p>",
        "id": 287310794,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656064234
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I'll leave that here for now as I didn't intend to write a broadcast overload this morning. I might pick it back up later today</p>",
        "id": 287310836,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656064263
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; The issue is that it needs to recognize that ComponentArray as something with the right BroadcastStyle so it broadcasts, and then the materialize similar needs to then just reconstruct the ComponentArray as I put there. So I guess the rest is left as an exercise for the reader <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 287310893,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656064317
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @avikpal did you profile those ComponentArray regressions or just notice them for now?</p>",
        "id": 287310973,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656064353
    },
    {
        "content": "<p>[slack] &lt;pmyers&gt; Is it possible to mix systems of PDEs and ODEs with ModelingToolkit? For example, say I'm modeling reaction-diffusion of multiple species using PDEs in the volume of a sphere and want to also model the dynamics of some homogeneous species on the sphere boundary (r=R) using ODEs; furthermore, the ODEs and PDEs are coupled with some reaction term at the boundary (i.e., Robin boundary condition that couples the PDE @ r=R to the ODE). Is something like this possible? I believe I may have asked this before but can't remember if there was a definitive answer on this.</p>",
        "id": 287336123,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656080108
    },
    {
        "content": "<p>[slack] &lt;Flemming Holtorf&gt; Hey! I would like to simulate a pure jump process with <code>VariableRateJump</code> s (specifically the rates are time-dependent). What is the preferred integrator? Or does <code>SSAStepper</code> accommodate that setting as well?</p>",
        "id": 287336350,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656080213
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; not right now</p>",
        "id": 287338423,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656081161
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; SSAStepper doesn't work there. Just a simple Tsit5 should be best, though it's not great <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 287338449,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656081176
    },
    {
        "content": "<p>[slack] &lt;Flemming Holtorf&gt; well, it is what it is. Thanks!</p>",
        "id": 287338502,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656081205
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; There is also <a href=\"https://github.com/rveltz/PiecewiseDeterministicMarkovProcesses.jl\">https://github.com/rveltz/PiecewiseDeterministicMarkovProcesses.jl</a> -- I've never compared how those methods do vs. using Tsit5 or such.</p>",
        "id": 287341792,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656082674
    },
    {
        "content": "<p>[slack] &lt;Flemming Holtorf&gt; ohh, good pointer. Thanks a lot - I will investigate a little bit!</p>",
        "id": 287342210,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656082852
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; PDMP should be better if it's just an ODE with variable rate jump things.</p>",
        "id": 287342296,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656082894
    },
    {
        "content": "<p>[slack] &lt;isaacsas&gt; We do need a pure jump with variable rate solver though.</p>",
        "id": 287342364,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656082923
    },
    {
        "content": "<p>[slack] &lt;avikpal&gt; Mostly just opened an issue for now. I will take a deeper look into it later</p>",
        "id": 287404865,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656123415
    },
    {
        "content": "<p>[slack] &lt;avikpal&gt; And it's automatically fixed :man-shrugging:</p>",
        "id": 287405885,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656124915
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yeah, it needed a release in LoopVectoriation.</p>",
        "id": 287420697,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656142369
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Okay, the DiffEqFlux, SciMLSensitivity, StaticArraysCore, GPUArraysCore, ArrayInterfaceCore, Static, SciMLDocs, Optimization, Integrals, and error messages overhaul seems to finally be complete <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>. There's still DiffEqJump to do, and some clean up in NeuralPDE, along with many more doctests to add, and the README badge overhaul, but I think the massive overhaul is starting to come to a close. Thanks everyone who has participated in this massive sprint! Sorry for any issues along the way, but we should be reaching a new stable point again!</p>",
        "id": 287443098,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656173637
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Congrats to everyone who helped with the changes. @isaacsas and I have been working on the DiffEqJump tutorials and docstrings over the last few days, and it is coming along well. @isaacsas was doing a big overhaul on the tutorials while I am working on the docstrings.</p>",
        "id": 287444650,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656175835
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Definitely! I've been seeing it but haven't been able to pitch in there since there has been a moving ship everywhere else <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 287445185,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656176584
    },
    {
        "content": "<p>[slack] &lt;amir.72&gt; Hello everyone, I recently started learning and implementing simple codes on the SciML platform. I do have a question about DiffEqSensitivity documentation. In the https://sensitivity.sciml.ai/dev/ode_fitting/stiff_ode_fit/#:~:text=Js%2C%20prediction%2C%20sol.u)-,loss%20%3D%20sum(abs%2C%20sum(diff))%20%7C%3E%20sqrt,-loss%2C%20prediction%0Aend%0A%0Acallback, is there a specific reason that we first sum over diff, with no absolute values, and the second time we do the summation we do absolute values?</p>",
        "id": 287464121,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656205238
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; @amir.72 can you refer to the lines in the example you are talking about, like the code itself. Then we can help you.</p>",
        "id": 287465220,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656206993
    },
    {
        "content": "<p>[slack] &lt;amir.72&gt; <code>loss = sum(abs, sum(diff)) |&gt; sqrt</code></p>",
        "id": 287465569,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656207486
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; This is just the standard loss function. So the sum of the absolute value of the errors. Like an L1 loss function.</p>",
        "id": 287465577,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656207532
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; So this is what you are minimizing to fit the parameters.</p>",
        "id": 287465581,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656207544
    },
    {
        "content": "<p>[slack] &lt;amir.72&gt; Thanks for the answer. So, I am asking why we have <code>x= sum(diff)</code> first, and then have <code>sum(abs, x)</code>. Why don’t we have <code>x= sum(abs, diff)</code> as well?</p>",
        "id": 287465755,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656207817
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Actually, I spoke too soon. So the line above this uses <code>abs2</code> which is the squared loss, so <code>(u - data)^2</code>. The second line is just summing that squared loss. the <code>abs</code> in the loss function is just making sure that all the losses are positive.</p>",
        "id": 287465817,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656207886
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; I think that there a multiple elements of each <code>u</code> and <code>data</code>, so they are summing squared error over each element in <code>diff[i, :]</code>.  Then they have to sum over the vector of all those summed errors.</p>",
        "id": 287465958,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656208123
    },
    {
        "content": "<p>[slack] &lt;amir.72&gt; Yeah, but the <code>Js</code> in <code>J * (abs2.(u .- data))</code>, can, and as I checked in this example, has negative values, so in the first summation some of the values are cancelling out while in the other they are not. So, wanted to know if there is a reason that we allow that to happen in the time dimension and not in the state variables dimension.</p>",
        "id": 287466019,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656208209
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Yeah that is true. like <code>u .- data</code> will take the differences in each dimension, so if <code>u</code>  is say 3 dimensional, then <code>data</code> is also 3 dimensional in state. So this piece of code will just take the elementwise difference. Then the <code>abs2</code> function will take the square of the absolute value of each element in that difference. That is then multiplied by <code>J</code>.</p>\n<p>At that point you have a vector of differences. I did not read the example in detail but I imagine that multiplication by <code>J</code> is returning a vector?</p>",
        "id": 287466177,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656208490
    },
    {
        "content": "<p>[slack] &lt;amir.72&gt; It returns a vector of vectors, the first vector has different time points, and the nested vector has the state variables.</p>",
        "id": 287466331,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656208751
    },
    {
        "content": "<p>[slack] &lt;amir.72&gt; Hence, <code>loss = sum(abs, sum(diff)) |&gt; sqrt</code>  is doing summation over different time points first, resulting in a vector of size 3, (three state variables) then taking the absolute values, and finally summing over these three values.</p>",
        "id": 287466434,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656208873
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; yeah. I am just firing up an environment to see if I can see the shapes.</p>",
        "id": 287466494,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656208952
    },
    {
        "content": "<p>[slack] &lt;amir.72&gt; My question is why not taking absolute values before doing the first summation. I tried doing it (<code>sum(abs, diff)</code>) but it returns an error, <code>MethodError: no method matching abs(::Vector{Float64})</code>. Just wanted to learn if that choice is only practical to circumvent the error, or has a reason behind it.</p>",
        "id": 287466509,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656209019
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; It could be that the container is causing the issue. Like is this a Vector{Vector{Float64}}, or just a Vector{Float64}.</p>",
        "id": 287466578,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656209130
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; I am just installing DiffEqSensitivity so I can run the example and see what is up.</p>",
        "id": 287466636,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656209184
    },
    {
        "content": "<p>[slack] &lt;amir.72&gt; Yeah, you are right about the type of <code>diff</code> , causing the problem with <code>sum(abs, )</code> . Do you know how I can solve this as well?</p>",
        "id": 287467141,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656210072
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; I am just trying to run the code now. I have not looked at this example in a while, so just trying to refresh my own memory.</p>",
        "id": 287467150,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656210111
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; So what do you want to do with the example. Like you want to convert the type of <code>diff</code> to something that is compatible with <code>sum(abs, ...)</code>.</p>",
        "id": 287467192,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656210156
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Yeah, so this is the problem, That you have a vector of vectors, and that will not go into <code>abs</code>. So if you `sum(diff), then that will basically sum over the columns, essentially.</p>",
        "id": 287467632,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656210851
    },
    {
        "content": "<p>[slack] &lt;amir.72&gt; So, I essentially have two questions,</p>\n<ol>\n<li>Is there a specific physical reason to not have the absolute values in the first summation?</li>\n<li>How can I add that if I want to?</li>\n</ol>",
        "id": 287467973,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656211528
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; You can probably do it, but you will need to write a separate function for it, and then use that inside of the <code>map</code> call. So it just depends on whether you want to go through that little extra effort.</p>",
        "id": 287468240,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656212020
    },
    {
        "content": "<p>[slack] &lt;amir.72&gt; I see. And do you know why here we have the <code>sum</code> without the <code>abs</code>? Should I try the same? Or add the absolute value using <code>map</code>?</p>",
        "id": 287468455,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656212346
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; So you are differencing the <code>prediction</code> minus <code>sol.u</code>, so someting like elementwise difference between <code>[1.0, 0.0, 0.0] .- [10.0, 10.0, 10.0]</code>. So you end up with a vector of vectors with the differences, <code>[-9.0, -10.0, -10.0</code>. Then you take the square of the absolute value of each element, so it will be <code>[81.0, 100.0, 100.0</code>. I guess when you square the values, you don't really need the absolute value.</p>",
        "id": 287469119,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656213384
    },
    {
        "content": "<p>[slack] &lt;amir.72&gt; Oh yeah, that is right. But the <code>Js</code>, multiplied by it has negative values, resulting in <code>diff</code>  having negative values.</p>",
        "id": 287469193,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656213495
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Yes, that is correct. when you multiply by <code>Js</code> it gets negative values.</p>",
        "id": 287469202,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656213525
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; That is why there is an <code>abs</code> in that next line of code.</p>",
        "id": 287469209,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656213538
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; keep in mind that <code>sum(diff)</code> is going to return a vector like <code>[34.59191538539264, -190.01965579509655, 176.16852813073774]</code>. So it is basically a sum over all the columns in <code>diff</code>. This is different than <code>sum.(diff)</code> , which is the sum of each internal vector of <code>diff</code>.</p>",
        "id": 287469297,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656213674
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; I think that the point is that you can define a custom function to handle how <code>diff</code> is computed if you like. So if you have a function</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    do stuff\nend```\nThen you can use this in the `map` call.\n\n```diff = map((J, u, data) -&gt; myfunc(J, u, data), Js, prediction, sol.u)```\nSo that will let you customize how you want it done.\n</code></pre></div>",
        "id": 287469371,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656213820
    },
    {
        "content": "<p>[slack] &lt;amir.72&gt; You are right. So, the second member in <code>sum(diff)</code>  is negative as you said. Meaning that we are adding positive and negative values in our first sum (<code>sum(diff)</code>). Would that be okay?</p>",
        "id": 287469372,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656213821
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; So if you want to square all of the elements before taking the <code>u .- data</code>, then you can write a loop in the <code>myfun()</code> and control that part of the operation.</p>",
        "id": 287469450,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656213939
    },
    {
        "content": "<p>[slack] &lt;amir.72&gt; I see. I appreciate your time. Thanks.</p>",
        "id": 287470439,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656215661
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; No prob. Good luck.</p>",
        "id": 287470517,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656215824
    },
    {
        "content": "<p>[slack] &lt;avikpal&gt; <a href=\"https://github.com/SciML/DeepEquilibriumNetworks.jl/runs/7048789106?check_suite_focus=true\">https://github.com/SciML/DeepEquilibriumNetworks.jl/runs/7048789106?check_suite_focus=true</a> <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span> was any internal API for concrete_solve changed?</p>",
        "id": 287472781,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656219561
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yes, <code>originator::SciMLBase.ADOriginator</code> so that rules could be context dependent (Tracker and ReverseDiff rules don't return the function as the first argument).</p>",
        "id": 287473238,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656220206
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Though I'm curious why DEQs are not able to just directly use the nonlinear solve adjoint stuff. it shouldn't need anything extra?</p>",
        "id": 287473251,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656220249
    },
    {
        "content": "<p>[slack] &lt;avikpal&gt; It has some other methods like jfb <a href=\"https://github.com/SciML/DeepEquilibriumNetworks.jl/blob/089e7c7878059aae7a3c98e98c2630859a907344/src/adjoint.jl#L32\">https://github.com/SciML/DeepEquilibriumNetworks.jl/blob/089e7c7878059aae7a3c98e98c2630859a907344/src/adjoint.jl#L32</a>. It should be streamlined once  I have all the experiments for the paper down</p>",
        "id": 287473315,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656220327
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Jacobian-free happens by default if a Krylov method is chosen (or if no method is chosen, for size &gt; 50)</p>",
        "id": 287473327,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656220386
    },
    {
        "content": "<p>[slack] &lt;avikpal&gt; the paper really conflated that term. jacobian-free is kind of \"incorrect\" gradients without linear solve</p>",
        "id": 287473349,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656220441
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; is it just one iteration?</p>",
        "id": 287473417,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656220545
    },
    {
        "content": "<p>[slack] &lt;avikpal&gt; Yeah, it is basically, ignore the z^* estimation and assume the network is run once</p>",
        "id": 287473477,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656220639
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that would be a nice sensealg to upstream</p>",
        "id": 287473666,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656221008
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Can someone quickly run this on Linux to generate a better stack trace? That would push along some of the Enzyme stuff. Thanks! <a href=\"https://github.com/EnzymeAD/Enzyme.jl/issues/368\">https://github.com/EnzymeAD/Enzyme.jl/issues/368</a></p>",
        "id": 287496740,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656254675
    },
    {
        "content": "<p>[slack] &lt;Daniel González Arribas&gt; I think the creation of <code>prob_pred</code> is missing in that example, is it just like <code>prob_train</code> but using <code>dxdt_train</code>?</p>",
        "id": 287499238,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656257694
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh nice catch, yeah it should just be the ODE defined by <code>dxdt_pred</code></p>",
        "id": 287499256,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656257740
    },
    {
        "content": "<p>[slack] &lt;Daniel González Arribas&gt; Posted the results to the GH issue</p>",
        "id": 287499713,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656258343
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Thanks!</p>",
        "id": 287499769,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656258370
    },
    {
        "content": "<p>[slack] &lt;Daniel González Arribas&gt; I have an ODE with callbacks that seems to allocate 60 MB of stuff outside of my code (--track-allocation=user shows 0 or - everywhere except for initialization stuff) for a given simulation case, according to <code>@benchmark</code>. The really weird thing, though, is that if I trigger Revise.retry() in the same session with any trivial change in the ODE code, the compiler seems to be able to improve its inference skills and reduce the allocations to 3 MB (the code is essentially twice as fast), with the solution being the same. Taking a look at the ProfileView flamegraph (left: after recompilation, right: before), it seems that the difference is caused by a potentially unstable (?) ode_interpolant!(...) call sitting atop a rootfinding/event-detection callstack. What steps would you advise to troubleshoot this issue? Should I attempt to <code>@infiltrate</code> the DiffEq code?: <a href=\"https://files.slack.com/files-pri/T68168MUP-F03MWPPB4JC/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F03MWPPB4JC/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F03MWPPB4JC/download/image.png\"><img src=\"https://uploads.zulipusercontent.net/0fd11a2685d702a8395a9e675474bb1b9352324e/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d4630334d57505042344a432f646f776e6c6f61642f696d6167652e706e67\"></a></div>",
        "id": 287503256,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656263341
    },
    {
        "content": "<p>[slack] &lt;ericphanson&gt; Maybe related: <a href=\"https://github.com/JuliaLang/julia/issues/32552\">https://github.com/JuliaLang/julia/issues/32552</a></p>",
        "id": 287504545,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656264667
    },
    {
        "content": "<p>[slack] &lt;VarLad&gt; Hello!<br>\nI was wondering<br>\nWhy does</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>function f(du, u, p, t)\n    λ1, λ2 = p\n    du[1] = λ1*u[2] + λ2*u[1]\n    du[2] = -λ1*u[1] - λ2*u[2]\nend\nprob = ODEProblem(f, [0.5, 0.0], (0.0, 0.9), [5.0, 3.0])\nsolve(prob)```\nwork, while\n```using DifferentialEquations\nfunction f(du, u, p, t)\n    λ1, λ2 = p\n    du = [λ1*u[2] + λ2*u[1], -λ1*u[1] - λ2*u[2]]\nend\nprob = ODEProblem(f, [0.5, 0.0], (0.0, 0.9), [5.0, 3.0])\nsolve(prob)```\ndoesn't?\n</code></pre></div>",
        "id": 287504549,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656264680
    },
    {
        "content": "<p>[slack] &lt;Daniel González Arribas&gt; in the second case you're assigning a new vector to the \"du\" binding instead of changing what it refers to</p>",
        "id": 287504621,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656264784
    },
    {
        "content": "<p>[slack] &lt;Daniel González Arribas&gt; You can change the <code>=</code> to an <code>.=</code> and it'll work since it will change the values of <code>du</code> instead of the binding itself</p>",
        "id": 287504788,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656264981
    },
    {
        "content": "<p>[slack] &lt;VarLad&gt; @Daniel González Arribas Thanks for the answer, that makes sense.<br>\nUnfortunately, for my usecase, I'm trying to use <code>prob.f</code> with Zygote which doesn't allow array mutations</p>",
        "id": 287504873,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656265055
    },
    {
        "content": "<p>[slack] &lt;Daniel González Arribas&gt; I believe that, if you must use the in-place form, you can use a different backend like Enzyme for differentiating that function. I'm no expert on that, though, so I'd just ask that question either here or in #autodiff</p>",
        "id": 287504978,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656265186
    },
    {
        "content": "<p>[slack] &lt;Daniel González Arribas&gt; Alternatively, you can use the out-of-place form for the ODE, I guess</p>",
        "id": 287505046,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656265233
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yeah see the issues open on it. It's puzzling but seems to be a compiler inlining thing</p>",
        "id": 287507375,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656268329
    },
    {
        "content": "<p>[slack] &lt;Daniel González Arribas&gt; Ok, thanks for the pointers!</p>",
        "id": 287507394,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656268371
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; We might be able to force specialization or inlining to fix it, but I haven't looked at that too much</p>",
        "id": 287507472,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656268479
    },
    {
        "content": "<p>[slack] &lt;Daniel González Arribas&gt; Is it a specific issue with that part of the DiffEq code, or just an instance of a general compiler thing like Eric mentioned? Asking so that I can search for them and subscribe to the updates</p>",
        "id": 287507579,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656268617
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It's a general compiler thing, and there are two issues I think in OrdinaryDiffEq that are related to it. But we might be able to do something to the code to work around the compiler issue by forcing specialization</p>",
        "id": 287507601,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656268675
    },
    {
        "content": "<p>[slack] &lt;Daniel González Arribas&gt; <a href=\"https://github.com/SciML/OrdinaryDiffEq.jl/issues/1502\">https://github.com/SciML/OrdinaryDiffEq.jl/issues/1502</a> this one?</p>",
        "id": 287508567,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656270094
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yes</p>",
        "id": 287508623,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656270160
    },
    {
        "content": "<p>[slack] &lt;Daniel González Arribas&gt; ok, thanks! in the meantime, is there any automatic workaround for triggering the inference in the correct order, for the ode_interpolant case?</p>",
        "id": 287514816,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656278635
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Not that I know of</p>",
        "id": 287516111,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656280573
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; When you provide a sparsity pattern for stiff solving is it better to provide <code>J</code> or <code>J-gamma*I</code> ?</p>",
        "id": 287516218,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656280780
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the latter</p>",
        "id": 287517388,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656282419
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; MTK should do that then probably.</p>",
        "id": 287518274,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656284018
    },
    {
        "content": "<p>[slack] &lt;Sobhan&gt; is there a \"right\" way of integrate PDFs?</p>\n<div class=\"codehilite\" data-code-language=\"g\"><pre><span></span><code>sol = solve(ODEProblem(g, 0.0, (0.0, Inf), Normal(1, 1)))```\n</code></pre></div>",
        "id": 287619253,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656354963
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/search?q=Integrals.jl&amp;type=Repositories\">Integrals.jl</a></p>",
        "id": 287619598,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656355109
    },
    {
        "content": "<p>[slack] &lt;Sobhan&gt; any particular reason?</p>",
        "id": 287619683,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656355153
    },
    {
        "content": "<p>[slack] &lt;Sobhan&gt; i want to calculate the cramer distance <code>\\inf_-inf^inf |F(x) - G(x)|</code> where F and G are CDFs. since my support is only postive,  i only need the positive domain but nesting integrals doesn't seem very...ideal</p>",
        "id": 287619874,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656355236
    },
    {
        "content": "<p>[slack] &lt;Jack Coughlin&gt; Any particular reason for what? Gaussian quadrature rules should be more efficient and accurate than say a Runge-Kutta method when one knows the derivative for all time a-priori, that is what they are for.</p>",
        "id": 287623852,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656356960
    },
    {
        "content": "<p>[slack] &lt;Sobhan&gt; i see, that's interesting</p>",
        "id": 287625630,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656357890
    },
    {
        "content": "<p>[slack] &lt;adenney&gt; Well, _technically_ Gaussian-like quadrature rules.  You’ll need Gauss-Hermite for infinite on both ends, and it is adapted to Gaussian (sigh) envelopes times polynomials.</p>\n<p>If you have the inverses of F and G it might be easier to do that integral over [0, 1].</p>",
        "id": 287626293,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656358226
    },
    {
        "content": "<p>[slack] &lt;Sobhan&gt; it's almost zero after 10, so i think i'm going to truncate everything</p>",
        "id": 287626367,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656358283
    },
    {
        "content": "<p>[slack] &lt;Sobhan&gt; (and zero before zero)</p>",
        "id": 287626376,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656358291
    },
    {
        "content": "<p>[slack] &lt;Sobhan&gt; would've been nice to have the cramer distance as package</p>",
        "id": 287626400,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656358307
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/search?q=Integrals.jl&amp;type=Repositories\">Integrals.jl</a> will do the transform automatically if you make the end point inf</p>",
        "id": 287626560,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656358391
    },
    {
        "content": "<p>[slack] &lt;Sobhan&gt; but is it a good idea to have nested integrations? wouldn't solving the ODE in my case be a better idea?</p>",
        "id": 287626681,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656358450
    },
    {
        "content": "<p>[slack] &lt;Sobhan&gt; ```using Integrals, Distributions</p>\n<p>g(t, p) = pdf(p, t)</p>\n<p>int(f, t, d) = solve(IntegralProblem(f, 0.0, t, d), QuadGKJL())[1]<br>\nfunction f(t, p)<br>\n    a, an, b, bn = p<br>\n    abs(int(g, t, a) / an - int(g, t, b) / bn)<br>\nend<br>\nfunction diff(;lim=20)<br>\n    a = LogNormal(0.5, .1)<br>\n    b = Exponential(0.1)<br>\n    (an, bn) = (int(g, lim, d) for d in (a, b))<br>\n    int(f, lim, (a, an, b, bn, true))<br>\nend<br>\ndiff(lim=Inf)<br>\nfunction diffdir(; lim=20)<br>\n    a = LogNormal(0.5, .1)<br>\n    an = cdf(a, lim)<br>\n    b = Exponential(0.1)<br>\n    bn = cdf(b, lim)<br>\n    int(lim, nothing) do t, p<br>\n        abs(cdf(a, t) / an - cdf(b, t) / bn)<br>\n    end<br>\nend<br>\ndiffdir(lim=Inf)```<br>\ndiff doesn't converge but diffdir does</p>",
        "id": 287626908,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656358586
    },
    {
        "content": "<p>[slack] &lt;Sobhan&gt; the ode version also doesn't converge</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>function f(du, u, param, t)\n    a, an, b, bn, p = param\n    du[1] = pdf(a, t)\n    du[2] = pdf(b, t)\n    du[3] = abs(u[1] / an  - u[2] / bn)^p\nend\nfunction int(dist; lim)\n    prob = ODEProblem((u, p, t) -&gt; pdf(p, t),\n        0.0, (0.0, lim), dist)\n    solve(prob)[end]\nend\n\nfunction diff(μ; lim=20)\n    a = LogNormal(0.5, 0.1)\n    an = int(a; lim)\n    b = Exponential(0.1)\n    bn = int(b; lim)\n    prob = ODEProblem(f,\n        zeros(3, 1), (0, lim),\n        (a, an, b, bn, true))\n\n    sol = solve(prob)[end][3]\nend\ndiff(0.5; lim=Inf)```\n</code></pre></div>",
        "id": 287626989,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656358633
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what is the integrals one throwing?</p>",
        "id": 287627126,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656358697
    },
    {
        "content": "<p>[slack] &lt;Sobhan&gt; it doesn't throw anything the result is 281.60570172293995</p>",
        "id": 287627156,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656358717
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; reduce the tolernace?</p>",
        "id": 287627171,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656358726
    },
    {
        "content": "<p>[slack] &lt;Sobhan&gt; doesn't help much</p>",
        "id": 287627340,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656358814
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Open an issue and @sharan can probably take a look</p>",
        "id": 287627366,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656358834
    },
    {
        "content": "<p>[slack] &lt;Sobhan&gt; before i open an issue, you're talking about</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>g(t, p) = pdf(p, t)\n\nint(f, t, d) = solve(IntegralProblem(f, 0.0, t, d), QuadGKJL();\n    reltol=1e-2,abstol=1e-2)[1]\nfunction f(t, p)\n    a, an, b, bn = p\n    abs(int(g, t, a) / an - int(g, t, b) / bn)\nend\nfunction diff(;lim=20)\n    a = LogNormal(0.5, .1)\n    b = Exponential(0.1)\n    (an, bn) = (int(g, lim, d) for d in (a, b))\n    int(f, lim, (a, an, b, bn, true))\nend\ndiff(lim=Inf)```\nright?\n</code></pre></div>",
        "id": 287627422,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656358873
    },
    {
        "content": "<p>[slack] &lt;Sobhan&gt; not the other itegral?</p>",
        "id": 287627426,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656358876
    },
    {
        "content": "<p>[slack] &lt;Sobhan&gt; it works correctly with quadgk directly <span aria-label=\"oh no\" class=\"emoji emoji-1f615\" role=\"img\" title=\"oh no\">:oh_no:</span></p>",
        "id": 287628011,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656359207
    },
    {
        "content": "<p>[slack] &lt;Sobhan&gt; i guess related to <a href=\"https://github.com/SciML/Integrals.jl/issues/85\">https://github.com/SciML/Integrals.jl/issues/85</a></p>",
        "id": 287628059,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656359235
    },
    {
        "content": "<p>[slack] &lt;adenney&gt; I’m not sure why you would do inner integrals.</p>\n<p>The CDFs of both Exponential and LogNormal distributions are known (though one in terms of <code>erfinv</code>), but even if you didn't have the formula handy, shouldn't <code>Distributions.cdf(dist, value)</code> let you evaluate it without numerically integrating?</p>",
        "id": 287629563,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656360052
    },
    {
        "content": "<p>[slack] &lt;Sobhan&gt; because that's an MWE and i don't have the cdf</p>",
        "id": 287629954,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656360231
    },
    {
        "content": "<p>[slack] &lt;Sobhan&gt; it's only writable in tem of Ei(z) = -\\inf_-z^\\infty \\exp(-t) / t dt</p>",
        "id": 287630173,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656360324
    },
    {
        "content": "<p>[slack] &lt;Sobhan&gt; oh, it's in special functions</p>",
        "id": 287630350,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656360385
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 287644601,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656368176
    },
    {
        "content": "<p>[slack] &lt;VarLad&gt; @chrisrackauckas I'm trying to call Enzyme on an ODEFunction <code>func</code>  using an rrule, when using Zygote.<br>\nIf the ODEFunction is defined as:</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    λ1, λ2 = p\n    du = similar(u)\n    du[1] = λ1*u[2] + λ2*u[1]\n    du[2] = -λ1*u[1] - λ2*u[2]\n    return du\nend\nfunc = ODEFunction(f)```\n</code></pre></div>",
        "id": 287645507,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656368724
    },
    {
        "content": "<p>[slack] &lt;VarLad&gt; (sorry if the below code makes zero sense)<br>\nfor the <code>rrule</code>, I tried something like this, but of course that doesn't work</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    y = func(u,p,t)\n    function func_pullback(ȳ)\n      # return ChainRulesCore.NoTangent(), Something_here, Enzyme.gradient(Enzyme.Reverse, func, p), Enzyme.gradient(Enzyme.Reverse, func, t)\n    end\n    return y, func_pullback\nend```\nAny idea what to fill in the commented line?\n</code></pre></div>",
        "id": 287645615,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656368772
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 287659995,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656379497
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://enzyme.mit.edu/julia/pullbacks/\">https://enzyme.mit.edu/julia/pullbacks/</a></p>",
        "id": 287696001,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656411562
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you know, it might just be easier to do reversediff</p>",
        "id": 287696354,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656411775
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; though wait, most ODEs will be small right?</p>",
        "id": 287696453,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656411840
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; The fastest might be ForwardDiff here.</p>",
        "id": 287696501,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656411847
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>function ChainRulesCore.rrule(func::ODEFunction, u, p, t)\n    y = func(u,p,t)\n    function func_pullback(ȳ)\n        Ju = ForwardDiff.jacobian((u)-&gt;func(u,p,t),u)\n        Jp = ForwardDiff.jacobian((p)-&gt;func(u,p,t),p)\n        ChainRulesCore.NoTangent(), Ju'*ȳ, Jp'*ȳ, ChainRulesCore.NotImplemented()\n    end\n    return y, f_pullback\nend</code></p>",
        "id": 287696620,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656411932
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; hellooo,<br>\nis there an equivalent of <code>retcode</code> for an ensemble solution? I want to reject samples in a Turing model if the solution is unstable</p>",
        "id": 287702373,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656415753
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; there's a retcode in each solution of an ensemble</p>",
        "id": 287702412,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656415778
    },
    {
        "content": "<p>[slack] &lt;Pavan Chaggar&gt; is there an existing method to check if at least one of them is false?</p>",
        "id": 287702667,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656415932
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; no</p>",
        "id": 287703988,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656416775
    },
    {
        "content": "<p>[slack] &lt;arn203&gt; <code>any()</code>?</p>",
        "id": 287708896,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656419696
    },
    {
        "content": "<p>[slack] &lt;Vedant Puri&gt; Jacobian is not formed if you pass in <code>jvp</code>  argument to ODEFunction/ SplitFunction, correct? how can you check?</p>",
        "id": 287737835,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656432172
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's not used many places right now (if any, it would just be ODEForwardSensitivityProblem)</p>",
        "id": 287743680,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656434628
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you can see it in the memory usage</p>",
        "id": 287743687,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656434632
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; For actual ODE solving it'll go Jacobian-free just by switching to a Krylov method</p>",
        "id": 287743802,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656434675
    },
    {
        "content": "<p>[slack] &lt;Vedant Puri&gt; you mean krylov linearsolve methods? i haven't been passing in <code>linsolve</code><br>\nargument since there's some wonky SparseDiffTools error with SciMLOperators.</p>\n<p>so the jac is not formed for fully explicit methods correct? <code>Tsit5</code> , <code>SSPRK</code> ?</p>",
        "id": 287754192,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656439604
    },
    {
        "content": "<p>[slack] &lt;Hugo Dominguez&gt; Hi everyone, I would need a quick clarification about the different projects involved in SciML. I've used for a while <a href=\"https://github.com/search?q=Differentialequations.jl&amp;type=Repositories\">Differentialequations.jl</a> and I had a look at MTK and <a href=\"https://github.com/search?q=MethodOfLines.jl&amp;type=Repositories\">MethodOfLines.jl</a> recently.<br>\nI was wondering where the need to develop <a href=\"https://github.com/search?q=MethodOfLines.jl&amp;type=Repositories\">MethodOfLines.jl</a> is coming from? Is this something that should be used independently from MKT (I understand that it is using MKT internaly though)? I suppose then that MKT in itself is not ready for solving complex PDE? Should I wait a bit for building a serious project using symbolic computation concerning PDEs then, as <a href=\"https://github.com/search?q=MethodOfLines.jl&amp;type=Repositories\">MethodOfLines.jl</a> is just starting as a project?</p>",
        "id": 287756803,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656440897
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; @Hugo Dominguez Not sure if this helps, but MOL is just the package for finite differences/ finite volume methods. There is also NeuralPDE for those solver methods. So I imagine that MTK will subsequently become the glue or bridge between the symbolic equation form and potentially which solution method is chosen. Do you have a system that requires a lot of symbolic manipulation or something? MOL works quite well for a wide variety or problems, though there is a lot of work happening to accelerating the discretization steps, etc.</p>",
        "id": 287761232,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656442944
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes those don't form a Jacobian</p>",
        "id": 287762224,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656443371
    },
    {
        "content": "<p>[slack] &lt;Hugo Dominguez&gt; First, thx for your answer. Alright, so if I got it right, if I have PDEs that I want to solve, I need first to use MKT to describe the problem with PDESystem(), and then MOL to discretise my problem in space. And I can solve that then using solve().<br>\nI am looking at it because I have a system of non-linear PDEs, with 1 of them being elliptic. So I think I have two ways to solve that if I want to stick with traditional ODE solvers, and not developing a custom solver myself.<br>\n1 is using a false transient method, the other is to simplify the problem to obtain a DAE system. And I think MKT could help me for the second solution.</p>",
        "id": 287764427,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656444470
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Yeah, that is a good question. I would probably try a really simple system and build up the pieces, to see if they work. There a simple example of a DAE in MOL <a href=\"https://github.com/SciML/MethodOfLines.jl/blob/master/test/pde_systems/MOL_1D_PDAE.jl\">https://github.com/SciML/MethodOfLines.jl/blob/master/test/pde_systems/MOL_1D_PDAE.jl</a> .</p>",
        "id": 287764782,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656444651
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; There are some limitations on some of the terms in MOL. So as long as you can express your system within those rules, it should work. I suppose there are some questions about how long it will take, or getting stuck in the discretization step. So see if you can get a simpler system working as a proof of concept, and then add to it. I have nto tried to solve an elliptic equation in MOL, so I can't comment on that.</p>",
        "id": 287765030,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656444785
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 287766130,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656445319
    },
    {
        "content": "<p>[slack] &lt;Hugo Dominguez&gt; Alright, thx for the example, I should manage to get started with that I think. I will try when I have some time. I was wondering if someone ever played with something a bit complex, like Stokes equations (where there is an elliptic PDE). If it is not the case, maybe I should see it as a warning that it is a bit ambitious <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> But it will not prevent me from trying for sure!</p>",
        "id": 287766561,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656445513
    },
    {
        "content": "<p>[slack] &lt;VarLad&gt; I'll try that</p>",
        "id": 287766801,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656445650
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Haha, yeah, I am not sure if anyone has tried something as challenging as that navier-stokes equation yet. I am not sure that the solvers are there yet for something like that. I know that they are planning to add more solvers, but not sure of the exact timeframe. Definitely post an issue on github if there is a specific solver you are looking for.</p>",
        "id": 287766806,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656445652
    },
    {
        "content": "<p>[slack] &lt;Hugo Dominguez&gt; Well, Navier-Stokes is another level, I would be happy to only solve Stokes equations first <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> a form of Stokes equations is what I would like to target at the end, but I will go step by step.</p>",
        "id": 287767191,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656445843
    },
    {
        "content": "<p>[slack] &lt;VarLad&gt; This gives</p>\n<div class=\"codehilite\" data-code-language=\"methoderror\"><pre><span></span><code>Closest candidates are:\n\n(::Type{T})(::Real, !Matched::RoundingMode) where T&lt;:AbstractFloat at rounding.jl:200\n\n(::Type{T})(::T) where T&lt;:Number at boot.jl:772\n\n(::Type{T})(!Matched::AbstractChar) where T&lt;:Union{AbstractChar, Number} at char.jl:50\n\n...```\nat `du[1] = λ1*u[2] + λ2*u[1]` which is pointing to `Ju = ForwardDiff.jacobian((u)-&gt;func(u,p,t),u)`\nAny ideas?\n</code></pre></div>",
        "id": 287768384,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656446437
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's not pointing to the <code>p</code> one?</p>",
        "id": 287768457,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656446475
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; doing <code>similar</code> only on <code>u</code> will cause issues with <code>p</code></p>",
        "id": 287768477,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656446483
    },
    {
        "content": "<p>[slack] &lt;VarLad&gt; &gt;  it's not pointing to the <code>p</code> one?<br>\nNope</p>\n<p>Also, doing <code>zeros(2)</code> instead of <code>similar(u)</code> gives the same issue</p>",
        "id": 287769004,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656446735
    },
    {
        "content": "<p>[slack] &lt;VarLad&gt; @chrisrackauckas That was resolved with defining the function as</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>        λ1, λ2 = p\n        return [λ1*u[2] + λ2*u[1], -λ1*u[1] - λ2*u[2]]\n    end```\nThe new problem being\n\n```MethodError: no method matching ChainRulesCore.NotImplemented()\n\nClosest candidates are:\n\nChainRulesCore.NotImplemented(!Matched::Module, !Matched::LineNumberNode, !Matched::String) at ~/.julia/packages/ChainRulesCore/GUvJT/src/tangent_types/notimplemented.jl:30\n\nChainRulesCore.NotImplemented(!Matched::Any, !Matched::Any, !Matched::Any) at ~/.julia/packages/ChainRulesCore/GUvJT/src/tangent_types/notimplemented.jl:30```\n</code></pre></div>",
        "id": 287770198,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656447352
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; use NoTangent() instead</p>",
        "id": 287771135,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656447868
    },
    {
        "content": "<p>[slack] &lt;VarLad&gt; I did a <code>@not_implemented(\"Not implemented\")</code> and its running<br>\nI think this was it, it works. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span><br>\nThanks a lot for helping with this!</p>",
        "id": 287771450,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656448039
    },
    {
        "content": "<p>[slack] &lt;Nick Jordan&gt; I'm so lost with this error<br>\n```@show size(model(u0,ps,st)[1])<br>\ngs = Zygote.gradient(ps) do p<br>\n    @show size(model(u0,ps,st)[1])<br>\nend</p>\n<p>size((model(u0, ps, st))[1]) = (750, 20, 3)<br>\nsize((model(u0, ps, st))[1]) = (750, 21, 3)```</p>",
        "id": 287809680,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656481325
    },
    {
        "content": "<p>[slack] &lt;avikpal&gt; If you are solving an ODE with adaptive timestepping, this is quite possible</p>",
        "id": 287810394,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656482260
    },
    {
        "content": "<p>[slack] &lt;Nick Jordan&gt; Yes I am. How do I resolve this?</p>",
        "id": 287810463,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656482336
    },
    {
        "content": "<p>[slack] &lt;avikpal&gt; what is your loss? gradient is not defined for a 3D array. (Also it is not an error)</p>",
        "id": 287810533,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656482410
    },
    {
        "content": "<p>[slack] &lt;Nick Jordan&gt; MWE:</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>using SciMLSensitivity, DifferentialEquations\nusing Lux, Random\nusing Zygote\n\nnn = Dense(1,1)\nnode = NeuralODE(nn, (0.0f0, 0.2f0), Tsit5(), saveat = 0.01f0,\n        reltol=1e-3, abstol=1e-3, save_start=false)\n\nu0 = rand(1,3)\nrng = Random.default_rng()\nps, st = Lux.setup(rng, nn)\n\nps = Lux.ComponentArray(ps)\n\n@show size(node(u0,ps,st)[1])\nZygote.pullback(ps) do p\n    u = Array(node(u0,p,st)[1])\n    @show size(u)\n    sum(u)\nend;```\n</code></pre></div>",
        "id": 287810539,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656482420
    },
    {
        "content": "<p>[slack] &lt;avikpal&gt; What is the error?</p>",
        "id": 287810604,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656482479
    },
    {
        "content": "<p>[slack] &lt;Nick Jordan&gt; The loss should be the mse of the true solution (without u0) and the predicted solution. The issue is that the predicted solution contains <code>u0</code></p>",
        "id": 287810720,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656482641
    },
    {
        "content": "<p>[slack] &lt;avikpal&gt; pass <code>savefirst=false</code> (i think)</p>",
        "id": 287810803,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656482708
    },
    {
        "content": "<p>[slack] &lt;Nick Jordan&gt; <code>Warning: Unrecognized keyword arguments found. Future versions will error.\n│ The only allowed keyword arguments to `solve` are:\n│ (:dense, :saveat, :save_idxs, :tstops, :d_discontinuities, :save_everystep, :save_on, :save_start, :save_end, :initialize_save, :adaptive, :abstol, :reltol, :dt, :dtmax, :dtmin, :force_dtmin, :internalnorm, :controller, :gamma, :beta1, :beta2, :qmax, :qmin, :qsteady_min, :qsteady_max, :qoldinit, :failfactor, :calck, :alias_u0, :maxiters, :callback, :isoutofdomain, :unstable_check, :verbose, :merge_callbacks, :progress, :progress_steps, :progress_name, :progress_message, :timeseries_errors, :dense_errors, :weak_timeseries_errors, :weak_dense_errors, :calculate_errors, :initializealg, :alg, :save_noise, :delta, :seed, :alg_hints, :kwargshandle, :trajectories, :batch_size, :sensealg, :advance_to_tstop, :stop_at_next_tstop, :default_set, :second_time)\n│ \n│ See https://diffeq.sciml.ai/stable/basics/common_solver_opts/ for more details.\n│ \n│ Set kwargshandle=KeywordArgError for an error message.\n│ Set kwargshandle=KeywordArgSilent to ignore this message.\n└ @ DiffEqBase C:\\Users\\Luffy\\.julia\\packages\\DiffEqBase\\ydAoL\\src\\solve.jl:752\nUnrecognized keyword arguments: [:savefirst]</code></p>",
        "id": 287810893,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656482788
    },
    {
        "content": "<p>[slack] &lt;Nick Jordan&gt; I set <code>save_start=false</code></p>",
        "id": 287810897,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656482798
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; try saveat = 0.01f0:0.01f0:0.2f0</p>",
        "id": 287810991,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656482888
    },
    {
        "content": "<p>[slack] &lt;Nick Jordan&gt; Works now</p>",
        "id": 287811100,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656483004
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; saveat = 0.01f0 is the same as saveat = 0.00f0:0.01f0:0.2f0 wh ich might override save_start=false</p>",
        "id": 287811149,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656483066
    },
    {
        "content": "<p>[slack] &lt;Nick Jordan&gt; But how could it not override <code>save_start</code> outside <code>pullback</code> ?</p>",
        "id": 287811278,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656483198
    },
    {
        "content": "<p>[slack] &lt;avikpal&gt; EDIT: did not see the code properly, it had the saveat kwarg</p>",
        "id": 287811411,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656483318
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; Some of the adjoint methods change the keywords in the forward solve because a dense solution of the forward solve is needed in the reverse.</p>",
        "id": 287811426,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656483336
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; <a href=\"https://sensitivity.sciml.ai/dev/manual/differential_equation_sensitivities/#Optimize-then-Discretize\">https://sensitivity.sciml.ai/dev/manual/differential_equation_sensitivities/#Optimize-then-Discretize</a></p>",
        "id": 287811599,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656483500
    },
    {
        "content": "<p>[slack] &lt;Nick Jordan&gt; So it saves <code>u0</code> for the backpropagation. I understand now, But still it feels weird.</p>",
        "id": 287811724,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656483667
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; It is as @avikpal said, things like this happen in AD for adaptive algorithms.</p>",
        "id": 287811857,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656483796
    },
    {
        "content": "<p>[slack] &lt;Polina Shichkova&gt; Hello! I’m sorry if it’s a stupid question, but I couldn’t find the answer for a while in docs and tutorials (going to the source code of all fancy pkgs is honestly “a bit” tough for me).</p>\n<p>I am working on parameter estimation for a large system of ODE (~400 equations, ~1500 parameters, context: metabolic reactions network with some extras).</p>\n<p>I have seen the following “trick” in non-julia biological diff eq systems: “parameterScale is the scale on which parameters are estimated. Often, a logarithmic scale improves optimization.” [ <a href=\"https://petab.readthedocs.io/en/latest/tutorial.html#the-model\">https://petab.readthedocs.io/en/latest/tutorial.html#the-model</a> ]. However, those python pkgs for biological diff eq systems parameter estimation aren’t as fast and as flexible as Julia (love Julia!).</p>\n<p>Just by chance, is something similar to that trick above implemented in Julia, and if so, please could you share where to find the info about it? Thanks a lot!  [i.e. is there an already implemented way to sample parameters at log-scale in the iterations of optimisation? I saw a bit info on parameter sampling (with latin hypersquare) in <a href=\"https://discourse.julialang.org/t/blackboxoptim-beginners-questions/37013/4\">https://discourse.julialang.org/t/blackboxoptim-beginners-questions/37013/4</a> but I couldn’t find if something for sampling at log-scale  is implemented somewhere in julia parameter estimation for ODE systems, or is it just not so important?]</p>\n<p>Also, a minor question, is that correct that currently “to-go” parameter estimation for the system of ODE is <a href=\"https://github.com/search?q=Optimization.jl&amp;type=Repositories\">Optimization.jl</a> ? (I’m a bit lost how much the ecosystem evolved since I was estimating parameters last autumn.) Thank you! 💜</p>",
        "id": 287818259,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656489032
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yes as @Arno Strouwen said, the forward solve needs to have some extra data in order to define the reverse solve. The only way to allow for this to occur is to either (a) do a dense forward solve forwards always, but change the output of the forward solve before returning it back to the user i.e. keeping it an internal detail or (b) do checkpointing by default. That's at least with InterpolatingAdjoint and QuadratureAdjoint</p>",
        "id": 287823957,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656492917
    },
    {
        "content": "<p>[slack] &lt;ilyaorson&gt; Just estimate the parameter exponent instead and transform back at the end of the procedure.</p>",
        "id": 287834754,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656499487
    },
    {
        "content": "<p>[slack] &lt;Polina Shichkova&gt; Thanks, well, I was just thinking if there was something already implemented, so that it would be just an argument (because I know my code won’t be the top performance code in terms of runtime and memory use), but well, probably not then :woman-shrugging::skin-tone-2: anyway, thanks for the reply!</p>",
        "id": 287835178,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656499800
    },
    {
        "content": "<p>[slack] &lt;ilyaorson&gt; I am not sure if its implemented already out of the box within sciml.</p>",
        "id": 287835507,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656500030
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; This new error message is a beauty:</p>\n<p><a href=\"https://github.com/SciML/SciMLBase.jl/pull/199\">https://github.com/SciML/SciMLBase.jl/pull/199</a></p>",
        "id": 287859813,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656512083
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it's not implemented out of the box, but could be worth a tutorial</p>",
        "id": 287859849,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656512101
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>function loss(p)\n  solve(remake(prob,p=exp.(p)),Tsit5())\nend </code><br>\nuse this as a loss function and the resulting <code>p</code> is learned in log space, so you'd just <code>exp.(optsol.u)</code> to transform it back.</p>",
        "id": 287859988,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656512161
    },
    {
        "content": "<p>[slack] &lt;Polina Shichkova&gt; Thanks a lot! It answers my q. I was thinking if that would be enough <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 287860232,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656512254
    },
    {
        "content": "<p>[slack] &lt;Vedant Puri&gt; @chrisrackauckas what is <code>OptimizationOptimJL</code> and how is it different to <code>Optim.jl</code> ?</p>",
        "id": 287874068,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656517196
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It's the wrapper of <a href=\"https://github.com/search?q=Optim.jl&amp;type=Repositories\">Optim.jl</a> for use as algorithms in <a href=\"https://github.com/search?q=Optimization.jl&amp;type=Repositories\">Optimization.jl</a></p>",
        "id": 287874148,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656517215
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/search?q=Optimization.jl&amp;type=Repositories\">Optimization.jl</a> just has a lot more methods than that</p>",
        "id": 287874161,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656517222
    },
    {
        "content": "<p>[slack] &lt;Vedant Puri&gt; can you no longer pipe your <code>ODEProblem</code>  to the gpu?</p>",
        "id": 287885206,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656521780
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you never could <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 287885846,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656522064
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; did you mean change the <code>u0</code> to a CuArray?</p>",
        "id": 287885857,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656522070
    },
    {
        "content": "<p>[slack] &lt;Vedant Puri&gt; yes</p>",
        "id": 287886045,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656522140
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; just put <code>u0</code> on the GPU and it's on the GPU</p>",
        "id": 287886060,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656522151
    },
    {
        "content": "<p>[slack] &lt;Vedant Puri&gt; sweet</p>",
        "id": 287886088,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656522169
    },
    {
        "content": "<p>[slack] &lt;Vedant Puri&gt; thanks</p>",
        "id": 287886098,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656522172
    },
    {
        "content": "<p>[slack] &lt;Peter J&gt; I am currently using <code>Symbolics.jacobian_sparsity</code> to speed up jacobian calculations for a stiff solver and it works great. However, now I want to autodiff the ode solution by a parameter. Should that work with <code>jacobian_sparsity</code>?</p>",
        "id": 287900293,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656528518
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes</p>",
        "id": 287901943,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656529190
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; in what way though?</p>",
        "id": 287902032,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656529210
    },
    {
        "content": "<p>[slack] &lt;Peter J&gt; well, the error I get is</p>\n<div class=\"codehilite\" data-code-language=\"error\"><pre><span></span><code>  *(a::Real, b::Symbolics.Num) in Symbolics at /home/workaccount/.julia/packages/SymbolicUtils/vnuIf/src/methods.jl:69\n  *(a::Number, b::Symbolics.Num) in Symbolics at /home/workaccount/.julia/packages/SymbolicUtils/vnuIf/src/methods.jl:71\n  *(x::ForwardDiff.Dual{Tx}, y::Real) where Tx in ForwardDiff at /home/workaccount/.julia/packages/ForwardDiff/wAaVJ/src/dual.jl:144\nPossible fix, define\n  *(::ForwardDiff.Dual{Tx}, ::Symbolics.Num) where Tx```\n</code></pre></div>",
        "id": 287904742,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656530332
    },
    {
        "content": "<p>[gitter] &lt;Coleson2&gt; I was hoping to play with <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a> to generate curves from their curvature. I have succeeded in doing this when the curvature function is a function of the arc length, but now I'm trying to do this for a general parameterisation t, say. Could someone point me to the best way to set up in <a href=\"https://github.com/search?q=DiffEq.jl&amp;type=Repositories\">DiffEq.jl</a>, essentially the equation</p>",
        "id": 287905093,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656530499
    },
    {
        "content": "<p>[gitter] &lt;Coleson2&gt; (x' y\"-y'x\")/(x'^2+y'^2)^(3/2)=k(t)</p>",
        "id": 287905529,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656530669
    },
    {
        "content": "<p>[gitter] &lt;Coleson2&gt; ? Thanks!</p>",
        "id": 287905593,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656530705
    },
    {
        "content": "<p>[gitter] &lt;Coleson2&gt; This equation is more nicely written in <a href=\"https://en.m.wikipedia.org/wiki/Curvature\">https://en.m.wikipedia.org/wiki/Curvature</a></p>",
        "id": 287907351,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656531604
    },
    {
        "content": "<p>[gitter] &lt;Coleson2&gt; ...under the section \"\"\"</p>",
        "id": 287907498,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656531688
    },
    {
        "content": "<p>[gitter] &lt;Coleson2&gt; Sorry...\"In terms of a general parameterization\". <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 287907708,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656531772
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; That probably should never happen</p>",
        "id": 287908777,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656532282
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; How are you using it?</p>",
        "id": 287908803,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656532296
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I guess I don't understand what you're doing, yeah <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 287908810,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656532303
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @coleson2 make it a system of ODEs</p>",
        "id": 287908929,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656532355
    },
    {
        "content": "<p>[slack] &lt;Peter J&gt; I am doing something like:</p>\n<div class=\"codehilite\" data-code-language=\"jac_sparsity\"><pre><span></span><code>    f = ODEFunction(rhs, jac_prototype=float.(jac_sparsity))\n    prob = ODEProblem(f, u0, (0.0, length(params) - 1), params)\n\n    function optimization_objective(M, _)\n        new_p = @set params.M = only(M)\n        prob = create_model(begin_date, new_p)\n        sol = solve(prob, Rodas5())\n        I_total = diff([sum(u_t[1:w, (h*4+1):(h*5)]) for u_t in sol.u])\n        err = 0\n        for (true_incident, incident) in zip(incident_cases, I_total)\n            err += (true_incident - incident)^2\n        end\n        display(err)\n        return err\n    end\n    # @show ForwardDiff.derivative(optimization_objective, 0.0001)```\nthis is a subset of my code but hopefully that makes sense?)\n</code></pre></div>",
        "id": 287909055,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656532426
    },
    {
        "content": "<p>[slack] &lt;Peter J&gt; I am trying to fit the solution, by differentiating with respect to a parameter</p>",
        "id": 287909154,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656532460
    },
    {
        "content": "<p>[slack] &lt;Peter J&gt; i can use a derivative-free method but I was hoping this would be faster</p>",
        "id": 287909196,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656532484
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Maybe don't differentiate model creation</p>",
        "id": 287909301,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656532523
    },
    {
        "content": "<p>[slack] &lt;Peter J&gt; that is where I create the initial condition matrix though, cause I need u0 to have a type that corresponds to the parameter (Float64 or DualNumber) right?</p>",
        "id": 287909381,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656532559
    },
    {
        "content": "<p>[slack] &lt;Peter J&gt; <code>function create_model(begin_date, params::ModelParameters{T,T2}) where {T,T2}\n    element_type = promote_type(Float64, eltype(T), T2)\n    u0 = zeros(element_type, (w, h * 5))\n    #IC\n    u0 .= params.u0\n    du0 = similar(u0, size(u0))\n    jac_sparsity = Symbolics.jacobian_sparsity((du, u) -&gt; rhs(du, u, params, 0.0), du0, u0)\n    f = ODEFunction(rhs, jac_prototype=float.(jac_sparsity))\n    prob = ODEProblem(f, u0, (0.0, length(params) - 1), params)\n    return prob\nend</code></p>",
        "id": 287909458,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656532580
    },
    {
        "content": "<p>[slack] &lt;Peter J&gt; should I compute <code>jac_sparsity</code> before this?</p>",
        "id": 287909524,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656532618
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes, just do it as a separate step</p>",
        "id": 287909566,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656532650
    },
    {
        "content": "<p>[slack] &lt;Peter J&gt; ah ok</p>",
        "id": 287909575,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656532657
    },
    {
        "content": "<p>[gitter] &lt;Coleson2&gt; @ChrisRackauckas Thanks, Chris. Sorry to bother you further, but could you give me a clue as to how to start doing that?</p>",
        "id": 287909927,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656532811
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; You could try to use MTK for that</p>",
        "id": 287911824,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656533690
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Ah, it doesn't quite handle it efficiently now, but it should be soon. I have a WIP PR</p>",
        "id": 287911923,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656533735
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 287916169,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656534875
    },
    {
        "content": "<p>[slack] &lt;Peter J&gt; now I get this error:</p>\n<div class=\"codehilite\" data-code-language=\"error\"><pre><span></span><code>Closest candidates are:\n  SuiteSparse.UMFPACK.UmfpackLU(::Ptr{Nothing}, ::Ptr{Nothing}, ::Int64, ::Int64, ::Vector{Ti}, ::Vector{Ti}, ::Vector{Tv}, ::Int64) where {Tv&lt;:Union{Float64, ComplexF64}, Ti&lt;:Union{Int32, Int64}} at ~~/.julia/juliaup/julia-1.8.0-rc1+0~~x64/share/julia/stdlib/v1.8/SuiteSparse/src/umfpack.jl:143\nStacktrace:\n  [1] init_cacheval(alg::LinearSolve.UMFPACKFactorization, A::SparseArrays.SparseMatrixCSC{ForwardDiff.Dual{ForwardDiff.Tag{SarsEvoModel.var\"#202#207\"{SarsEvoModel.var\"#optimization_objective#205\"{Vector{Float64}, SparseArrays.SparseMatrixCSC{Bool, Int64}, SarsEvoModel.ModelParameters{Matrix{Float64}, Float64}}}, Float64}, Float64, 1}, Int64}, b::Vector{ForwardDiff.Dual{ForwardDiff.Tag{SarsEvoModel.var\"#202#207\"{SarsEvoModel.var\"#optimization_objective#205\"{Vector{Float64}, SparseArrays.SparseMatrixCSC{Bool, Int64}, SarsEvoModel.ModelParameters{Matrix{Float64}, Float64}}}, Float64}, Float64, 1}}, u::Vector{ForwardDiff.Dual{ForwardDiff.Tag{SarsEvoModel.var\"#202#207\"{SarsEvoModel.var\"#optimization_objective#205\"{Vector{Float64}, SparseArrays.SparseMatrixCSC{Bool, Int64}, SarsEvoModel.ModelParameters{Matrix{Float64}, Float64}}}, Float64}, Float64, 1}}, Pl::LinearSolve.InvPreconditioner{LinearAlgebra.Diagonal{ForwardDiff.Dual{ForwardDiff.Tag{SarsEvoModel.var\"#202#207\"{SarsEvoModel.var\"#optimization_objective#205\"{Vector{Float64}, SparseArrays.SparseMatrixCSC{Bool, Int64}, SarsEvoModel.ModelParameters{Matrix{Float64}, Float64}}}, Float64}, Float64, 1}, Vector{ForwardDiff.Dual{ForwardDiff.Tag{SarsEvoModel.var\"#202#207\"{SarsEvoModel.var\"#optimization_objective#205\"{Vector{Float64}, SparseArrays.SparseMatrixCSC{Bool, Int64}, SarsEvoModel.ModelParameters{Matrix{Float64}, Float64}}}, Float64}, Float64, 1}}}}, Pr::LinearAlgebra.Diagonal{ForwardDiff.Dual{ForwardDiff.Tag{SarsEvoModel.var\"#202#207\"{SarsEvoModel.var\"#optimization_objective#205\"{Vector{Float64}, SparseArrays.SparseMatrixCSC{Bool, Int64}, SarsEvoModel.ModelParameters{Matrix{Float64}, Float64}}}, Float64}, Float64, 1}, Vector{ForwardDiff.Dual{ForwardDiff.Tag{SarsEvoModel.var\"#202#207\"{SarsEvoModel.var\"#optimization_objective#205\"{Vector{Float64}, SparseArrays.SparseMatrixCSC{Bool, Int64}, SarsEvoModel.ModelParameters{Matrix{Float64}, Float64}}}, Float64}, Float64, 1}}}, maxiters::Int64, abstol::Float64, reltol::Float64, verbose::Bool)\n    @ LinearSolve ~/.julia/packages/LinearSolve/WhI1M/src/factorization.jl:76\n  [2] init(::SciMLBase.LinearProblem{Vector{ForwardDiff.Dual{ForwardDiff.Tag{SarsEvoModel.var\"#202#207\"{SarsEvoModel.var\"#optimization_objective#205\"{Vector{Float64}, SparseArrays.SparseMatrixCSC{Bool, Int64}, SarsEvoModel.ModelParame                                                                                          ters{Matrix{Float64}, Float64}}}, Float64}, Float64, 1}}, true, SparseArrays.SparseMatrixCSC{ForwardDiff.Dual{ForwardDiff.Tag{SarsEvoModel.var\"#202#207\"{SarsEvoModel.var\"#optimization_objective#205\"{Vector{Float64}, SparseArrays.SparseMatrixCSC{Bool, Int64}, SarsEvoModel.ModelParameters{Matrix{Float64}, Float64}}}, Float64}, Float64, 1}, Int64}, Vector{ForwardDiff.Dual{ForwardDiff.Tag{SarsEvoModel.var\"#202#207\"{SarsEvoModel.var\"#optimization_objective#205\"{Vector{Float64}, SparseArrays.SparseMatrixCSC{Bool, Int64}, SarsEvoModel.ModelParameters{Matrix{Float64}, Float64}}}, Float64}, Float64, 1}}, SciMLBase.NullParameters, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}}, ::LinearSolve.UMFPACKFactorization; alias_A::Bool, alias_b::Bool, abstol::Float64, reltol::Float64, maxiters::Int64, verbose::Bool, Pl::LinearSolve.InvPreconditioner{LinearAlgebra.Diagonal{ForwardDiff.Dual{ForwardDiff.Tag{SarsEvoModel.var\"#202#207\"{SarsEvoModel.var\"#optimization_objective#205\"{Vector{Float64}, SparseArrays.SparseMatrixCSC{Bool, Int64}, SarsEvoModel.ModelParameters{Matrix{Float64}, Float64}}}, Float64}, Float64, 1}, Vector{ForwardDiff.Dual{ForwardDiff.Tag{SarsEvoModel.var\"#202#207\"{SarsEvoModel.var\"#optimization_objective#205\"{Vector{Float64}, SparseArrays.SparseMatrixCSC{Bool, Int64}, SarsEvoModel.ModelParameters{Matrix{Float64}, Float64}}}, Float64}, Float64, 1}}}}, Pr::LinearAlgebra.Diagonal{ForwardDiff.Dual{ForwardDiff.Tag{SarsEvoModel.var\"#202#207\"{SarsEvoModel.var\"#optimization_objective#205\"{Vector{Float64}, SparseArrays.SparseMatrixCSC{Bool, Int64}, SarsEvoModel.ModelParameters{Matrix{Float64}, Float64}}}, Float64}, Float64, 1}, Vector{ForwardDiff.Dual{ForwardDiff.Tag{SarsEvoModel.var\"#202#207\"{SarsEvoModel.var\"#optimization_objective#205\"{Vector{Float64}, SparseArrays.SparseMatrixCSC{Bool, Int64}, SarsEvoModel.ModelParameters{Matrix{Float64}, Float64}}}, Float64}, Float64, 1}}}, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}})\n    @ LinearSolve ~/.julia/packages/LinearSolve/WhI1M/src/common.jl:97```\nI thought this might be solved by the DualCache, but I don't do any matrix multiplication in my RHS.\n</code></pre></div>",
        "id": 287917225,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656535053
    },
    {
        "content": "<p>[gitter] &lt;Coleson2&gt; @ChrisRackauckas I think you might mean something like: (x=u[1], y=u[2]) so</p>",
        "id": 287918322,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656535260
    },
    {
        "content": "<p>[gitter] &lt;Coleson2&gt; u[3]=du[1], u[4]=du[2]</p>",
        "id": 287918882,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656535362
    },
    {
        "content": "<p>[gitter] &lt;Coleson2&gt; and u[5]=du[3], u[6]=du[4]</p>",
        "id": 287919352,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656535448
    },
    {
        "content": "<p>[gitter] &lt;Coleson2&gt; so we have the second derivatives, but how to go further? Do you just write in the last of the equations somehow (u[3]<em>u[6]-u[4]</em>u[5])/(u[3]^2+u[4]^2)^(3/2)~f(t)</p>",
        "id": 287922136,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656535986
    },
    {
        "content": "<p>[slack] &lt;axsk&gt; Coleson, why do you need to solve the \"general parametrization\"? In my eyes the formula you are pointing to is just to get the curvature given a non-arc-length parametrisation, not the other way around.<br>\nIf you want other parametrisations, just start with arc-length and transform time afterwards (as seen on wikipedia dgamma/dt = ds/dt T where T is the arc length tangent)</p>",
        "id": 287962016,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656551304
    },
    {
        "content": "<p>[slack] &lt;Arno Strouwen&gt; <a href=\"https://github.com/search?q=Optimization.jl&amp;type=Repositories\">Optimization.jl</a> is what <a href=\"https://github.com/search?q=GalacticOptim.jl&amp;type=Repositories\">GalacticOptim.jl</a> used to be, a lot of things got their names changed.<br>\nI usually start there for optimization, unless I have more than box constraints in my problem.</p>",
        "id": 287968929,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656559080
    },
    {
        "content": "<p>[gitter] &lt;Coleson2&gt; @axsk Thank you for this. Perhaps you are suggesting something subtle that I don't get, but my issue is that I want to draw particular curves given their curvature function. For the specific curves I'm interested in, I have no information on their curvatures as a function of arc length, s, but I do have some useful clues as to their functional form with respect to another parameter, t, say. There are also no clues how to relate s to t, unfortunately. Is the formulation of the equation I cited hard to set up in DiffEq?</p>",
        "id": 287976535,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656566475
    },
    {
        "content": "<p>[gitter] &lt;Coleson2&gt; DiffEq worked very nicely for my initial trials using the arc length parameter, but I found that particular system of equations easy to formulate.</p>",
        "id": 287977157,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656567095
    },
    {
        "content": "<p>[slack] &lt;Polina Shichkova&gt; Thanks!</p>",
        "id": 287978662,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656568566
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It now has nonlinear constraint support, just needs more docs</p>",
        "id": 288006103,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656584955
    },
    {
        "content": "<p>[slack] &lt;loki._.&gt; I can't precompile DiffEqBase v6.84.0 due to</p>\n<div class=\"codehilite\" data-code-language=\"warning\"><pre><span></span><code>ERROR: LoadError: UndefVarError: SciMLBase not defined```\nThis happens when trying to use `Trebuchet.jl` anything I can do about it?\n</code></pre></div>",
        "id": 288014916,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656589887
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/search?q=Trebuchet.jl&amp;type=Repositories\">Trebuchet.jl</a> hasn't been updated since the dawn of time. Don't use it.</p>",
        "id": 288015257,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656590048
    },
    {
        "content": "<p>[slack] &lt;loki._.&gt; Hmm... I already built a lesson around it &gt;.&lt;, but in theory this should be fixable by pinning something, no?</p>",
        "id": 288015985,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656590406
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Fixed <a href=\"https://github.com/FluxML/Trebuchet.jl/issues/11\">https://github.com/FluxML/Trebuchet.jl/issues/11</a></p>",
        "id": 288016114,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656590459
    },
    {
        "content": "<p>[slack] &lt;loki._.&gt; Thanks <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 288016303,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656590533
    },
    {
        "content": "<p>[slack] &lt;Polina Shichkova&gt; Wow, thank you!</p>",
        "id": 288049858,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656604759
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; I think I owe somebody a beer for all the time this probably saved me <span aria-label=\"beers\" class=\"emoji emoji-1f37b\" role=\"img\" title=\"beers\">:beers:</span></p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">ERROR</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"n\">Initial</span><span class=\"w\"> </span><span class=\"n\">condition</span><span class=\"w\"> </span><span class=\"n\">incompatible</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">functional</span><span class=\"w\"> </span><span class=\"n\">form</span><span class=\"o\">.</span><span class=\"w\"></span>\n<span class=\"n\">Detected</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"o\">-</span><span class=\"n\">place</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">initial</span><span class=\"w\"> </span><span class=\"n\">condition</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"w\"> </span><span class=\"kt\">Number</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">SArray</span><span class=\"o\">.</span><span class=\"w\"></span>\n<span class=\"n\">This</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">incompatible</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"n\">Numbers</span><span class=\"w\"> </span><span class=\"n\">cannot</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">mutated</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"w\"></span>\n<span class=\"sb\">`x = 2.0; y = 2.0; x .= y`</span><span class=\"w\"> </span><span class=\"n\">will</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"o\">.</span><span class=\"w\"></span>\n\n<span class=\"n\">If</span><span class=\"w\"> </span><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">immutable</span><span class=\"w\"> </span><span class=\"n\">initial</span><span class=\"w\"> </span><span class=\"n\">condition</span><span class=\"w\"> </span><span class=\"n\">type</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">please</span><span class=\"w\"> </span><span class=\"n\">use</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"o\">-</span><span class=\"n\">of</span><span class=\"o\">-</span><span class=\"n\">place</span><span class=\"w\"> </span><span class=\"n\">form</span><span class=\"o\">.</span><span class=\"w\"></span>\n<span class=\"n\">I</span><span class=\"o\">.</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"w\"> </span><span class=\"n\">define</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"sb\">`du=f(u,p,t)`</span><span class=\"w\"> </span><span class=\"n\">instead</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">attempting</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"s\">\"mutate\"</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">immutable</span><span class=\"w\"> </span><span class=\"sb\">`du`</span><span class=\"o\">.</span><span class=\"sb\">```</span>\n</code></pre></div>",
        "id": 288066046,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656612339
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that has been my last few week</p>",
        "id": 288066207,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656612400
    },
    {
        "content": "<p>[slack] &lt;Adam Gerlach&gt; big quality of life improvements.  I probably owe you a brewery by now <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 288066452,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656612514
    },
    {
        "content": "<p>[slack] &lt;George Gkountouras&gt; Reminds me of when I missed the ~ symbol inside an equation and got the standard 'missing huge method{Any}' error. <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 288066483,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656612532
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; BTW, these error messages are probably the nicest:</p>\n<p><a href=\"https://github.com/SciML/SciMLBase.jl/pull/199\">https://github.com/SciML/SciMLBase.jl/pull/199</a></p>",
        "id": 288068765,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656613654
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Yeah great work on improving the error messages. Congrats to everyone working on those.</p>",
        "id": 288073686,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656616111
    },
    {
        "content": "<p>[slack] &lt;Peter J&gt; so this error goes away if I do<br>\n<code> jac_sparsity = convert(Matrix,Symbolics.jacobian_sparsity((du, u) -&gt; rhs(du, u, params, 0.0), du0, u0))</code><br>\nbut this is much slower</p>",
        "id": 288081761,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656620115
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; You could do<br>\n<code>sparsity = Symbolics.jacobian_sparsity((du, u) -&gt; rhs(du, u, params, 0.0), du0, u0)</code></p>",
        "id": 288085345,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656622129
    },
    {
        "content": "<p>[slack] &lt;Peter J&gt; That is what I had before, it gives the error above.</p>",
        "id": 288102582,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656632698
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; You had <code>jac_prototype</code> before right?</p>",
        "id": 288103448,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656633477
    },
    {
        "content": "<p>[slack] &lt;Peter J&gt; Ohh you mean change the named parameter! yep that seems to work thanks!</p>",
        "id": 288103777,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656633737
    },
    {
        "content": "<p>[slack] &lt;Peter J&gt; It's about 5x slower than <code>jac_prototype</code>, though 2x faster than using a dense matrix for <code>jac_prototype</code>.</p>",
        "id": 288103861,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656633823
    },
    {
        "content": "<p>[slack] &lt;Nick Jordan&gt; The default value of <code>checkpointing</code> , which is correct?: <a href=\"https://files.slack.com/files-pri/T68168MUP-F03MS3XP6H4/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F03MS3XP6H4/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F03MS3XP6H4/download/image.png\"><img src=\"https://uploads.zulipusercontent.net/486ec58f0f26e9e81d0c84c70b3b9a08c71a9612/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d4630334d533358503648342f646f776e6c6f61642f696d6167652e706e67\"></a></div>",
        "id": 288119933,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656650618
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; <code>julia&gt; dump(InterpolatingAdjoint())\nInterpolatingAdjoint{0, true, Val{:central}, Nothing}\n  autojacvec: Nothing nothing\n  checkpointing: Bool false\n  noisemixing: Bool false</code></p>",
        "id": 288121988,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656652557
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; <a href=\"https://github.com/SciML/SciMLSensitivity.jl/pull/676\">https://github.com/SciML/SciMLSensitivity.jl/pull/676</a></p>",
        "id": 288122254,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656652820
    },
    {
        "content": "<p>[gitter] &lt;kakila_gitlab&gt; hi all, I want to support some researchers in the understanding of their ODE system. I want to produce a graphical representation of the connectivity matrix, maybe like a graph with variables as nodes. Is there a good tool to do this in the SciML or DiffEq ecosystem?</p>",
        "id": 288126281,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656656654
    },
    {
        "content": "<p>[gitter] &lt;ChrisRackauckas&gt; @kakila_gitlab they are the same thing</p>",
        "id": 288140915,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656666044
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @yingbo_ma is there such a visualization in MTK already?</p>",
        "id": 288141376,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656666253
    },
    {
        "content": "<p>[slack] &lt;Fredrik Bagge Carlson&gt; Like this?</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"n\">Model</span><span class=\"w\"> </span><span class=\"n\">cl</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"n\">equations</span><span class=\"w\"></span>\n<span class=\"n\">States</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">f₊x</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">defaults</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">p₊x</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">defaults</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">c₊r</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">defaults</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">p₊u</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">defaults</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"n\">Parameters</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">c₊kp</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">defaults</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">f₊u</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">defaults</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"n\">Incidence</span><span class=\"w\"> </span><span class=\"n\">matrix</span><span class=\"o\">:</span><span class=\"mi\">4</span><span class=\"o\">×</span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"n\">SparseArrays</span><span class=\"o\">.</span><span class=\"kt\">SparseMatrixCSC</span><span class=\"p\">{</span><span class=\"kt\">Num</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">Int64</span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"n\">stored</span><span class=\"w\"> </span><span class=\"n\">entries</span><span class=\"o\">:</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"o\">⋅</span><span class=\"w\">  </span><span class=\"o\">⋅</span><span class=\"w\">  </span><span class=\"o\">×</span><span class=\"w\">  </span><span class=\"o\">⋅</span><span class=\"w\">  </span><span class=\"o\">×</span><span class=\"w\">  </span><span class=\"o\">⋅</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"o\">⋅</span><span class=\"w\">  </span><span class=\"o\">⋅</span><span class=\"w\">  </span><span class=\"o\">⋅</span><span class=\"w\">  </span><span class=\"o\">×</span><span class=\"w\">  </span><span class=\"o\">×</span><span class=\"w\">  </span><span class=\"o\">×</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"o\">×</span><span class=\"w\">  </span><span class=\"o\">⋅</span><span class=\"w\">  </span><span class=\"o\">×</span><span class=\"w\">  </span><span class=\"o\">⋅</span><span class=\"w\">  </span><span class=\"o\">⋅</span><span class=\"w\">  </span><span class=\"o\">⋅</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"o\">⋅</span><span class=\"w\">  </span><span class=\"o\">×</span><span class=\"w\">  </span><span class=\"o\">⋅</span><span class=\"w\">  </span><span class=\"o\">×</span><span class=\"w\">  </span><span class=\"o\">⋅</span><span class=\"w\">  </span><span class=\"o\">×</span><span class=\"sb\">```</span>\n</code></pre></div>",
        "id": 288146130,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656668954
    },
    {
        "content": "<p>[gitter] &lt;Coleson2&gt; @ChrisRackauckas Hi Chris, I have been trying to do as you suggested earlier and represent <br>\n(x’y’’-y’x’’)/(x’^2+y’^2)^(3/2)=k(t) …(1)<br>\n(where k is the curvature function wrt an arbitrary parameter, t) as a system of equations to correspond with the format required for DiffEq.<br>\nI have x=u[1] and y=u[2], and obviously x’=du[1] and y’=du[2]. I rearranged (1) to get <br>\nx’’=(x’y’’ -  k(t)*(x’^2+y’^2)^(3/2)) / y’    and <br>\ny’’=(y’x’’ + k(t)*(x’^2+y’^2)^(3/2)) / x’<br>\nwith a view to then using this code:</p>\n<p>using DifferentialEquations<br>\nusing Plots; gr()<br>\nfunction curvature_k(t)<br>\n  return 2*t<br>\nend<br>\nfunction curve_from_curvature(du,u,p,t)<br>\n du[1] = u[3]<br>\n du[2] = u[4]<br>\n du[3] = u[5]    #This is logically needed for the du[4] expression<br>\n du[4] = u[6]    #This is logically needed for the du[3] expression<br>\n du[3] = ((u[3]<em>u[6]-curvature_k(t)</em>(u[3]^2+u[4]^2)^(3/2))/u[4])<br>\n du[4] = ((u[4]<em>u[5]+curvature_k(t)</em>(u[3]^2+u[4]^2)^(3/2))/u[3])<br>\nend<br>\ntspan= (1.0,2.0)<br>\np=(1.0,1.0,1.0)<br>\nu0 = [0.0;0.0;1.0;1.0;1.0;1.0]<br>\nprob = ODEProblem(curve_from_curvature,u0,tspan,p)<br>\nsol = solve(prob)<br>\nplot(sol,vars=(1,2))</p>\n<p>I know this can’t be correct. It runs and produces output, but with the following message:<br>\n“Warning: dt &lt;= dtmin. Aborting. There is either an error in your model specification or the true solution is unstable. @ SciMLBase ~/.julia/packages/SciMLBase/h4Gxc/src/integrator_interface.jl:345”</p>\n<p>(Given the recent chat here about error messages, I think this is funny because it is definitely a spot-on correct error message! I’m pretty sure there is “an error in my model specification”!  :) </p>\n<p>The problem is obviously that du[3] is a function of du[4] and vice-versa. It must surely be wrong to have two specifications for du[3] and du[4] in the code, as I’ve done.</p>\n<p>I’m clearly missing something. Do you see a way to fix this, or perhaps alternatively you might be able to put me out of my misery and tell me this is not possible to format for <a href=\"https://github.com/search?q=DiffEq.jl&amp;type=Repositories\">DiffEq.jl</a> at all? Thanks!</p>",
        "id": 288150991,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656671749
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; Can I answer this directly here? I don’t know where this gitter is. I assume this answer will get “bridged” there.</p>",
        "id": 288157428,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656675931
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; Anyway, Coleson2, I don’t think you can solve this without more information. If you assume arclength parametrization, then it is fine, otherwise, the curve is not uniquely determined by its curvature (just think of a circle with constant curvature $k$ and then any curve $x(t) = (1/k)\\cos(v k t)$, $y(t) = (1/k)\\sin(v k t)$ has curvature $k$).</p>",
        "id": 288157463,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656675958
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; If you provide both curvature $k(t)$ and tangential velocity $v(t)$, then you can solve the ODE system</p>\n<div class=\"codehilite\" data-code-language=\"x\"><pre><span></span><code>y'(t) = v(t)\\cos(θ(s(t))),\ns'(t) = v(t),\nθ'(t) = k(t)```\nYou will also need to give an initial configuration (position $x(0), y(0)$ and initial angle $θ(0)$, and you can assume initial length $s(0) = 0$).\n</code></pre></div>",
        "id": 288157533,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656675987
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it is bridged.</p>",
        "id": 288158914,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656676805
    },
    {
        "content": "<p>[gitter] &lt;Coleson2&gt; Thank you very much, Ricardo. Yes, you are right. I have explored something similar to what you suggest, but unfortunately I have no information on the tangential velocity. I was just hoping to systematically optimise the function k(t) and the initial parameters u0[] to fit to datapoints of specific curves, using the powerful techniques in the SciMl ecosystem, like <a href=\"https://github.com/search?q=DiffEqFlux.jl&amp;type=Repositories\">DiffEqFlux.jl</a>, which have worked well for me in the past. I guess I was just hoping that if I could get that curvature equation into the right form for DiffEq, I might be able to \"force\" all the parameters into compensating for my lack of information on v(t). This may well not be possible, but I wanted to give it a shot. Thanks again for your help. :)</p>",
        "id": 288166651,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656680911
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 288167581,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656681399
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; What do you mean by optimise k(t)? I thought you had a set of data points (t_j, k(t_j) and wanted to fit (x(t), y(t)).</p>",
        "id": 288170014,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656682535
    },
    {
        "content": "<p>[gitter] &lt;Coleson2&gt; @Ricardo M.S. Rosa  I have a dataset (x(t_j), y(t_j)), but this dataset is quite sparse. I suspect there is additional \"structure\" going on between the datapoints. I have some clues as to what might be going on between the datapoints, based on what I think might be the general form of a curvature function. That is, there are some constraints on the (otherwise unknown) curvature function, so it might not be too hard to \"guess\" it.  (I have no similar insight into the v(t) functional form, so it would be harder to guess.) I'm hoping that rather than just \"fitting\" the points, I can leverage the \"physics-informed\" techniques of SciMl to fit the points but also to show this structure that I'm hoping for between the points. I realise this might be a long shot, so I may have a go at your suggestion of guessing both functions simultaneously. Thanks again, Ricardo.</p>",
        "id": 288175241,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656684947
    },
    {
        "content": "<p>[slack] &lt;Ricardo M. S. Rosa&gt; Oh, ok. Then, yeah, you can try to fit both k and v.</p>",
        "id": 288184519,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656689281
    },
    {
        "content": "<p>[gitter] &lt;Coleson2&gt; So, just to close this out, could someone tell me definitively if it is or isn't possible to reformulate that equation ( (x’y’’-y’x’’)/(x’^2+y’^2)^(3/2)=k(t) ) into a system of equations in the format required by <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a>? Thanks everyone.</p>",
        "id": 288185429,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656689741
    },
    {
        "content": "<p>[slack] &lt;zq&gt; I'm trying to speed up the linear solves in an ODE integration by exploiting a fixed sparsity pattern of the Jacobian. In implicit ODE methods, there's a linear solve with operator <code>W = I - gamma*J</code>. Given a sparsity pattern for the Jacobian J, it's easy to get the sparsity pattern of W. Is there a utility function in SciML I can reuse that does this? i.e. <code>get_linsolve_pattern(odeproblem)</code></p>",
        "id": 288341520,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656874166
    },
    {
        "content": "<p>[slack] &lt;zq&gt; of course, I can just fill the diagonals in myself after extracting the jac_prototype from the problem. What I'm really worried about is that I don't think there's a guarantee the linear solve has operator W, even though I think it holds broadly for rosenbrock and DIRK methods. if I specify a custom, optimised linear solver for an ODE integration, I want to ensure that it will be correct.</p>",
        "id": 288342263,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656875079
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; If you just do the Symbolics sparsity detection and then subtract I you should have it</p>",
        "id": 288342704,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656875655
    },
    {
        "content": "<p>[slack] &lt;zq&gt; thank you, I'll do that! I just worry that somewhere out there, an ODE integration method doesn't use W for the linsolve. but this is probably a frivolous worry</p>",
        "id": 288342804,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656875839
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; All use W</p>",
        "id": 288343683,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656877180
    },
    {
        "content": "<p>[slack] &lt;zq&gt; amazing</p>",
        "id": 288343692,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656877193
    },
    {
        "content": "<p>[gitter] &lt;Coleson2&gt; @ChrisRackauckas  Hi Chris, given that this was your original suggestion (and that no-one else appears to be rowing in, notwithstanding the helpful input from &lt;Ricardo M. S. Rosa&gt; for which I'm grateful), and I believe, because you're the absolute expert on all this, that you must have had some insight in order to make the suggestion in the first place, would you please tell me definitively if you think it is or isn't possible to reformulate this equation ( (x’y’’-y’x’’)/(x’^2+y’^2)^(3/2)=k(t) ) into a system of equations in the format required by <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a>? I can understand that you're a busy person, so a simple yes or no answer would put my mind at rest, and I can accordingly either spend more time on trying to do this or move on to another tack. Thanks again.</p>",
        "id": 288350348,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656886684
    },
    {
        "content": "<p>[slack] &lt;Peter J&gt; I am trying to use <code>Zygote</code> to fit a stiff system of about 3k ODEs. It takes about 1s to solve, but I've run it up to 10 mins without <code>Zygote.gradient</code> terminating. Is this system just too large to autodiff?</p>",
        "id": 288438670,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656959508
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; which VJP?</p>",
        "id": 288440191,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656960738
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and what code?</p>",
        "id": 288440194,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656960742
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; did you profile the vjp choice?</p>",
        "id": 288440200,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656960748
    },
    {
        "content": "<p>[slack] &lt;Peter J&gt; Actually, it might not be stiff, <code>Tsit5</code>solves it fine. I had assumed it was stiff because it's essentially from using the method of lines on a heat equation (although the authors of the paper its from do not present it that way).</p>\n<p>And using <code>Tsit5</code> as the solver, I can get a decent fast gradient from <code>ForwardDiff</code>.</p>\n<p>With Zygote:<br>\nThe default <code>sensealg</code>  returns<br>\n<code>┌ Warning: Instability detected. Aborting\n└ @ SciMLBase /home/workaccount/.julia/packages/SciMLBase/PYHXq/src/integrator_interface.jl:434\nERROR: LinearAlgebra.SingularException(0)\nStacktrace:\n  [1] lu(S::SparseArrays.SparseMatrixCSC{Float64, Int64}; check::Bool)\n    @ SuiteSparse.UMFPACK ~~/.julia/juliaup/julia-1.8.0-rc1+0~~x64/share/julia/stdlib/v1.8/SuiteSparse/src/umfpack.jl:203\n  [2] lu\n    @ ~~/.julia/juliaup/julia-1.8.0-rc1+0~~x64/share/julia/stdlib/v1.8/SuiteSparse/src/umfpack.jl:195 [inlined]</code><br>\n<code>sensealg=QuadratureAdjoint(autojacvec=ZygoteVJP())</code> returns</p>\n<div class=\"codehilite\" data-code-language=\"error\"><pre><span></span><code>Closest candidates are:\n  view(::StrideArraysCore.PtrArray{S, D, T, N, C, B, R}, ::Union{Colon, Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32, UInt64, UInt8, AbstractRange, Static.StaticInt}...) where {K, S, D, T, N, C, B, R} at ~/.julia/packages/StrideArraysCore/IIGie/src/views.jl:110\n  view(::FillArrays.AbstractFill{&lt;:Any, N}, ::Union{Real, AbstractArray}...) where N at ~/.julia/packages/FillArrays/5Arin/src/FillArrays.jl:718\n  view(::FillArrays.AbstractFill{&lt;:Any, N}, ::Union{Real, BlockArrays.Block, AbstractArray}...) where N at ~/.julia/packages/BlockArrays/WVgdW/src/blocklinalg.jl:104\n  ...\nStacktrace:\n  [1] macro expansion\n    @ ~/.julia/packages/Zygote/IoW2g/src/compiler/interface2.jl:0 [inlined]\n  [2] _pullback(::Zygote.Context, ::typeof(view), ::Zygote.Buffer{Float64, Matrix{Float64}}, ::UnitRange{Int64}, ::UnitRange{Int64})\n    @ Zygote ~/.julia/packages/Zygote/IoW2g/src/compiler/interface2.jl:9\n  [3] _pullback\n    @ ~/Work/postdoc/VoC_model/SarsEvoModel/src/model.jl:100 [inlined]\n  [4] _pullback(::Zygote.Context, ::typeof(SarsEvoModel.rhs), ::Zygote.Buffer{Float64, Matrix{Float64}}, ::Matrix{Float64}, ::Vector{Float64}, ::Float64, ::SarsEvoModel.ModelParameters{Matrix{Float64}, Float64})\n    @ Zygote ~/.julia/packages/Zygote/IoW2g/src/compiler/interface2.jl:0\n  [5] _pullback```\nCode is here: https://github.com/pcjentsch/genomic_landscape_evolution/tree/main/SarsEvoModel\nNot runnable from there though, as the data is too large to put on github. Most of the mode code is in `model.jl` and the rest is in `SarsEvoModel.jl/main()`\n</code></pre></div>",
        "id": 288444834,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656964164
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Zygote is clearly bad here</p>",
        "id": 288444917,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656964224
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; did you try ReverseDiffVJP with tape compilation?</p>",
        "id": 288444924,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656964232
    },
    {
        "content": "<p>[slack] &lt;Peter J&gt; Alright, I just tried that and I get this error:</p>\n<div class=\"codehilite\" data-code-language=\"error\"><pre><span></span><code>Stacktrace:\n  [1] (::Base.var\"#throw_dmrsa#289\")(dims::Tuple{Int64, Int64}, len::Int64)\n    @ Base ./reshapedarray.jl:41\n  [2] reshape\n    @ ./reshapedarray.jl:45 [inlined]```\nI call `reshape` on my parameter vector to turn it into a matrix in the RHS of the ODE, but not sure how to get around that.\n\nThere are also some issues with my loss function, I just removed it for this but if I use it, then I get stuff like:\n```ERROR: type TrackedArray has no field u```\nso I am not sure how to compute the loss of the TrackedArray argument (`getindex` also fails here)\n</code></pre></div>",
        "id": 288446325,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656965257
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; are there any non-static branches in the code?</p>",
        "id": 288446901,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656965715
    },
    {
        "content": "<p>[slack] &lt;Peter J&gt; In the RHS of the ODE?</p>\n<p>The only branches are these:</p>\n<div class=\"codehilite\" data-code-language=\"day\"><pre><span></span><code>    yesterday_vaccinations = day &gt;= 1 ? vaccination_mrna[day] : 0.0```\nwould `trunc` constitute a non-static branch?\n\nIn any case, removing these does not change the results.\n</code></pre></div>",
        "id": 288447313,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656966067
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes, that would make it not tape compilable and should then make ReverseDiffVJP(true) workse</p>",
        "id": 288447785,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1656966423
    },
    {
        "content": "<p>[slack] &lt;Nikhil Yewale&gt; @AlCap23 Regarding <code>ContinuousDataDrivenProblem</code>  in <a href=\"https://github.com/search?q=DataDrivenDiffEq.jl&amp;type=Repositories\">DataDrivenDiffEq.jl</a> .. What collocation method is used to approximate derivatives by default when we do  following ?</p>\n<div class=\"codehilite\" data-code-language=\"#\"><pre><span></span><code>prob = ContinuousDataDrivenProblem(X, t)\nor\nprob = ContnuousDataDrivenProblem(sol)```\n</code></pre></div>",
        "id": 288524360,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657025874
    },
    {
        "content": "<p>[slack] &lt;AlCap23&gt; LinearInterpolation from DataInterpolations.</p>",
        "id": 288524666,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657026000
    },
    {
        "content": "<p>[slack] &lt;Nikhil Yewale&gt; Does this interpolation result in more accurate prediction of derivatives , in case we have less sample points of <code>X</code>  ? I mean compared to calculating derivatives traditionally using finite differences ?</p>",
        "id": 288525119,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657026170
    },
    {
        "content": "<p>[slack] &lt;AlCap23&gt; Nope. Just the standard for me and nothing fancy. I advocate the <code>GaussianKernel()</code> , if applicable.<br>\nOtherwise, even a NeuralODE might produce good results.</p>",
        "id": 288534360,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657029816
    },
    {
        "content": "<p>[slack] &lt;Nick Jordan&gt; Trying to estimate a parameter of a steady-state equation, got an error, don't know where to open an issue</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>using NonlinearSolve, SciMLSensitivity\nusing Optimization, OptimizationOptimJL, Zygote\n\n@parameters x, b\n@variables u(..)\n\nDxx = Differential(x)^2\nf(x) = 8 + 4*x - 4*x^2\n\neq = -b * Dxx(u(x)) + u(x) ~ f(x)\nbcs = [u(0) ~ 0, u(1) ~ 0]\ndomain = [x ∈ Interval(0.0, 1.0)]\n\n@named pdesys = PDESystem([eq], bcs, domain, [x], [u(x)], [b =&gt; 10.0])\n\ndiscretization = MOLFiniteDifference([x =&gt; 0.01], nothing, approx_order = 2)\nprob = discretize(pdesys, discretization)\ngrid = get_discrete(pdesys, discretization)\n\nfunction loss(b)\n    new_prob = remake(prob, p = b)\n    sol= solve(new_prob, NewtonRaphson(), sensealg = SteadyStateAdjoint())\n    sol = map(d -&gt; sol[d], grid[u(x)])\n    return (sol[50] - 1.0)^2\nend\n\noptf = OptimizationFunction((x, p)-&gt; loss(x), Optimization.AutoZygote())\noptprob = Optimization.OptimizationProblem(optf, [10.0])\n\nOptimization.solve(optprob,Optim.BFGS(initial_stepnorm=0.01))```\n</code></pre></div>",
        "id": 288623237,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657083016
    },
    {
        "content": "<p>[slack] &lt;Nick Jordan&gt; <a href=\"https://files.slack.com/files-pri/T68168MUP-F03NHKMFHMJ/download/untitled.txt\">https://files.slack.com/files-pri/T68168MUP-F03NHKMFHMJ/download/untitled.txt</a></p>",
        "id": 288623303,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657083060
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; NonlinearSolve doesn't tie into the adjoint system like SteadyStateDiffEq does right now. I am going to handle that when I get back (generally, NonlinearSolve is the next library getting an overhaul). So for now use SteadyStateDiffEq and this will get cleaned fairly soon.</p>",
        "id": 288626695,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657086571
    },
    {
        "content": "<p>[slack] &lt;Nick Jordan&gt; Thanks for the reply. I will just manually discretize it and take the gradient of <code>A\\f</code> for now and go back to it in the future.</p>",
        "id": 288719651,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657136271
    },
    {
        "content": "<p>[slack] &lt;Nick Jordan&gt; Are the derivatives w.r.t time here of first order or second order? I'm lost<br>\n<a href=\"https://neuralpde.sciml.ai/dev/tutorials/systems/#systems\">https://neuralpde.sciml.ai/dev/tutorials/systems/#systems</a></p>",
        "id": 288725881,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657139204
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh good catch, that's a typo in the TeX. It looks like the code is a coupled set of wave equations. @Kirill Zubov do you have a reference on where those equations are from?</p>",
        "id": 288726638,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657139605
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Let's at least fix up the TeX and add the reference once Kirill answers</p>",
        "id": 288726664,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657139619
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; In the future, we should just use the generated TeX from the Symbolics equations: that would ensure it's always correct</p>",
        "id": 288726787,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657139670
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Other than that, did you find anything odd in the new NeuralPDE docs?</p>",
        "id": 288726835,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657139682
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/SciML/NeuralPDE.jl/commit/f4eae8b5d4a74cdb0135dd33b593b7c6c7bc7846\">https://github.com/SciML/NeuralPDE.jl/commit/f4eae8b5d4a74cdb0135dd33b593b7c6c7bc7846</a></p>",
        "id": 288726844,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657139689
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; (well, other than the fact that the GPU example has to use Flux while the others use Lux, that's a known limitation right now)</p>",
        "id": 288726908,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657139729
    },
    {
        "content": "<p>[slack] &lt;Nick Jordan&gt; I'm still reading the doc. It has the same mistake here<br>\n<a href=\"https://neuralpde.sciml.ai/dev/tutorials/derivative_neural_network/\">https://neuralpde.sciml.ai/dev/tutorials/derivative_neural_network/</a></p>",
        "id": 288727604,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657140082
    },
    {
        "content": "<p>[slack] &lt;Nick Jordan&gt; I'm a bit confused, it seems that <code>discretize</code> replaces differentials with numerical derivatives instead of the derivatives of the neural nets. But a huge part of PINNs is about exploiting automatic differentiation over numerical derivatives. I was thinking that I could specify some replacement rules for which parts to use numerical derivatives and which to use autodiff</p>",
        "id": 288729685,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657141114
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; That's not a huge part of it. In fact, we describe in the manuscript about NeuralPDE that higher order autodiff is actually so suboptimal that finite differences has better scaling. That's a known thing forever of course, with some nice bits about it in Griewank's paper. The advantage of AD is just with numerical stability, but PINNs almost never get to more than 1e-4 accuracy or so anyways, so the slower but more accurate method isn't even in the realm where that accuracy difference matters.</p>",
        "id": 288740568,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657147690
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Also, the DeepXDE approach of doing reverse-over-reverse-over-reverse is probably the asymptotically worst way of doing it. Optimal in an AD sense is generally to do only a single reverse with the rest forward</p>",
        "id": 288740633,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657147745
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; @Kirill Zubov does have a branch for that (<a href=\"https://github.com/SciML/NeuralPDE.jl/pull/452\">https://github.com/SciML/NeuralPDE.jl/pull/452</a>), which can be updated, but what I noticed when doing some experiments is that the differencing improvements in <a href=\"https://github.com/SciML/NeuralPDE.jl/pull/558\">https://github.com/SciML/NeuralPDE.jl/pull/558</a> was that just specializing the higher order derivatives improved the numerical accuracy enough to fix the training on the examples pointed out in <a href=\"https://github.com/JuliaLang/julia/issues/452\">#452</a>, and so at this point I don't know of an example where AD would actually give a training advantage (that's numerical^n + reverse mode AD, it's still using a reverse mode but with n numerical instead of n forward, and again that's n forward because there isn't an asymtopic advantage to layering reverse mode)</p>",
        "id": 288740950,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657147999
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; That said, there is one thing that could revive AD in this space. Taylor-mode AD is a lot more efficient than standard ADs for higher derivatives (<a href=\"https://github.com/JuliaDiff/TaylorSeries.jl\">https://github.com/JuliaDiff/TaylorSeries.jl</a>) because of how they handle the mixed terms, so that in theory could be competitive with numerical (at least for second order, for higher it still shouldn't be because of the asymptotic cost growth, though that will be interesting to check when compiler optimizations get involved). So Taylor-mode would be interesting to check, but I don't think <a href=\"https://github.com/search?q=TaylorSeries.jl&amp;type=Repositories\">TaylorSeries.jl</a> has optimized routines for vector functions. But Diffractor is explicitly made to do the Taylor-mode optimizations for higher order AD (I don't know if you've watched <a href=\"https://www.youtube.com/watch?v=mQnSRfseu0c\">https://www.youtube.com/watch?v=mQnSRfseu0c</a>) and was actually funded as a next-gen AD system for NeuralPDE, though it has not gotten there yet (see <a href=\"https://github.com/JuliaDiff/Diffractor.jl/tree/main/test\">https://github.com/JuliaDiff/Diffractor.jl/tree/main/test</a> as an MWE of a PINN which is one of the driving examples).</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"mQnSRfseu0c\" href=\"https://www.youtube.com/watch?v=mQnSRfseu0c\"><img src=\"https://uploads.zulipusercontent.net/87120d121ccf7dd04b22a52aceae5928234568f1/68747470733a2f2f692e7974696d672e636f6d2f76692f6d516e53526673657530632f64656661756c742e6a7067\"></a></div>",
        "id": 288741379,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657148371
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Thanks, I put a quick commit in for that one (it was a copy-pasta of the TeX of the first one <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> )</p>",
        "id": 288741484,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657148429
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; So tl;dr, no AD is not a big advantage for PINNs, in fact it's usually slower, but we're building a new AD specifically to try and see if alternative higher order AD designs can match the speed of numerical AD while improving the accuracy, though in practice that accuracy does not seem to be too bad with numerical when tuned right, so the library just does the right thing and moves on for now with an open <code>*</code> to allow for higher AD options as they become useful enough. We'll probably add the ForwardDiff option though rather soon, but you'll see what I mean when I try it (or if you write out the big O cost and see the scaling)</p>",
        "id": 288741705,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657148578
    },
    {
        "content": "<p>[slack] &lt;Nick Jordan&gt; Lots to unpack here. At least in the early days, using automatic differentiation was the default option in a lot of literature on PINN. I haven't followed up on the latest papers though. I didn't read the <code>NeuralPDE</code> paper so I thought what was under the hood was AD, not numerical derivatives.  AD is indeed a huge advantage over traditional grid-based finite differences. But the finite difference in PINN is essentially meshless, as it uses <code>(u[1+eps]-u[1])/eps</code> instead of <code>(u[2]-u[1])/h</code>. I didn't realize this until I read the source code. I'm not going to argue that AD would be better than numerical derivatives, it's just that there's no mention of it in the documentation, so I asked. I think I understand it better now.</p>",
        "id": 288746089,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657152294
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Well even worse, all reverse mode was the default in PINN literature but that of course is just a fluke because anyone who sits down and plays with it for more than 5 minutes would see that pure nesting of reverse mode is just very suboptimal. The early PINN literature really subscribed to the cult of reverse mode and it seems like there was no reasoning beyond \"reverse mode is better for machine learning so therefore N reverse mode\", plus Tensor flow gradient always uses reverse.</p>",
        "id": 288753930,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657160835
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; But here is the argument in a nutshell. Start with and n to 1 function. The gradient is an n to n function. Reverse mode is higher overhead than forward (because of required memory operations to delay computation) but it requires output many calls and forward is input many. So first one, reverse mode</p>",
        "id": 288754898,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657161931
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; But the gradient is n to n, so forward since lower overhead. But now, that gives a 2n to 2n function. So forward. But that gives a 4n to 4n function.</p>",
        "id": 288754963,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657161995
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; So for m derivatives, it's 2^(m-1) to 2^(m-1) function calculation with m-1 layers of forward over a single reverse.</p>",
        "id": 288755061,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657162086
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; But that is clearly suboptimal compared to numerical because instead of growing the compute cost by the power it's just one more f eval for the higher derivative, so linear m times n cost. The only way to get down to that with AD is to do single reverse mode over m-1 Taylor mode, and if the process optimizes everything to remove the redundant bits only then do you achieve the same scaling. Hence building new AD while doing numerical over reverse for now</p>",
        "id": 288755208,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657162240
    },
    {
        "content": "<p>[slack] &lt;Nick Jordan&gt; How could I define a composite function that takes in the solution? Like this inverse problem here. The naive code doesn't work</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>using Optimization, OptimizationOptimJL, Zygote\nimport ModelingToolkit: Interval\n\n@parameters x\n@variables u(..), b(..)\n\nf(x) = (1+(sin(π*x)^2))/(1+2*(sin(π*x)^2)) * π^2 * sin(π*x) + sin(π*x)\nDxx = Differential(x)^2\neq = [-b(u(x)) * Dxx(u(x)) + u(x) ~ f(x)]\n\nbcs = [u(0) ~ 0, u(1) ~ 0]\ndomain = [x ∈ Interval(0.0, 1.0)]\n\n@named pdesys = PDESystem(eq, bcs, domain, [x], [u(x), b(u(x))])\n\n# the neural networks\nchain_u =  Chain(Dense(1, 20, tanh), Dense(20,20, tanh), Dense(20,1))\nchain_b =  Chain(Dense(1, 20, tanh), Dense(20,20, tanh), Dense(20,1))\n\nx_data = reshape(LinRange(0,1,101)[2:end-1],1,:) |&amp;gt; collect\nu_data = sin.(π .* x_data)\n\nfunction additional_loss(phi, θ, p)\n    return sum(abs, phi[1](x_data, θ.depvar.u).-u_data)/length(x_data)\nend\n\ndx = 0.01\ndiscretization = NeuralPDE.PhysicsInformedNN([chain_u, chain_b],\n                                             NeuralPDE.GridTraining(dx),\n                                             additional_loss=additional_loss)\n\nprob = NeuralPDE.discretize(pdesys, discretization)\ncallback = function (p,l)\n    println(\"Current loss is: $l\")\n    return false\nend\nres = Optimization.solve(prob, BFGS(), callback = callback, maxiters=500)```: https://files.slack.com/files-pri/T68168MUP-F03PA6VTMUY/download/image.png\n</code></pre></div>",
        "id": 288757570,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657164756
    },
    {
        "content": "<p>[slack] &lt;Nick Jordan&gt; I have never thought about this. I understand the part that numerical derivative beats AD in terms of complexity, but how come using numerical derivative also improves accuracy?</p>",
        "id": 288761135,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657168707
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It doesn't improve accuracy. But PINNs are already very inaccurate for many reasons, major one being that NN training always hits some local minima in practice. So the real question is whether it is good enough, to which the answer seems to be, yes after specializing the higher order</p>",
        "id": 288762477,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657170056
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; PINNs generally hit like 1e-4 accuracy when at a minimum max, and numerical derivatives (after specialized) seem to be hitting it just fine on the examples I tried</p>",
        "id": 288762569,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657170124
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I'll add back Kirill's ForwardDiff branch in a bit to try and find a counter example. My guess is that if you look at a very stiff model like ROBER, the same issues as seen in the stiff PINN paper will be exacerbated by numerical diffs in there further decreasing gradient accuracy. But PINNs are already bad in that case, and it works on the PDE cases so <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 288762898,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657170485
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It's worth exploring though</p>",
        "id": 288762901,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657170491
    },
    {
        "content": "<p>[slack] &lt;Nick Jordan&gt; For inverse problems, it would be interesting to compare using a numerical solver versus minimizing the residual.  Like the example <a href=\"https://docs.sciml.ai/dev/modules/SciMLSensitivity/pde_fitting/pde_constrained/\">https://docs.sciml.ai/dev/modules/SciMLSensitivity/pde_fitting/pde_constrained/</a> compared to using <a href=\"https://neuralpde.sciml.ai/stable/tutorials/ode/#Solving-an-ODE-with-NNODE\">https://neuralpde.sciml.ai/stable/tutorials/ode/#Solving-an-ODE-with-NNODE</a>. Since we need not train an nn as a surrogate model for the solution when using a numerical solver, it should outperform PINN, presumably.</p>",
        "id": 288765770,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657173877
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 288774850,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657181428
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; On the Lorenz case it's not even close. I don't know if you've seen my slides and found that issue, DeepXDE is 10000x slower than a differentiable solver approach on that example</p>",
        "id": 288774908,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657181491
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; NeuralPDE fairs a bit better, but not by much</p>",
        "id": 288774923,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657181504
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; see <a href=\"https://www.youtube.com/watch?v=eSeY4K4bITI\">https://www.youtube.com/watch?v=eSeY4K4bITI</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"eSeY4K4bITI\" href=\"https://www.youtube.com/watch?v=eSeY4K4bITI\"><img src=\"https://uploads.zulipusercontent.net/9f178cab5fe698d9dd58639b9c785354e77a3ceb/68747470733a2f2f692e7974696d672e636f6d2f76692f65536559344b34624954492f64656661756c742e6a7067\"></a></div>",
        "id": 288775258,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657181726
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but those numbers are still preliminary, the whole point of the SciML project with <a href=\"https://github.com/SciML/SciMLBenchmarks.jl\">https://github.com/SciML/SciMLBenchmarks.jl</a> is to really establish this all on optimized implementations.</p>",
        "id": 288775286,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657181754
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; My guess is that if you do physics-informed neural operators with the right architectures (batchnorm, etc.) with adaptive losses and such, and the PDE is 3-dimensional or less (no surrogate), it will still lose by 100x or so against an optimized differentiable solver approach. I don't have the ammo to prove that right now though, and DeepXDE being 10000x slower doing its reverse over reverse thing on one example is a a data point that puts things in a ballpark but not a very small error bound one.</p>",
        "id": 288775434,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657181855
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what's the error thrown here?</p>",
        "id": 288775527,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657181904
    },
    {
        "content": "<p>[slack] &lt;Jakub Mitura&gt; Hello I want to define  a loss function based on the stencil operation (class of each voxel in big 3d array depends on neighborhood ) and I would like to keep this function highly parallelizable preferably on gpu like it is for example in parallel stencil library, and be able to optimize the function so use autodifferentiation to calculate gradients , can it be achieved?</p>",
        "id": 288835262,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657213319
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/search?q=Tullio.jl&amp;type=Repositories\">Tullio.jl</a> is good for this</p>",
        "id": 288839768,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657215445
    },
    {
        "content": "<p>[slack] &lt;Jakub Mitura&gt; Fantastic, thanks !</p>",
        "id": 288840049,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657215547
    },
    {
        "content": "<p>[slack] &lt;Rahul Manavalan&gt; Hello good people of DiffEq.<br>\nIt seems to me that, the SciML ecosystem could benefit from a <a href=\"https://github.com/search?q=PDEZoo.jl&amp;type=Repositories\">PDEZoo.jl</a> package that goes well with the SciMLBenchmarks.<br>\nObviously problems solved using the native SciML ecosystem such as <a href=\"https://github.com/search?q=MethodOfLines.jl&amp;type=Repositories\">MethodOfLines.jl</a> could provide easy benchmarking for some of the packages that are working on surrogates to PDEs.<br>\nIs there something like this, already in the works?</p>",
        "id": 288842374,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657216549
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/SciML/DiffEqProblemLibrary.jl\">https://github.com/SciML/DiffEqProblemLibrary.jl</a></p>",
        "id": 288843542,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657217008
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that's the closest.</p>",
        "id": 288843570,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657217028
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; With SciMLBenchmarks, we're almost at the point to start doing head-to-head benchmarks with different discretizations + different solvers.</p>",
        "id": 288843689,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657217064
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/search?q=MOL.jl&amp;type=Repositories\">MOL.jl</a> still needs some work to be reliable for that though</p>",
        "id": 288843729,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657217083
    },
    {
        "content": "<p>[slack] &lt;Rahul Manavalan&gt; • I'll put together a list of PDE models, trivial and otherwise, <br>\n• Solve them using <a href=\"https://github.com/search?q=MOL.jl&amp;type=Repositories\">MOL.jl</a> if possible (assuming MOL can recognize some equations, a fourth order (in space) PDE for instance.) <br>\n• And make pull requests to <a href=\"https://github.com/search?q=DiffEqProblemLibrary.jl&amp;type=Repositories\">DiffEqProblemLibrary.jl</a> <br>\nSound good?</p>",
        "id": 288845901,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657218089
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that sounds great.</p>",
        "id": 288848062,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657219029
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and you've seen the examples in the SciMLBenchmarks?</p>",
        "id": 288848080,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657219042
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It would be good to group them by discretization, so have like Burger's done by hand, MOL, ApproxFun in spectral form, etc.</p>",
        "id": 288848128,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657219068
    },
    {
        "content": "<p>[slack] &lt;Nick Jordan&gt; For forward problems, numerical solvers win without a doubt. But for inverse problems, the scenario might change in terms of the accuracy of the parameters. At least I haven't seen a comparison so far. Especially for PDEs, the numerical solvers fall back to, for example, grid-based finite differences. The <a href=\"https://docs.sciml.ai/dev/modules/SciMLSensitivity/pde_fitting/pde_constrained/\">https://docs.sciml.ai/dev/modules/SciMLSensitivity/pde_fitting/pde_constrained/</a> implementation is not very ideal. We should be able to<br>\n<code>define the PDE symbolically -&gt; discretize it with MOL -&gt; represent the parameters with scalars/NNs -&gt; solve the ODE/NLProblem -&gt; feed the solution to a loss function -&gt; train the parameters (of NNs)</code><br>\nversus PINN of the process<br>\n<code>define the PDE symbolically -&gt; represent the parameters and the solution with NNs -&gt; minimize the residual and the additional loss -&gt; train the parameters of NNs</code></p>",
        "id": 288849894,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657219869
    },
    {
        "content": "<p>[slack] &lt;Rahul Manavalan&gt; Yes!</p>",
        "id": 288905064,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657263841
    },
    {
        "content": "<p>[slack] &lt;Rahul Manavalan&gt; I will make a note of it.</p>",
        "id": 288905111,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657263855
    },
    {
        "content": "<p>[slack] &lt;pmyers&gt; Which method for extracting specific time points from OrdinaryDiffEq solvers is more performant for large, stiff, and sparse systems, <code>saveat</code> or using interpolations? Will this depend on the solver? I'm mainly concerned with <code>CVODE_BDF</code> and <code>TRBDF2</code></p>",
        "id": 288949455,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657291458
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>saveat</code> is using the interpolations, just online instead of saving the whole thing first. So <code>saveat</code> will definitely be better for performance, unless you want a really really fine grid, so fine that the number of save points is more than the number of steps</p>",
        "id": 288951164,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657292226
    },
    {
        "content": "<p>[slack] &lt;pmyers&gt; Ahhh, did not realize the online part was happening. Okay, awesome, many thanks!</p>",
        "id": 288951753,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657292471
    },
    {
        "content": "<p>[slack] &lt;Mike Boyle&gt; Is there any way to join two ODE solutions (one forwards-in-time, the other backwards-in-time, with both starting at the same instant)?  I <a href=\"https://discourse.julialang.org/t/joining-forwards-and-backwards-in-time-ode-solutions/82071\">https://discourse.julialang.org/t/joining-forwards-and-backwards-in-time-ode-solutions/82071</a> a month ago but got nothing.</p>",
        "id": 288979025,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657306139
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; interleaving the values of the forward with the backwards would ruin the interpolation. But if you have a dense solution forwards you already have a dense solution so the backwards part wouldn't do anything?</p>",
        "id": 288980475,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657306949
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I guess the question is, what are you trying to do?</p>",
        "id": 288980484,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657306954
    },
    {
        "content": "<p>[slack] &lt;adenney&gt; I think he has solved the same ODE on both [0,f] and backwards on [i, 0] from the same initial conditions at t=0, and wants a solution object for [i, f]</p>",
        "id": 288980808,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657307147
    },
    {
        "content": "<p>[slack] &lt;Mike Boyle&gt; Aaron's got it.  Sorry for explaining poorly.</p>",
        "id": 288980985,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657307221
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; ahh, so then you just need to flip the backwards one to reconstruct an only forwards in time solution</p>",
        "id": 288993955,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657314814
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; the unsorted concatenation is probably what's fooling it</p>",
        "id": 288993964,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657314826
    },
    {
        "content": "<p>[slack] &lt;Mike Boyle&gt; Well, I thought I had reordered the inputs so it was sorted.  I used<br>\n<code>solution_backwards[end👎2]</code><br>\nwhich seems to give me appropriately re-ordered <code>t</code> and <code>u</code> at least...</p>",
        "id": 288995461,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657315867
    },
    {
        "content": "<p>[slack] &lt;Mike Boyle&gt; ...but apparently not the <code>k</code>s!  I'll try manually re-ordering.</p>",
        "id": 288995617,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657315964
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you need to order the k's too</p>",
        "id": 288996049,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657316236
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; and double up on the initial point</p>",
        "id": 288996054,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657316241
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; don't go to 2, go to 1</p>",
        "id": 288996068,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657316255
    },
    {
        "content": "<p>[slack] &lt;Rahul Manavalan&gt; Could someone help me understand the SciML format checks.</p>\n<p>For instance:: <a href=\"https://files.slack.com/files-pri/T68168MUP-F03NX28L334/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F03NX28L334/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F03NX28L334/download/image.png\"><img src=\"https://uploads.zulipusercontent.net/d1f67134a5d957eddbbfa7355cbdc45f944179b6/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d4630334e5832384c3333342f646f776e6c6f61642f696d6167652e706e67\"></a></div>",
        "id": 289041401,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657373105
    },
    {
        "content": "<p>[slack] &lt;Rahul Manavalan&gt; Could someone help me understand the SciML format checks and how to resolve them.</p>\n<p>For instance:</p>",
        "id": 289041419,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657373127
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/SciML/SciMLStyle#juliaformatter\">https://github.com/SciML/SciMLStyle#juliaformatter</a></p>",
        "id": 289043654,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657375768
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; RFC, especially from @yingbo_ma: <a href=\"https://github.com/SciML/DifferentialEquations.jl/issues/881\">https://github.com/SciML/DifferentialEquations.jl/issues/881</a></p>",
        "id": 289086629,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657436119
    },
    {
        "content": "<p>[slack] &lt;verma.shwetank22&gt; what function do I need to use to access the retcode? I want something like this:<br>\nsolution = solve(ODEproblem ....)<br>\nstatus = retcode(solution) #status is the string</p>",
        "id": 289141449,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657512819
    },
    {
        "content": "<p>[slack] &lt;BA&gt; <code>solution.retcode</code> will return the Symbol :Success, if you want it to be a <code>String</code> use <code>String(solution.retcode)</code></p>",
        "id": 289144651,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657516267
    },
    {
        "content": "<p>[slack] &lt;verma.shwetank22&gt; Thanks!</p>",
        "id": 289146637,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657518490
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you probably want to keep it as a Symbol. Strings have odd properties for this kind of thing.</p>",
        "id": 289148725,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657520621
    },
    {
        "content": "<p>[slack] &lt;verma.shwetank22&gt; I am sending the message to python and I am not sure how Symbol will behave in Python. And I am not really using it for anything important</p>",
        "id": 289166160,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657531997
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I see so yeah string it along</p>",
        "id": 289167470,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657532840
    },
    {
        "content": "<p>[slack] &lt;amir.72&gt; Hello, I have a question about <code>EnsembleProblem</code>, is there a way to nest them. For example ensemble once on initial condition, and then ensemble on the ensemble on exogenous function.</p>",
        "id": 289184835,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657543763
    },
    {
        "content": "<p>[slack] &lt;Mike Boyle&gt; I guess I'm not understanding how to rearrange the <code>k</code>s of the backwards evolution, because I'm still not able to re-interpolate (even approximately) to the actual steps in the solution.  I tried <code>k = [reverse(solb.k); solf.k]</code>, which didn't work.  Then I realized that not only the whole vector, but each vector at each step probably needs to be reversed, so I tried<br>\n<code>k = [map(reverse, reverse(solb.k)); solf.k]</code><br>\nEither way, the combined solution can't interpolate to times in the backwards solution.  I've updated the question on discourse with <a href=\"https://discourse.julialang.org/t/joining-forwards-and-backwards-in-time-ode-solutions/82071/2?u=moble\">https://discourse.julialang.org/t/joining-forwards-and-backwards-in-time-ode-solutions/82071/2?u=moble</a>.  Is there something weird related to the fact that <code>solf.k[1]</code> and <code>solb.k[1]</code> are just single vectors of the initial conditions, rather than the usual 7 (for Tsit5) vectors of vectors of values?</p>",
        "id": 289200705,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657550678
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Are both other the same interval?</p>",
        "id": 289204851,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657552187
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Just make one ensemble problem that does both</p>",
        "id": 289204954,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657552216
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It might nest, I haven't looked into that, but it wouldn't be in the beaten path</p>",
        "id": 289205044,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657552242
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Should we talk about in the office?</p>",
        "id": 289209793,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657554086
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yeah read through it all and get some opinions first</p>",
        "id": 289209885,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657554121
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I'm flying back on Tuesday</p>",
        "id": 289209939,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657554129
    },
    {
        "content": "<p>[slack] &lt;yingbo_ma&gt; Great! Will do</p>",
        "id": 289210447,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657554311
    },
    {
        "content": "<p>[slack] &lt;Mike Boyle&gt; You mean <code>solf.k</code> and <code>solb.k</code>?  They are not.  In my example problem, they are over <code>(0, 100)</code> and <code>(0, -100)</code>, respectively.  Of course, that means that <code>solf.k[1]</code> and <code>solb.k[1]</code> do correspond to the same instant.  But for the combined solution, they're in the middle of the range.</p>",
        "id": 289216711,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657556991
    },
    {
        "content": "<p>[slack] &lt;Renee Spear&gt; I am using a <code>CallbackSet</code> to define multiple termination events for an integration. Is there a way to know which callback in the callback set actually terminated the integration?</p>",
        "id": 289227921,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657562424
    },
    {
        "content": "<p>[slack] &lt;Mike Boyle&gt; The simplest way is to add an <code>@info</code> line to your <code>affect!</code> functions that explains the termination criterion — or an <code>@warn</code> line if the reason isn't good.  You can also do something similar that alters some extra slot in your problem's parameters, but be careful if you want to reuse the original <code>ODEProblem</code>.</p>",
        "id": 289231199,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657564032
    },
    {
        "content": "<p>[slack] &lt;Renee Spear&gt; @Mike Boyle Thank you for the information, Mike! Is there a way to pass the termination criterion to the <code>affect!</code> function so I know which criterion was met? I would like to avoid altering the problem parameters, if possible, as I do reuse the original <code>ODEProblem</code></p>",
        "id": 289232697,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657564831
    },
    {
        "content": "<p>[slack] &lt;Mike Boyle&gt; Basically, you have to use a different <code>affect!</code> function for each callback that you put into your <code>CallbackSet</code> — even if they do the same exact thing other than the <code>@info</code> line or whatever.</p>",
        "id": 289234781,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657565950
    },
    {
        "content": "<p>[slack] &lt;Mike Boyle&gt; Also note that it should be okay to change the parameters, as long as you make sure to reset them before reusing the ODEProblem.</p>",
        "id": 289234869,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657566000
    },
    {
        "content": "<p>[slack] &lt;Renee Spear&gt; Oh! Okay yeah that makes sense. Thank you - I will try out different <code>affect!</code> functions. If that doesn't quite work the way I'm hoping, I'll try changing a parameter and make sure I reset it before using the ODEProblem. Thanks again, Mike! Super appreciated</p>",
        "id": 289235272,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657566150
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yeah so flip and double that point. That should be fine</p>",
        "id": 289236051,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657566525
    },
    {
        "content": "<p>[slack] &lt;Mike Boyle&gt; If I understand correctly, I tried that:</p>\n<div class=\"codehilite\" data-code-language=\"t\"><pre><span></span><code>u = [reverse(solb.u); solf.u]\nk = [reverse(solb.k); solf.k]```\nAm I constructing the `interp` incorrectly?\n```interp = OrdinaryDiffEq.InterpolationData(solf.interp.f, u, t, k, solf.interp.dense, solf.interp.cache)```\n</code></pre></div>",
        "id": 289236451,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657566722
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Hi @chrisrackauckas Do you have a recommandation for the following situation. I have changed the interface of BifurcationKit to be closer to the one of DE, with a (in fact several different) <code>BifurcationProblem</code> and different continuation algorithms that you can change easily, for example <code>continuation(prob, PALC(), options)</code> . Should I <strong>just</strong> tag a new version and warn the users on discourse?</p>",
        "id": 289320863,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657631472
    },
    {
        "content": "<p>[slack] &lt;ranocha&gt; Hi @rveltz! If it's a breaking change like this, I would<br>\n• mention it in your NEWS.md<br>\n• maybe mention it in the README.md (for some time)<br>\n• tag a breaking release (e.g., going from v0.1.11 to v0.2.0 in your case)<br>\nPosting it on Discourse is also nice, I think.</p>",
        "id": 289324954,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657633296
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; good tips, thank you!</p>",
        "id": 289326024,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657633728
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Yeah. It's never bad to leave depwarns around for longer too</p>",
        "id": 289397193,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657667278
    },
    {
        "content": "<p>[slack] &lt;Nick Jordan&gt; What is the recommended way to save a <code>PDESystem</code>?</p>",
        "id": 289398214,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657668079
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Probably serialize it with JLD2? I haven't tried that specifically but JLD2 generally works. Or built in serialization.</p>",
        "id": 289430665,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657702453
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; Hi, given an ODEproblem or an ODEFunction, how can I access the jacobian...<br>\nI remember there were callable structs for these but I can find them in sciml. I dont even know the method to call.</p>\n<ol>\n<li>Can you please give me link?<br>\n<span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></li>\n</ol>",
        "id": 289437552,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657706718
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 289437947,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657706981
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; what do you mean?</p>",
        "id": 289439051,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657707728
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; if <code>vf::ODEfunction</code>, I want <code>vf(x, p)</code>  but also the jacobian, the second/third derivative at x, p</p>",
        "id": 289439143,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657707819
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; You'd just use a package like ForwardDiff or <a href=\"https://github.com/search?q=TaylorSeries.jl&amp;type=Repositories\">TaylorSeries.jl</a>? I guess I don't get the question</p>",
        "id": 289439215,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657707856
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; yes, I could but I thought ODEFunction would have provided those</p>",
        "id": 289439252,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657707894
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; It is to make a wrapper for BifurcationKit</p>",
        "id": 289439275,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657707912
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; no, the caches are built into the integrator since otherwise it wouldn't be thread-safe</p>",
        "id": 289439504,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657708090
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; that’s the calc_J in ordinaryDiffeq?</p>",
        "id": 289439568,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657708178
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yes</p>",
        "id": 289440635,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657709054
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; thank you</p>",
        "id": 289440647,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657709074
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; but then in NonlinearSolve, you dont seem to call `<br>\n<code>odefun.jac(u,p,0)</code><br>\nwhen using MTK. You are losing analytical jacobian, are you?</p>",
        "id": 289441336,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657709617
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; we call that if <code>has_jac</code></p>",
        "id": 289441549,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657709761
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://github.com/SciML/OrdinaryDiffEq.jl/blob/master/src/derivative_utils.jl#L147-L148\">https://github.com/SciML/OrdinaryDiffEq.jl/blob/master/src/derivative_utils.jl#L147-L148</a></p>",
        "id": 289441678,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657709852
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; sorry I am a bit slow. <a href=\"https://github.com/SciML/NonlinearSolve.jl/blob/dea31f3a8a95ca6e76c12d774f3411365a4d9095/src/raphson.jl#L48\">https://github.com/SciML/NonlinearSolve.jl/blob/dea31f3a8a95ca6e76c12d774f3411365a4d9095/src/raphson.jl#L48</a></p>",
        "id": 289442101,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657710126
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; calls <a href=\"https://github.com/SciML/NonlinearSolve.jl/blob/dea31f3a8a95ca6e76c12d774f3411365a4d9095/src/jacobian.jl#L40\">https://github.com/SciML/NonlinearSolve.jl/blob/dea31f3a8a95ca6e76c12d774f3411365a4d9095/src/jacobian.jl#L40</a></p>",
        "id": 289442153,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657710161
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; oh you're looking at <a href=\"https://github.com/search?q=NonlinearSolve.jl&amp;type=Repositories\">NonlinearSolve.jl</a> not <a href=\"https://github.com/search?q=OrdinaryDiffEq.jl&amp;type=Repositories\">OrdinaryDiffEq.jl</a>?</p>",
        "id": 289442213,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657710226
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; See the first thing of <a href=\"https://julialang.slack.com/archives/CN04R7WKE/p1657090756345299\">https://julialang.slack.com/archives/CN04R7WKE/p1657090756345299</a></p>",
        "id": 289442277,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657710251
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; well, I want to do a newton (a bit modified)</p>",
        "id": 289442280,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657710253
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; that library is getting an overhaul very soon because yes it's missing a few bits.</p>",
        "id": 289442301,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657710275
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; oh you are on holidays? sorry</p>",
        "id": 289442332,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657710312
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; just got back today</p>",
        "id": 289442347,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657710325
    },
    {
        "content": "<p>[slack] &lt;rveltz&gt; ok, so I just wait a bit I guess</p>",
        "id": 289446850,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657713283
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 289447232,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657713490
    },
    {
        "content": "<p>[slack] &lt;rtsbailo&gt; Is there an elementary way to define a ContinuousCallback which calls <code>affect!</code> only when <strong>two</strong> continuous conditions are met simultaneously?</p>",
        "id": 289449763,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657714726
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; define a new zero crossing function that is only zero when both are zero?</p>",
        "id": 289452029,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657715757
    },
    {
        "content": "<p>[slack] &lt;rtsbailo&gt; Of course, I can set the new objective to be |f(x)| + |g(x)|, or (f(x))^2 + (g(x))^2, but then won't the root finder struggle to find the zeros?</p>",
        "id": 289456960,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657718006
    },
    {
        "content": "<p>[slack] &lt;rtsbailo&gt; (I assume the zeros are detected by changes of the sign of the objective, the documentation seem to suggest that, though I confess I haven't looked at the code).</p>",
        "id": 289457162,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657718087
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; yeah you do need to construct it in a way that has a sign change.</p>",
        "id": 289467948,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657722794
    },
    {
        "content": "<p>[slack] &lt;rtsbailo&gt; That's not possible for arbitrary conditions, hence the original question.</p>",
        "id": 289468908,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657723159
    },
    {
        "content": "<p>[slack] &lt;verma.shwetank22&gt; Are there any writeups/guides about solving differential equations on a very long time scale ( months, years) ? Is it better to divide the problem in smaller chunks? Do I need to make some changes in the equations themselves?<br>\nedit: I mean the tspan is in months and years. Not the actual time taken to solve the equation</p>",
        "id": 289550423,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657773370
    },
    {
        "content": "<p>[slack] &lt;Jack Coughlin&gt; what is the equation you’re trying to solve that will take multiple months to solve?</p>",
        "id": 289550507,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657773499
    },
    {
        "content": "<p>[slack] &lt;Jack Coughlin&gt; If it’s a huge PDE method of lines discretization then it’s certainly possible that months could be the best case</p>",
        "id": 289550524,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657773563
    },
    {
        "content": "<p>[slack] &lt;Jack Coughlin&gt; On the other hand maybe there’s some low hanging fruit</p>",
        "id": 289550531,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657773576
    },
    {
        "content": "<p>[slack] &lt;verma.shwetank22&gt; It's a set of PDEs to simulate lithium-ion cells. The experiments in real life are often on timescales of months and years.<br>\nI should add the I am talking about the tspan is in months. Not the actual time taken to solve the equation</p>",
        "id": 289551280,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657774579
    },
    {
        "content": "<p>[slack] &lt;vaibhavdixit02&gt; What’s your concern here, are you worried about the run time cost or something else? Also, long time span itself is not sufficient to say much about, what’s the steps of times might be important here as well?</p>",
        "id": 289551707,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657775124
    },
    {
        "content": "<p>[slack] &lt;verma.shwetank22&gt; My main concern is regarding stability. Are there concerns regarding stability when it comes to long tspans?</p>",
        "id": 289552099,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657775593
    },
    {
        "content": "<p>[slack] &lt;Christopher Larsson&gt; It's difficult to say without seeing the equations, but you can always rescale your time variable so that dimensionless unity is months in dimensional units. You'll probably get a fairly large/small parameter in your rescaled equations, so there's nothing more special about a long time scale than a large/small parameter</p>",
        "id": 289553421,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657777282
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; in what manner? Accuracy? Energy drift? Hamiltanian equation? Performance? Etc.</p>",
        "id": 289557134,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657781510
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; There can be. Is it a conservative PDE?</p>",
        "id": 289557191,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657781542
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Is it a Hamiltonian equation?</p>",
        "id": 289557507,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657781865
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Is it discretized to an ODE or DAE?</p>",
        "id": 289557509,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657781871
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I would also love to see this, as this is the main challenge that has prevented me from being able to apply a lot of SciML stuff to my problem. My simulations span decades in physical time, and it's not possible to just rescale everything because we need to capture physical processes occurring at the hourly time scale.</p>",
        "id": 289571986,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657792835
    },
    {
        "content": "<p>[slack] &lt;verma.shwetank22&gt; It's mostly about accuracy. I have noticed that solutions are often unstable on large scale. But when I divide the timescale into smaller chunks and run multiple simulations, its works.</p>",
        "id": 289572812,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657793360
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; That's interesting, I have also observed something similar, but I think it's more related to the forcing in my case. There are a handful of days where, for example, the air temperature increases or decreases an unusually high amount, and this can create a very large flux which destabilizes the discretized system.</p>",
        "id": 289573072,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657793562
    },
    {
        "content": "<p>[slack] &lt;verma.shwetank22&gt; There are two PDEs and 3 ODEs. The PDEs are discretized to ODEs. The PDEs are conservative</p>",
        "id": 289573075,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657793563
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; but as you described, if I run just the year with one of these events in it, it's fine. It only screws things up on longer time scale simulations.</p>",
        "id": 289573141,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657793632
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; since I am working with conservation laws, I ended up using the <code>SSPRK</code> integrators and that has worked well so far.</p>",
        "id": 289573212,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657793673
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It depends a lot on the PDE, but yes SSPRK is designed for conservation laws and stabilizing that.</p>",
        "id": 289574426,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657794644
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; For other cases, if you know that there's supposed to be conservation equations, make them explicit instead of implicit and use a DAE for that</p>",
        "id": 289574457,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657794671
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; otherwise you can get numerical drift from the conservation law</p>",
        "id": 289574470,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657794682
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Or use the ManifoldProjection</p>",
        "id": 289574486,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657794699
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; could you give an example of this? I haven't been able to get my problem to work as a DAE, but it might be that I'm just doing it wrong...</p>",
        "id": 289577751,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657797081
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; did you delete an equation?</p>",
        "id": 289584225,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657801060
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; what do you mean? like lower the index?</p>",
        "id": 289584365,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657801144
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; No, if you have N equations and 1 conservation law for N variables, you need to change to N-1 equations to substitute in the conservation law, and that can make it more stable.</p>",
        "id": 289584583,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657801278
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; is this N discretized equations or before discretization?</p>",
        "id": 289585844,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657802007
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; N discretized</p>",
        "id": 289586652,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657802511
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; wait, I meant, N variables each discretized into finite elements over some spatial domain, or N finite elements for one variable?</p>",
        "id": 289588571,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657803719
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; the former makes more sense... and that is more or less what I tried. Two variables, energy and temperature (non-linearly related), replace the differential equation for temperature with the conservation law, and then solve the coupled DAE with energy. Never worked, unfortunately.</p>",
        "id": 289588902,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657803872
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; N discretized points</p>",
        "id": 289588936,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657803900
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; so you delete an element?</p>",
        "id": 289588982,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657803926
    },
    {
        "content": "<p>[slack] &lt;Vedant Puri&gt; sounds like @tinosulzer's area of expertise</p>",
        "id": 289589552,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657804267
    },
    {
        "content": "<p>[slack] &lt;tinosulzer&gt; Are you talking about simulating cycle aging of a lithium-ion battery?</p>",
        "id": 289615399,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657816202
    },
    {
        "content": "<p>[slack] &lt;verma.shwetank22&gt; Yup</p>",
        "id": 289622709,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657819588
    },
    {
        "content": "<p>[slack] &lt;Liam Doherty&gt; Has anybody experienced issues with interfacing BVPs with Parallel Ensemble simulations? It seems from the stacktrace I get that the BVP solver algorithms are not recognized as part of SciMLBase’s DEAlgorithms collection!</p>",
        "id": 289627692,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657821908
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Oh, that's a good point. I might've missed checking this one... I'll double check it when I have a second. BVPs may have slipped.</p>",
        "id": 289629113,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657822598
    },
    {
        "content": "<p>[slack] &lt;Liam Doherty&gt; Thanks so much, Chris! I have a stacktrace and MWE on discourse <a href=\"https://discourse.julialang.org/t/boundary-value-problem-incompatible-with-ensemble-simulations/84233\">https://discourse.julialang.org/t/boundary-value-problem-incompatible-with-ensemble-simulations/84233</a> now if it helps you at all</p>",
        "id": 289629349,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657822705
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I saw and bookmarked it</p>",
        "id": 289629374,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657822717
    },
    {
        "content": "<p>[slack] &lt;Daniel González Arribas&gt; If I need to read the event time in the <code>affect!</code> function of a continuous callback, is it just <code>integrator.t</code> or <code>integrator.tprev</code>?</p>",
        "id": 289719309,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657887709
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <code>integrator.t</code></p>",
        "id": 289719484,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657887819
    },
    {
        "content": "<p>[slack] &lt;Daniel González Arribas&gt; thanks!</p>",
        "id": 289719503,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657887832
    },
    {
        "content": "<p>[slack] &lt;Vedant Puri&gt; anybody have thoughts on this? <a href=\"https://github.com/SciML/SciMLOperators.jl/issues/86\">https://github.com/SciML/SciMLOperators.jl/issues/86</a><br>\nwould appreciate input</p>",
        "id": 289728879,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657892835
    },
    {
        "content": "<p>[slack] &lt;Vedant Puri&gt; whats the standard way of solving coupled ODEs? I have two distinct arrays, <code>vx, vy</code> for X and Y velocity. The ODEFunction for both are separate <code>SciMLOperators</code> .</p>\n<p>How do I construct <code>u0= [vx, vy]</code> , and <code>ODEFunction</code>? Named tuples/ component arrays?</p>",
        "id": 289736623,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657896351
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Look at the DynamicalODEProblem</p>",
        "id": 289738147,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657897058
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; if it's in that form and from a Hamiltonian system, then it can have symplectic properties that can be exploited.</p>",
        "id": 289738180,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657897079
    },
    {
        "content": "<p>[slack] &lt;Nick Jordan&gt; Could <a href=\"https://github.com/SciML/DiffEqFlux.jl/blob/80c4247c19860d0422211d6a65283d896eeaa831/src/hnn.jl#L75-L91\">https://github.com/SciML/DiffEqFlux.jl/blob/80c4247c19860d0422211d6a65283d896eeaa831/src/hnn.jl#L75-L91</a> work on GPU now?</p>",
        "id": 289765154,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657909682
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I never checked</p>",
        "id": 289772922,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657913470
    },
    {
        "content": "<p>[slack] &lt;Vedant Puri&gt; my PDE systems dont exactly fit that format. Im solving fluid flow type problems and not necessarily restricted to 2/3 equations owing to closure transport. Something like this is what i was looking for<br>\n```\"\"\" spatial operators \"\"\"<br>\nDtx = cache_operator(Ax+Fx, x)<br>\nDty = cache_operator(Ay+Fy, x)</p>\n<p>\"\"\" IC \"\"\"<br>\nu0 = begin<br>\n    vx0 = @. sin(2x) * sin(2y)<br>\n    vy0 = @. sin(3x) * sin(3y)</p>\n<div class=\"codehilite\"><pre><span></span><code>ComponentArray(vx=vx0, vy=vy0)\n</code></pre></div>\n\n<p>end</p>\n<p>function ddt(du, u, p, t)<br>\n    Dtx(du.vx, u.vx, p, t)<br>\n    Dty(du.vy, u.vy, p, t)</p>\n<div class=\"codehilite\"><pre><span></span><code>du\n</code></pre></div>\n\n<p>end</p>\n<p>\"\"\" time discr \"\"\"<br>\ntspan = (0.0, 10.0)<br>\ntsave = range(tspan...; length=10)<br>\nodealg = Tsit5()<br>\nprob = ODEProblem(ddt, u0, tspan, p)</p>\n<p>@time sol = solve(prob, odealg, saveat=tsave)```</p>",
        "id": 289780192,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657917338
    },
    {
        "content": "<p>[slack] &lt;Vedant Puri&gt; <code>julia&gt; include(\"examples/fourier2d/coupled_ad.jl\")\n  2.165092 seconds (2.49 M allocations: 135.363 MiB, 2.14% gc time, 97.86% compilation time)</code></p>",
        "id": 289780319,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657917407
    },
    {
        "content": "<p>[slack] &lt;Vedant Puri&gt; i am still running into errors applying updates to <code>Dtx, Dty</code>  because <code>Dtx</code> needs <code>u.vx</code>  information to update and <code>Dty</code> needs <code>u.vx</code> because the equations are coupled</p>",
        "id": 289782845,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657918869
    },
    {
        "content": "<p>[slack] &lt;Vedant Puri&gt; what i need is a SciMLOperator that acts on <code>ComponentArray(vx=.., vy=..)</code> to solve these tensor equations</p>",
        "id": 289783225,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657919043
    },
    {
        "content": "<p>[slack] &lt;Vedant Puri&gt; <a href=\"https://github.com/vpuri3/PDEInterfaces.jl/blob/master/examples/fourier2d/coupled_ad.jl\">https://github.com/vpuri3/PDEInterfaces.jl/blob/master/examples/fourier2d/coupled_ad.jl</a></p>",
        "id": 289783340,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657919122
    },
    {
        "content": "<p>[gitter] &lt;Ge0rges&gt; Hello all, I was wondering if I can use diffeqpy to run a global sensitivity analysis in python using the core julia module?</p>",
        "id": 289803347,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657938700
    },
    {
        "content": "<p>[gitter] &lt;Ge0rges&gt; Calling diffeqpy.gsa() fails and so does diffeqpy.GlobalSensitivity.gsa()</p>",
        "id": 289803411,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657938746
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; It won't install <a href=\"https://github.com/search?q=GlobalSensitivity.jl&amp;type=Repositories\">GlobalSensitivity.jl</a> itself as that's not part of <a href=\"https://github.com/search?q=DifferentialEquations.jl&amp;type=Repositories\">DifferentialEquations.jl</a></p>",
        "id": 289808793,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657947574
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; but you can manually install it and import it</p>",
        "id": 289808797,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657947584
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; ComponentArrays should \"just work\"?</p>",
        "id": 289809016,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657947867
    },
    {
        "content": "<p>[gitter] &lt;Ge0rges&gt; Thanks! By install do you. mean on the julia or python side? Is it as easy as <code>import GlobalSensitivity</code> in python?</p>",
        "id": 289812364,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657953324
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; you have to use direct pyjulia calls</p>",
        "id": 289817630,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1657961420
    },
    {
        "content": "<p>[gitter] &lt;Ge0rges&gt; Got it thanks</p>",
        "id": 289844495,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658000781
    },
    {
        "content": "<p>[slack] &lt;Vedant Puri&gt; component arrays is working fine. lemme try to re-explain my problem on a github issue</p>",
        "id": 289988090,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658160915
    },
    {
        "content": "<p>[slack] &lt;Vedant Puri&gt; <a href=\"https://github.com/vpuri3/PDEInterfaces.jl/issues/26\">https://github.com/vpuri3/PDEInterfaces.jl/issues/26</a></p>\n<p>@chrisrackauckas</p>",
        "id": 289993976,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658163532
    },
    {
        "content": "<p>[slack] &lt;Vedant Puri&gt; how do you get sensitivities with respect to initial conditions in OrdinaryDiffEq? is there an example?</p>",
        "id": 290008556,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658170709
    },
    {
        "content": "<p>[slack] &lt;Vedant Puri&gt; and how would one pass in parameters to an ODEFunction that you don't want gradients for?</p>",
        "id": 290009220,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658171016
    },
    {
        "content": "<p>[slack] &lt;frankschae&gt; Basically, in the same way as for parameters. You can, e.g., use <code>remake</code> in the loss function.</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>  _prob = remake(prob, u0=u0)\n  sol = solve(_prob, Tsit5(), saveat=t)\n  ..\nend\nZygote.gradient(myloss, u0)[1]```\n(or via the direct interface `adjoint_sensitivities`  . https://sensitivity.sciml.ai/stable/manual/differential_equation_sensitivities/\n</code></pre></div>",
        "id": 290010325,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658171543
    },
    {
        "content": "<p>[slack] &lt;frankschae&gt; &gt; and how would one pass in parameters to an ODEFunction that you don’t want gradients for?<br>\nI would make the ODEfunction a callable struct.</p>",
        "id": 290010477,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658171623
    },
    {
        "content": "<p>[slack] &lt;Vedant Puri&gt; thank you</p>",
        "id": 290043100,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658193661
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://twitter.com/ChrisRackauckas/status/1549218654931279877\">https://twitter.com/ChrisRackauckas/status/1549218654931279877</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/ChrisRackauckas/status/1549218654931279877\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/1c02d8f86be4f89ad40d559578f888d7677f1668/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f333137353439343330302f65363531373438303437313033376230383463383835633562616134623465335f6e6f726d616c2e6a706567\"></a><p>New stiff ODE solver achieves best performance on &lt;200 stiff ODE cases at low tolerances! Exploits the #julialang multi-threading capabilities to parallelize cases which are too small to benefit from standard BLAS parallelism. \n\nIn #sciml OSS suite!\n\n<a href=\"https://t.co/5fb2OxBHu2\">https://arxiv.org/abs/2207.08135</a> <a href=\"https://t.co/6o3WBrcYhO\">https://twitter.com/ChrisRackauckas/status/1549218654931279877/photo/1</a></p><span>- Chris Rackauckas (@ChrisRackauckas)</span><div class=\"twitter-image\"><a href=\"https://t.co/6o3WBrcYhO\"><img src=\"https://uploads.zulipusercontent.net/4710d7a6842f9684432e7e2ea145137f490658a2/68747470733a2f2f7062732e7477696d672e636f6d2f6d656469612f46585f702d2d3957514145726c4b4d2e706e673a7468756d62\"></a></div></div></div>",
        "id": 290047257,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658198460
    },
    {
        "content": "<p>[slack] &lt;George Gkountouras&gt; 1) How cheap is \"cheap f\"? Would a small neural network do? 2) Is this capable of real-time operation? All that thread synchronization must add latency.</p>",
        "id": 290093649,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658235121
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; (1) cheap enough that multithreading inside of the neural network matrix multiplications isn't efficient.</p>\n<p>(2) What do you mean? Like, in an iterative integrator form?</p>",
        "id": 290094162,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658235350
    },
    {
        "content": "<p>[slack] &lt;George Gkountouras&gt; 2) Yes. Get output sample <code>y[n]</code> at discrete times <code>n</code>.</p>",
        "id": 290094701,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658235602
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; That should be fine. The threads just stay active with Polyester</p>",
        "id": 290094802,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658235636
    },
    {
        "content": "<p>[slack] &lt;Flemming Holtorf&gt; Say I have an ODE that describes the time evolution of a custom type (for which I have implemented some algebra that suffices to evaluate the rhs of the ODE), is there some documentation for which ancillary methods  need to be defined for the explicit DiffEq integrators to work on something like this? I am getting errors that leave me confused.</p>",
        "id": 290125055,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658247985
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; If it's an AbstractArray with broadcast it should be fine</p>",
        "id": 290125146,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658248031
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; we're working on a more complete interface though: <a href=\"https://github.com/SciML/DifferentialEquations.jl/issues/881\">https://github.com/SciML/DifferentialEquations.jl/issues/881</a></p>",
        "id": 290125213,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658248064
    },
    {
        "content": "<p>[slack] &lt;Flemming Holtorf&gt; OK thanks. That helps already.</p>",
        "id": 290125921,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658248346
    },
    {
        "content": "<p>[slack] &lt;Flemming Holtorf&gt; Actually there is an error that despite very detailed message, I don't really understand/know how to fix:</p>",
        "id": 290133522,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658251596
    },
    {
        "content": "<p>[slack] &lt;Flemming Holtorf&gt; ERROR: Non-concrete element type inside of an <code>Array</code> detected.<br>\nArrays with non-concrete element types, such as<br>\n<code>Array{Union{Float32,Float64}}</code>, are not supported by the<br>\ndifferential equation solvers. Anyways, this is bad for<br>\nperformance so you don't want to be doing this!</p>\n<p>If this was a mistake, promote the element types to be<br>\nall the same. If this was intentional, for example,<br>\nusing <a href=\"https://github.com/search?q=Unitful.jl&amp;type=Repositories\">Unitful.jl</a> with different unit values, then use<br>\nan array type which has fast broadcast support for<br>\nheterogeneous values such as the ArrayPartition<br>\nfrom <a href=\"https://github.com/search?q=RecursiveArrayTools.jl&amp;type=Repositories\">RecursiveArrayTools.jl</a>. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Julia\"><pre><span></span><code><span class=\"k\">using</span><span class=\"w\"> </span><span class=\"n\">RecursiveArrayTools</span><span class=\"w\"></span>\n<span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ArrayPartition</span><span class=\"p\">([</span><span class=\"mf\">1.0</span><span class=\"p\">,</span><span class=\"mf\">2.0</span><span class=\"p\">],[</span><span class=\"mf\">1f0</span><span class=\"p\">,</span><span class=\"mf\">2f0</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ArrayPartition</span><span class=\"p\">([</span><span class=\"mf\">3.0</span><span class=\"p\">,</span><span class=\"mf\">4.0</span><span class=\"p\">],[</span><span class=\"mf\">3f0</span><span class=\"p\">,</span><span class=\"mf\">4f0</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">.+</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"c\"># fast, stable, and usable as u0 into DiffEq!</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Element type:<br>\nAny<br>\nStacktrace:<br>\n [1] solve_call(_prob::ODEProblem{Vector{MyNumber{Float64}}, Tuple{Float64, Float64}, false, Float64, ODEFunction{false, typeof(f), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SciMLBase.StandardODEProblem}, args::Euler; merge_callbacks::Bool, kwargshandle::KeywordArgError, kwargs::Base.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:dt,), Tuple{Float64}}})<br>\n   @ DiffEqBase ~/.julia/packages/DiffEqBase/tp3vN/src/solve.jl:425<br>\n [2] solve_up(prob::ODEProblem{Vector{MyNumber{Float64}}, Tuple{Float64, Float64}, false, Float64, ODEFunction{false, typeof(f), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SciMLBase.StandardODEProblem}, sensealg::Nothing, u0::Vector{MyNumber{Float64}}, p::Float64, args::Euler; kwargs::Base.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:dt,), Tuple{Float64}}})<br>\n   @ DiffEqBase ~/.julia/packages/DiffEqBase/tp3vN/src/solve.jl:780<br>\n [3] solve(prob::ODEProblem{Vector{MyNumber{Float64}}, Tuple{Float64, Float64}, false, Float64, ODEFunction{false, typeof(f), LinearAlgebra.UniformScaling{Bool}, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, typeof(SciMLBase.DEFAULT_OBSERVED), Nothing}, Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, SciMLBase.StandardODEProblem}, args::Euler; sensealg::Nothing, u0::Nothing, p::Nothing, kwargs::Base.Pairs{Symbol, Float64, Tuple{Symbol}, NamedTuple{(:dt,), Tuple{Float64}}})<br>\n   @ DiffEqBase ~/.julia/packages/DiffEqBase/tp3vN/src/solve.jl:760<br>\n [4] top-level scope<br>\n   @ ~/.julia/dev/SummerSchool/examples/julia_intro/forward_mode_ad.jl:143</p>",
        "id": 290133603,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658251641
    },
    {
        "content": "<p>[slack] &lt;Flemming Holtorf&gt; Here is the MWE that produced the error:</p>\n<div class=\"codehilite\" data-code-language=\"import\"><pre><span></span><code>using DifferentialEquations\nstruct MyNumber{T}\n    x::T\nend\n+(a::MyNumber, b::MyNumber) = MyNumber(a.x + b.x)\n+(a::MyNumber, b::Number) = MyNumber(a.x+b)\n+(a::Number, b::MyNumber) = b+a\n**(a::MyNumber, b::MyNumber) = MyNumber(a.x ** b.x)\n**(a::MyNumber, b::Number) = MyNumber(a.x**b)\n**(a::Number, b::MyNumber) = b**a\n/(a::MyNumber, b::MyNumber) = MyNumber(a.x / b.x)\n/(a::MyNumber, b::Number) = MyNumber(a.x/b)\n/(a::Number, b::MyNumber) = MyNumber(a/b.x)\n-(a::MyNumber, b::MyNumber) = MyNumber(a.x - b.x)\n-(a::MyNumber) = MyNumber(-a.x)\n\n\nf(x,p,t) = [p*x[1], p*x[2]]\nprob = ODEProblem(f, [MyNumber(1.0), MyNumber(1.0)], (0.0, 1.0), -1.0)\nsol = solve(prob, Euler(), dt = 0.1)```\n</code></pre></div>",
        "id": 290133656,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658251675
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Say is there a package with a Riccati equation solver that is compatible with the sciml ecosystem? I am talking about LQ control. I imagine there are lots of optimized implementations out there, or would I just set up the problem in <a href=\"https://github.com/search?q=DiffEq.jl&amp;type=Repositories\">DiffEq.jl</a> ?</p>",
        "id": 290294219,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658349030
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Not that I know of.</p>",
        "id": 290295536,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658349651
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; Okay cool. No prob. I think there is a package called “MatrixEquations.jl” that I can try. Thanks @chrisrackauckas</p>",
        "id": 290297307,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658350460
    },
    {
        "content": "<p>[slack] &lt;Fredrik Bagge Carlson&gt; In what way do you want it to be compatible? We use <a href=\"https://github.com/search?q=MatrixEquations.jl&amp;type=Repositories\">MatrixEquations.jl</a> in <a href=\"https://github.com/search?q=Controlsystems.jl&amp;type=Repositories\">Controlsystems.jl</a>, but there's also a package by Olof Troeng called <a href=\"https://github.com/search?q=ControlMatrixEquations.jl&amp;type=Repositories\">ControlMatrixEquations.jl</a></p>",
        "id": 290299611,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658351533
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; @Fredrik Bagge Carlson right now I am trying to practice some economics simulations which use lqr methods. But later this might need to backprop through the solver to compute derivatives and estimate parameters. I have some parts of the system in DiffEq, so I imagine when it gets to the riccati solver it will have to backprop through the solver and I am not sure about the stability of that operation. Do you have any suggestions.</p>",
        "id": 290301029,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658352254
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; Is there a way to find array packages which are designed for (or verifiably compatible with) OrdinaryDiffEq? I’ve benefited a lot from ComponentArrays, StructArrays, and RecursiveArrayTools and wanted to browse other array packages that OrdinaryDiffEq users have found useful.</p>",
        "id": 290317178,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658362602
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://docs.sciml.ai/dev/highlevels/abstractarray_libraries/\">https://docs.sciml.ai/dev/highlevels/abstractarray_libraries/</a></p>",
        "id": 290317663,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658363048
    },
    {
        "content": "<p>[slack] &lt;Jesse Chan&gt; Of course it’s already in the docs. Thanks!</p>",
        "id": 290317688,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658363068
    },
    {
        "content": "<p>[slack] &lt;Roger&gt; We also use LuxurySparse with ODE solver sometimes</p>",
        "id": 290320198,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658365332
    },
    {
        "content": "<p>[slack] &lt;krishnab&gt; @Fredrik Bagge Carlson does <a href=\"https://github.com/search?q=ControlMatrixEquations.jl&amp;type=Repositories\">ControlMatrixEquations.jl</a> perform better than <a href=\"https://github.com/search?q=MatrixEquations.jl&amp;type=Repositories\">MatrixEquations.jl</a> ? Just wondering if there is a reason you suggested it. I can try some simple system and give it a try.</p>",
        "id": 290330998,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658376257
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 290351710,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658394657
    },
    {
        "content": "<p>[slack] &lt;verma.shwetank22&gt; Just out of curiosity, Do DiscreteCallbacks increase the computation time for diffferential equations? Like if you have a lot of tstops, does it slow down the computation?</p>",
        "id": 290360890,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658401467
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; In theory maybe. In practice, they are really check unless your condition or affect! function are expensive.</p>",
        "id": 290362105,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658402320
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; Hi everyone! I am starting a huge task to migrate our satellite simulator to MTK. I am facing some problems at the very beginning, most of them related to the fact that I cannot predict the order of the states in the vector <code>u</code>. Is there anything I can do to fix an order here?</p>",
        "id": 290414625,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658427983
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; For example, take a look here:</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>using OrdinaryDiffEq\nusing ReferenceFrameRotations\nusing StaticArrays\n\nfunction vectdquat(vq, w)\n    q = Quaternion(vq)\n    dq = dquat(q, w)\n    return @SVector [dq[1], dq[2], dq[3], dq[4]]\nend\n\n@variables t (vq(t))[1:4]\n@parameters w[1:3]\n@register vectdquat(vq, w)\nD = Differential(t)\n\neqs = [\n    collect(D.(vq)[2:4] .~ vectdquat(vq, w)[2:4])...\n    0 ~ 1 - vq[1] * vq[1] - vq[2] * vq[2] - vq[3] * vq[3] - vq[4] * vq[4]\n]\n\n@named att_prop = ODESystem(eqs)\n\nprob = ODEProblem(\n    att_prop,\n    [vq[1] =&gt; 1.0, vq[2] =&gt; 0.0, vq[3] =&gt; 0.0, vq[4] =&gt; 0.0],\n    (0.0, 100.0),\n    [w[1] =&gt; 0.05, w[2] =&gt; 0.0, w[3] =&gt; 0.0]\n)```\nThe result is:\n\n```julia&gt; states(att_prop)\n4-element Vector{Term{Real, Nothing}}:\n (vq(t))[2]\n (vq(t))[3]\n (vq(t))[4]\n (vq(t))[1]```\nI need to have access to the state inside a callback and I have no idea how to assemble this vector ordered.\n</code></pre></div>",
        "id": 290416786,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658428998
    },
    {
        "content": "<p>[slack] &lt;dawbarton&gt; If you want to specify the order of the states, you can pass a vector of states to <code>ODEProblem</code> IIRC (either that or via <code>ODEFunction</code>, I can't quite remember which one it is). I'm pretty sure you can find out the index mapping inside the callback as well but I can't quite remember the function for that (I'm on my phone at the moment).</p>",
        "id": 290434218,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658437610
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; The FAQ describes some indexing functions</p>",
        "id": 290435648,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658438452
    },
    {
        "content": "<p>[slack] &lt;ronisbr&gt; Thanks @dawbarton and @chrisrackauckas ! Maybe I will create a vector with the order using the suggestion in the FAQ and pass to the callback to avoid hurting the performance.</p>",
        "id": 290435927,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658438631
    },
    {
        "content": "<p>[slack] &lt;Brian Groenke&gt; I am getting a new error when using <code>CVODE_BDF</code> with <code>StepsizeLimiter</code> ; I am 99% sure that this worked before.<br>\n<code>ERROR: type CVODEIntegrator has no field dtcache</code></p>",
        "id": 290497287,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658491791
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; I'm not sure that has been changed in a long long time</p>",
        "id": 290520225,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658501414
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; can you share an MWE?</p>",
        "id": 290520234,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658501418
    },
    {
        "content": "<p>[slack] &lt;Vedant Puri&gt; how would one go about ADing this?</p>\n<div class=\"codehilite\" data-code-language=\"using\"><pre><span></span><code>u = rand(N)\np = rand(N)\nt = 0.0\nD = DiagonalOperator(rand(N); update_func=(diag,u,p,t)-&gt; diag .= p*t)\nf(M,u,p,t) = sum(M(u,p,t))\nZygote.gradient(f, A, u, p, t)```\n</code></pre></div>",
        "id": 290559901,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658520335
    },
    {
        "content": "<p>[slack] &lt;Vedant Puri&gt; i think this can be done if we have an rrule for the update function. And just have <code>NoTangent()</code> for the discarded previous state of the operator</p>",
        "id": 290563313,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658521788
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; There's a <code>M*u</code> spot, that's the thing to rrule</p>",
        "id": 290566555,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658523681
    },
    {
        "content": "<p>[slack] &lt;torkel.loman&gt; Are there any SDE solvers for non-diagonal noise that has \"<code>has_tstop</code>\" Implemented? I am trying to use<br>\n<code>solve(sprob,ImplicitEM(),callback=PositiveDomain())</code><br>\nBut all solvers I try give an error:</p>\n<div class=\"codehilite\" data-code-language=\"has_tstop\"><pre><span></span><code>error(::String)@error.jl:33\nhas_tstop(::StochasticDiffEq.SDEIntegrator{StochasticDiffEq.ImplicitEM{0, true, Nothing, DiffEqBase.NLNewton{Rational{Int64}, Rational{Int64}, Rational{Int64}}, typeof(OrdinaryDiffEq.DEFAULT_PRECS), Val{:central}, true, nothing, Float64, :Predictive}, true, Vector{Float64}, Float64, Float64, Float64, Vector{Float64}, Float64, Float64, Float64, DiffEqNoiseProcess.NoiseProcess{Float64, 2, Float64, Vector{Float64}, Nothing, Nothing, typeof(DiffEqNoiseProcess.INPLACE_WHITE_NOISE_DIST), typeof(DiffEqNoiseProcess.INPLACE_WHITE_NOISE_BRIDGE), true, ResettableStacks.ResettableStack{Tuple{Float64, Vector{Float64}, Nothing}, true}, ResettableStacks.ResettableStack{Tuple{Float64, Vector{Float64}, Nothing}, true},```\n</code></pre></div>",
        "id": 290612253,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658580596
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; uhh they all should. Open an issue, that has a quick fix.</p>",
        "id": 290612828,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658581406
    },
    {
        "content": "<p>[slack] &lt;Matthew Thompson&gt; Cross-posting a PDE parameter optimization <a href=\"https://discourse.julialang.org/t/parameter-optimization-of-methodoflines-pde/84647\">https://discourse.julialang.org/t/parameter-optimization-of-methodoflines-pde/84647</a> to here if someone might lend a hand!</p>",
        "id": 290633595,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658610542
    },
    {
        "content": "<p>[slack] &lt;Nick Jordan&gt; You can get it to work by manually setting up the optimization function.</p>",
        "id": 290634124,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658611256
    },
    {
        "content": "<p>[slack] &lt;Nick Jordan&gt; <a href=\"https://github.com/SciML/SciMLSensitivity.jl/issues/683\">https://github.com/SciML/SciMLSensitivity.jl/issues/683</a></p>",
        "id": 290634125,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658611256
    },
    {
        "content": "<p>[slack] &lt;Matthew Thompson&gt; Oh nice, didn't catch that discussion. Thanks for surfacing it for me!</p>",
        "id": 290634928,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658612428
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; <a href=\"https://mtk.sciml.ai/dev/basics/FAQ/#Using-ModelingToolkit-with-Optimization-/-Automatic-Differentiation\">https://mtk.sciml.ai/dev/basics/FAQ/#Using-ModelingToolkit-with-Optimization-/-Automatic-Differentiation</a></p>",
        "id": 290638350,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658617415
    },
    {
        "content": "<p>[slack] &lt;Matthew Thompson&gt; Tried those and updated the Discourse post. Now it is running but gives me a result that is at the upper limit of <code>ub</code> rather than the correct result.</p>",
        "id": 290643835,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658625829
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; does it look like a local minima?</p>",
        "id": 290646477,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658630039
    },
    {
        "content": "<p>[slack] &lt;Rahul Manavalan&gt; I have an ensemble problem which calls a solver for different initial conditions.</p>\n<div class=\"codehilite\" data-code-language=\"function\"><pre><span></span><code>    sol = EnsembleSolution(prob,solver,prob.ninstances)\n    n = prob.ninstances\n    for i = 1:n\n        push!(sol.solutions, solver(prob.dims,prob.method,flatten(i,prob.S,prob.u₀,prob.dims),prob.S,prob.t))\n    end\n    sol\nend ```\nIs there a way that I can efficiently parallelize the inner for loop? (I guess a more rudimentary question would be: Does the Julia Compiler do this already? If so, how could I  check this?)\n</code></pre></div>",
        "id": 290666635,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658660828
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; When you profile, is that a major time sink?</p>",
        "id": 290674353,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658666133
    },
    {
        "content": "<p>[slack] &lt;Pengfei Song&gt; Hello, which package should I use to solve Hamilton–Jacobi–Bellman equation derived from the optimal control problem?  Before, it can be solved in <code>NeuralPDE.jl</code> . Now it seems that they are moved.  But I don't see the example in <code>HighDimPDE.jl</code>  .   Should I use <code>HighDimPDE.jl</code> or still use <code>NeuralPDE.jl</code>?</p>",
        "id": 290678804,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658667863
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; it was moved to <a href=\"https://github.com/search?q=HighDimPDE.jl&amp;type=Repositories\">HighDimPDE.jl</a></p>",
        "id": 290680229,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658668871
    },
    {
        "content": "<p>[slack] &lt;chrisrackauckas&gt; Just not documented all yet.</p>",
        "id": 290680230,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658668874
    },
    {
        "content": "<p>[slack] &lt;Pengfei Song&gt; Hi Chris! Thank you. I see <code>DeepBSDE.jl</code> in <code>HighDimPDE.jl</code>.  Is this what I need?</p>",
        "id": 290680329,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658669037
    },
    {
        "content": "<p>[slack] &lt;Pengfei Song&gt; I got it. I compared two packages.  <code>DeepBSDE.jl</code> is what I need. Now it is not exported. Thank you</p>",
        "id": 290680620,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658669403
    },
    {
        "content": "<p>[slack] &lt;Matt&gt; Sadly no, there's a clear global min on the true parameter values in the bounded range:: <a href=\"https://files.slack.com/files-pri/T68168MUP-F03QS2DUMS7/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F03QS2DUMS7/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F03QS2DUMS7/download/image.png\"><img src=\"https://uploads.zulipusercontent.net/342340bb127b681618b30a7f9fbfb63da6a3a15d/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303351533244554d53372f646f776e6c6f61642f696d6167652e706e67\"></a></div>",
        "id": 290681451,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658670668
    },
    {
        "content": "<p>[slack] &lt;Matt&gt; <a href=\"https://files.slack.com/files-pri/T68168MUP-F03QP5N5EUD/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F03QP5N5EUD/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F03QP5N5EUD/download/image.png\"><img src=\"https://uploads.zulipusercontent.net/9e70077e7623a938c4db38a1b5e87b8c2d5f5b1f/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d4630335150354e354555442f646f776e6c6f61642f696d6167652e706e67\"></a></div>",
        "id": 290681452,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658670668
    },
    {
        "content": "<p>[slack] &lt;Rahul Manavalan&gt; Profiling even for modest number of instances takes a long time. And often the Profile buffer is flooded.<br>\nI did a benchmark :</p>\n<p><strong>For 1 instance:</strong> <br>\nBenchmarkTools.Trial: 2 samples with 1 evaluation.<br>\n Range (min … max):    4.589 s … 248.826 s  ┊ GC (min … max): 0.00% … 1.77%<br>\n Time  (median):     126.708 s              ┊ GC (median):    1.74%<br>\n Time  (mean ± σ):   126.708 s ± 172.702 s  ┊ GC (mean ± σ):  1.74% ± 1.25%</p>\n<p>█                                                         █<br>\n  █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█ ▁<br>\n  4.59 s          Histogram: frequency by time          249 s &lt;</p>\n<p>Memory estimate: 390.66 MiB, allocs estimate: 12882698.</p>\n<p>For 100 instances. (I have just the time data)<br>\nIt takes about 17 mins.</p>\n<p>Speedup ~ 12</p>\n<p>So looks like the loop is parallelized, considering I throw 14 threads(1 per core) at the problem.</p>",
        "id": 290785708,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658767039
    },
    {
        "content": "<p>[slack] &lt;Nick Jordan&gt; It makes me giggle for while how the Fourier spectral differentiation can be implemented by the massage passing framework in GNNs.: <a href=\"https://files.slack.com/files-pri/T68168MUP-F03QYPW2WRY/download/image.png\">https://files.slack.com/files-pri/T68168MUP-F03QYPW2WRY/download/image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"https://files.slack.com/files-pri/T68168MUP-F03QYPW2WRY/download/image.png\"><img src=\"https://uploads.zulipusercontent.net/c01f68cd002043e2bdd6e69a17408f60269b5109/68747470733a2f2f66696c65732e736c61636b2e636f6d2f66696c65732d7072692f5436383136384d55502d46303351595057325752592f646f776e6c6f61642f696d6167652e706e67\"></a></div>",
        "id": 290841228,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658800748
    },
    {
        "content": "<p>[slack] &lt;Nick Jordan&gt; It makes me giggle for a while how the Fourier spectral differentiation can be implemented by the massage passing framework in GNNs.</p>",
        "id": 290841236,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658800755
    },
    {
        "content": "<p>[slack] &lt;Nick Jordan&gt; It makes me giggle for a while how the Fourier spectral differentiation can be implemented by the massage passing framework in GNNs. Although it's pretty trivial.</p>",
        "id": 290841351,
        "sender_full_name": "Bridging Bot",
        "timestamp": 1658800881
    }
]